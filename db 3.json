{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":1,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","path":"images/logo-algolia-nebula-blue-full.svg","modified":1,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":1,"renderable":1},{"_id":"themes/next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/bookmark.js","path":"js/bookmark.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/local-search.js","path":"js/local-search.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/motion.js","path":"js/motion.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/next-boot.js","path":"js/next-boot.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schedule.js","path":"js/schedule.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/utils.js","path":"js/utils.js","modified":1,"renderable":1},{"_id":"themes/next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":1,"renderable":1},{"_id":"source/uploads/avatar_lance.jpeg","path":"uploads/avatar_lance.jpeg","modified":1,"renderable":0}],"Cache":[{"_id":"source/tags/index.md","hash":"f879e0e132cecbf15f81c449413ba203e73ce0c4","modified":1605940139136},{"_id":"source/categories/index.md","hash":"574333a5059f4315f0d530860da3875fdd096ab4","modified":1605933008618},{"_id":"source/uploads/avatar_lance.jpeg","hash":"2d21265c72b3ad069b353ca5e8ce8538612e0d42","modified":1605942476425},{"_id":"source/.DS_Store","hash":"b327f7eb9e5e4c9d504203a5ec238d516f3e003e","modified":1606094096549},{"_id":"source/_posts/.DS_Store","hash":"3d6669c9f6038b0e703c50cec864b5fda0e82ae7","modified":1605970675812},{"_id":"source/_posts/APFS、Mac-OS-扩展、ExFAT格式有何区别.md","hash":"c441b2bcd314fa6e5ed28c25fb0e856b160a6087","modified":1606723971271},{"_id":"source/_posts/BFC的理解与应用.md","hash":"3e55d4fa7d6765185717aab158b7803c2a18b622","modified":1605972738308},{"_id":"source/_posts/HTML5的自定义属性.md","hash":"2330076f91c46e425c799b364e85ecc1a3f9814d","modified":1606008684850},{"_id":"source/_posts/CSS3伪元素实现自定义复选框.md","hash":"4700c29249d7fee13597b0e6446f27928e97ac7c","modified":1606876291924},{"_id":"source/_posts/JS中如何实现继承.md","hash":"645ae7545247e44cbc9e586b7299221dffc94918","modified":1605973627282},{"_id":"source/_posts/JS数组有哪些常用方法.md","hash":"c728bf8127184be7f44278f8e8712d6c4806eeac","modified":1605973046522},{"_id":"source/_posts/Promise用法.md","hash":"acad4d3e6bd2c2116119a8655ea1b43f24a6afa8","modified":1605974371680},{"_id":"source/_posts/Minification-压缩与-Gzip-压缩的区别（翻译）.md","hash":"64142408827bc635272daa43e9b166b45c8cd9d7","modified":1606013202369},{"_id":"source/_posts/Sequelize框架入门.md","hash":"fb0be85ee8a021bf9d18c753ea85040445b54137","modified":1606012146953},{"_id":"source/_posts/Sequelize框架进阶.md","hash":"d7f833bc94d2e45feecf14e80b9190db845b3156","modified":1606012810763},{"_id":"source/_posts/Vue的生命周期函数.md","hash":"dabfb9fc4ee3005959ead6d7a8fda70ea079a953","modified":1606009407004},{"_id":"source/_posts/Vuex的基本使用.md","hash":"d4936d7d7b7761f9a480a0642b4759fe733477ff","modified":1606014044423},{"_id":"source/_posts/VSCode-Vue项目Ctrl加V自动格式化代码.md","hash":"1794bb9760825e27faaa75e969691feb178f42a9","modified":1606315143190},{"_id":"source/_posts/animation动画（一）.md","hash":"492c93effe910e37e2b08a35464e0f99473c3541","modified":1606012146946},{"_id":"source/_posts/Webpack4-如何优雅打包缓存文件（转载）.md","hash":"b64ee2d3b4ebb10b679c660ee1a9419e4229e4d0","modified":1606012810767},{"_id":"source/_posts/animation动画（二）.md","hash":"08df635b53ff76bd1122344e7a2a36e51ce22d6d","modified":1606012146950},{"_id":"source/_posts/cookie与session区别.md","hash":"6ab53b26a262a905fd4d363b9be1b70cc0bded68","modified":1605975913923},{"_id":"source/_posts/transition过渡（一）.md","hash":"539baf8f57090008c7374449788d74ac2c64c17f","modified":1606008684856},{"_id":"source/_posts/null-和-undefined-的区别.md","hash":"a63bd989b1cc8bfcfb1307a12d419ed004e34605","modified":1605973346838},{"_id":"source/_posts/npm-run-build遇到Node-Sass-could-not-find-a-binding-for-your-current-environment-OS-X-64-bit-with-Node-js-14-x.md","hash":"946ddbd58b997c0e4204b6d96da77a9eff882f29","modified":1606871429576},{"_id":"source/_posts/let和const和var的区别.md","hash":"f9bc4930616f46f8cc494f8a1203f583ed53bcfd","modified":1605974023442},{"_id":"source/_posts/transition过渡（二）.md","hash":"e106d2656298dd8940237d67efddeb16c046d714","modified":1606009407011},{"_id":"source/_posts/【转载】git配置ssh服务.md","hash":"9b256a03ad9e33213c976d824e3901bda391710f","modified":1606813200124},{"_id":"source/_posts/【转载】使用Object键值替换Switch.md","hash":"e6ffa76faae68abb6ca548cadb9602d3f83e72b0","modified":1606876186352},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧.md","hash":"1f0c9234b2b4a8339e540b9fe1141d96477a3f60","modified":1606876156226},{"_id":"source/_posts/【转载】彻底理解cookie-session-token.md","hash":"178810f3404f1e719d0d93f98d1e03168c1b6fd4","modified":1606013833972},{"_id":"source/_posts/一些有用的npm包.md","hash":"83d48ff03642c61ad7b862bf63de748e6d2ffb39","modified":1606876269455},{"_id":"source/_posts/【转载】滚动视差-CSS不在话下.md","hash":"954d983ddeb1b429fbeb58d35eecc714d628aade","modified":1606722330443},{"_id":"source/_posts/【转载】高性能前端架构解决方案.md","hash":"4a2ef1e52f40f7ad273a966032ae58e8ea94c88b","modified":1606876170848},{"_id":"source/_posts/两栏布局方案汇总.md","hash":"724319ae2fa16eb7f5f5edc18152f7e60f4b4352","modified":1605972343534},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼.md","hash":"f50a48d93ad579ee08b5905e3085af8becf31d29","modified":1605972457952},{"_id":"source/_posts/使用Jekyll搭建GitHubPages博客.md","hash":"4ccdb7c0c7bf02cf5f1c76574a3a622874b4c334","modified":1605971474811},{"_id":"source/_posts/前端vscode插件配置.md","hash":"6f8b1808b8f7d4065d54131f219aefa0ef344d21","modified":1605955570860},{"_id":"source/_posts/使用hexo搭建个人博客.md","hash":"11c23fcbecbb48004250c715440a6443eaf4a53d","modified":1605972604897},{"_id":"source/_posts/去除图片上下左右间隙.md","hash":"6726e67fac5f5c1067496e3318a1b1827574572d","modified":1605972845776},{"_id":"source/_posts/函数中的rest参数.md","hash":"6f5b55c4b1a8296800ad55ee59b9102548c58ad1","modified":1605974024637},{"_id":"source/_posts/垂直居中方案汇总.md","hash":"217ca71dc00eaedb647dfc405d2a87abddfd3cb4","modified":1605971657585},{"_id":"source/_posts/基于sequelize的数据库迁移.md","hash":"2afe77f87961257e02ebfc5247b1a1da8d024ed8","modified":1606013833978},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案.md","hash":"cf75f58fe7f4e450b0c33e4757c4623ae8807c1e","modified":1606055316465},{"_id":"source/_posts/奇妙的-webkit-background-clip.md","hash":"86396badc6acdfb3db6a4bb8fd7ebc106b7e4abb","modified":1606722330444},{"_id":"source/_posts/大话数据结构-笔记.md","hash":"bf09b1b28564f1e83ae9aa5a36c84e9a9e3cd59c","modified":1605976175316},{"_id":"source/_posts/字体侵权避坑指南.md","hash":"253b62e0077c07a50ede19a6cbffa29e4d92c7c7","modified":1606912023694},{"_id":"source/_posts/如何使用webpack4.md","hash":"c86f2891951cc5ae434bed0e878eb71944a34e20","modified":1605975913930},{"_id":"source/_posts/如何解决0-1-0-2不等于0-3的问题.md","hash":"f330a52a26305c5f6582ae23713cc926e2fed5f7","modified":1606876242980},{"_id":"source/_posts/如何清除浮动.md","hash":"ba170b4709496a453ce312cdf57ae47ef6b9d4e0","modified":1605972847054},{"_id":"source/_posts/对HTML语义化的理解.md","hash":"b20c5b9e4fb18a2737c9c5b1c8247f48c64a3de2","modified":1605970998947},{"_id":"source/_posts/对闭包的理解.md","hash":"fa2f3b10b3a8427c778ff915c5ad12136c5bb9ea","modified":1605973538266},{"_id":"source/_posts/对this指向的判定.md","hash":"d077fc2728054200c992a3c13a1686a920bb58e7","modified":1605973627287},{"_id":"source/_posts/常见排序算法.md","hash":"31d32b49eda19b8769715273c3814d69a48a16af","modified":1606009407016},{"_id":"source/_posts/数组的遍历方法.md","hash":"cdff6450bb15e9515be05ab9f3a425f7ceec80cf","modified":1605973627288},{"_id":"source/_posts/有序表查找之二分查找.md","hash":"eb5c931daa98cc3b000d8b02e2f5a4d7ed55fa30","modified":1606012146951},{"_id":"source/_posts/用JS实现翻转二叉树.md","hash":"8398c669251bcbbdc0ebb0fe35aa53f94fbbae19","modified":1606012146952},{"_id":"source/_posts/常见正则表达式合集.md","hash":"e316610ceaca2cd6244144fab78d6dad1751da67","modified":1606876210874},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）.md","hash":"8df5dbeb6f3729dbe6fa00fe4dedc58bd234ba9a","modified":1606876200757},{"_id":"source/_posts/Minification-压缩与-Gzip-压缩的区别（翻译）/997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg","hash":"997aee7f7378ac61ca5b36877a65f44c3ed70bc5","modified":1606013151915},{"_id":"source/_posts/Sequelize框架入门/npminit-y.png","hash":"44603f4e42f15393986a81a158920cc17be043f3","modified":1606011865232},{"_id":"source/_posts/Sequelize框架入门/table-property.png","hash":"fcc9d5a605d20afacff24ac07e5d0dbc7f358531","modified":1606011865277},{"_id":"source/_posts/Promise用法/call-back-hello.jpg","hash":"0d05e4edbad7ce2b7c010039e1ef12088d4abeae","modified":1605768443165},{"_id":"source/_posts/Sequelize框架进阶/user-message-data.png","hash":"d11007074f6a250dfe192eb67fa714d3b6437ba9","modified":1606012236552},{"_id":"source/_posts/Sequelize框架进阶/message-table.png","hash":"3124dc6eaac9a626d2af06b34a40160732f5e982","modified":1606012236502},{"_id":"source/_posts/transition过渡（二）/cubic55465149.png","hash":"a9bf5ea3c26241e2779675c05bcc7a72f5e711bf","modified":1606008795050},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/Experiments.gif","hash":"80050799c7867f37adc46c03982559c7323e444a","modified":1606722032408},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/copy.gif","hash":"0cbb112aa64a6a149af0097fbcf98d0351904b30","modified":1606722032344},{"_id":"source/_posts/transition过渡（二）/cubic05000510.png","hash":"55d8b5d3a01cc4ad127f245246f499001ccc4d7f","modified":1606008795106},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/insertlog.gif","hash":"207ce21b9925b40b33f4b6fedaf6b950bb2570b8","modified":1606722032500},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/log.png","hash":"69bbe1f82b37b191add6830a695f1eaf251fde74","modified":1606722032532},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/ide.gif","hash":"340b05d96f8f4f690a82a7877ec54953cb9dd0a3","modified":1606722032469},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/methodtools.gif","hash":"5b757cacbb1245d33e274fcd60464fb9cfa24ded","modified":1606722032625},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/tooltips.gif","hash":"f2a8960833ce7f66f411bd08677f76c3c620dc25","modified":1606722032756},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/superlog.png","hash":"d9d86c40077196a00c3150cdb553dcc88d606912","modified":1606722032724},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/networkoverrides.gif","hash":"a247fafa80a4394bd4667ad7ee1474c56e63627d","modified":1606722032659},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223217.png","hash":"7f4f6a0a942c0bf261d28d6dd1e6869ed863860e","modified":1606721132102},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223220.png","hash":"0f71361b7098b6329559050bb5aad85286c504db","modified":1606721132140},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step1.png","hash":"e18ceee9353c562a059380932c74dbac3aaab2d8","modified":1605768734750},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step2.png","hash":"2c9197e8f0bb4be003e1dc32310f251e5fececc5","modified":1605768734750},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step3.png","hash":"c47cce9adb1053dae00bee85403b3b3da547e8d6","modified":1605768734885},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step4.png","hash":"86097cff510a88343d24ea0c5942450e32b2cc3c","modified":1605768734854},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step1.png","hash":"08b8352b016be85208bc4cee6c41224362f24bdf","modified":1605768734711},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step4.png","hash":"a2084b73eff72960367ae732d947650ee0e4e51d","modified":1605768734708},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step2.png","hash":"936e9098960fd1eb78d99b9f56395bf3a57fa448","modified":1605768734804},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step3.png","hash":"7dd58e5c02c6301af23f65031a5938ad7c41472b","modified":1605768734804},{"_id":"source/_posts/前端vscode插件配置/1.png","hash":"827dbdff391338cd3aa302c01d8a9d352be4bfe8","modified":1605933209263},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/1-1.png","hash":"69c1a100fecfcd5aeb2b947c989384fe37c6510c","modified":1606054331489},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png","hash":"a54b70e46dcb5ae78b5360e802fd49a74367d153","modified":1606054998132},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/16-9.png","hash":"adc8e5664cbf41f9f3d3e628b5154089fd154f11","modified":1606054292810},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png","hash":"d1e3020db20d14cad1ea1bac5aa8386497ad9acf","modified":1606054916313},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/19e45d16-534a-9ac3-578c-83bb3f01b45f.png","hash":"a54b70e46dcb5ae78b5360e802fd49a74367d153","modified":1606054837801},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/600-300.png","hash":"e34f39fd1409b291c5320b00bdbeef6630eee82b","modified":1606054518004},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/70ef9642-13d0-a15c-ff25-23feaef1029b.png","hash":"5d2a981cca3429dd96093487448c08f0186c8d74","modified":1606054768507},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png","hash":"42b68d4849550ed57e79a1f33c06f537aeeb59d0","modified":1606055018344},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/d312b3ec-ded3-746f-9e59-7daa68811f30.png","hash":"e417fc11f101ab0fba123f7bbb6c701f64dc03d2","modified":1606055038918},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/square.png","hash":"d02b67db2ede32a67924fdbd0b57fe691f9dcb6a","modified":1606054474740},{"_id":"source/_posts/大话数据结构-笔记/0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg","hash":"dd210188d74b52edd068f0718330b4b7ef7dae4e","modified":1605974659492},{"_id":"source/_posts/大话数据结构-笔记/0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg","hash":"9daa26f9dace6aa820f0c6b3391eb65ac6d52197","modified":1605974660142},{"_id":"source/_posts/大话数据结构-笔记/130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg","hash":"23c58fcb99c97a93d8d77864d922ed66ea15ae17","modified":1605974658313},{"_id":"source/_posts/大话数据结构-笔记/1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg","hash":"fc2da9c756607dd89d63b49b7ed37f1768868a7c","modified":1605974658712},{"_id":"source/_posts/大话数据结构-笔记/3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg","hash":"a4c79376a02f3fd1ff379d9b34b8cdbb7f778de7","modified":1605974658565},{"_id":"source/_posts/大话数据结构-笔记/53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg","hash":"83abfcc0ab345124d3d254798f4f789eae6ae19e","modified":1605974658148},{"_id":"source/_posts/大话数据结构-笔记/5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg","hash":"4fb34aa87cb13b49f888fbdd51bc92378e081733","modified":1605974660280},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/full-screen.png","hash":"22229ac1bdcf96ac89557b8f140b7a993ec1a566","modified":1606054428445},{"_id":"source/_posts/大话数据结构-笔记/34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg","hash":"137479874665a4a72853b2ccf30c025d23288a0b","modified":1605974659071},{"_id":"source/_posts/大话数据结构-笔记/69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg","hash":"2dfcfef43df56d3d65b0b2b2a6e140b09d387c2f","modified":1605974660096},{"_id":"source/_posts/大话数据结构-笔记/621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg","hash":"c3a5ae2f2c1275623f56803ed4527be06fe9cc06","modified":1605974659861},{"_id":"source/_posts/大话数据结构-笔记/63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg","hash":"a20dd77aa9081a808c7b0eacb5bedc5f215cedd9","modified":1605974658828},{"_id":"source/_posts/大话数据结构-笔记/6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg","hash":"ac7b2bfb5226f260c5c942f9fafa1421d96c5c2f","modified":1605974659545},{"_id":"source/_posts/大话数据结构-笔记/7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg","hash":"593dc7f915b1e112d46db46786a53df044e91a85","modified":1605974660189},{"_id":"source/_posts/大话数据结构-笔记/821f0e91-4700-495e-a657-a372965a7027-3051986.jpg","hash":"68d89d7e0bbe2de96e144ba0e2f5cd15f797e2ae","modified":1605974658398},{"_id":"source/_posts/大话数据结构-笔记/8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg","hash":"5fcee442a845a38ac5112b46f6ef5827703649c8","modified":1605974659172},{"_id":"source/_posts/大话数据结构-笔记/aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg","hash":"cff7bd0f8714f78345cb73537a2e7066af8216cf","modified":1605974658771},{"_id":"source/_posts/大话数据结构-笔记/aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg","hash":"992f595b7ab81f777e07da1127c254d4deac5d83","modified":1605974659284},{"_id":"source/_posts/大话数据结构-笔记/b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg","hash":"9f43715033e51bf424a7359d239b48bfe903474e","modified":1605974659389},{"_id":"source/_posts/大话数据结构-笔记/c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg","hash":"3b28db63c7f7dc3d87fb9da597a0303b3b0291d3","modified":1605974660235},{"_id":"source/_posts/大话数据结构-笔记/ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg","hash":"3d67bf2116bdec0746dc2c00a87c40a4933ea230","modified":1605974659122},{"_id":"source/_posts/大话数据结构-笔记/d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg","hash":"e36f058112b32b27701772f6ed1aa01ec5d41bbb","modified":1605974658657},{"_id":"source/_posts/大话数据结构-笔记/d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg","hash":"c425291947b874c6bf499b5644d403b26f5069a0","modified":1605974658478},{"_id":"source/_posts/大话数据结构-笔记/e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg","hash":"bfbdfbecfd992236fb7f15e5d8b79456584cd252","modified":1605974658962},{"_id":"source/_posts/大话数据结构-笔记/e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg","hash":"137cfb50863ae8b2cc9d1a5e12be390c59ab1d59","modified":1605974659653},{"_id":"source/_posts/大话数据结构-笔记/e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg","hash":"13acb1db12ae84ce210ce0d209d3b3245bbc68f2","modified":1605974657894},{"_id":"source/_posts/对HTML语义化的理解/f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg","hash":"4bbdda7997b75b279fb138456bd494141c15d66a","modified":1605960575769},{"_id":"source/_posts/常见排序算法/快排.png","hash":"3e048168353e36e935d163b968d21c6938cbc86d","modified":1606009017643},{"_id":"source/_posts/常见排序算法/快排10.png","hash":"ee94f9cad89ac54a3df65db89706db0506474e9b","modified":1606009017467},{"_id":"source/_posts/常见排序算法/快排11.png","hash":"3191dc66e28746dccd682977b9f8b7794bc9b0a0","modified":1606009017247},{"_id":"source/_posts/常见排序算法/快排12.png","hash":"4107eccbc6faffc99ca0bc454462653bc6cbf014","modified":1606009017191},{"_id":"source/_posts/常见排序算法/快排14.png","hash":"4a0505bd50e48625c03f8314291390343810f6be","modified":1606009017006},{"_id":"source/_posts/常见排序算法/快排13.png","hash":"6f69a35f6408c928da9760c528b49fa00a785d9c","modified":1606009017097},{"_id":"source/_posts/常见排序算法/快排5.png","hash":"d1424032fbc4140f62e5bd923abd34538f0763c7","modified":1606009017882},{"_id":"source/_posts/常见排序算法/快排2.png","hash":"8349798a468733e4d8e3b6c900d29031e05668bb","modified":1606009018215},{"_id":"source/_posts/常见排序算法/快排3.png","hash":"aa4ae50e90d685ed691061e5d435cf0cda1579a3","modified":1606009018157},{"_id":"source/_posts/常见排序算法/快排4.png","hash":"1691eb2381b401473ae7c69556a44fe27318f7b0","modified":1606009017999},{"_id":"source/_posts/常见排序算法/快排7.png","hash":"1e61ccea8ab08e087080d755550a17c370184c0b","modified":1606009017298},{"_id":"source/_posts/常见排序算法/快排8.png","hash":"832e82da7de26ff3fb8953e3b00f86fa0049a2ab","modified":1606009017382},{"_id":"source/_posts/常见排序算法/快排9.png","hash":"3201265b2853dd414a27a1994100b8b5aa6290e6","modified":1606009017340},{"_id":"source/_posts/常见排序算法/快排6.png","hash":"15ab1654ce5b3bd7e9cf81b1d0082e79d43c21e3","modified":1606009017730},{"_id":"source/_posts/有序表查找之二分查找/1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png","hash":"7ac38a5c3ec91014a28bcc3f2ed26c1065910bd5","modified":1606009478731},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/new-site.png","hash":"2dd211dc9301f5736845fac4827be517e414dff1","modified":1606723022979},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_site_manager_vsftpd_18_04.png","hash":"3b64bc7a2fa5c393a6368ecf75c0c5c19e357792","modified":1606723022931},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/site-config2.png","hash":"3614802fe5b4c86bce5cd0c10cc9c90c7f5a2594","modified":1606723023023},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/user-pass.png","hash":"3a1ab6fa54ecc60469e3b7713d7e4a95629f4098","modified":1606723023067},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/wKiom1b6SWvwBjm7AAA9pZvVBTE386.png","hash":"b76974407d39ac56f45d48f754f9d19151909c01","modified":1606723023128},{"_id":"source/_posts/Sequelize框架入门/error-mysql2.png","hash":"38a2adcc5f3ba90b8c8c9f17786f67e844d0823b","modified":1606011865184},{"_id":"source/_posts/cookie与session区别/1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png","hash":"4bb820beb8311b1a60b94a04c770e1e862d3cb7e","modified":1605975440363},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/autopre.png","hash":"7d38ac5e4487d8ad7b3f838a63d920bddab2840c","modified":1606722032277},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/logcolor.png","hash":"2ab556152d192fbc399881cedf80997335a75964","modified":1606722032563},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223159.png","hash":"c6badb66d30112deca9e9c2ae622da4d20ce9658","modified":1606721131996},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223158.png","hash":"2a9ea2a94962e48cc5f4725c3f82ee418315342b","modified":1606721131962},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223164.png","hash":"b9f3af5528cfbe6fc08601c01eccf9fe6a1ab644","modified":1606721132031},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223114.png","hash":"373e8dce2db6935d01f1b3ac15829fc58ae5661d","modified":1606721159304},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223167.png","hash":"1e3c74de33d161ae25e639c34d449e1d1fc5b4f8","modified":1606721132065},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322203628249.png","hash":"c6badb66d30112deca9e9c2ae622da4d20ce9658","modified":1606721132174},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/token验证.png","hash":"1e2619a7f3b99c5a54168b9d9ca7f2c2a19d7279","modified":1606013721514},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/token算法.png","hash":"e514111dffc3abe813c58369b24de9bfab51e5f9","modified":1606013721427},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/负载均衡2.png","hash":"053b0f0aded5e422d102195a5ecdaf45b64fe7c3","modified":1606013721380},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/负载均衡1.png","hash":"cc1fa8fc43a326f38bb2015ba249d51b645945f0","modified":1606013721470},{"_id":"source/_posts/基于sequelize的数据库迁移/create-users.png","hash":"f655c13371c558ce5a301515a0402b3adc46e262","modified":1606013633220},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/ba7c9abd-2f10-3890-cfed-f8c389248b53.png","hash":"13f4c6bc565826812210785856a3849f9c258bd1","modified":1606053925485},{"_id":"source/_posts/大话数据结构-笔记/55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg","hash":"1f3482ffac9e4cd4ac0590855b2ca3d836e2426c","modified":1605974659440},{"_id":"source/_posts/大话数据结构-笔记/43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg","hash":"e042c317050e9fbe0d8d6b85cc4c253625994052","modified":1605974659335},{"_id":"source/_posts/大话数据结构-笔记/5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg","hash":"abc51376ca12c49baf1ad54a39233a0faaa44f0e","modified":1605974658913},{"_id":"source/_posts/大话数据结构-笔记/60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg","hash":"36ccd4b4bce8feada80b30d1c99161328c5b8298","modified":1605974658232},{"_id":"source/_posts/大话数据结构-笔记/76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg","hash":"7fafb32edbc30a834240dce25f1aa7cbe4465f98","modified":1605974658355},{"_id":"source/_posts/大话数据结构-笔记/972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg","hash":"e8bcdfb21c647d1dd79e97332f914d0c44b795ff","modified":1605974660047},{"_id":"source/_posts/大话数据结构-笔记/90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg","hash":"18c384ce4ede8a53fb68a5af552b49ed04f7a46f","modified":1605974659710},{"_id":"source/_posts/大话数据结构-笔记/a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg","hash":"045b7b4c28b93fa50ab72b0791b8ff6469cfb62b","modified":1605974659016},{"_id":"source/_posts/大话数据结构-笔记/bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg","hash":"fa4afc9114f9bf22b7a2563c49e2a058c84cba85","modified":1605974659601},{"_id":"source/_posts/大话数据结构-笔记/ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg","hash":"6d4e7f202e6b5f83a62c77e073b7e1733a3fe2bd","modified":1605974658273},{"_id":"source/_posts/大话数据结构-笔记/bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg","hash":"a54cc6aa62dfaf182fffe63fb6817a359e7d3e6e","modified":1605974658191},{"_id":"source/_posts/大话数据结构-笔记/f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg","hash":"741a94ff70abe48e5c47b3c9e85dc300fa6bf915","modified":1605974659940},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143206311.png","hash":"34c339144562ebf4aec4d3a51345e1e27831ef16","modified":1605974658108},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143230646.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1605974658064},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143258482.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1605974657982},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143306540.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1605974657939},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143240002.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1605974658025},{"_id":"source/_posts/常见排序算法/选择2.png","hash":"adc240c185181270874ec8cac69f3388be4b8f8c","modified":1606009018308},{"_id":"source/_posts/大话数据结构-笔记/e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg","hash":"894a502dadeef381942fc55d7da3b8386dd101f0","modified":1605974659229},{"_id":"source/_posts/大话数据结构-笔记/7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg","hash":"2bff08ddb8eebe14d8db1b3c1b5a94350e7a0d55","modified":1605974659996},{"_id":"source/_posts/常见排序算法/归并.png","hash":"7e477c8ef3e620e7bbbee0f8dfc259c0835594fc","modified":1606009017943},{"_id":"source/_posts/animation动画（一）/shrink.gif","hash":"05e46caaf92228e7983117335fa90c8fbc1af452","modified":1606009756205},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/logtable.png","hash":"9628ac46f311ea279a8b30289a531ce11cc52929","modified":1606722032594},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/token流程.png","hash":"663e42f2751a60608b7c386cc2b79de7a83eaa59","modified":1606013721333},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/session.png","hash":"0af942e85d8235e49dd246578a2460d105ad274a","modified":1606013721560},{"_id":"source/_posts/前端vscode插件配置/162c15a64b468fd8.gif","hash":"0bc5f3290e1336666109c2e53c022079e60a5b99","modified":1605933205513},{"_id":"source/_posts/常见排序算法/希尔.png","hash":"2164437229a3bb9c4650a5da48ffb46bdd9d6759","modified":1606009018367},{"_id":"source/_posts/常见排序算法/冒泡2.png","hash":"eff6fca87cde5e81f64df96826fedf0ad7a96379","modified":1606009018431},{"_id":"source/_posts/常见排序算法/归并2.png","hash":"aae9829f5910a044d6af378e0d9b55f2364692e8","modified":1606009017427},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_file_test_vsftpd_18_04.png","hash":"44eb537acb379589f0e4d5d5fb899a984bbd8add","modified":1606723022839},{"_id":"source/_posts/Promise用法/8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg","hash":"16331bcd3cded7698a7fc4f7e1c4039d97582dc0","modified":1605768442536},{"_id":"source/_posts/cookie与session区别/1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png","hash":"72ad216301e0f59a2e88ac5021b19e5b9cbf0ee2","modified":1605975440426},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/EagerEvaluation.png","hash":"7b7d6276e8cedc8391ff3073771182c4efc25146","modified":1606722032375},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/await.png","hash":"20e74d844b7183cea3050a61524bcdca2d424158","modified":1606722032312},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_file_upload_vsftpd_18_04.png","hash":"1bcba40fa8338f1ae18f782574fe97c950337e73","modified":1606723022885},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_certificate_vsftpd_three.png","hash":"7cf9825e8ae0359e16e53dedf52748343d464cff","modified":1606723022792},{"_id":"source/_posts/Minification-压缩与-Gzip-压缩的区别（翻译）/3e99e9b284d401c365c5044bc715ba44c9246f83.jpg","hash":"3e99e9b284d401c365c5044bc715ba44c9246f83","modified":1606013151864},{"_id":"source/_posts/大话数据结构-笔记/3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg","hash":"d676431a54f65a91a93ed01ddb2d3fe37a66a6ff","modified":1605974659786},{"_id":"source/_posts/常见排序算法/冒泡.gif","hash":"e3316329fee9b7906fa857af53e2dcd053a039cd","modified":1606009017513},{"_id":"source/_posts/常见排序算法/插入.gif","hash":"29e9d8b18a7bac20f4e642968598fa48eb9f6199","modified":1606009018047},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/562e47bd-abda-dae4-7765-68706b5a978e.png","hash":"0a6a55d6f7a3c059bed5e6f5508b7e785f0ad40b","modified":1606055187225},{"_id":"themes/next/.eslintrc.json","hash":"9c0762486f24a8c5e60f8b6c875e4c4728942649","modified":1605933836528},{"_id":"themes/next/.gitattributes","hash":"ec43734985e1cafd53d88ded3020103f7416123c","modified":1605933836528},{"_id":"themes/next/.editorconfig","hash":"8570735a8d8d034a3a175afd1dd40b39140b3e6a","modified":1605933836528},{"_id":"themes/next/.gitignore","hash":"10fa9758d8f934669c1781564ed9ce83436b11f7","modified":1605933836534},{"_id":"themes/next/.npmignore","hash":"b5753ace1856548855d1f2c31c05da85781629e6","modified":1605933836534},{"_id":"themes/next/.stylintrc","hash":"2cf4d637b56d8eb423f59656a11f6403aa90f550","modified":1605933836534},{"_id":"themes/next/LICENSE.md","hash":"63ea7df5a8dc1b23cc92ca9de3ed16d53367f360","modified":1605933836534},{"_id":"themes/next/README.md","hash":"b98b3bbe0b3382342b49fdf58560fe8904fa667f","modified":1605933836535},{"_id":"themes/next/_vendors.yml","hash":"744133cdb17c7a91649c343d6e1a05d3d30854b9","modified":1605933836535},{"_id":"themes/next/package.json","hash":"4141b58d7146be5faa8deaf9c48f34c1885680f2","modified":1605933836569},{"_id":"themes/next/crowdin.yml","hash":"e026078448c77dcdd9ef50256bb6635a8f83dca6","modified":1605933836535},{"_id":"themes/next/.github/CODE_OF_CONDUCT.md","hash":"81dbb25800165f68c21859cd3c09276b9f4cc417","modified":1605933836529},{"_id":"themes/next/renovate.json","hash":"cb29cc16e61b0b8a6dac34657d76822ae29ad5aa","modified":1605933836569},{"_id":"themes/next/_config.yml","hash":"512aa3522544f9c4ad1fdb153e8e2d54ce4e6677","modified":1605954769454},{"_id":"themes/next/.github/PULL_REQUEST_TEMPLATE.md","hash":"3e9fbb78e3dee0ca1dc886d0c28b0148ba0ca499","modified":1605933836531},{"_id":"themes/next/.github/config.yml","hash":"7984e665e9de481a0e0e51fca5668337713f810b","modified":1605933836531},{"_id":"themes/next/.github/issue_label_bot.yaml","hash":"fca600ddef6f80c5e61aeed21722d191e5606e5b","modified":1605933836531},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"eefd073dfb68884cd946f7ec6d3b3619031d7650","modified":1605933836529},{"_id":"themes/next/.github/label-commenter-config.yml","hash":"1097fc47beeacfc1edb0248c27b17bf64bde3565","modified":1605933836531},{"_id":"themes/next/.github/labeler.yml","hash":"a45e489c62bf5bb5eb1866371af331b8cb9c6320","modified":1605933836532},{"_id":"themes/next/.github/release-drafter.yml","hash":"7662e31224a24154c4fe06b95ccbdff51ab8f2cc","modified":1605933836532},{"_id":"themes/next/.github/stale.yml","hash":"0e40b9975455152a690eaf7047135be348966e39","modified":1605933836532},{"_id":"themes/next/docs/AGPL3.md","hash":"0d2b8c5fa8a614723be0767cc3bca39c49578036","modified":1605933836536},{"_id":"themes/next/languages/README.md","hash":"b2567e32805dda79601157351a07e5ca9fe01315","modified":1605933836538},{"_id":"themes/next/docs/LICENSE.txt","hash":"8ef5fc1147c196680b06e1accab80c8d236ab951","modified":1605933836537},{"_id":"themes/next/docs/AUTHORS.md","hash":"a648823121563c34a177ae91f5a774b5e29f01a0","modified":1605933836536},{"_id":"themes/next/languages/ar.yml","hash":"7a62243ec54196e3d1bea7364f05aded490bc234","modified":1605933836538},{"_id":"themes/next/languages/default.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1605933836539},{"_id":"themes/next/languages/en.yml","hash":"48a76170d70ef7c1fac96720bc5064b43061708d","modified":1605933836539},{"_id":"themes/next/languages/de.yml","hash":"dc448f724c7d436233e9567711a09e0d56e60e3b","modified":1605933836538},{"_id":"themes/next/languages/es.yml","hash":"c3506dfaa771e827ae6adb322477c6e835cd0f09","modified":1605933836539},{"_id":"themes/next/languages/fa.yml","hash":"649823297167b902455c0aec8ddebb462df71c7d","modified":1605933836540},{"_id":"themes/next/languages/fr.yml","hash":"8ddfe98e7847ee8f1eaba9119f9fbdc42d7ec120","modified":1605933836540},{"_id":"themes/next/languages/id.yml","hash":"ac018805190bc4bdc06091f5a6444e612fc700b0","modified":1605933836540},{"_id":"themes/next/languages/it.yml","hash":"82a93c32b3fcf6517441cdc73f75bc6173beb392","modified":1605933836540},{"_id":"themes/next/languages/ja.yml","hash":"fec1e1c15ad2df7ed1249173cc719ccba6d3b842","modified":1605933836541},{"_id":"themes/next/languages/ko.yml","hash":"8342df2f4190ba4ee004b70d1d6ccd341033dbe7","modified":1605933836541},{"_id":"themes/next/languages/nl.yml","hash":"0d3b56613197cb190900311507535db41daec7d4","modified":1605933836541},{"_id":"themes/next/languages/pt-BR.yml","hash":"47daeaa23c4db073e77761c9a6f62d3932af06ec","modified":1605933836542},{"_id":"themes/next/languages/pt.yml","hash":"e0e2675261e2e80f7ce7d19c945c08217b068d81","modified":1605933836542},{"_id":"themes/next/languages/ru.yml","hash":"fdf5c623890db24cb56ab5ffe0c49db3542477c8","modified":1605933836542},{"_id":"themes/next/languages/tr.yml","hash":"54de3d8d85e3c7b14b163c3d322411b7301a09b3","modified":1605933836543},{"_id":"themes/next/languages/uk.yml","hash":"1c9a0b8d8160c77cc62064207d57f460f365cae9","modified":1605933836543},{"_id":"themes/next/languages/vi.yml","hash":"1f9657b58e11db21f93eb895c90123b8f91751a7","modified":1605933836543},{"_id":"themes/next/languages/zh-CN.yml","hash":"6f7c742316c96d5b71da50fddfb060ff7ec1ea99","modified":1605933836543},{"_id":"themes/next/languages/zh-HK.yml","hash":"149fccd0afdbc8db76e372cbc73d7b5f07bb7515","modified":1605933836544},{"_id":"themes/next/layout/_layout.njk","hash":"23a4f9b0b768b04e66e60079f107471163f2e567","modified":1605933836544},{"_id":"themes/next/languages/zh-TW.yml","hash":"d534f321ee0c235e1ebfea383eb1892bbd7d7e95","modified":1605933836544},{"_id":"themes/next/layout/category.njk","hash":"0a590e87af50e57b15fc37695c9a3bf4a97c3d92","modified":1605933836567},{"_id":"themes/next/layout/archive.njk","hash":"d759f4d2cf5ddc6875ea250113a00662c1caf6d1","modified":1605933836567},{"_id":"themes/next/layout/index.njk","hash":"37ec3d1bcd20b8ac1d18e0d68f990450890b46cd","modified":1605933836568},{"_id":"themes/next/layout/post.njk","hash":"6abeb85fb3e4c382ed4bb6049b12a807e6226e67","modified":1605933836569},{"_id":"themes/next/layout/page.njk","hash":"60bc943fc708c3b2a19fc4fe0a15af86529d1fcd","modified":1605933836568},{"_id":"themes/next/scripts/renderer.js","hash":"c53dbede2ad5f68d7349bc5ed8ac7157d723e987","modified":1605933836577},{"_id":"themes/next/layout/tag.njk","hash":"6cd707f846bfd6becbcfb060c26958bb4015c31f","modified":1605933836569},{"_id":"themes/next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"fc4dce84ed9a5d21d3a8833ff6d776c46f876115","modified":1605933836530},{"_id":"themes/next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"4ecac91716eac59d7c2bc53cf6e95612d44da97b","modified":1605933836530},{"_id":"themes/next/test/index.js","hash":"6bf0289846538be3e9a63809af98f00e1fbdd90b","modified":1605933836619},{"_id":"themes/next/.github/ISSUE_TEMPLATE/other.md","hash":"b47f529d059ef337b4f14ddf746c3a42744028f0","modified":1605933836530},{"_id":"themes/next/.github/ISSUE_TEMPLATE/question.md","hash":"d0d16ae88623d33946c16cfb68beb6ecab1ba69b","modified":1605933836530},{"_id":"themes/next/.github/workflows/label-commenter.yml","hash":"b6d8162264dc4d6d31f1f9c2a940718f12cff874","modified":1605933836532},{"_id":"themes/next/.github/workflows/labeler.yml","hash":"3acd5189488e720f23e904f2d9d24cf4b15ac1de","modified":1605933836533},{"_id":"themes/next/.github/workflows/linter.yml","hash":"f499ad31aea9ec598308475ef0b19b7e4177103c","modified":1605933836533},{"_id":"themes/next/.github/workflows/release-drafter.yml","hash":"4f3af81009cb922be91f718a67425377515ea69d","modified":1605933836533},{"_id":"themes/next/.github/workflows/lock.yml","hash":"70bd0be3f33774e4b0ada3a59c901f8f9cff1013","modified":1605933836533},{"_id":"themes/next/.github/workflows/tester.yml","hash":"3a740e76151cc0a696273594731d7864a8db5374","modified":1605933836533},{"_id":"themes/next/docs/ru/README.md","hash":"e58151942cbc21a5dcb41314b255ec3e33b2e59e","modified":1605933836537},{"_id":"themes/next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"0e204dde6d21f100cba6ca7751de71848490759e","modified":1605933836537},{"_id":"themes/next/docs/zh-CN/CONTRIBUTING.md","hash":"8ee5ca39ac4a372a5c0f16e344bbe578af4aeae4","modified":1605933836537},{"_id":"themes/next/docs/zh-CN/README.md","hash":"9f06904a99123262a8724aa2bd698731bb8da8f9","modified":1605933836538},{"_id":"themes/next/layout/_macro/post-collapse.njk","hash":"1a30d751871dabfa80940042ddb1f77d07d830b9","modified":1605933836545},{"_id":"themes/next/layout/_macro/post.njk","hash":"b5dd3bf172cd242b93f5461b989e97a7efc0ac89","modified":1605933836545},{"_id":"themes/next/layout/_macro/sidebar.njk","hash":"c0a843a3019f0bb8f2e734dc173028ead732b3c0","modified":1605933836545},{"_id":"themes/next/layout/_partials/comments.njk","hash":"334e8d8117a46c8c097788811322a62627952219","modified":1605933836546},{"_id":"themes/next/layout/_partials/footer.njk","hash":"d16fdaf94d66efc0242b0c26ed539017e3b4f795","modified":1605933836546},{"_id":"themes/next/layout/_partials/pagination.njk","hash":"9876dbfc15713c7a47d4bcaa301f4757bd978269","modified":1605933836551},{"_id":"themes/next/layout/_partials/languages.njk","hash":"ba9e272f1065b8f0e8848648caa7dea3f02c6be1","modified":1605933836549},{"_id":"themes/next/layout/_partials/widgets.njk","hash":"24eb5b683310810f93c1d7f68f8f70f1a29fd217","modified":1605933836556},{"_id":"themes/next/layout/_scripts/index.njk","hash":"6f0433940680c0f9db37542ca36f76e4bb1c1d50","modified":1605933836557},{"_id":"themes/next/layout/_scripts/pjax.njk","hash":"28a3bcb1ce50924a5a48b0f3756ac3a8736867f1","modified":1605933836557},{"_id":"themes/next/layout/_scripts/noscript.njk","hash":"4f250d0bf80be06dd2c95c1d4c2ba2624b59cf2a","modified":1605933836557},{"_id":"themes/next/layout/_scripts/vendors.njk","hash":"bada07da2a47ed6de6081796367b19dd9e906cfb","modified":1605933836558},{"_id":"themes/next/layout/_third-party/baidu-push.njk","hash":"8627c8c8b031ecee16c522433b66fa4d6979b8ea","modified":1605933836559},{"_id":"themes/next/layout/_third-party/index.njk","hash":"e9f4fba68662569885e5d711f4c4dba2a1cba8e8","modified":1605933836562},{"_id":"themes/next/layout/_third-party/nprogress.njk","hash":"271139c3896a6d294f46f767cb21b2e848050841","modified":1605933836563},{"_id":"themes/next/layout/_third-party/quicklink.njk","hash":"294b7f6a4fa566e369d8be0ce7b28f35b6c14563","modified":1605933836563},{"_id":"themes/next/layout/_third-party/rating.njk","hash":"2731e262a6b88eaee2a3ca61e6a3583a7f594702","modified":1605933836563},{"_id":"themes/next/scripts/events/index.js","hash":"89091bc943cd8b8c63b8af3d26fb0a027048e9ba","modified":1605933836570},{"_id":"themes/next/scripts/filters/default-injects.js","hash":"872f01cb10e422a648ea505436532e776e92926b","modified":1605933836574},{"_id":"themes/next/scripts/filters/locals.js","hash":"fa1e558f058f93455acdd553ab1be30b26f137e4","modified":1605933836575},{"_id":"themes/next/scripts/filters/minify.js","hash":"be0574c64a38210e449c99d38a760452015060a3","modified":1605933836575},{"_id":"themes/next/scripts/filters/post.js","hash":"bac5646993153f9f6a630c9f0052bb17fa760a9c","modified":1605933836575},{"_id":"themes/next/scripts/helpers/engine.js","hash":"682a8e16b5182c123c96b04222d967407e1fd6d6","modified":1605933836575},{"_id":"themes/next/scripts/helpers/font.js","hash":"9cf01a3cf62d9b5a1a0db8145088774bf94045c8","modified":1605933836576},{"_id":"themes/next/scripts/helpers/next-config.js","hash":"413c51fa3caa87fe95d1d8f95e6023f096515632","modified":1605933836576},{"_id":"themes/next/scripts/helpers/next-url.js","hash":"577c510374cf9bcfa8d3a1027e42411a9324805e","modified":1605933836576},{"_id":"themes/next/scripts/helpers/next-vendors.js","hash":"afdd6a188a74c188f0dd154fac70efd4080ca262","modified":1605933836577},{"_id":"themes/next/scripts/tags/button.js","hash":"c6ad2ed544fbb25ecb5d820c36e76302504271b7","modified":1605933836577},{"_id":"themes/next/scripts/tags/caniuse.js","hash":"935a311142a409c1896b3ae3f01fe7a9e2db1134","modified":1605933836578},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"92c19d796bdb3320df9caea59bf52df7a95d9da9","modified":1605933836578},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"79102d9e9bccff6224e77a77c4d2d363094ae3df","modified":1605933836578},{"_id":"themes/next/scripts/tags/index.js","hash":"17f9451ce1f10f78437f52218757d38d4e1591b0","modified":1605933836579},{"_id":"themes/next/scripts/tags/label.js","hash":"8a73348186113bae0a51ea2f891c1bb882fab05a","modified":1605933836579},{"_id":"themes/next/scripts/tags/link-grid.js","hash":"9e2c58d1a4d1dd84fa86144e5b4576b2fd10a37f","modified":1605933836579},{"_id":"themes/next/scripts/tags/mermaid.js","hash":"464effc08e757ce8e1bb094707d06ad829af9d62","modified":1605933836580},{"_id":"themes/next/scripts/tags/note.js","hash":"7b94ddb46b7d4b0fe815f2fbe4bd375f07f55363","modified":1605933836580},{"_id":"themes/next/scripts/tags/pdf.js","hash":"27129fc4014d723ba93ac77b11342da2ee445d96","modified":1605933836580},{"_id":"themes/next/scripts/tags/tabs.js","hash":"2bf00d56b3b289a7dd27e9b5820430a2457a19f3","modified":1605933836581},{"_id":"themes/next/scripts/tags/video.js","hash":"2ee926448583be8f95af1f2884ae2c9c4830151d","modified":1605933836581},{"_id":"themes/next/source/css/_colors.styl","hash":"b37f9847d2f95632e911df670b51921a7d748068","modified":1605933836582},{"_id":"themes/next/source/css/_mixins.styl","hash":"b9c3d3087a917c94cf34ffd6621528d377af8fc9","modified":1605933836602},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1605933836610},{"_id":"themes/next/source/css/main.styl","hash":"766d406beffa0c2cdbd64518262286baaeb8ec3b","modified":1605933836610},{"_id":"themes/next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1605933836610},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1605933836611},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1605933836611},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1605933836611},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1605933836612},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1605933836612},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1605933836612},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1605933836613},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1605933836613},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1605933836613},{"_id":"themes/next/source/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1605933836614},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1605933836614},{"_id":"themes/next/source/js/algolia-search.js","hash":"7c6c966cdbe6e46d5f885606b0b9daf2ea3f757d","modified":1605933836614},{"_id":"themes/next/source/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1605933836615},{"_id":"themes/next/source/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1605933836615},{"_id":"themes/next/source/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1605933836615},{"_id":"themes/next/source/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1605933836615},{"_id":"themes/next/source/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1605933836616},{"_id":"themes/next/test/helpers/font.js","hash":"8930b1f16facc18dc6764bf6efd753ca50d3f1cb","modified":1605933836617},{"_id":"themes/next/source/js/utils.js","hash":"615d1c54d96f41fc3d4877b47566efab4a63f978","modified":1605933836617},{"_id":"themes/next/test/helpers/index.js","hash":"63ba28afed697f7b3574436b1133b8ecc9c0c357","modified":1605933836618},{"_id":"themes/next/test/helpers/next-url.js","hash":"abc4ee5149df6172b2c36b6e85d1993ec748ddea","modified":1605933836618},{"_id":"themes/next/test/tags/button.js","hash":"48f2aa4c513e9e24bd6a811410520b74cd7ea88b","modified":1605933836619},{"_id":"themes/next/test/tags/caniuse.js","hash":"aa5e728445caeaf7c2ccd0f3fcb2cad0c93ca6d1","modified":1605933836620},{"_id":"themes/next/test/tags/group-pictures.js","hash":"f41640e5d0f552c0b0c4ac8876a2edb0fcf54e56","modified":1605933836620},{"_id":"themes/next/test/tags/center-quote.js","hash":"7667342fd1a1417eaf6a254012b84ae40e8d13dd","modified":1605933836620},{"_id":"themes/next/test/tags/index.js","hash":"e8779e54f0979b221858f8bb74dd081bb503b910","modified":1605933836621},{"_id":"themes/next/test/tags/label.js","hash":"4ebf3698c258ca978b997acbdd0dece44069c09d","modified":1605933836621},{"_id":"themes/next/test/tags/link-grid.js","hash":"88ec69e4dc1d493d21254ed9296a2514e91f0f8b","modified":1605933836621},{"_id":"themes/next/test/tags/mermaid.js","hash":"ed5b5a70ee49842501c952c4d62483f1fc8eba6b","modified":1605933836621},{"_id":"themes/next/test/tags/note.js","hash":"3dcfcd65bf9f326972ea7571fdb1444200f5d07e","modified":1605933836622},{"_id":"themes/next/test/tags/pdf.js","hash":"bac003317e5bb5e046848522c5c4a7cf231e53f6","modified":1605933836622},{"_id":"themes/next/test/tags/tabs.js","hash":"d63722919f9da2e44d6b952801e10a2915ea9c12","modified":1605933836622},{"_id":"themes/next/test/tags/video.js","hash":"b796fc4dceb20a30e730c322bb5474c0162464cc","modified":1605933836623},{"_id":"themes/next/test/validate/index.js","hash":"ef716c1db8e3c93c320f73b6da4010e03b4eb0ae","modified":1605933836623},{"_id":"themes/next/layout/_partials/header/index.njk","hash":"53895b3af95667edc5bf5d7356f8a2b4fe091447","modified":1605933836547},{"_id":"themes/next/layout/_partials/head/head-unique.njk","hash":"37bdf020591feb0cf72327c9efd755bf78a0afd6","modified":1605933836546},{"_id":"themes/next/layout/_partials/header/brand.njk","hash":"c082a16163d1fb5d7cf858fb7522fca9d18f1ba6","modified":1605933836547},{"_id":"themes/next/layout/_partials/head/head.njk","hash":"52c94623e6c54ac7c710808343fa10ec5f590ddf","modified":1605933836546},{"_id":"themes/next/layout/_partials/header/menu-item.njk","hash":"61eec1fb84711369b9dabd1d2cae64858844c2eb","modified":1605933836547},{"_id":"themes/next/layout/_partials/header/menu.njk","hash":"c9390824b57f23b7c8a5c23a9834514123673766","modified":1605933836548},{"_id":"themes/next/layout/_partials/header/sub-menu.njk","hash":"75a158a5b54a3a76ee6590f5e0e2dd4a9f0be869","modified":1605933836549},{"_id":"themes/next/layout/_partials/page/breadcrumb.njk","hash":"edb3bb6d644b7407673c5ef3a426a244e98fcf89","modified":1605933836549},{"_id":"themes/next/layout/_partials/page/tags.njk","hash":"a18d1598e36cc72f2b0b24c3cc3c5990dfaa3254","modified":1605933836550},{"_id":"themes/next/layout/_partials/page/categories.njk","hash":"17156d99941f28a225951ffdcfa9a115e20dc2d2","modified":1605933836550},{"_id":"themes/next/layout/_partials/page/schedule.njk","hash":"9d650333160ad1977fe42d9770869ff1660a95fe","modified":1605933836550},{"_id":"themes/next/layout/_partials/page/page-header.njk","hash":"7ed4f102a1825195cff8d7995bf9219f323a9034","modified":1605933836550},{"_id":"themes/next/layout/_partials/post/post-copyright.njk","hash":"133942922e34abae9e4de7ea5591d77c0caa4b37","modified":1605933836551},{"_id":"themes/next/layout/_partials/post/post-followme.njk","hash":"154df0bb323c332d8c25343f258ee865e5553423","modified":1605933836551},{"_id":"themes/next/layout/_partials/post/post-footer.njk","hash":"8f14f3f8a1b2998d5114cc56b680fb5c419a6b07","modified":1605933836551},{"_id":"themes/next/layout/_partials/post/post-meta.njk","hash":"fbdb5cdbd80970f201f5c75369eaa00aea369235","modified":1605933836552},{"_id":"themes/next/layout/_partials/post/post-related.njk","hash":"f79c44692451db26efce704813f7a8872b7e63a0","modified":1605933836555},{"_id":"themes/next/layout/_partials/post/post-reward.njk","hash":"a9bb52d0537d27cfe670d80e716da6780786ab8a","modified":1605933836555},{"_id":"themes/next/layout/_partials/search/algolia-search.njk","hash":"c2ccaac9caeea1a43dc31f4f8368f8f548aab0af","modified":1605933836555},{"_id":"themes/next/layout/_partials/search/index.njk","hash":"8f6f256ab3b351ffc80f1f3f1d9834e9a7cfac31","modified":1605933836556},{"_id":"themes/next/layout/_partials/search/localsearch.njk","hash":"90156f42d6e6e326ed38482d6623a0aac0352016","modified":1605933836556},{"_id":"themes/next/layout/_partials/sidebar/site-overview.njk","hash":"c419158e19805e2db614a5f5651e3e534e4a5e4e","modified":1605933836556},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.njk","hash":"4790058691b7d36cf6d2d6b4e93795a7b8d608ad","modified":1605933836558},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.njk","hash":"ad197fd728dd7ac90f910fdf80ce848eab3ff187","modified":1605933836558},{"_id":"themes/next/layout/_third-party/analytics/growingio.njk","hash":"5adea065641e8c55994dd2328ddae53215604928","modified":1605933836559},{"_id":"themes/next/layout/_third-party/analytics/index.njk","hash":"e3717fbbe8aff5195427b878f4bcd77b8f79c4f3","modified":1605933836559},{"_id":"themes/next/layout/_third-party/chat/chatra.njk","hash":"f910618292c63871ca2e6c6e66c491f344fa7b1f","modified":1605933836559},{"_id":"themes/next/layout/_third-party/chat/tidio.njk","hash":"cba0e6e0fad08568a9e74ba9a5bee5341cfc04c1","modified":1605933836560},{"_id":"themes/next/layout/_third-party/comments/changyan.njk","hash":"5c2cd9b6f02bcb6248d3f18638a58e329fe8c0d1","modified":1605933836560},{"_id":"themes/next/layout/_third-party/comments/disqus.njk","hash":"cc1450d62d76e59968bdd25836694b8339207384","modified":1605933836560},{"_id":"themes/next/layout/_third-party/comments/disqusjs.njk","hash":"54eab4840443262432ec7c47e56e9859ace2a902","modified":1605933836561},{"_id":"themes/next/layout/_third-party/comments/gitalk.njk","hash":"ec0474e23ca122b34858ffb0bb8c99f241749c61","modified":1605933836561},{"_id":"themes/next/layout/_third-party/comments/livere.njk","hash":"6252b0353c6a36d03c68ebec1073293442221bd1","modified":1605933836561},{"_id":"themes/next/layout/_third-party/comments/valine.njk","hash":"72d7abe567fab181725d120cb27eb6a6379611ea","modified":1605933836561},{"_id":"themes/next/layout/_third-party/math/index.njk","hash":"47a982aec8830c2f9711b2aff59ff83f09deb09e","modified":1605933836562},{"_id":"themes/next/layout/_third-party/math/katex.njk","hash":"b6746dfad32cc8a46ff8f4194a7a16ca41744803","modified":1605933836562},{"_id":"themes/next/layout/_third-party/math/mathjax.njk","hash":"a8239f99b316e6c060bad8173be3a25c67138697","modified":1605933836563},{"_id":"themes/next/layout/_third-party/search/algolia-search.njk","hash":"97035261aa85c7d39c6ce1211cdefc6248c0446d","modified":1605933836564},{"_id":"themes/next/layout/_third-party/search/localsearch.njk","hash":"767b6c714c22588bcd26ba70b0fc19b6810cbacd","modified":1605933836564},{"_id":"themes/next/layout/_third-party/search/swiftype.njk","hash":"ba0dbc06b9d244073a1c681ff7a722dcbf920b51","modified":1605933836564},{"_id":"themes/next/layout/_third-party/statistics/busuanzi-counter.njk","hash":"a4bc501da0f22f7e420f0ca47e83988ce90b1368","modified":1605933836565},{"_id":"themes/next/layout/_third-party/statistics/cnzz-analytics.njk","hash":"a17ace37876822327a2f9306a472974442c9005d","modified":1605933836565},{"_id":"themes/next/layout/_third-party/statistics/firestore.njk","hash":"8635b13aa1092c22252af4743fa194272f089b59","modified":1605933836565},{"_id":"themes/next/layout/_third-party/statistics/index.njk","hash":"7b68f0751b28bac0f8efdb6c0345738bf3a3c38c","modified":1605933836566},{"_id":"themes/next/layout/_third-party/statistics/lean-analytics.njk","hash":"811a3ad58c0a15550100bdc199bef8add1ad526c","modified":1605933836566},{"_id":"themes/next/layout/_third-party/tags/mermaid.njk","hash":"007da98b913a62946c03a87f8fa25b3db856caa1","modified":1605933836566},{"_id":"themes/next/scripts/events/lib/config.js","hash":"5a1dd04ea7124494110b3c79f9880f55d899977b","modified":1605933836570},{"_id":"themes/next/layout/_third-party/tags/pdf.njk","hash":"67d80a57f6b2cf23d56276ca8f30f25e3e8707e9","modified":1605933836567},{"_id":"themes/next/scripts/events/lib/highlight.js","hash":"6aec7b2c38c50989a23bfaa0d560e75c7f553e12","modified":1605933836571},{"_id":"themes/next/scripts/events/lib/injects.js","hash":"7b0ea8d28ced63977dc6539920eb044b1098adcb","modified":1605933836571},{"_id":"themes/next/scripts/events/lib/utils.js","hash":"e227174a8ebab8d5b6e8e26faf4fd66c43f045ca","modified":1605933836571},{"_id":"themes/next/scripts/events/lib/vendors.js","hash":"f76c7e13fc4304f86260068c9d83d3477b64ee4b","modified":1605933836572},{"_id":"themes/next/scripts/filters/comment/changyan.js","hash":"199fa9a70914d0019cf0e47f55491183d53d1533","modified":1605933836572},{"_id":"themes/next/scripts/filters/comment/common.js","hash":"2486f3e0150c753e5f3af1a3665d074704b8ee2c","modified":1605933836572},{"_id":"themes/next/scripts/filters/comment/default-config.js","hash":"93ee5f9109dad885dc38c49bcee630c10f9dce6e","modified":1605933836573},{"_id":"themes/next/scripts/filters/comment/disqus.js","hash":"a9b18b7447cd5a56cb692c574463a27356eb7fa6","modified":1605933836573},{"_id":"themes/next/scripts/filters/comment/disqusjs.js","hash":"7b8ce8e9a71cf083f5337fb7c9586be8f7c316e8","modified":1605933836573},{"_id":"themes/next/scripts/filters/comment/gitalk.js","hash":"387e59cd396c62fe095b388c8ff8d4191cfbdeb9","modified":1605933836573},{"_id":"themes/next/scripts/filters/comment/livere.js","hash":"1198cb63375a53400431c2e65e3361416cdf8eb6","modified":1605933836574},{"_id":"themes/next/scripts/filters/comment/valine.js","hash":"c67984fc868d4799b3aa6d3b3cd060e5260b3a98","modified":1605933836574},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"77dddb398fb1beefc2b824bec7b094030fdc3df9","modified":1605933836609},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"e3be898f5ebcf435a26542653a9297ff2c71aeb0","modified":1605933836609},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"c65536a128b9bc9dbe2fbb1b235a3cded2891002","modified":1605933836609},{"_id":"themes/next/source/css/_variables/base.styl","hash":"efbeee48d208a3960b4e352fab3feb2b2dab7ef8","modified":1605933836610},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"f4e694e5db81e57442c7e34505a416d818b3044a","modified":1605933836608},{"_id":"themes/next/source/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1605933836616},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"d4809783ded05625675b1b4bbd9e99d7f5f7d7f9","modified":1605933836582},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"1c75a837faae9aa2d0a5f30d2078aa8d2ccc2552","modified":1605933836583},{"_id":"themes/next/source/css/_common/components/reading-progress.styl","hash":"ee8fb8348aa76a9b346927ba4cae5666d8d777f7","modified":1605933836588},{"_id":"themes/next/source/css/_common/outline/mobile.styl","hash":"28368ac06d04ccf0bbf3dc9e0dfcf341c200b28c","modified":1605933836592},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"0c9f72ad98807521cbdcee7b5bbe2e884311db39","modified":1605933836592},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"92915560810c0311dada43ed629b8fc4ff0fc7a4","modified":1605933836582},{"_id":"themes/next/source/css/_common/scaffolding/buttons.styl","hash":"a042571d85ff7265f799004239a45f36b716b8a6","modified":1605933836597},{"_id":"themes/next/source/css/_common/scaffolding/comments.styl","hash":"e4fecc889ba3317a64e9abba5842c79dff9b7827","modified":1605933836597},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"b56367ea676ea8e8783ea89cd4ab150c7da7a060","modified":1605933836598},{"_id":"themes/next/source/css/_common/scaffolding/pagination.styl","hash":"a472fb1afc6486266b85f773501a290e0a80c370","modified":1605933836598},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"523fb7b653b87ae37fc91fc8813e4ffad87b0d7e","modified":1605933836599},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"e1c85ab2831fd7d4bb84aea1850a0160be0023e8","modified":1605933836599},{"_id":"themes/next/source/css/_common/scaffolding/toggles.styl","hash":"572a41499391677d84b16d8dbd6a996a3d5ce041","modified":1605933836602},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"06786e1ed8774f8f08cbfc711296cf189aaf1b8c","modified":1605933836603},{"_id":"themes/next/source/css/_schemes/Mist/_layout.styl","hash":"5604ac1e161099a4d3e5657d53507268866dc717","modified":1605933836603},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"f6d165dae928c12bde3f271d299a93b334116433","modified":1605933836604},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"ab16a3dcdc0393b9b582ef59dcc13db9320e917c","modified":1605933836604},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expand.styl","hash":"faadd1616a18d626f145e9fbdbfb770deab35b2c","modified":1605933836604},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"82a29572dd90451f75358a2ee2522b87304a0bb8","modified":1605933836605},{"_id":"themes/next/source/css/_schemes/Muse/_header.styl","hash":"06080fd963c904d96c00eff098a284e337953013","modified":1605933836605},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"c706733f5196776fe2657a9bebe0a727cf8fe8e5","modified":1605933836605},{"_id":"themes/next/source/css/_schemes/Muse/_sidebar.styl","hash":"a57dca7008b1f4721359a2a3b420ed2eec02b0a1","modified":1605933836606},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"6ad168288b213cec357e9b5a97674ff2ef3a910c","modified":1605933836606},{"_id":"themes/next/source/css/_schemes/Pisces/_header.styl","hash":"be5c46b983df08b9dbac1b4749b1a101b54b6b50","modified":1605933836607},{"_id":"themes/next/source/css/_schemes/Muse/_sub-menu.styl","hash":"c48ccd8d6651fe1a01faff8f01179456d39ba9b1","modified":1605933836606},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"6eee86c8f0175d6c09e434053516cd8556f78d44","modified":1605933836607},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"031765bd4564d97ba694c1b73615ed631f1c64aa","modified":1605933836607},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"c435cfd858bf82726fff2c85d384e2207bea0370","modified":1605933836607},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"8000075b227749a7495eaf417cac6ccfbe441580","modified":1605933836608},{"_id":"themes/next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"78f0b6edc296a9ed5144da9f9752c0b96bebfaa5","modified":1605933836608},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"ea96e86b6bcb160351c18a7edc4a561918a820cb","modified":1605933836597},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"7ad04d5a02a7618ebb09c1d5a435d46c4df2c620","modified":1605933836603},{"_id":"themes/next/source/css/_common/components/pages/breadcrumb.styl","hash":"8afdc311c6b8db121758371f95cf1c5e77354f42","modified":1605933836583},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"b6e2eb1550a7845cb2adf86081a4ab6c7bde1e68","modified":1605933836583},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"7504dbc5c70262b048143b2c37d2b5aa2809afa2","modified":1605933836584},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"19fc5ca0784f5d2befddb9d8bc463b916c5c2518","modified":1605933836584},{"_id":"themes/next/source/css/_common/components/pages/tag-cloud.styl","hash":"1a81d1a71fcf0699629ce6e72dfd0a15f3a2dd0a","modified":1605933836584},{"_id":"themes/next/source/css/_common/components/post/post-body.styl","hash":"5d61dedb3bec1021d52894f9b379e4d0953f6a35","modified":1605933836585},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8998a07acf0dbd10811835c8dfc91d92e680bcae","modified":1605933836585},{"_id":"themes/next/source/css/_common/components/post/post-followme.styl","hash":"76d0dfb3a8b873a6180604ac6daecf38b6a963a2","modified":1605933836585},{"_id":"themes/next/source/css/_common/components/post/post-footer.styl","hash":"8a2e724df3d5cd14765eb951f0a9e1dba399fd35","modified":1605933836586},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"aa366d37389760c8595529b850f461569577a1c5","modified":1605933836586},{"_id":"themes/next/source/css/_common/components/post/post-header.styl","hash":"d64a87996ff2762c8da0e1998d57e15b27ee4cec","modified":1605933836586},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"cf6540e12c2de5befcfb7e92d915e3b75fd53dfa","modified":1605933836587},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"27001ad06f69ff035639210ab2f614861b21a4f4","modified":1605933836587},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"5b5649b9749e3fd8b63aef22ceeece0a6e1df605","modified":1605933836587},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"b3fa752f72ca1413289b76c56fbd33a00e3d25d7","modified":1605933836587},{"_id":"themes/next/source/css/_common/components/third-party/gitalk.styl","hash":"8a7fc03a568b95be8d3337195e38bc7ec5ba2b23","modified":1605933836588},{"_id":"themes/next/source/css/_common/components/third-party/math.styl","hash":"48ee817d05ddc788423d7f10e9823e23fda81d04","modified":1605933836588},{"_id":"themes/next/source/css/_common/components/third-party/search.styl","hash":"2896840ab8ac8ab2a7f76d18df893f290ac31625","modified":1605933836589},{"_id":"themes/next/source/css/_common/components/third-party/related-posts.styl","hash":"2c534d2b2dbc932ad65d335a720a7ba9612bac04","modified":1605933836589},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"5d8fc91cdb7ee313eb367dcec7d5b2429f98242f","modified":1605933836589},{"_id":"themes/next/source/css/_common/outline/footer/footer.styl","hash":"f11dca93e334b68a29e792f7abe682993fab7568","modified":1605933836590},{"_id":"themes/next/source/css/_common/outline/header/bookmark.styl","hash":"8cb89864e8245a356d08ef0fee3133810f646fea","modified":1605933836590},{"_id":"themes/next/source/css/_common/outline/header/github-banner.styl","hash":"254e781e7b25e31a1a589c8b38dc608802f1cc6e","modified":1605933836591},{"_id":"themes/next/source/css/_common/outline/header/header.styl","hash":"f1778d2c56974b96dae429456d5c55be325c4946","modified":1605933836591},{"_id":"themes/next/source/css/_common/outline/header/menu.styl","hash":"6d8afd8e23c40bb2b2a2edbe4eb0d2671cd81188","modified":1605933836591},{"_id":"themes/next/source/css/_common/outline/header/site-meta.styl","hash":"a83a1236564b81eab9a23dba9a634a6de90d4726","modified":1605933836591},{"_id":"themes/next/source/css/_common/outline/header/site-nav.styl","hash":"9c8abc55c9d94d384a245013951aba5ecca2f4fe","modified":1605933836592},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author-links.styl","hash":"66782e68f1c74a7d0aecef20e2ca16bbe6b52592","modified":1605933836593},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-author.styl","hash":"5b38ac4a0f1ade0e681aff0e3366c481d9cf3dcd","modified":1605933836593},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-blogroll.styl","hash":"9950c3188a28e1c63b5498b7bdcd14b12ace3e28","modified":1605933836593},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-button.styl","hash":"ab715dbf2b98bfeb5e7b7c43e92e5c02496cc2ea","modified":1605933836594},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-nav.styl","hash":"f7ff85fe6c4efb8ff036fab2c3277b7d8bed69a8","modified":1605933836595},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-dimmer.styl","hash":"fbdb63c6a8887d19b7137325ba7d6806f728139c","modified":1605933836594},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toc.styl","hash":"469855a72d2c2b63a21df8fbcb8cc41d32cb9bde","modified":1605933836595},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar-toggle.styl","hash":"432e73bc4f99322af6af1852e0ea6e674919c31a","modified":1605933836596},{"_id":"themes/next/source/css/_common/outline/sidebar/sidebar.styl","hash":"3378f4d1640033ebde25798f602fddf88f3dcadd","modified":1605933836596},{"_id":"themes/next/source/css/_common/outline/sidebar/site-state.styl","hash":"497fc002d7415d9bed8cad26ba74ac66045397b7","modified":1605933836596},{"_id":"themes/next/source/css/_common/scaffolding/highlight/copy-code.styl","hash":"83ee4993710fc8daa1c8dbfccd5d5091fd244c30","modified":1605933836598},{"_id":"themes/next/source/css/_common/scaffolding/highlight/highlight.styl","hash":"920f21dc03b28f006aef7e9d0fd444c2cd283efc","modified":1605933836598},{"_id":"themes/next/source/css/_common/scaffolding/tags/blockquote-center.styl","hash":"15a5e273a8137550c93c8d2a60f9fcf86e04a89e","modified":1605933836599},{"_id":"themes/next/source/css/_common/scaffolding/tags/group-pictures.styl","hash":"393ff96234e4196b569d4b11496774eb78e147de","modified":1605933836600},{"_id":"themes/next/source/css/_common/scaffolding/tags/label.styl","hash":"f09bc97e3681d73c38d7d3c5c271486c2c6537e2","modified":1605933836600},{"_id":"themes/next/source/css/_common/scaffolding/tags/link-grid.styl","hash":"acfdec45e56cdd6a5ea61e0154f8a6d1bc068214","modified":1605933836600},{"_id":"themes/next/source/css/_common/scaffolding/tags/mermaid.styl","hash":"3c029a003e9bf747e1b9cc7c0c127f6028374876","modified":1605933836600},{"_id":"themes/next/source/css/_common/scaffolding/tags/note.styl","hash":"29bef220307d86b1eafbb3714381df32d48b5a60","modified":1605933836601},{"_id":"themes/next/source/css/_common/scaffolding/tags/pdf.styl","hash":"b49c64f8e9a6ca1c45c0ba98febf1974fdd03616","modified":1605933836601},{"_id":"themes/next/source/css/_common/scaffolding/tags/tabs.styl","hash":"dcf426c2a4836386c0c27235de3f9a95c5de67cc","modified":1605933836601},{"_id":"themes/next/source/css/_common/scaffolding/tags/tags.styl","hash":"cef4e779473daa3761709958243c6b8a57bbd814","modified":1605933836602},{"_id":"source/_posts/常见排序算法/选择.gif","hash":"8e3b36259e7aeaf6a479aaef6165c247658b11e3","modified":1606009016963},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/ecs_config.png","hash":"38b86dd4aac458fe414b216dd2e33b99fff07906","modified":1606723022745},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/ecs_config-20201119135902728.png","hash":"38b86dd4aac458fe414b216dd2e33b99fff07906","modified":1606723022694},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/0349a840-ed31-06be-207c-e748883522b7.png","hash":"0ff2077ec568a30bb6348f54d865f48badcbdedf","modified":1606054003768},{"_id":"source/_posts/前端vscode插件配置/163001_02d3ddb2_1203301.png","hash":"c6accfeb445c79337431942327820d91e78b85b5","modified":1605933205490},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/getEventListeners.gif","hash":"9ee64515c30ade10704bc7a6cf270a0c060daf68","modified":1606722032442},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/node-debuger.gif","hash":"5028063156f80853d2aea068f2183893fa413cec","modified":1606722032693},{"_id":"public/search.xml","hash":"3c8b8eedeeb233c1bd5aaf2eb222337baba4b1ea","modified":1606912045673},{"_id":"public/categories/index.html","hash":"668394b9f646e0f7e6dce26cef7a04a32f503630","modified":1606912045673},{"_id":"public/posts/9274/index.html","hash":"2fbd5190f4e421e5dc7141fd092e7a5ad4878982","modified":1606912045673},{"_id":"public/posts/44396/index.html","hash":"dd8e7eca4e55e319edf93c781b051f41ef7964fb","modified":1606912045673},{"_id":"public/posts/7710/index.html","hash":"b9632a847d0af412b8bb5aa2dca2a9b083ead682","modified":1606912045673},{"_id":"public/posts/33677/index.html","hash":"891a202483f99d95f80820abc62316bdb55470ff","modified":1606912045673},{"_id":"public/posts/22469/index.html","hash":"c66531cd4377495c2294b924eced02fcf57d2acb","modified":1606912045673},{"_id":"public/tags/index.html","hash":"2472064ecb8510b97d9d80aa2294ae001227bc5e","modified":1606912045673},{"_id":"public/posts/61674/index.html","hash":"98812be8eaf26166f13770e972241b6b57aadb55","modified":1606912045673},{"_id":"public/posts/63074/index.html","hash":"9dd50cfa0a384e3bc2ec04938858e1b4bac3fa85","modified":1606912045673},{"_id":"public/posts/10849/index.html","hash":"c8726ed0486952e8991a7c21a9633ad6021d49a1","modified":1606912045673},{"_id":"public/posts/3583/index.html","hash":"95e8453040cdb93fd26251c33a20c87b4386b0e9","modified":1606912045673},{"_id":"public/posts/10518/index.html","hash":"aec61da18239bce0406da81907334374bba4c488","modified":1606912045673},{"_id":"public/posts/1071/index.html","hash":"4936fc4a2f891a04e1834dfc3c9cf4ddb85bb09e","modified":1606912045673},{"_id":"public/posts/12897/index.html","hash":"7cb97a17fc9f50fd8ea9afc44d4497aab8ded1ce","modified":1606912045673},{"_id":"public/posts/56953/index.html","hash":"a29be177d204bd5365136edd374574e326b7625f","modified":1606912045673},{"_id":"public/posts/40424/index.html","hash":"78803a6b2c1c364663203be5c2afd3fa0786b99e","modified":1606912045673},{"_id":"public/posts/709/index.html","hash":"d09b84d443d0651d50487b149af88bb8df38eb7c","modified":1606912045673},{"_id":"public/posts/40394/index.html","hash":"e14eeacc165216fcb8a40bb2dc7e419099c5d26c","modified":1606912045673},{"_id":"public/posts/36068/index.html","hash":"4c137411d2a65df1e47b53ed0c7ee5e4769c1b78","modified":1606912045673},{"_id":"public/posts/44111/index.html","hash":"6b21a0f537b4fd020c9d4bba056582d496bfd15f","modified":1606912045673},{"_id":"public/posts/16051/index.html","hash":"9dc39c107b708659bf4a2ade558a9473778f7fd7","modified":1606912045673},{"_id":"public/posts/8214/index.html","hash":"00cbd4b821df278aad70919d181c3ae1fd04d45d","modified":1606912045673},{"_id":"public/posts/64694/index.html","hash":"7e8dbe3c983b761d71299096e29cc00432fbb5cc","modified":1606912045673},{"_id":"public/posts/3278/index.html","hash":"6fff0a74cf10b05571f0ccf903e86c1dd71f3111","modified":1606912045673},{"_id":"public/posts/1183/index.html","hash":"002d17f2033f0f30c99798e81231ae68773ddb4f","modified":1606912045673},{"_id":"public/posts/20298/index.html","hash":"922831e38621e43913de97c8437cddf3c3af228a","modified":1606912045673},{"_id":"public/posts/57136/index.html","hash":"a4b58e440e48e0f87312272b0f2b3086d651ebfa","modified":1606912045673},{"_id":"public/posts/50491/index.html","hash":"10322bc764300cb1a0cdedc2d45f0dc0481f0f71","modified":1606912045673},{"_id":"public/posts/39853/index.html","hash":"13db9eee23dba01bae5925f66ef6b26d85e098ed","modified":1606912045673},{"_id":"public/posts/59937/index.html","hash":"d05d4c8effb6bc0cd6d31b60a2b2cf1b78c69db2","modified":1606912045673},{"_id":"public/posts/33186/index.html","hash":"77ca4805b1a49645dca27ab2af76b956b505f9e3","modified":1606912045673},{"_id":"public/posts/13167/index.html","hash":"4c6002a4a147173d4796d416bacb6a81313153cf","modified":1606912045673},{"_id":"public/posts/41749/index.html","hash":"210d49ad407ca167ff6c50f4e73f6e25b883a699","modified":1606912045673},{"_id":"public/posts/39974/index.html","hash":"b6fba2e1560544250164e53cc12ca1f244d16be2","modified":1606912045673},{"_id":"public/posts/47462/index.html","hash":"64ac9b811339652ebda959df2d1c8f6a6a3974ef","modified":1606912045673},{"_id":"public/posts/63891/index.html","hash":"fbe2d95ee6f848c88b81749d3023e7e8c71422e4","modified":1606912045673},{"_id":"public/posts/21245/index.html","hash":"7996fcb76c4edde938b5f5e11f2188221aa72708","modified":1606912045673},{"_id":"public/posts/7878/index.html","hash":"89454d01118a8b99e03b39e026109e7cc289951a","modified":1606912045673},{"_id":"public/posts/51696/index.html","hash":"d1d994869dc28afd14ea6231c5086bb2340f1719","modified":1606912045673},{"_id":"public/posts/37021/index.html","hash":"792675ffc83eae6ee5caa2b9b41b89eabdb4f2ea","modified":1606912045673},{"_id":"public/posts/29820/index.html","hash":"9aedf7bd799962068880379ed6afe15bc56e6444","modified":1606912045673},{"_id":"public/posts/2751/index.html","hash":"edfbe8aabf57a9c4bbe752d43517d4991898ae0c","modified":1606912045673},{"_id":"public/posts/33207/index.html","hash":"3857697479819a546640f8294f389095c72d0fb6","modified":1606912045673},{"_id":"public/posts/64478/index.html","hash":"da47699a98029526997e98c6c8177c0d282fce7b","modified":1606912045673},{"_id":"public/posts/63928/index.html","hash":"ecc9f267f6561c4b5f156c4f2bfc303403419213","modified":1606912045673},{"_id":"public/posts/29980/index.html","hash":"41d48b07546d6da55c526dcc164e0b6dd27c9041","modified":1606912045673},{"_id":"public/posts/21501/index.html","hash":"7aab3466dd590b4f341a518e5cb29fab7164c94c","modified":1606912045673},{"_id":"public/posts/31251/index.html","hash":"5235dcd12658e35040b529df30bc14dd77afd7c4","modified":1606912045673},{"_id":"public/posts/12906/index.html","hash":"84062041854bc57f6ba77c2f72b46bcf7dec6c9a","modified":1606912045673},{"_id":"public/posts/9722/index.html","hash":"15d21eae1f23045078e174b7d317be614c3e9f45","modified":1606912045673},{"_id":"public/posts/10370/index.html","hash":"a6890ed81c2864c196224d0c8fd50d11cfed1683","modified":1606912045673},{"_id":"public/posts/44541/index.html","hash":"409d46df1b285b760e339781708cdf65b38f469e","modified":1606912045673},{"_id":"public/posts/12733/index.html","hash":"7d4b42da60b4cfd9b212ae6b8f27d8b1b4831369","modified":1606912045673},{"_id":"public/posts/2906/index.html","hash":"46a17a41432d8cffa7c8c128c53388dc5f45145f","modified":1606912045673},{"_id":"public/posts/11039/index.html","hash":"54b5c2cbca895ae72e7ad7be7de1f8685ead0d42","modified":1606912045673},{"_id":"public/posts/43303/index.html","hash":"85ead7722fc6e774d727880964d416706ec49c05","modified":1606912045673},{"_id":"public/archives/index.html","hash":"86507ebc9aee3ef03cf96a2c347583b1287c2bf2","modified":1606912045673},{"_id":"public/archives/page/2/index.html","hash":"de4753fac72b40bbc0bd1e8755db3110c6d14395","modified":1606912045673},{"_id":"public/archives/page/3/index.html","hash":"09ae2e8a3020a21dac29f486774ca3511004d1ef","modified":1606912045673},{"_id":"public/archives/page/4/index.html","hash":"618f1438c129f19bc508cd715d4b221b8c206bd2","modified":1606912045673},{"_id":"public/archives/page/5/index.html","hash":"587b1efab1104976ac626181d5b34d9a4200bdf3","modified":1606912045673},{"_id":"public/archives/page/6/index.html","hash":"6d8d205d239e495400354e25024ed802dd625376","modified":1606912045673},{"_id":"public/archives/2018/index.html","hash":"f51c47795f94f420bc967c5a7654a4081402630d","modified":1606912045673},{"_id":"public/archives/2018/page/2/index.html","hash":"461dc2469f178c332506f2095ead332a98ac0d67","modified":1606912045673},{"_id":"public/archives/2018/03/index.html","hash":"81b98e5b944536797f92171cc3f1fef888e4449e","modified":1606912045673},{"_id":"public/archives/2018/05/index.html","hash":"17dcdc1708ae7c00d49a464d3507b2b4430b287b","modified":1606912045673},{"_id":"public/archives/2018/11/index.html","hash":"7922a01842b779bd59e67a7aa3f5342ce6049cbb","modified":1606912045673},{"_id":"public/archives/2018/09/index.html","hash":"5b09d95ccfa5371cf0176ef6b8fc161fbd3dc803","modified":1606912045673},{"_id":"public/archives/2018/12/index.html","hash":"30d733b495673667cd4fd45870e66c81bae2c444","modified":1606912045673},{"_id":"public/archives/2019/index.html","hash":"cb1f080ad3b1b39e2a545397e5d1d1977bc66b6b","modified":1606912045673},{"_id":"public/archives/2019/page/2/index.html","hash":"1292fb67e913433ae8005defb3241e869da237f1","modified":1606912045673},{"_id":"public/archives/2019/page/3/index.html","hash":"cf68516c76321be2cf9f526e4dfc1d79735f0573","modified":1606912045673},{"_id":"public/archives/2019/01/index.html","hash":"d2e71e9dba4c53911ff7c8a46278f85c6b2492d8","modified":1606912045673},{"_id":"public/archives/2019/02/index.html","hash":"19bb2261f21eb707af8846fd2f55acb2901fea47","modified":1606912045673},{"_id":"public/archives/2019/03/index.html","hash":"d426ca4856090f13face0f73b671d3ae3d77e6be","modified":1606912045673},{"_id":"public/archives/2019/06/index.html","hash":"086e7efeb190b5b65f17257843cf90c7b1e5293d","modified":1606912045673},{"_id":"public/archives/2019/11/index.html","hash":"f1b8c4f05fc5548009559826f7471609433a245d","modified":1606912045673},{"_id":"public/archives/2019/12/index.html","hash":"ec20f79349dc46fd9b3e061a8a82a4da0e1915ee","modified":1606912045673},{"_id":"public/archives/2020/index.html","hash":"3c54bd0489741a35de9cae9270e1e1b01ebf7458","modified":1606912045673},{"_id":"public/archives/2020/page/2/index.html","hash":"670e0a04b8c85e7e288b390c5770d01175fdcf2c","modified":1606912045673},{"_id":"public/archives/2020/01/index.html","hash":"73a0e9f51b4a68e83fdb7ceec06a14ae2cf3ef1a","modified":1606912045673},{"_id":"public/archives/2020/03/index.html","hash":"5978df75da146ff6cee36480bc3541d3febf4826","modified":1606912045673},{"_id":"public/archives/2020/06/index.html","hash":"280d447cd7fee5e005808c196b59983508948ea6","modified":1606912045673},{"_id":"public/archives/2020/09/index.html","hash":"d875d9a32e79c992918d71f896c2fcedfd27b992","modified":1606912045673},{"_id":"public/archives/2020/12/index.html","hash":"5dc304d4834ce7000d91866f01b18b8132a53220","modified":1606912045673},{"_id":"public/archives/2020/11/index.html","hash":"c70a88faecce7fff171775a33638dd5424889582","modified":1606912045673},{"_id":"public/categories/操作系统/index.html","hash":"7bd7cea75b04dd27657e34bdbc0faeac7d523bf5","modified":1606912045673},{"_id":"public/categories/前端/index.html","hash":"b6f0ea7d957c1806d40c77d21f0cb08860e4aca1","modified":1606912045673},{"_id":"public/categories/前端/page/2/index.html","hash":"4aa9d53defb567fbeae9c26597d262fa6653f052","modified":1606912045673},{"_id":"public/categories/前端/page/3/index.html","hash":"3ff9438c15554f601d6b2322a6814bca089c69a3","modified":1606912045673},{"_id":"public/categories/前端/page/4/index.html","hash":"03a696a1ecebffc2540a0fca927163b24101e7c3","modified":1606912045673},{"_id":"public/categories/前端/JS/index.html","hash":"d586d52896f9f09632eaa6c97389592c899f179e","modified":1606912045673},{"_id":"public/categories/操作系统/macOS/index.html","hash":"c955deecbee83d7bc7d2471a0b869c02182db651","modified":1606912045673},{"_id":"public/categories/前端/CSS/index.html","hash":"bbeb0cea35ac829de924963cc4d0eb9ec0c5a435","modified":1606912045673},{"_id":"public/categories/前端/JS/page/2/index.html","hash":"5aa044b5a1ceec6b3d0668965c3208f724ddf480","modified":1606912045673},{"_id":"public/categories/前端/CSS/page/2/index.html","hash":"3c6cbb8f2c5ad8577aa24d8e59c6c4961f3c6b77","modified":1606912045673},{"_id":"public/categories/后端/index.html","hash":"4c20d80baf9a9dfe335f88b52f153cc855fc5683","modified":1606912045673},{"_id":"public/categories/工具/index.html","hash":"e7964e09ce7c18a714c8757a7592458cf6ea877c","modified":1606912045673},{"_id":"public/categories/前端/HTML/index.html","hash":"f1603c2eb8fd24581d3743e0002bacc188600fa9","modified":1606912045673},{"_id":"public/categories/前端/框架/index.html","hash":"d9070036b018e81411b21167851e6e213c080b35","modified":1606912045673},{"_id":"public/categories/后端/构建工具/index.html","hash":"070f139bb9163a8d290df5d371ec544875f69b19","modified":1606912045673},{"_id":"public/categories/后端/SQL/index.html","hash":"a57373e673a1552ebbe1c30a27aec3ad8c630d69","modified":1606912045673},{"_id":"public/categories/工具/IDE/index.html","hash":"64952d07d0ca7e0433a29c4a69ac7a072313390e","modified":1606912045673},{"_id":"public/categories/前端/框架/Vue/index.html","hash":"23d74d63529ea25d34d4e3e8c3f50fb0d40a1a82","modified":1606912045673},{"_id":"public/categories/前端/构建工具/index.html","hash":"f5098166dd004c164a9e80bbaaa7ca38287d0792","modified":1606912045673},{"_id":"public/categories/解决方案/index.html","hash":"b985fc82c73eee1e03ea03a483dd68299fc543b6","modified":1606912045673},{"_id":"public/categories/解决方案/Node/index.html","hash":"05d2e6ee2fad9dc3693a937f7df7974c7c39254a","modified":1606912045673},{"_id":"public/categories/前端/浏览器/index.html","hash":"dc567dd18bb4079e994596e61aabc89df65046bb","modified":1606912045673},{"_id":"public/categories/工具/版本控制/index.html","hash":"91e18f2d6b731e0cf9392b482ba71dc3a495e035","modified":1606912045673},{"_id":"public/categories/前端/性能优化/index.html","hash":"4c81acfae954aba7bfa60bfed0f02809a7db4cc0","modified":1606912045673},{"_id":"public/categories/前端/构建工具/npm/index.html","hash":"50eaf75c007a260beeadec6a6e38f309656ab1cb","modified":1606912045673},{"_id":"public/categories/教程/index.html","hash":"a106914f149673b796cd1b7e83986fdbc84e39e4","modified":1606912045673},{"_id":"public/categories/教程/博客/index.html","hash":"0cd5c2edc1ff3b06c29748e9e28cdee9ed1e2ded","modified":1606912045673},{"_id":"public/categories/设计/index.html","hash":"2cdf43f83a1b1c0a688024fbf7183d8f423ebcee","modified":1606912045673},{"_id":"public/categories/设计/平面/index.html","hash":"02ea36635fce4b6bf2a7f0a5af978620fc263c55","modified":1606912045673},{"_id":"public/categories/前端/正则/index.html","hash":"f5e2fbe297c93af109b60b6eaeabd659088b49f4","modified":1606912045673},{"_id":"public/categories/后端/算法/index.html","hash":"0fea09351362a0c5a8e55270f219d4347af9309f","modified":1606912045673},{"_id":"public/categories/后端/服务器/index.html","hash":"114595573c7578598c7f9d9a742805182953ee42","modified":1606912045673},{"_id":"public/index.html","hash":"8d3152bca3edc6b3501eb1a369b6c152bf1a7d35","modified":1606912045673},{"_id":"public/page/2/index.html","hash":"9342e5755bdff2cf7a90820ac416959d4f3edf1d","modified":1606912045673},{"_id":"public/page/3/index.html","hash":"2e5d622930aa0c643a01f6dee2bf6838590538f2","modified":1606912045673},{"_id":"public/page/4/index.html","hash":"017a989730a74244dc627eeed9173abc6be224d5","modified":1606912045673},{"_id":"public/page/5/index.html","hash":"4617754a36c837e5c60e58257e3ee6ddbfdadfb0","modified":1606912045673},{"_id":"public/page/6/index.html","hash":"83496171de07210e779080e2710b8add4e34d8a5","modified":1606912045673},{"_id":"public/tags/macOS/index.html","hash":"913b7ea946a8cd4e8e6f784131fe8578b69449c6","modified":1606912045673},{"_id":"public/tags/布局/index.html","hash":"f50f9a6b022756496fc76d234c25ec0bd6260879","modified":1606912045673},{"_id":"public/tags/技巧/index.html","hash":"b863c16d1862d52710b06da2b92082c6f91ff168","modified":1606912045673},{"_id":"public/tags/CSS3/index.html","hash":"e5b623240ecf2aed8f02306bc7290bf9e584c289","modified":1606912045673},{"_id":"public/tags/转载/index.html","hash":"dc3ab9ec7075ebef692be9e8d4a09e27253426c5","modified":1606912045673},{"_id":"public/tags/继承/index.html","hash":"994dd9f08d5718cffd1e01b75a808f13ea88c15b","modified":1606912045673},{"_id":"public/tags/翻译/index.html","hash":"4ded5e5319f2f18701ac8c1c2e53a340cb16a7f2","modified":1606912045673},{"_id":"public/tags/Promise/index.html","hash":"e9ba966d2753b42225b364ae6a4b8853ece8b2d8","modified":1606912045673},{"_id":"public/tags/Sequelize/index.html","hash":"9ad2f7cb0e06330bf4c58e979c1ccc7e9162dfcc","modified":1606912045673},{"_id":"public/tags/VSCode/index.html","hash":"279658cd7ad1415ca4e39818e240f7788c78c421","modified":1606912045673},{"_id":"public/tags/Vuex/index.html","hash":"a1d8c1b0ca7e6de95b05b8a6a3f8ca58af30f651","modified":1606912045673},{"_id":"public/tags/Vue/index.html","hash":"8a2193e1acfdb3b7345d7ea22b1ba31c14963252","modified":1606912045673},{"_id":"public/tags/Webpack/index.html","hash":"ca28d4ff6ec8ce310a3df5dbbb6e3d996e6e2221","modified":1606912045673},{"_id":"public/tags/ES6/index.html","hash":"8bc76e991e45421ba475a5fb4540981ed0f030c1","modified":1606912045673},{"_id":"public/tags/解决方案/index.html","hash":"161c2d72ffa365aa3fafbcf3b8618750e101beb6","modified":1606912045673},{"_id":"public/tags/笔记/index.html","hash":"701e16295484c9874d154763afc9d3b61bfeea77","modified":1606912045673},{"_id":"public/tags/git/index.html","hash":"01af60ccc87007ce3976ce2441ede4970689fca1","modified":1606912045673},{"_id":"public/tags/缓存/index.html","hash":"4bf977af8fe2e8ce4df10da823d311fdbf0bb554","modified":1606912045673},{"_id":"public/tags/Jekyll/index.html","hash":"61579773b601db6e3dedac6de96df6e4c0b77c82","modified":1606912045673},{"_id":"public/tags/hexo/index.html","hash":"0e1db735806b9d5fdf416b141ea37e57df2ee3e1","modified":1606912045673},{"_id":"public/tags/字体侵权/index.html","hash":"b0408210a0821bd6359bc2df069ac42739595ff8","modified":1606912045673},{"_id":"public/tags/大屏/index.html","hash":"c323a10e252df0c554ab0790a09462a863f5070e","modified":1606912045673},{"_id":"public/tags/this/index.html","hash":"e73f173021c5dc3689c6ff3e4b4eae9a8daad245","modified":1606912045673},{"_id":"public/tags/闭包/index.html","hash":"9fa1f19d129e1aba56c1efec2e217109fe1a01c8","modified":1606912045673},{"_id":"public/tags/阿里云/index.html","hash":"bad33e4b88906928fa8c613c05b55e5c3bdc6b66","modified":1606912045673},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1606912045673},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1606912045673},{"_id":"public/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1606912045673},{"_id":"public/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1606912045673},{"_id":"public/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1606912045673},{"_id":"public/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1606912045673},{"_id":"public/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1606912045673},{"_id":"public/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1606912045673},{"_id":"public/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1606912045673},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1606912045673},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1606912045673},{"_id":"public/images/logo-algolia-nebula-blue-full.svg","hash":"b85e274207b1392782476a0430feac98db1e7da0","modified":1606912045673},{"_id":"public/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1606912045673},{"_id":"public/posts/8214/997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg","hash":"997aee7f7378ac61ca5b36877a65f44c3ed70bc5","modified":1606912045673},{"_id":"public/uploads/avatar_lance.jpeg","hash":"2d21265c72b3ad069b353ca5e8ce8538612e0d42","modified":1606912045673},{"_id":"public/posts/7878/call-back-hello.jpg","hash":"0d05e4edbad7ce2b7c010039e1ef12088d4abeae","modified":1606912045673},{"_id":"public/posts/3278/message-table.png","hash":"3124dc6eaac9a626d2af06b34a40160732f5e982","modified":1606912045673},{"_id":"public/posts/3278/user-message-data.png","hash":"d11007074f6a250dfe192eb67fa714d3b6437ba9","modified":1606912045673},{"_id":"public/posts/709/Experiments.gif","hash":"80050799c7867f37adc46c03982559c7323e444a","modified":1606912045673},{"_id":"public/posts/709/copy.gif","hash":"0cbb112aa64a6a149af0097fbcf98d0351904b30","modified":1606912045673},{"_id":"public/posts/709/ide.gif","hash":"340b05d96f8f4f690a82a7877ec54953cb9dd0a3","modified":1606912045673},{"_id":"public/posts/709/insertlog.gif","hash":"207ce21b9925b40b33f4b6fedaf6b950bb2570b8","modified":1606912045673},{"_id":"public/posts/709/log.png","hash":"69bbe1f82b37b191add6830a695f1eaf251fde74","modified":1606912045673},{"_id":"public/posts/709/methodtools.gif","hash":"5b757cacbb1245d33e274fcd60464fb9cfa24ded","modified":1606912045673},{"_id":"public/posts/709/networkoverrides.gif","hash":"a247fafa80a4394bd4667ad7ee1474c56e63627d","modified":1606912045673},{"_id":"public/posts/709/superlog.png","hash":"d9d86c40077196a00c3150cdb553dcc88d606912","modified":1606912045673},{"_id":"public/posts/709/tooltips.gif","hash":"f2a8960833ce7f66f411bd08677f76c3c620dc25","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223217.png","hash":"7f4f6a0a942c0bf261d28d6dd1e6869ed863860e","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223220.png","hash":"0f71361b7098b6329559050bb5aad85286c504db","modified":1606912045673},{"_id":"public/posts/10370/双飞翼step1.png","hash":"e18ceee9353c562a059380932c74dbac3aaab2d8","modified":1606912045673},{"_id":"public/posts/10370/双飞翼step2.png","hash":"2c9197e8f0bb4be003e1dc32310f251e5fececc5","modified":1606912045673},{"_id":"public/posts/10370/双飞翼step3.png","hash":"c47cce9adb1053dae00bee85403b3b3da547e8d6","modified":1606912045673},{"_id":"public/posts/10370/双飞翼step4.png","hash":"86097cff510a88343d24ea0c5942450e32b2cc3c","modified":1606912045673},{"_id":"public/posts/10370/圣杯step1.png","hash":"08b8352b016be85208bc4cee6c41224362f24bdf","modified":1606912045673},{"_id":"public/posts/10370/圣杯step3.png","hash":"7dd58e5c02c6301af23f65031a5938ad7c41472b","modified":1606912045673},{"_id":"public/posts/10370/圣杯step2.png","hash":"936e9098960fd1eb78d99b9f56395bf3a57fa448","modified":1606912045673},{"_id":"public/posts/10370/圣杯step4.png","hash":"a2084b73eff72960367ae732d947650ee0e4e51d","modified":1606912045673},{"_id":"public/posts/11039/1.png","hash":"827dbdff391338cd3aa302c01d8a9d352be4bfe8","modified":1606912045673},{"_id":"public/posts/61674/1-1.png","hash":"69c1a100fecfcd5aeb2b947c989384fe37c6510c","modified":1606912045673},{"_id":"public/posts/61674/16-9.png","hash":"adc8e5664cbf41f9f3d3e628b5154089fd154f11","modified":1606912045673},{"_id":"public/posts/61674/19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png","hash":"a54b70e46dcb5ae78b5360e802fd49a74367d153","modified":1606912045673},{"_id":"public/posts/61674/19e45d16-534a-9ac3-578c-83bb3f01b45f.png","hash":"a54b70e46dcb5ae78b5360e802fd49a74367d153","modified":1606912045673},{"_id":"public/posts/61674/327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png","hash":"d1e3020db20d14cad1ea1bac5aa8386497ad9acf","modified":1606912045673},{"_id":"public/posts/61674/600-300.png","hash":"e34f39fd1409b291c5320b00bdbeef6630eee82b","modified":1606912045673},{"_id":"public/posts/61674/70ef9642-13d0-a15c-ff25-23feaef1029b.png","hash":"5d2a981cca3429dd96093487448c08f0186c8d74","modified":1606912045673},{"_id":"public/posts/61674/c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png","hash":"42b68d4849550ed57e79a1f33c06f537aeeb59d0","modified":1606912045673},{"_id":"public/posts/61674/full-screen.png","hash":"22229ac1bdcf96ac89557b8f140b7a993ec1a566","modified":1606912045673},{"_id":"public/posts/61674/d312b3ec-ded3-746f-9e59-7daa68811f30.png","hash":"e417fc11f101ab0fba123f7bbb6c701f64dc03d2","modified":1606912045673},{"_id":"public/posts/61674/square.png","hash":"d02b67db2ede32a67924fdbd0b57fe691f9dcb6a","modified":1606912045673},{"_id":"public/posts/2906/f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg","hash":"4bbdda7997b75b279fb138456bd494141c15d66a","modified":1606912045673},{"_id":"public/posts/13167/cubic05000510.png","hash":"55d8b5d3a01cc4ad127f245246f499001ccc4d7f","modified":1606912045673},{"_id":"public/posts/13167/cubic55465149.png","hash":"a9bf5ea3c26241e2779675c05bcc7a72f5e711bf","modified":1606912045673},{"_id":"public/posts/59937/快排.png","hash":"3e048168353e36e935d163b968d21c6938cbc86d","modified":1606912045673},{"_id":"public/posts/59937/快排11.png","hash":"3191dc66e28746dccd682977b9f8b7794bc9b0a0","modified":1606912045673},{"_id":"public/posts/59937/快排10.png","hash":"ee94f9cad89ac54a3df65db89706db0506474e9b","modified":1606912045673},{"_id":"public/posts/59937/快排12.png","hash":"4107eccbc6faffc99ca0bc454462653bc6cbf014","modified":1606912045673},{"_id":"public/posts/59937/快排13.png","hash":"6f69a35f6408c928da9760c528b49fa00a785d9c","modified":1606912045673},{"_id":"public/posts/59937/快排2.png","hash":"8349798a468733e4d8e3b6c900d29031e05668bb","modified":1606912045673},{"_id":"public/posts/59937/快排14.png","hash":"4a0505bd50e48625c03f8314291390343810f6be","modified":1606912045673},{"_id":"public/posts/59937/快排3.png","hash":"aa4ae50e90d685ed691061e5d435cf0cda1579a3","modified":1606912045673},{"_id":"public/posts/59937/快排4.png","hash":"1691eb2381b401473ae7c69556a44fe27318f7b0","modified":1606912045673},{"_id":"public/posts/59937/快排5.png","hash":"d1424032fbc4140f62e5bd923abd34538f0763c7","modified":1606912045673},{"_id":"public/posts/59937/快排6.png","hash":"15ab1654ce5b3bd7e9cf81b1d0082e79d43c21e3","modified":1606912045673},{"_id":"public/posts/59937/快排7.png","hash":"1e61ccea8ab08e087080d755550a17c370184c0b","modified":1606912045673},{"_id":"public/posts/59937/快排8.png","hash":"832e82da7de26ff3fb8953e3b00f86fa0049a2ab","modified":1606912045673},{"_id":"public/posts/59937/快排9.png","hash":"3201265b2853dd414a27a1994100b8b5aa6290e6","modified":1606912045673},{"_id":"public/posts/1183/npminit-y.png","hash":"44603f4e42f15393986a81a158920cc17be043f3","modified":1606912045673},{"_id":"public/posts/1183/table-property.png","hash":"fcc9d5a605d20afacff24ac07e5d0dbc7f358531","modified":1606912045673},{"_id":"public/posts/39853/1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png","hash":"7ac38a5c3ec91014a28bcc3f2ed26c1065910bd5","modified":1606912045673},{"_id":"public/posts/40394/filezilla_site_manager_vsftpd_18_04.png","hash":"3b64bc7a2fa5c393a6368ecf75c0c5c19e357792","modified":1606912045673},{"_id":"public/posts/40394/new-site.png","hash":"2dd211dc9301f5736845fac4827be517e414dff1","modified":1606912045673},{"_id":"public/posts/40394/user-pass.png","hash":"3a1ab6fa54ecc60469e3b7713d7e4a95629f4098","modified":1606912045673},{"_id":"public/posts/40394/site-config2.png","hash":"3614802fe5b4c86bce5cd0c10cc9c90c7f5a2594","modified":1606912045673},{"_id":"public/posts/40394/wKiom1b6SWvwBjm7AAA9pZvVBTE386.png","hash":"b76974407d39ac56f45d48f754f9d19151909c01","modified":1606912045673},{"_id":"public/posts/51696/0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg","hash":"9daa26f9dace6aa820f0c6b3391eb65ac6d52197","modified":1606912045673},{"_id":"public/posts/51696/0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg","hash":"dd210188d74b52edd068f0718330b4b7ef7dae4e","modified":1606912045673},{"_id":"public/posts/51696/130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg","hash":"23c58fcb99c97a93d8d77864d922ed66ea15ae17","modified":1606912045673},{"_id":"public/posts/51696/1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg","hash":"fc2da9c756607dd89d63b49b7ed37f1768868a7c","modified":1606912045673},{"_id":"public/posts/51696/34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg","hash":"137479874665a4a72853b2ccf30c025d23288a0b","modified":1606912045673},{"_id":"public/posts/51696/3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg","hash":"a4c79376a02f3fd1ff379d9b34b8cdbb7f778de7","modified":1606912045673},{"_id":"public/posts/51696/53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg","hash":"83abfcc0ab345124d3d254798f4f789eae6ae19e","modified":1606912045673},{"_id":"public/posts/51696/5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg","hash":"4fb34aa87cb13b49f888fbdd51bc92378e081733","modified":1606912045673},{"_id":"public/posts/51696/621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg","hash":"c3a5ae2f2c1275623f56803ed4527be06fe9cc06","modified":1606912045673},{"_id":"public/posts/51696/69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg","hash":"2dfcfef43df56d3d65b0b2b2a6e140b09d387c2f","modified":1606912045673},{"_id":"public/posts/51696/6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg","hash":"ac7b2bfb5226f260c5c942f9fafa1421d96c5c2f","modified":1606912045673},{"_id":"public/posts/51696/7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg","hash":"593dc7f915b1e112d46db46786a53df044e91a85","modified":1606912045673},{"_id":"public/posts/51696/821f0e91-4700-495e-a657-a372965a7027-3051986.jpg","hash":"68d89d7e0bbe2de96e144ba0e2f5cd15f797e2ae","modified":1606912045673},{"_id":"public/posts/51696/8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg","hash":"5fcee442a845a38ac5112b46f6ef5827703649c8","modified":1606912045673},{"_id":"public/posts/51696/aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg","hash":"cff7bd0f8714f78345cb73537a2e7066af8216cf","modified":1606912045673},{"_id":"public/posts/51696/aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg","hash":"992f595b7ab81f777e07da1127c254d4deac5d83","modified":1606912045673},{"_id":"public/posts/51696/b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg","hash":"9f43715033e51bf424a7359d239b48bfe903474e","modified":1606912045673},{"_id":"public/posts/51696/c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg","hash":"3b28db63c7f7dc3d87fb9da597a0303b3b0291d3","modified":1606912045673},{"_id":"public/posts/51696/d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg","hash":"e36f058112b32b27701772f6ed1aa01ec5d41bbb","modified":1606912045673},{"_id":"public/posts/51696/d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg","hash":"c425291947b874c6bf499b5644d403b26f5069a0","modified":1606912045673},{"_id":"public/posts/51696/e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg","hash":"bfbdfbecfd992236fb7f15e5d8b79456584cd252","modified":1606912045673},{"_id":"public/posts/63891/1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png","hash":"4bb820beb8311b1a60b94a04c770e1e862d3cb7e","modified":1606912045673},{"_id":"public/posts/709/autopre.png","hash":"7d38ac5e4487d8ad7b3f838a63d920bddab2840c","modified":1606912045673},{"_id":"public/posts/709/logcolor.png","hash":"2ab556152d192fbc399881cedf80997335a75964","modified":1606912045673},{"_id":"public/posts/44111/token算法.png","hash":"e514111dffc3abe813c58369b24de9bfab51e5f9","modified":1606912045673},{"_id":"public/posts/44111/token验证.png","hash":"1e2619a7f3b99c5a54168b9d9ca7f2c2a19d7279","modified":1606912045673},{"_id":"public/posts/44111/负载均衡1.png","hash":"cc1fa8fc43a326f38bb2015ba249d51b645945f0","modified":1606912045673},{"_id":"public/posts/44111/负载均衡2.png","hash":"053b0f0aded5e422d102195a5ecdaf45b64fe7c3","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223114.png","hash":"373e8dce2db6935d01f1b3ac15829fc58ae5661d","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223158.png","hash":"2a9ea2a94962e48cc5f4725c3f82ee418315342b","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223159.png","hash":"c6badb66d30112deca9e9c2ae622da4d20ce9658","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223164.png","hash":"b9f3af5528cfbe6fc08601c01eccf9fe6a1ab644","modified":1606912045673},{"_id":"public/posts/10518/640-20200322202223167.png","hash":"1e3c74de33d161ae25e639c34d449e1d1fc5b4f8","modified":1606912045673},{"_id":"public/posts/10518/640-20200322203628249.png","hash":"c6badb66d30112deca9e9c2ae622da4d20ce9658","modified":1606912045673},{"_id":"public/posts/61674/ba7c9abd-2f10-3890-cfed-f8c389248b53.png","hash":"13f4c6bc565826812210785856a3849f9c258bd1","modified":1606912045673},{"_id":"public/posts/59937/选择2.png","hash":"adc240c185181270874ec8cac69f3388be4b8f8c","modified":1606912045673},{"_id":"public/posts/1183/error-mysql2.png","hash":"38a2adcc5f3ba90b8c8c9f17786f67e844d0823b","modified":1606912045673},{"_id":"public/posts/16051/create-users.png","hash":"f655c13371c558ce5a301515a0402b3adc46e262","modified":1606912045673},{"_id":"public/posts/51696/43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg","hash":"e042c317050e9fbe0d8d6b85cc4c253625994052","modified":1606912045673},{"_id":"public/posts/51696/55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg","hash":"1f3482ffac9e4cd4ac0590855b2ca3d836e2426c","modified":1606912045673},{"_id":"public/posts/51696/5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg","hash":"abc51376ca12c49baf1ad54a39233a0faaa44f0e","modified":1606912045673},{"_id":"public/posts/51696/60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg","hash":"36ccd4b4bce8feada80b30d1c99161328c5b8298","modified":1606912045673},{"_id":"public/posts/51696/63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg","hash":"a20dd77aa9081a808c7b0eacb5bedc5f215cedd9","modified":1606912045673},{"_id":"public/posts/51696/76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg","hash":"7fafb32edbc30a834240dce25f1aa7cbe4465f98","modified":1606912045673},{"_id":"public/posts/51696/90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg","hash":"18c384ce4ede8a53fb68a5af552b49ed04f7a46f","modified":1606912045673},{"_id":"public/posts/51696/972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg","hash":"e8bcdfb21c647d1dd79e97332f914d0c44b795ff","modified":1606912045673},{"_id":"public/posts/51696/a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg","hash":"045b7b4c28b93fa50ab72b0791b8ff6469cfb62b","modified":1606912045673},{"_id":"public/posts/51696/bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg","hash":"a54cc6aa62dfaf182fffe63fb6817a359e7d3e6e","modified":1606912045673},{"_id":"public/posts/51696/bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg","hash":"fa4afc9114f9bf22b7a2563c49e2a058c84cba85","modified":1606912045673},{"_id":"public/posts/51696/ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg","hash":"6d4e7f202e6b5f83a62c77e073b7e1733a3fe2bd","modified":1606912045673},{"_id":"public/posts/51696/ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg","hash":"3d67bf2116bdec0746dc2c00a87c40a4933ea230","modified":1606912045673},{"_id":"public/posts/51696/e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg","hash":"137cfb50863ae8b2cc9d1a5e12be390c59ab1d59","modified":1606912045673},{"_id":"public/posts/51696/e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg","hash":"894a502dadeef381942fc55d7da3b8386dd101f0","modified":1606912045673},{"_id":"public/posts/51696/e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg","hash":"13acb1db12ae84ce210ce0d209d3b3245bbc68f2","modified":1606912045673},{"_id":"public/posts/51696/f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg","hash":"741a94ff70abe48e5c47b3c9e85dc300fa6bf915","modified":1606912045673},{"_id":"public/posts/51696/image-20201119143206311.png","hash":"34c339144562ebf4aec4d3a51345e1e27831ef16","modified":1606912045673},{"_id":"public/posts/51696/image-20201119143230646.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1606912045673},{"_id":"public/posts/51696/image-20201119143240002.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1606912045673},{"_id":"public/posts/51696/image-20201119143258482.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1606912045673},{"_id":"public/posts/51696/image-20201119143306540.png","hash":"4bb16d3424fd381b74facc8bf3eb31cdbd6e30fb","modified":1606912045673},{"_id":"public/posts/44111/token流程.png","hash":"663e42f2751a60608b7c386cc2b79de7a83eaa59","modified":1606912045673},{"_id":"public/posts/59937/归并.png","hash":"7e477c8ef3e620e7bbbee0f8dfc259c0835594fc","modified":1606912045673},{"_id":"public/css/main.css","hash":"3e6719a1431a2f77499bc2d42ef83ac4b5833bed","modified":1606912045673},{"_id":"public/js/bookmark.js","hash":"e45e1fbb7c6d645e9c410759486216e570d02bef","modified":1606912045673},{"_id":"public/js/algolia-search.js","hash":"7c6c966cdbe6e46d5f885606b0b9daf2ea3f757d","modified":1606912045673},{"_id":"public/js/local-search.js","hash":"9f4fe7bbe0f16be72d26ccb8b22bd33767f83cff","modified":1606912045673},{"_id":"public/js/motion.js","hash":"6d4bd07a6f8e1b4083119dca0acb5b289533b619","modified":1606912045673},{"_id":"public/js/schedule.js","hash":"ababd67895ce49049271601c6928fce56a1c6bbb","modified":1606912045673},{"_id":"public/js/schemes/muse.js","hash":"d7a6c12bb534810eb748d0ba28aff67cccf0bb3f","modified":1606912045673},{"_id":"public/js/next-boot.js","hash":"c2a04055d8edec03dc74e1c45d83bd3b51467de0","modified":1606912045673},{"_id":"public/js/utils.js","hash":"615d1c54d96f41fc3d4877b47566efab4a63f978","modified":1606912045673},{"_id":"public/posts/59937/冒泡2.png","hash":"eff6fca87cde5e81f64df96826fedf0ad7a96379","modified":1606912045673},{"_id":"public/posts/59937/希尔.png","hash":"2164437229a3bb9c4650a5da48ffb46bdd9d6759","modified":1606912045673},{"_id":"public/posts/11039/162c15a64b468fd8.gif","hash":"0bc5f3290e1336666109c2e53c022079e60a5b99","modified":1606912045673},{"_id":"public/posts/51696/7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg","hash":"2bff08ddb8eebe14d8db1b3c1b5a94350e7a0d55","modified":1606912045673},{"_id":"public/posts/57136/shrink.gif","hash":"05e46caaf92228e7983117335fa90c8fbc1af452","modified":1606912045673},{"_id":"public/posts/709/await.png","hash":"20e74d844b7183cea3050a61524bcdca2d424158","modified":1606912045673},{"_id":"public/posts/709/logtable.png","hash":"9628ac46f311ea279a8b30289a531ce11cc52929","modified":1606912045673},{"_id":"public/posts/44111/session.png","hash":"0af942e85d8235e49dd246578a2460d105ad274a","modified":1606912045673},{"_id":"public/posts/59937/归并2.png","hash":"aae9829f5910a044d6af378e0d9b55f2364692e8","modified":1606912045673},{"_id":"public/posts/40394/filezilla_file_test_vsftpd_18_04.png","hash":"44eb537acb379589f0e4d5d5fb899a984bbd8add","modified":1606912045673},{"_id":"public/posts/63891/1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png","hash":"72ad216301e0f59a2e88ac5021b19e5b9cbf0ee2","modified":1606912045673},{"_id":"public/posts/709/EagerEvaluation.png","hash":"7b7d6276e8cedc8391ff3073771182c4efc25146","modified":1606912045673},{"_id":"public/posts/40394/filezilla_certificate_vsftpd_three.png","hash":"7cf9825e8ae0359e16e53dedf52748343d464cff","modified":1606912045673},{"_id":"public/posts/40394/filezilla_file_upload_vsftpd_18_04.png","hash":"1bcba40fa8338f1ae18f782574fe97c950337e73","modified":1606912045673},{"_id":"public/posts/7878/8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg","hash":"16331bcd3cded7698a7fc4f7e1c4039d97582dc0","modified":1606912045673},{"_id":"public/posts/59937/冒泡.gif","hash":"e3316329fee9b7906fa857af53e2dcd053a039cd","modified":1606912045673},{"_id":"public/posts/51696/3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg","hash":"d676431a54f65a91a93ed01ddb2d3fe37a66a6ff","modified":1606912045673},{"_id":"public/posts/61674/562e47bd-abda-dae4-7765-68706b5a978e.png","hash":"0a6a55d6f7a3c059bed5e6f5508b7e785f0ad40b","modified":1606912045673},{"_id":"public/posts/8214/3e99e9b284d401c365c5044bc715ba44c9246f83.jpg","hash":"3e99e9b284d401c365c5044bc715ba44c9246f83","modified":1606912045673},{"_id":"public/posts/59937/插入.gif","hash":"29e9d8b18a7bac20f4e642968598fa48eb9f6199","modified":1606912045673},{"_id":"public/posts/59937/选择.gif","hash":"8e3b36259e7aeaf6a479aaef6165c247658b11e3","modified":1606912045673},{"_id":"public/posts/40394/ecs_config.png","hash":"38b86dd4aac458fe414b216dd2e33b99fff07906","modified":1606912045673},{"_id":"public/posts/61674/0349a840-ed31-06be-207c-e748883522b7.png","hash":"0ff2077ec568a30bb6348f54d865f48badcbdedf","modified":1606912045673},{"_id":"public/posts/40394/ecs_config-20201119135902728.png","hash":"38b86dd4aac458fe414b216dd2e33b99fff07906","modified":1606912045673},{"_id":"public/posts/11039/163001_02d3ddb2_1203301.png","hash":"c6accfeb445c79337431942327820d91e78b85b5","modified":1606912045673},{"_id":"public/posts/709/getEventListeners.gif","hash":"9ee64515c30ade10704bc7a6cf270a0c060daf68","modified":1606912045673},{"_id":"public/posts/709/node-debuger.gif","hash":"5028063156f80853d2aea068f2183893fa413cec","modified":1606912045673}],"Category":[{"name":"操作系统","_id":"cki7dxye40004khsr7uls0ald"},{"name":"前端","_id":"cki7dxye90009khsr5c7igxip"},{"name":"macOS","parent":"cki7dxye40004khsr7uls0ald","_id":"cki7dxyej000nkhsrfags5nf8"},{"name":"JS","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyel000ukhsr8u9o6dvj"},{"name":"CSS","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyem0010khsrckiy85na"},{"name":"后端","_id":"cki7dxyeq0014khsrdkzoc7lo"},{"name":"工具","_id":"cki7dxyeu001kkhsrh3408s8l"},{"name":"HTML","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyeu001okhsr6f7ncsyf"},{"name":"框架","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyev001qkhsrgirwbilm"},{"name":"构建工具","parent":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxyew001vkhsrd1x93aex"},{"name":"SQL","parent":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxyew001xkhsrekpsfexo"},{"name":"IDE","parent":"cki7dxyeu001kkhsrh3408s8l","_id":"cki7dxyex0020khsrg9w8dbcs"},{"name":"Vue","parent":"cki7dxyev001qkhsrgirwbilm","_id":"cki7dxyey0023khsr7qv47t45"},{"name":"构建工具","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfa002ikhsrfijd7sb4"},{"name":"解决方案","_id":"cki7dxyfe002ukhsr5bbi35sz"},{"name":"Node","parent":"cki7dxyfe002ukhsr5bbi35sz","_id":"cki7dxyfi0035khsr0ej372dy"},{"name":"浏览器","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfk003dkhsr0vamh09a"},{"name":"版本控制","parent":"cki7dxyeu001kkhsrh3408s8l","_id":"cki7dxyfn003mkhsr1a817dvu"},{"name":"性能优化","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfq003vkhsrfr4pdgki"},{"name":"npm","parent":"cki7dxyfa002ikhsrfijd7sb4","_id":"cki7dxyfs0043khsrg6ay9jh1"},{"name":"教程","_id":"cki7dxyfv004bkhsr1xiddpd1"},{"name":"博客","parent":"cki7dxyfv004bkhsr1xiddpd1","_id":"cki7dxyg0004rkhsr14lmhrae"},{"name":"设计","_id":"cki7dxyg70058khsr36ujbqy2"},{"name":"平面","parent":"cki7dxyg70058khsr36ujbqy2","_id":"cki7dxygc005kkhsr29kdegst"},{"name":"算法","parent":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygf005skhsr5njr1wb4"},{"name":"正则","parent":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygi0060khsr3zs8fqtb"},{"name":"服务器","parent":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygs007rkhsrbsyh9g8t"}],"Data":[],"Page":[{"title":"categories","date":"2020-11-21T04:29:33.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2020-11-21 12:29:33\ntype: \"categories\"\ncomments: false\n---\n","updated":"2020-11-21T04:30:08.618Z","path":"categories/index.html","layout":"page","_id":"cki7dxydx0000khsrbwo4clo1","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","date":"2020-11-21T06:28:32.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2020-11-21 14:28:32\ntype: 'tags'\ncomments: false\n---\n","updated":"2020-11-21T06:28:59.136Z","path":"tags/index.html","layout":"page","_id":"cki7dxye20002khsrhaoidml3","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"APFS、Mac OS 扩展、ExFAT格式有何区别","abbrlink":33677,"date":"2020-11-30T08:09:17.000Z","_content":"\n## **APFS**\n\n是**Apple 苹果系统特有的一种文件格式**，是 Mac OS High Sierra 操作系统版本时发布的；这种文件格式只能苹果 Mac OS 操作系统使用。（必须至少是 Mac OS High Sierra 版本以及更新的 Mac OS 才行，老版本的苹果系统不支持）这种系统非常牛逼，主要是**针对 PCIe 闪存和 SSD 固态硬盘进行了优化**；如果你是使用固态硬盘，且**不考虑硬盘上的东西在 Windows 操作系统中使用，那推荐使用 APFS 硬盘格式**。\n\n## **Mac OS 扩展格式**\n\nMac OS Extended 是以前苹果 Mac OS 使用的文件系统，现在基本上已经淘汰了。能用 APFS 就尽量使用 APFS，与其考虑**兼容旧版的 Mac OS**，不如让更新旧版的 Mac OS 系统。\n\n## **Mac OS 日志格式**\n\nMac OS 操作系统有一个自带的硬盘备份工具，叫 Time Machine（时间机器）；这种硬盘格式就是**专门用于 Time Machine**。如果是要**把这个硬盘作为备份盘**，那就格式化成这种硬盘格式。\n\n## **ExFAT**\n\n上面说的三种硬盘格式都是专门用于苹果的 Mac OS 操作系统的，而 ExFAT 则是不仅可用于 Mac OS 苹果操作系统，还可以用于 Windows 操作系统。**如果你想该硬盘的东西在 Windows 系统可以被读取，那就选择 ExFAT 操作系统**。\n","source":"_posts/APFS、Mac-OS-扩展、ExFAT格式有何区别.md","raw":"---\ntitle: APFS、Mac OS 扩展、ExFAT格式有何区别\ntags:\n  - macOS\ncategories:\n  - 操作系统\n  - macOS\nabbrlink: 33677\ndate: 2020-11-30 16:09:17\n---\n\n## **APFS**\n\n是**Apple 苹果系统特有的一种文件格式**，是 Mac OS High Sierra 操作系统版本时发布的；这种文件格式只能苹果 Mac OS 操作系统使用。（必须至少是 Mac OS High Sierra 版本以及更新的 Mac OS 才行，老版本的苹果系统不支持）这种系统非常牛逼，主要是**针对 PCIe 闪存和 SSD 固态硬盘进行了优化**；如果你是使用固态硬盘，且**不考虑硬盘上的东西在 Windows 操作系统中使用，那推荐使用 APFS 硬盘格式**。\n\n## **Mac OS 扩展格式**\n\nMac OS Extended 是以前苹果 Mac OS 使用的文件系统，现在基本上已经淘汰了。能用 APFS 就尽量使用 APFS，与其考虑**兼容旧版的 Mac OS**，不如让更新旧版的 Mac OS 系统。\n\n## **Mac OS 日志格式**\n\nMac OS 操作系统有一个自带的硬盘备份工具，叫 Time Machine（时间机器）；这种硬盘格式就是**专门用于 Time Machine**。如果是要**把这个硬盘作为备份盘**，那就格式化成这种硬盘格式。\n\n## **ExFAT**\n\n上面说的三种硬盘格式都是专门用于苹果的 Mac OS 操作系统的，而 ExFAT 则是不仅可用于 Mac OS 苹果操作系统，还可以用于 Windows 操作系统。**如果你想该硬盘的东西在 Windows 系统可以被读取，那就选择 ExFAT 操作系统**。\n","slug":"APFS、Mac-OS-扩展、ExFAT格式有何区别","published":1,"updated":"2020-11-30T08:12:51.271Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxydz0001khsr5ob6afvz","content":"<h2 id=\"APFS\"><a href=\"#APFS\" class=\"headerlink\" title=\"APFS\"></a><strong>APFS</strong></h2><p>是<strong>Apple 苹果系统特有的一种文件格式</strong>，是 Mac OS High Sierra 操作系统版本时发布的；这种文件格式只能苹果 Mac OS 操作系统使用。（必须至少是 Mac OS High Sierra 版本以及更新的 Mac OS 才行，老版本的苹果系统不支持）这种系统非常牛逼，主要是<strong>针对 PCIe 闪存和 SSD 固态硬盘进行了优化</strong>；如果你是使用固态硬盘，且<strong>不考虑硬盘上的东西在 Windows 操作系统中使用，那推荐使用 APFS 硬盘格式</strong>。</p>\n<h2 id=\"Mac-OS-扩展格式\"><a href=\"#Mac-OS-扩展格式\" class=\"headerlink\" title=\"Mac OS 扩展格式\"></a><strong>Mac OS 扩展格式</strong></h2><p>Mac OS Extended 是以前苹果 Mac OS 使用的文件系统，现在基本上已经淘汰了。能用 APFS 就尽量使用 APFS，与其考虑<strong>兼容旧版的 Mac OS</strong>，不如让更新旧版的 Mac OS 系统。</p>\n<h2 id=\"Mac-OS-日志格式\"><a href=\"#Mac-OS-日志格式\" class=\"headerlink\" title=\"Mac OS 日志格式\"></a><strong>Mac OS 日志格式</strong></h2><p>Mac OS 操作系统有一个自带的硬盘备份工具，叫 Time Machine（时间机器）；这种硬盘格式就是<strong>专门用于 Time Machine</strong>。如果是要<strong>把这个硬盘作为备份盘</strong>，那就格式化成这种硬盘格式。</p>\n<h2 id=\"ExFAT\"><a href=\"#ExFAT\" class=\"headerlink\" title=\"ExFAT\"></a><strong>ExFAT</strong></h2><p>上面说的三种硬盘格式都是专门用于苹果的 Mac OS 操作系统的，而 ExFAT 则是不仅可用于 Mac OS 苹果操作系统，还可以用于 Windows 操作系统。<strong>如果你想该硬盘的东西在 Windows 系统可以被读取，那就选择 ExFAT 操作系统</strong>。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"APFS\"><a href=\"#APFS\" class=\"headerlink\" title=\"APFS\"></a><strong>APFS</strong></h2><p>是<strong>Apple 苹果系统特有的一种文件格式</strong>，是 Mac OS High Sierra 操作系统版本时发布的；这种文件格式只能苹果 Mac OS 操作系统使用。（必须至少是 Mac OS High Sierra 版本以及更新的 Mac OS 才行，老版本的苹果系统不支持）这种系统非常牛逼，主要是<strong>针对 PCIe 闪存和 SSD 固态硬盘进行了优化</strong>；如果你是使用固态硬盘，且<strong>不考虑硬盘上的东西在 Windows 操作系统中使用，那推荐使用 APFS 硬盘格式</strong>。</p>\n<h2 id=\"Mac-OS-扩展格式\"><a href=\"#Mac-OS-扩展格式\" class=\"headerlink\" title=\"Mac OS 扩展格式\"></a><strong>Mac OS 扩展格式</strong></h2><p>Mac OS Extended 是以前苹果 Mac OS 使用的文件系统，现在基本上已经淘汰了。能用 APFS 就尽量使用 APFS，与其考虑<strong>兼容旧版的 Mac OS</strong>，不如让更新旧版的 Mac OS 系统。</p>\n<h2 id=\"Mac-OS-日志格式\"><a href=\"#Mac-OS-日志格式\" class=\"headerlink\" title=\"Mac OS 日志格式\"></a><strong>Mac OS 日志格式</strong></h2><p>Mac OS 操作系统有一个自带的硬盘备份工具，叫 Time Machine（时间机器）；这种硬盘格式就是<strong>专门用于 Time Machine</strong>。如果是要<strong>把这个硬盘作为备份盘</strong>，那就格式化成这种硬盘格式。</p>\n<h2 id=\"ExFAT\"><a href=\"#ExFAT\" class=\"headerlink\" title=\"ExFAT\"></a><strong>ExFAT</strong></h2><p>上面说的三种硬盘格式都是专门用于苹果的 Mac OS 操作系统的，而 ExFAT 则是不仅可用于 Mac OS 苹果操作系统，还可以用于 Windows 操作系统。<strong>如果你想该硬盘的东西在 Windows 系统可以被读取，那就选择 ExFAT 操作系统</strong>。</p>\n"},{"title":"BFC的理解与应用","abbrlink":9722,"date":"2018-12-02T15:26:19.000Z","_content":"\n## 定义\n\n先上MDN上对 BFC 的定义：\n\n> 块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n\n———— [BFC | MDN](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)\n\n不知道别人看完这段定义有何感受，反正我是懵逼的。不过我在这儿还是建议各位认真阅读上面给出的MDN链接至少两遍，这能让你对一个陌生的概念有一个基本的认知。\n\n<!-- more -->\n\n## 理解\n\n这里谈下我对BFC的理解：BFC其实是一个独立的，与外界隔离了的容器，容器里面的子元素不会影响到外面的元素，外面的也同样不会影响到容器内部的元素。我们可以利用这个特性，来解决一些布局上的问题。\n\n## BFC触发条件\n\nBFC的触发条件有很多，想要知道所有细节可以移步上面给出的 MDN 链接。这里我只列出一些常见触发条件：\n\n- 根元素（HTML元素）\n- 浮动元素（float不为none）\n- 绝对定位元素（position 为 absolute 或 fixed）\n- display 为 block, inline-block, flex, inline-flex, list-item, table\n- overflow 值不为 visible 的块元素\n\n## BFC布局特性\n\n对于一个BFC容器来说：\n\n- 内部相邻的两个元素垂直方向上的 margin 会发生重叠\n- 不会与外界的浮动元素产生交集，而是紧贴浮动元素的边缘\n- 元素从容器的顶端开始垂直地一个接一个地排列\n- 每一个元素的左外边缘（margin-left）会触碰到容器的左边缘（border-left）（如果设置了容器内部的元素从右到左的格式排布，则触碰的是右边缘）\n- 在计算它的高度时，还会检测内部浮动或者定位元素的高度\n\n## 实际应用\n\n### 清除浮动\n\n利用BFC “在计算它的高度时，还会检测内部浮动或者定位元素的高度” 这条特性，我们可以触发父元素的BFC来清除子元素浮动带来的影响。常见的用法是给父元素设置 `overflow: hidden` 样式（如果考虑IE6版本，还需设置 `zoom: 1`，因为IE6不支持 `overflow: hidden` 来清除浮动）：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC清除浮动\" src=\"https://codepen.io/JingW/embed/BbxEGP/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 解决外边距合并问题\n\n如果看上面标题不知道在说什么，请很戳[这里](http://www.w3school.com.cn/css/css_margin_collapsing.asp)了解详情。由于属于同一个BFC的两个相邻盒子的垂直margin会发生重叠，那么我们可以隔离开这两个元素，让它们不属于同一个BFC，这样就不会发生margin重叠了。\n\n<iframe height=\"265\" scrolling=\"no\" title=\"解决外边距合并问题\" src=\"https://codepen.io/JingW/embed/YgLbzY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 两栏布局，右边宽度自适应\n\n我们常常在开发中有这样类似的需求：两栏布局，左边定宽，右边自适应。\n这时我们就可以利用BFC特性来实现需求：左边设置定宽+左浮动；右边给自己加上 `overflow: hidden` 。\n原理就是：给元素设置BFC后，为了和浮动元素不产生任何交集，它会顺着浮动元素的边缘形成自己的封闭上下文。直接上代码看效果：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC实现两栏布局\" src=\"https://codepen.io/JingW/embed/MxGdEe/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n以上是我对BFC的一些理解以及实际应用，希望能够帮助大家了解BFC这个听起来摸不着头脑的东西。\n","source":"_posts/BFC的理解与应用.md","raw":"---\ntitle: BFC的理解与应用\ntags:\n  - 布局\n  - 技巧\ncategories:\n  - 前端\n  - CSS\nabbrlink: 9722\ndate: 2018-12-02 23:26:19\n---\n\n## 定义\n\n先上MDN上对 BFC 的定义：\n\n> 块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。\n\n———— [BFC | MDN](https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context)\n\n不知道别人看完这段定义有何感受，反正我是懵逼的。不过我在这儿还是建议各位认真阅读上面给出的MDN链接至少两遍，这能让你对一个陌生的概念有一个基本的认知。\n\n<!-- more -->\n\n## 理解\n\n这里谈下我对BFC的理解：BFC其实是一个独立的，与外界隔离了的容器，容器里面的子元素不会影响到外面的元素，外面的也同样不会影响到容器内部的元素。我们可以利用这个特性，来解决一些布局上的问题。\n\n## BFC触发条件\n\nBFC的触发条件有很多，想要知道所有细节可以移步上面给出的 MDN 链接。这里我只列出一些常见触发条件：\n\n- 根元素（HTML元素）\n- 浮动元素（float不为none）\n- 绝对定位元素（position 为 absolute 或 fixed）\n- display 为 block, inline-block, flex, inline-flex, list-item, table\n- overflow 值不为 visible 的块元素\n\n## BFC布局特性\n\n对于一个BFC容器来说：\n\n- 内部相邻的两个元素垂直方向上的 margin 会发生重叠\n- 不会与外界的浮动元素产生交集，而是紧贴浮动元素的边缘\n- 元素从容器的顶端开始垂直地一个接一个地排列\n- 每一个元素的左外边缘（margin-left）会触碰到容器的左边缘（border-left）（如果设置了容器内部的元素从右到左的格式排布，则触碰的是右边缘）\n- 在计算它的高度时，还会检测内部浮动或者定位元素的高度\n\n## 实际应用\n\n### 清除浮动\n\n利用BFC “在计算它的高度时，还会检测内部浮动或者定位元素的高度” 这条特性，我们可以触发父元素的BFC来清除子元素浮动带来的影响。常见的用法是给父元素设置 `overflow: hidden` 样式（如果考虑IE6版本，还需设置 `zoom: 1`，因为IE6不支持 `overflow: hidden` 来清除浮动）：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC清除浮动\" src=\"https://codepen.io/JingW/embed/BbxEGP/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 解决外边距合并问题\n\n如果看上面标题不知道在说什么，请很戳[这里](http://www.w3school.com.cn/css/css_margin_collapsing.asp)了解详情。由于属于同一个BFC的两个相邻盒子的垂直margin会发生重叠，那么我们可以隔离开这两个元素，让它们不属于同一个BFC，这样就不会发生margin重叠了。\n\n<iframe height=\"265\" scrolling=\"no\" title=\"解决外边距合并问题\" src=\"https://codepen.io/JingW/embed/YgLbzY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 两栏布局，右边宽度自适应\n\n我们常常在开发中有这样类似的需求：两栏布局，左边定宽，右边自适应。\n这时我们就可以利用BFC特性来实现需求：左边设置定宽+左浮动；右边给自己加上 `overflow: hidden` 。\n原理就是：给元素设置BFC后，为了和浮动元素不产生任何交集，它会顺着浮动元素的边缘形成自己的封闭上下文。直接上代码看效果：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC实现两栏布局\" src=\"https://codepen.io/JingW/embed/MxGdEe/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n以上是我对BFC的一些理解以及实际应用，希望能够帮助大家了解BFC这个听起来摸不着头脑的东西。\n","slug":"BFC的理解与应用","published":1,"updated":"2020-11-21T15:32:18.308Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxye20003khsr512y8qr8","content":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>先上MDN上对 BFC 的定义：</p>\n<blockquote>\n<p>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p>\n</blockquote>\n<p>———— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\">BFC | MDN</a></p>\n<p>不知道别人看完这段定义有何感受，反正我是懵逼的。不过我在这儿还是建议各位认真阅读上面给出的MDN链接至少两遍，这能让你对一个陌生的概念有一个基本的认知。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>这里谈下我对BFC的理解：BFC其实是一个独立的，与外界隔离了的容器，容器里面的子元素不会影响到外面的元素，外面的也同样不会影响到容器内部的元素。我们可以利用这个特性，来解决一些布局上的问题。</p>\n<h2 id=\"BFC触发条件\"><a href=\"#BFC触发条件\" class=\"headerlink\" title=\"BFC触发条件\"></a>BFC触发条件</h2><p>BFC的触发条件有很多，想要知道所有细节可以移步上面给出的 MDN 链接。这里我只列出一些常见触发条件：</p>\n<ul>\n<li>根元素（HTML元素）</li>\n<li>浮动元素（float不为none）</li>\n<li>绝对定位元素（position 为 absolute 或 fixed）</li>\n<li>display 为 block, inline-block, flex, inline-flex, list-item, table</li>\n<li>overflow 值不为 visible 的块元素</li>\n</ul>\n<h2 id=\"BFC布局特性\"><a href=\"#BFC布局特性\" class=\"headerlink\" title=\"BFC布局特性\"></a>BFC布局特性</h2><p>对于一个BFC容器来说：</p>\n<ul>\n<li>内部相邻的两个元素垂直方向上的 margin 会发生重叠</li>\n<li>不会与外界的浮动元素产生交集，而是紧贴浮动元素的边缘</li>\n<li>元素从容器的顶端开始垂直地一个接一个地排列</li>\n<li>每一个元素的左外边缘（margin-left）会触碰到容器的左边缘（border-left）（如果设置了容器内部的元素从右到左的格式排布，则触碰的是右边缘）</li>\n<li>在计算它的高度时，还会检测内部浮动或者定位元素的高度</li>\n</ul>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>利用BFC “在计算它的高度时，还会检测内部浮动或者定位元素的高度” 这条特性，我们可以触发父元素的BFC来清除子元素浮动带来的影响。常见的用法是给父元素设置 <code>overflow: hidden</code> 样式（如果考虑IE6版本，还需设置 <code>zoom: 1</code>，因为IE6不支持 <code>overflow: hidden</code> 来清除浮动）：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC清除浮动\" src=\"https://codepen.io/JingW/embed/BbxEGP/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"解决外边距合并问题\"><a href=\"#解决外边距合并问题\" class=\"headerlink\" title=\"解决外边距合并问题\"></a>解决外边距合并问题</h3><p>如果看上面标题不知道在说什么，请很戳<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\">这里</a>了解详情。由于属于同一个BFC的两个相邻盒子的垂直margin会发生重叠，那么我们可以隔离开这两个元素，让它们不属于同一个BFC，这样就不会发生margin重叠了。</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"解决外边距合并问题\" src=\"https://codepen.io/JingW/embed/YgLbzY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"两栏布局，右边宽度自适应\"><a href=\"#两栏布局，右边宽度自适应\" class=\"headerlink\" title=\"两栏布局，右边宽度自适应\"></a>两栏布局，右边宽度自适应</h3><p>我们常常在开发中有这样类似的需求：两栏布局，左边定宽，右边自适应。<br>这时我们就可以利用BFC特性来实现需求：左边设置定宽+左浮动；右边给自己加上 <code>overflow: hidden</code> 。<br>原理就是：给元素设置BFC后，为了和浮动元素不产生任何交集，它会顺着浮动元素的边缘形成自己的封闭上下文。直接上代码看效果：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC实现两栏布局\" src=\"https://codepen.io/JingW/embed/MxGdEe/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>以上是我对BFC的一些理解以及实际应用，希望能够帮助大家了解BFC这个听起来摸不着头脑的东西。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"定义\"><a href=\"#定义\" class=\"headerlink\" title=\"定义\"></a>定义</h2><p>先上MDN上对 BFC 的定义：</p>\n<blockquote>\n<p>块格式化上下文（Block Formatting Context，BFC） 是Web页面的可视化CSS渲染的一部分，是块盒子的布局过程发生的区域，也是浮动元素与其他元素交互的区域。</p>\n</blockquote>\n<p>———— <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Block_formatting_context\">BFC | MDN</a></p>\n<p>不知道别人看完这段定义有何感受，反正我是懵逼的。不过我在这儿还是建议各位认真阅读上面给出的MDN链接至少两遍，这能让你对一个陌生的概念有一个基本的认知。</p>","more":"<h2 id=\"理解\"><a href=\"#理解\" class=\"headerlink\" title=\"理解\"></a>理解</h2><p>这里谈下我对BFC的理解：BFC其实是一个独立的，与外界隔离了的容器，容器里面的子元素不会影响到外面的元素，外面的也同样不会影响到容器内部的元素。我们可以利用这个特性，来解决一些布局上的问题。</p>\n<h2 id=\"BFC触发条件\"><a href=\"#BFC触发条件\" class=\"headerlink\" title=\"BFC触发条件\"></a>BFC触发条件</h2><p>BFC的触发条件有很多，想要知道所有细节可以移步上面给出的 MDN 链接。这里我只列出一些常见触发条件：</p>\n<ul>\n<li>根元素（HTML元素）</li>\n<li>浮动元素（float不为none）</li>\n<li>绝对定位元素（position 为 absolute 或 fixed）</li>\n<li>display 为 block, inline-block, flex, inline-flex, list-item, table</li>\n<li>overflow 值不为 visible 的块元素</li>\n</ul>\n<h2 id=\"BFC布局特性\"><a href=\"#BFC布局特性\" class=\"headerlink\" title=\"BFC布局特性\"></a>BFC布局特性</h2><p>对于一个BFC容器来说：</p>\n<ul>\n<li>内部相邻的两个元素垂直方向上的 margin 会发生重叠</li>\n<li>不会与外界的浮动元素产生交集，而是紧贴浮动元素的边缘</li>\n<li>元素从容器的顶端开始垂直地一个接一个地排列</li>\n<li>每一个元素的左外边缘（margin-left）会触碰到容器的左边缘（border-left）（如果设置了容器内部的元素从右到左的格式排布，则触碰的是右边缘）</li>\n<li>在计算它的高度时，还会检测内部浮动或者定位元素的高度</li>\n</ul>\n<h2 id=\"实际应用\"><a href=\"#实际应用\" class=\"headerlink\" title=\"实际应用\"></a>实际应用</h2><h3 id=\"清除浮动\"><a href=\"#清除浮动\" class=\"headerlink\" title=\"清除浮动\"></a>清除浮动</h3><p>利用BFC “在计算它的高度时，还会检测内部浮动或者定位元素的高度” 这条特性，我们可以触发父元素的BFC来清除子元素浮动带来的影响。常见的用法是给父元素设置 <code>overflow: hidden</code> 样式（如果考虑IE6版本，还需设置 <code>zoom: 1</code>，因为IE6不支持 <code>overflow: hidden</code> 来清除浮动）：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC清除浮动\" src=\"https://codepen.io/JingW/embed/BbxEGP/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"解决外边距合并问题\"><a href=\"#解决外边距合并问题\" class=\"headerlink\" title=\"解决外边距合并问题\"></a>解决外边距合并问题</h3><p>如果看上面标题不知道在说什么，请很戳<a href=\"http://www.w3school.com.cn/css/css_margin_collapsing.asp\">这里</a>了解详情。由于属于同一个BFC的两个相邻盒子的垂直margin会发生重叠，那么我们可以隔离开这两个元素，让它们不属于同一个BFC，这样就不会发生margin重叠了。</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"解决外边距合并问题\" src=\"https://codepen.io/JingW/embed/YgLbzY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"两栏布局，右边宽度自适应\"><a href=\"#两栏布局，右边宽度自适应\" class=\"headerlink\" title=\"两栏布局，右边宽度自适应\"></a>两栏布局，右边宽度自适应</h3><p>我们常常在开发中有这样类似的需求：两栏布局，左边定宽，右边自适应。<br>这时我们就可以利用BFC特性来实现需求：左边设置定宽+左浮动；右边给自己加上 <code>overflow: hidden</code> 。<br>原理就是：给元素设置BFC后，为了和浮动元素不产生任何交集，它会顺着浮动元素的边缘形成自己的封闭上下文。直接上代码看效果：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"利用BFC实现两栏布局\" src=\"https://codepen.io/JingW/embed/MxGdEe/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>以上是我对BFC的一些理解以及实际应用，希望能够帮助大家了解BFC这个听起来摸不着头脑的东西。</p>"},{"title":"CSS3伪元素实现自定义复选框","abbrlink":3583,"date":"2020-06-19T07:11:54.000Z","_content":"\n我们都知道原生的复选框控件样式极难自定义，这对于工程师实现设计稿的难度加大了一大截。css3 的出现，增加了:checked 选择器，因此我们可以利用:checked 和 label 来实现各式各样的表单选择控件，接下来让我们来看看如何实现吧！\n\n<!-- more -->\n\n我们来看看如何实现上述自定义的复选框：\n\n```html\n<style>\n  .check-wrap {\n    text-align: center;\n  }\n  .checkbox {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n  }\n  .checkbox[type='checkbox']:focus + label::before {\n    box-shadow: 0 0 0.6em #06c;\n  }\n  .checkbox[type='checkbox'] + label::before {\n    content: '\\a0'; /* 不换行空格 */\n    display: inline-block;\n    margin-right: 0.3em;\n    width: 2em;\n    height: 2em;\n    border-radius: 0.3em;\n    vertical-align: middle;\n    line-height: 2em; /* 关键 */\n    font-size: 20px;\n    text-align: center;\n    color: #fff;\n    background: gray;\n  }\n  .checkbox[type='checkbox']:checked + label::before {\n    content: '\\2713'; /* 对勾 */\n    background: black;\n  }\n\n  label {\n    margin-right: 40px;\n    font-size: 20px;\n  }\n</style>\n<div class=\"check-wrap\">\n  <input type=\"checkbox\" class=\"checkbox\" id=\"check-1\" />\n  <label for=\"check-1\">生男孩</label>\n  <input type=\"checkbox\" class=\"checkbox\" id=\"check-2\" />\n  <label for=\"check-2\">生女孩</label>\n</div>\n```\n\n{% asset_img checkbox-effect.png checkbox-effect %}\n\n这里为了隐藏原生的 checkbox 控件，我们用了 clip: rect(0,0,0,0)进行截取，然后使用 checkbox 的伪类:checked 来实现交互。\n\n接下来扩展一下，我们来实现自定义开关：\n\n{% asset_img checkbox-effect2.png checkbox-effect2 %}\n\n这里原理是一样的，只不过样式做了改动，直接上代码：\n\n```html\n<style>\n  .check-wrap {\n    margin-bottom: 20px;\n    text-align: center;\n  }\n  .switch {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n  }\n\n  .switch[type='checkbox'] + label {\n    width: 6em;\n    height: 3em;\n    padding: 0.3em;\n    border-radius: 0.3em;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    vertical-align: middle;\n    line-height: 2em; /* 关键 */\n    font-size: 20px;\n    text-align: center;\n    color: #fff;\n    box-shadow: 0 1px white inset;\n    background-color: #ccc;\n    background-image: linear-gradient(#ddd, #bbb);\n  }\n  .switch[type='checkbox']:checked + label {\n    box-shadow: 0.05em 0.1em 0.2em rgba(0, 0, 0, 0.6) inset;\n    border-color: rgba(0, 0, 0, 0.3);\n    background: #bbb;\n  }\n\n  label {\n    margin-right: 40px;\n    font-size: 14px;\n  }\n\n  .switch-an {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n  }\n\n  .switch-an[type='checkbox'] + label {\n    position: relative;\n    display: inline-block;\n    width: 5em;\n    height: 2em;\n    border-radius: 1em;\n    color: #fff;\n    background: #06c;\n    text-align: left;\n  }\n\n  .switch-an[type='checkbox'] + label::before {\n    content: '';\n    width: 2em;\n    height: 2em;\n    position: absolute;\n    left: 0;\n    border-radius: 100%;\n    vertical-align: middle;\n    background-color: #fff;\n    transition: left 0.3s;\n  }\n  .switch-an[type='checkbox'] + label::after {\n    content: 'OFF';\n    margin-left: 2.6em;\n  }\n  .switch-an[type='checkbox']:checked + label::before {\n    transition: left 0.3s;\n    left: 3em;\n  }\n  .switch-an[type='checkbox']:checked + label::after {\n    content: 'NO';\n    margin-left: 0.6em;\n  }\n</style>\n<div class=\"check-wrap\">\n  <input type=\"checkbox\" class=\"switch\" id=\"switch-1\" />\n  <label for=\"switch-1\">生男孩</label>\n  <input type=\"checkbox\" class=\"switch\" id=\"switch-2\" />\n  <label for=\"switch-2\">生女孩</label>\n</div>\n\n<div class=\"check-wrap\">\n  <input type=\"checkbox\" class=\"switch-an\" id=\"switch-an-1\" />\n  <label for=\"switch-an-1\"></label>\n</div>\n```\n","source":"_posts/CSS3伪元素实现自定义复选框.md","raw":"---\ntitle: CSS3伪元素实现自定义复选框\ntags:\n  - CSS3\n  - 转载\ncategories:\n  - 前端\n  - CSS\nabbrlink: 3583\ndate: 2020-06-19 15:11:54\n---\n\n我们都知道原生的复选框控件样式极难自定义，这对于工程师实现设计稿的难度加大了一大截。css3 的出现，增加了:checked 选择器，因此我们可以利用:checked 和 label 来实现各式各样的表单选择控件，接下来让我们来看看如何实现吧！\n\n<!-- more -->\n\n我们来看看如何实现上述自定义的复选框：\n\n```html\n<style>\n  .check-wrap {\n    text-align: center;\n  }\n  .checkbox {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n  }\n  .checkbox[type='checkbox']:focus + label::before {\n    box-shadow: 0 0 0.6em #06c;\n  }\n  .checkbox[type='checkbox'] + label::before {\n    content: '\\a0'; /* 不换行空格 */\n    display: inline-block;\n    margin-right: 0.3em;\n    width: 2em;\n    height: 2em;\n    border-radius: 0.3em;\n    vertical-align: middle;\n    line-height: 2em; /* 关键 */\n    font-size: 20px;\n    text-align: center;\n    color: #fff;\n    background: gray;\n  }\n  .checkbox[type='checkbox']:checked + label::before {\n    content: '\\2713'; /* 对勾 */\n    background: black;\n  }\n\n  label {\n    margin-right: 40px;\n    font-size: 20px;\n  }\n</style>\n<div class=\"check-wrap\">\n  <input type=\"checkbox\" class=\"checkbox\" id=\"check-1\" />\n  <label for=\"check-1\">生男孩</label>\n  <input type=\"checkbox\" class=\"checkbox\" id=\"check-2\" />\n  <label for=\"check-2\">生女孩</label>\n</div>\n```\n\n{% asset_img checkbox-effect.png checkbox-effect %}\n\n这里为了隐藏原生的 checkbox 控件，我们用了 clip: rect(0,0,0,0)进行截取，然后使用 checkbox 的伪类:checked 来实现交互。\n\n接下来扩展一下，我们来实现自定义开关：\n\n{% asset_img checkbox-effect2.png checkbox-effect2 %}\n\n这里原理是一样的，只不过样式做了改动，直接上代码：\n\n```html\n<style>\n  .check-wrap {\n    margin-bottom: 20px;\n    text-align: center;\n  }\n  .switch {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n  }\n\n  .switch[type='checkbox'] + label {\n    width: 6em;\n    height: 3em;\n    padding: 0.3em;\n    border-radius: 0.3em;\n    border: 1px solid rgba(0, 0, 0, 0.2);\n    vertical-align: middle;\n    line-height: 2em; /* 关键 */\n    font-size: 20px;\n    text-align: center;\n    color: #fff;\n    box-shadow: 0 1px white inset;\n    background-color: #ccc;\n    background-image: linear-gradient(#ddd, #bbb);\n  }\n  .switch[type='checkbox']:checked + label {\n    box-shadow: 0.05em 0.1em 0.2em rgba(0, 0, 0, 0.6) inset;\n    border-color: rgba(0, 0, 0, 0.3);\n    background: #bbb;\n  }\n\n  label {\n    margin-right: 40px;\n    font-size: 14px;\n  }\n\n  .switch-an {\n    position: absolute;\n    clip: rect(0, 0, 0, 0);\n  }\n\n  .switch-an[type='checkbox'] + label {\n    position: relative;\n    display: inline-block;\n    width: 5em;\n    height: 2em;\n    border-radius: 1em;\n    color: #fff;\n    background: #06c;\n    text-align: left;\n  }\n\n  .switch-an[type='checkbox'] + label::before {\n    content: '';\n    width: 2em;\n    height: 2em;\n    position: absolute;\n    left: 0;\n    border-radius: 100%;\n    vertical-align: middle;\n    background-color: #fff;\n    transition: left 0.3s;\n  }\n  .switch-an[type='checkbox'] + label::after {\n    content: 'OFF';\n    margin-left: 2.6em;\n  }\n  .switch-an[type='checkbox']:checked + label::before {\n    transition: left 0.3s;\n    left: 3em;\n  }\n  .switch-an[type='checkbox']:checked + label::after {\n    content: 'NO';\n    margin-left: 0.6em;\n  }\n</style>\n<div class=\"check-wrap\">\n  <input type=\"checkbox\" class=\"switch\" id=\"switch-1\" />\n  <label for=\"switch-1\">生男孩</label>\n  <input type=\"checkbox\" class=\"switch\" id=\"switch-2\" />\n  <label for=\"switch-2\">生女孩</label>\n</div>\n\n<div class=\"check-wrap\">\n  <input type=\"checkbox\" class=\"switch-an\" id=\"switch-an-1\" />\n  <label for=\"switch-an-1\"></label>\n</div>\n```\n","slug":"CSS3伪元素实现自定义复选框","published":1,"updated":"2020-12-02T02:31:31.924Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxye60006khsrh5se263e","content":"<p>我们都知道原生的复选框控件样式极难自定义，这对于工程师实现设计稿的难度加大了一大截。css3 的出现，增加了:checked 选择器，因此我们可以利用:checked 和 label 来实现各式各样的表单选择控件，接下来让我们来看看如何实现吧！</p>\n<a id=\"more\"></a>\n\n<p>我们来看看如何实现上述自定义的复选框：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.check-wrap</span> &#123;</span></span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    clip: rect(0, 0, 0, 0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:focus</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">box-shadow</span>: 0 0 0.6<span class=\"selector-tag\">em</span> <span class=\"selector-id\">#06c</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;\\a0&#x27;; /* 不换行空格 */</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin-right: 0.3em;</span><br><span class=\"line\">    width: 2em;</span><br><span class=\"line\">    height: 2em;</span><br><span class=\"line\">    border-radius: 0.3em;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 2<span class=\"selector-tag\">em</span>; <span class=\"comment\">/* 关键 */</span></span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">    background: gray;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;\\2713&#x27;; /* 对勾 */</span><br><span class=\"line\">    background: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  label &#123;</span><br><span class=\"line\">    margin-right: 40px;</span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;check-1&quot;</span>&gt;</span>生男孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-2&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;check-2&quot;</span>&gt;</span>生女孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里为了隐藏原生的 checkbox 控件，我们用了 clip: rect(0,0,0,0)进行截取，然后使用 checkbox 的伪类:checked 来实现交互。</p>\n<p>接下来扩展一下，我们来实现自定义开关：</p>\n\n\n<p>这里原理是一样的，只不过样式做了改动，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.check-wrap</span> &#123;</span></span><br><span class=\"line\">    margin-bottom: 20px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    clip: rect(0, 0, 0, 0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\">    width: 6em;</span><br><span class=\"line\">    height: 3em;</span><br><span class=\"line\">    padding: 0.3em;</span><br><span class=\"line\">    border-radius: 0.3em;</span><br><span class=\"line\">    border: 1px solid rgba(0, 0, 0, 0.2);</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 2<span class=\"selector-tag\">em</span>; <span class=\"comment\">/* 关键 */</span></span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">    box-shadow: 0 1px white inset;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#ddd</span>, <span class=\"selector-id\">#bbb</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\">    box-shadow: 0.05em 0.1em 0.2em rgba(0, 0, 0, 0.6) inset;</span><br><span class=\"line\">    border-color: rgba(0, 0, 0, 0.3);</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#bbb</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  label &#123;</span><br><span class=\"line\">    margin-right: 40px;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    clip: rect(0, 0, 0, 0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 5em;</span><br><span class=\"line\">    height: 2em;</span><br><span class=\"line\">    border-radius: 1em;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#06c</span>;</span></span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;&#x27;;</span><br><span class=\"line\">    width: 2em;</span><br><span class=\"line\">    height: 2em;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    border-radius: 100%;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">    transition: left 0.3s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;OFF&#x27;;</span><br><span class=\"line\">    margin-left: 2.6em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    transition: left 0.3s;</span><br><span class=\"line\">    left: 3em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;NO&#x27;;</span><br><span class=\"line\">    margin-left: 0.6em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;switch&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;switch-1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;switch-1&quot;</span>&gt;</span>生男孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;switch&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;switch-2&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;switch-2&quot;</span>&gt;</span>生女孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;switch-an&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;switch-an-1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;switch-an-1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>我们都知道原生的复选框控件样式极难自定义，这对于工程师实现设计稿的难度加大了一大截。css3 的出现，增加了:checked 选择器，因此我们可以利用:checked 和 label 来实现各式各样的表单选择控件，接下来让我们来看看如何实现吧！</p>","more":"<p>我们来看看如何实现上述自定义的复选框：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.check-wrap</span> &#123;</span></span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    clip: rect(0, 0, 0, 0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:focus</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">box-shadow</span>: 0 0 0.6<span class=\"selector-tag\">em</span> <span class=\"selector-id\">#06c</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;\\a0&#x27;; /* 不换行空格 */</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    margin-right: 0.3em;</span><br><span class=\"line\">    width: 2em;</span><br><span class=\"line\">    height: 2em;</span><br><span class=\"line\">    border-radius: 0.3em;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 2<span class=\"selector-tag\">em</span>; <span class=\"comment\">/* 关键 */</span></span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">    background: gray;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.checkbox</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;\\2713&#x27;; /* 对勾 */</span><br><span class=\"line\">    background: black;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  label &#123;</span><br><span class=\"line\">    margin-right: 40px;</span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;check-1&quot;</span>&gt;</span>生男孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;check-2&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;check-2&quot;</span>&gt;</span>生女孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n\n\n<p>这里为了隐藏原生的 checkbox 控件，我们用了 clip: rect(0,0,0,0)进行截取，然后使用 checkbox 的伪类:checked 来实现交互。</p>\n<p>接下来扩展一下，我们来实现自定义开关：</p>\n\n\n<p>这里原理是一样的，只不过样式做了改动，直接上代码：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.check-wrap</span> &#123;</span></span><br><span class=\"line\">    margin-bottom: 20px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    clip: rect(0, 0, 0, 0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\">    width: 6em;</span><br><span class=\"line\">    height: 3em;</span><br><span class=\"line\">    padding: 0.3em;</span><br><span class=\"line\">    border-radius: 0.3em;</span><br><span class=\"line\">    border: 1px solid rgba(0, 0, 0, 0.2);</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">line-height</span>: 2<span class=\"selector-tag\">em</span>; <span class=\"comment\">/* 关键 */</span></span></span><br><span class=\"line\">    font-size: 20px;</span><br><span class=\"line\">    text-align: center;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">    box-shadow: 0 1px white inset;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#ccc</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-image</span>: <span class=\"selector-tag\">linear-gradient</span>(<span class=\"selector-id\">#ddd</span>, <span class=\"selector-id\">#bbb</span>);</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\">    box-shadow: 0.05em 0.1em 0.2em rgba(0, 0, 0, 0.6) inset;</span><br><span class=\"line\">    border-color: rgba(0, 0, 0, 0.3);</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#bbb</span>;</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  label &#123;</span><br><span class=\"line\">    margin-right: 40px;</span><br><span class=\"line\">    font-size: 14px;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span> &#123;</span></span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    clip: rect(0, 0, 0, 0);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span> &#123;</span></span><br><span class=\"line\">    position: relative;</span><br><span class=\"line\">    display: inline-block;</span><br><span class=\"line\">    width: 5em;</span><br><span class=\"line\">    height: 2em;</span><br><span class=\"line\">    border-radius: 1em;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background</span>: <span class=\"selector-id\">#06c</span>;</span></span><br><span class=\"line\">    text-align: left;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;&#x27;;</span><br><span class=\"line\">    width: 2em;</span><br><span class=\"line\">    height: 2em;</span><br><span class=\"line\">    position: absolute;</span><br><span class=\"line\">    left: 0;</span><br><span class=\"line\">    border-radius: 100%;</span><br><span class=\"line\">    vertical-align: middle;</span><br><span class=\"line\"><span class=\"css\">    <span class=\"selector-tag\">background-color</span>: <span class=\"selector-id\">#fff</span>;</span></span><br><span class=\"line\">    transition: left 0.3s;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;OFF&#x27;;</span><br><span class=\"line\">    margin-left: 2.6em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::before</span> &#123;</span></span><br><span class=\"line\">    transition: left 0.3s;</span><br><span class=\"line\">    left: 3em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"css\">  <span class=\"selector-class\">.switch-an</span><span class=\"selector-attr\">[type=<span class=\"string\">&#x27;checkbox&#x27;</span>]</span><span class=\"selector-pseudo\">:checked</span> + <span class=\"selector-tag\">label</span><span class=\"selector-pseudo\">::after</span> &#123;</span></span><br><span class=\"line\">    content: &#x27;NO&#x27;;</span><br><span class=\"line\">    margin-left: 0.6em;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">style</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;switch&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;switch-1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;switch-1&quot;</span>&gt;</span>生男孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;switch&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;switch-2&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;switch-2&quot;</span>&gt;</span>生女孩<span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;check-wrap&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;checkbox&quot;</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;switch-an&quot;</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;switch-an-1&quot;</span> /&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">label</span> <span class=\"attr\">for</span>=<span class=\"string\">&quot;switch-an-1&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">label</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"HTML5的自定义属性","abbrlink":39974,"date":"2019-02-10T01:28:00.000Z","_content":"\n> 在 HTML5 中我们可以自定义属性，其格式为 `data-*=\"\"`\n\n```html\n<div id=\"demo\" data-my-name=\"sw\" data-age=\"10\">\n<script>\n/*\n  Node.dataset 是以对象形式存在的，当我们为同一个 DOM 节点指定了多个自定义属性时，\n  Node.dataset 则存储了所有的自定义属性的值。\n  */\nvar demo = document.querySelector(\"#demo\");\n//获取\n//注：当我们如下格式设置时，则需要以驼峰格式才能正确获取\nvar name = demo.dataset['myName'];\nvar age = demo.dataset['age'];\n//设置\ndemo.dataset['name'] = 'web developer';\n<script/>\n```\n\n**资源**\n\n[mdn - data-*](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/data-*)","source":"_posts/HTML5的自定义属性.md","raw":"---\ntitle: HTML5的自定义属性\ncategories:\n  - 前端\n  - HTML\nabbrlink: 39974\ndate: 2019-02-10 09:28:00\ntags:\n---\n\n> 在 HTML5 中我们可以自定义属性，其格式为 `data-*=\"\"`\n\n```html\n<div id=\"demo\" data-my-name=\"sw\" data-age=\"10\">\n<script>\n/*\n  Node.dataset 是以对象形式存在的，当我们为同一个 DOM 节点指定了多个自定义属性时，\n  Node.dataset 则存储了所有的自定义属性的值。\n  */\nvar demo = document.querySelector(\"#demo\");\n//获取\n//注：当我们如下格式设置时，则需要以驼峰格式才能正确获取\nvar name = demo.dataset['myName'];\nvar age = demo.dataset['age'];\n//设置\ndemo.dataset['name'] = 'web developer';\n<script/>\n```\n\n**资源**\n\n[mdn - data-*](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/data-*)","slug":"HTML5的自定义属性","published":1,"updated":"2020-11-22T01:31:24.850Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxye80007khsr8u7y5msr","content":"<blockquote>\n<p>在 HTML5 中我们可以自定义属性，其格式为 <code>data-*=&quot;&quot;</code></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">data-my-name</span>=<span class=\"string\">&quot;sw&quot;</span> <span class=\"attr\">data-age</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">/*</span><br><span class=\"line\">  Node.dataset 是以对象形式存在的，当我们为同一个 DOM 节点指定了多个自定义属性时，</span><br><span class=\"line\">  Node.dataset 则存储了所有的自定义属性的值。</span><br><span class=\"line\">  */</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> demo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#demo&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//获取</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//注：当我们如下格式设置时，则需要以驼峰格式才能正确获取</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> name = demo.dataset[<span class=\"string\">&#x27;myName&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> age = demo.dataset[<span class=\"string\">&#x27;age&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//设置</span></span></span><br><span class=\"line\"><span class=\"javascript\">demo.dataset[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;web developer&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>/&gt;</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>资源</strong></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/data-*\">mdn - data-*</a></p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>在 HTML5 中我们可以自定义属性，其格式为 <code>data-*=&quot;&quot;</code></p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;demo&quot;</span> <span class=\"attr\">data-my-name</span>=<span class=\"string\">&quot;sw&quot;</span> <span class=\"attr\">data-age</span>=<span class=\"string\">&quot;10&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">/*</span><br><span class=\"line\">  Node.dataset 是以对象形式存在的，当我们为同一个 DOM 节点指定了多个自定义属性时，</span><br><span class=\"line\">  Node.dataset 则存储了所有的自定义属性的值。</span><br><span class=\"line\">  */</span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> demo = <span class=\"built_in\">document</span>.querySelector(<span class=\"string\">&quot;#demo&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//获取</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//注：当我们如下格式设置时，则需要以驼峰格式才能正确获取</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> name = demo.dataset[<span class=\"string\">&#x27;myName&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">var</span> age = demo.dataset[<span class=\"string\">&#x27;age&#x27;</span>];</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"comment\">//设置</span></span></span><br><span class=\"line\"><span class=\"javascript\">demo.dataset[<span class=\"string\">&#x27;name&#x27;</span>] = <span class=\"string\">&#x27;web developer&#x27;</span>;</span></span><br><span class=\"line\"><span class=\"handlebars\"><span class=\"xml\"><span class=\"tag\">&lt;<span class=\"name\">script</span>/&gt;</span></span></span></span><br></pre></td></tr></table></figure>\n\n<p><strong>资源</strong></p>\n<p><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Global_attributes/data-*\">mdn - data-*</a></p>\n"},{"title":"JS中如何实现继承","abbrlink":2751,"date":"2019-01-01T15:45:23.000Z","_content":"\n## 组合继承（原型链 + 借用构造函数）\n\n```js\n// 组合继承:原型继承+借用（调用）构造函数继承\nfunction Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\nPerson.prototype.sayHi = function () {\n  console.log(\"Hello world\");\n};\nfunction Student(name, age, sex, score) {\n  // 借用构造函数\n  Person.call(this,name,age,sex);\n  this.score = score;\n}\n// 改变原型指向----继承\n// 我们让 Student.prototype 指向一个Person的实例对象\n// 这个对象的__proto__指向的是Person.prototype\n// 所以我们就可以借助这个实例对象拿到sayHi方法，实现继承\nStudent.prototype=new Person();\nStudent.prototype.eat = function () {\n  console.log(\"吃东西\");\n};\nvar stu = new Student(\"Lance\", 20, \"男\", \"100分\");\nstu.sayHi();\nvar stu2 = new Student(\"Jerry\", 19, \"男\", \"101分\");\nstu2.eat();\n\n//属性和方法都被继承了\n```\n\n<!-- more -->\n\n## 寄生组合继承（组合继承升级版）\n\n```js\nfunction object(o) {\n  function F(){}\n  F.prototype = o;\n  return new F();\n}\n\nfunction inheritPrototype(subType, superType) {\n    var prototype = object(superType.prototype); // 创建了父类原型的浅复制\n    prototype.constructor = subType;             // 修正原型的构造函数\n    subType.prototype = prototype;               // 将子类的原型替换为这个原型\n}\n \nfunction SuperType(name){\n    this.name = name;\n    this.colors = [\"red\", \"blue\", \"green\"];\n}\n \nSuperType.prototype.sayName = function() {\n    alert(this.name);\n};\n \nfunction SubType(name, age) {\n    SuperType.call(this, name);\n    this.age = age;\n}\n// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function() {\n    alert(this.age);\n}\n```\n\n## ES6继承写法\n\n```js\nclass Person {\n  constructor(name, age) {this.name=name;this.age=age}\n  sayHi() {}\n}\nclass Student extends Person {\n  constructor(name, age, weight) {\n    super(name, age); this.weight = weight;\n  }\n  run() {}\n}\n```\n\n## 在原型链继承时，为什么不直接 `Student.prototype = Person.prototype` ？\n\n因为对象的赋值只是引用的赋值, 上面两者都指向同一个内存地址，只要随便通过1个途径就能修改该内存地址的对象，这样子类就无法单独扩展方法，而且会影响父类。\n\n## 组合继承的缺点\n\n缺点就是调用了两次父类的构造函数。\n第一次给子类的原型添加了父类构造函数中的属性方法；第二次又给子类的构造函数添加了父类的构造函数的属性方法，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费：\n\n```js\nfunction SuperType() {\n    this.name = 'parent';\n    this.arr = [1, 2, 3];\n}\n \nSuperType.prototype.say = function() { \n    console.log('this is parent')\n}\n \nfunction SubType() {\n    SuperType.call(this) // 第二次调用SuperType\n}\n \nSubType.prototype = new SuperType() // 第一次调用SuperType\n```\n","source":"_posts/JS中如何实现继承.md","raw":"---\ntitle: JS中如何实现继承\ntags:\n  - 继承\ncategories:\n  - 前端\n  - JS\nabbrlink: 2751\ndate: 2019-01-01 23:45:23\n---\n\n## 组合继承（原型链 + 借用构造函数）\n\n```js\n// 组合继承:原型继承+借用（调用）构造函数继承\nfunction Person(name, age, sex) {\n  this.name = name;\n  this.age = age;\n  this.sex = sex;\n}\nPerson.prototype.sayHi = function () {\n  console.log(\"Hello world\");\n};\nfunction Student(name, age, sex, score) {\n  // 借用构造函数\n  Person.call(this,name,age,sex);\n  this.score = score;\n}\n// 改变原型指向----继承\n// 我们让 Student.prototype 指向一个Person的实例对象\n// 这个对象的__proto__指向的是Person.prototype\n// 所以我们就可以借助这个实例对象拿到sayHi方法，实现继承\nStudent.prototype=new Person();\nStudent.prototype.eat = function () {\n  console.log(\"吃东西\");\n};\nvar stu = new Student(\"Lance\", 20, \"男\", \"100分\");\nstu.sayHi();\nvar stu2 = new Student(\"Jerry\", 19, \"男\", \"101分\");\nstu2.eat();\n\n//属性和方法都被继承了\n```\n\n<!-- more -->\n\n## 寄生组合继承（组合继承升级版）\n\n```js\nfunction object(o) {\n  function F(){}\n  F.prototype = o;\n  return new F();\n}\n\nfunction inheritPrototype(subType, superType) {\n    var prototype = object(superType.prototype); // 创建了父类原型的浅复制\n    prototype.constructor = subType;             // 修正原型的构造函数\n    subType.prototype = prototype;               // 将子类的原型替换为这个原型\n}\n \nfunction SuperType(name){\n    this.name = name;\n    this.colors = [\"red\", \"blue\", \"green\"];\n}\n \nSuperType.prototype.sayName = function() {\n    alert(this.name);\n};\n \nfunction SubType(name, age) {\n    SuperType.call(this, name);\n    this.age = age;\n}\n// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费\ninheritPrototype(SubType, SuperType);\nSubType.prototype.sayAge = function() {\n    alert(this.age);\n}\n```\n\n## ES6继承写法\n\n```js\nclass Person {\n  constructor(name, age) {this.name=name;this.age=age}\n  sayHi() {}\n}\nclass Student extends Person {\n  constructor(name, age, weight) {\n    super(name, age); this.weight = weight;\n  }\n  run() {}\n}\n```\n\n## 在原型链继承时，为什么不直接 `Student.prototype = Person.prototype` ？\n\n因为对象的赋值只是引用的赋值, 上面两者都指向同一个内存地址，只要随便通过1个途径就能修改该内存地址的对象，这样子类就无法单独扩展方法，而且会影响父类。\n\n## 组合继承的缺点\n\n缺点就是调用了两次父类的构造函数。\n第一次给子类的原型添加了父类构造函数中的属性方法；第二次又给子类的构造函数添加了父类的构造函数的属性方法，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费：\n\n```js\nfunction SuperType() {\n    this.name = 'parent';\n    this.arr = [1, 2, 3];\n}\n \nSuperType.prototype.say = function() { \n    console.log('this is parent')\n}\n \nfunction SubType() {\n    SuperType.call(this) // 第二次调用SuperType\n}\n \nSubType.prototype = new SuperType() // 第一次调用SuperType\n```\n","slug":"JS中如何实现继承","published":1,"updated":"2020-11-21T15:47:07.282Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxye80008khsr0n2tdtdd","content":"<h2 id=\"组合继承（原型链-借用构造函数）\"><a href=\"#组合继承（原型链-借用构造函数）\" class=\"headerlink\" title=\"组合继承（原型链 + 借用构造函数）\"></a>组合继承（原型链 + 借用构造函数）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合继承:原型继承+借用（调用）构造函数继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello world&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, score</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 借用构造函数</span></span><br><span class=\"line\">  Person.call(<span class=\"built_in\">this</span>,name,age,sex);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 改变原型指向----继承</span></span><br><span class=\"line\"><span class=\"comment\">// 我们让 Student.prototype 指向一个Person的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">// 这个对象的__proto__指向的是Person.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 所以我们就可以借助这个实例对象拿到sayHi方法，实现继承</span></span><br><span class=\"line\">Student.prototype=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Student.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;吃东西&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Lance&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;100分&quot;</span>);</span><br><span class=\"line\">stu.sayHi();</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Jerry&quot;</span>, <span class=\"number\">19</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;101分&quot;</span>);</span><br><span class=\"line\">stu2.eat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//属性和方法都被继承了</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"寄生组合继承（组合继承升级版）\"><a href=\"#寄生组合继承（组合继承升级版）\" class=\"headerlink\" title=\"寄生组合继承（组合继承升级版）\"></a>寄生组合继承（组合继承升级版）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prototype = object(superType.prototype); <span class=\"comment\">// 创建了父类原型的浅复制</span></span><br><span class=\"line\">    prototype.constructor = subType;             <span class=\"comment\">// 修正原型的构造函数</span></span><br><span class=\"line\">    subType.prototype = prototype;               <span class=\"comment\">// 将子类的原型替换为这个原型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    SuperType.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费</span></span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6继承写法\"><a href=\"#ES6继承写法\" class=\"headerlink\" title=\"ES6继承写法\"></a>ES6继承写法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;<span class=\"built_in\">this</span>.name=name;<span class=\"built_in\">this</span>.age=age&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age, weight</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name, age); <span class=\"built_in\">this</span>.weight = weight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在原型链继承时，为什么不直接-Student-prototype-Person-prototype-？\"><a href=\"#在原型链继承时，为什么不直接-Student-prototype-Person-prototype-？\" class=\"headerlink\" title=\"在原型链继承时，为什么不直接 Student.prototype = Person.prototype ？\"></a>在原型链继承时，为什么不直接 <code>Student.prototype = Person.prototype</code> ？</h2><p>因为对象的赋值只是引用的赋值, 上面两者都指向同一个内存地址，只要随便通过1个途径就能修改该内存地址的对象，这样子类就无法单独扩展方法，而且会影响父类。</p>\n<h2 id=\"组合继承的缺点\"><a href=\"#组合继承的缺点\" class=\"headerlink\" title=\"组合继承的缺点\"></a>组合继承的缺点</h2><p>缺点就是调用了两次父类的构造函数。<br>第一次给子类的原型添加了父类构造函数中的属性方法；第二次又给子类的构造函数添加了父类的构造函数的属性方法，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SuperType.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;this is parent&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    SuperType.call(<span class=\"built_in\">this</span>) <span class=\"comment\">// 第二次调用SuperType</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType() <span class=\"comment\">// 第一次调用SuperType</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"组合继承（原型链-借用构造函数）\"><a href=\"#组合继承（原型链-借用构造函数）\" class=\"headerlink\" title=\"组合继承（原型链 + 借用构造函数）\"></a>组合继承（原型链 + 借用构造函数）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 组合继承:原型继承+借用（调用）构造函数继承</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Person</span>(<span class=\"params\">name, age, sex</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.sex = sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Person.prototype.sayHi = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;Hello world&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">Student</span>(<span class=\"params\">name, age, sex, score</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 借用构造函数</span></span><br><span class=\"line\">  Person.call(<span class=\"built_in\">this</span>,name,age,sex);</span><br><span class=\"line\">  <span class=\"built_in\">this</span>.score = score;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 改变原型指向----继承</span></span><br><span class=\"line\"><span class=\"comment\">// 我们让 Student.prototype 指向一个Person的实例对象</span></span><br><span class=\"line\"><span class=\"comment\">// 这个对象的__proto__指向的是Person.prototype</span></span><br><span class=\"line\"><span class=\"comment\">// 所以我们就可以借助这个实例对象拿到sayHi方法，实现继承</span></span><br><span class=\"line\">Student.prototype=<span class=\"keyword\">new</span> Person();</span><br><span class=\"line\">Student.prototype.eat = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;吃东西&quot;</span>);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Lance&quot;</span>, <span class=\"number\">20</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;100分&quot;</span>);</span><br><span class=\"line\">stu.sayHi();</span><br><span class=\"line\"><span class=\"keyword\">var</span> stu2 = <span class=\"keyword\">new</span> Student(<span class=\"string\">&quot;Jerry&quot;</span>, <span class=\"number\">19</span>, <span class=\"string\">&quot;男&quot;</span>, <span class=\"string\">&quot;101分&quot;</span>);</span><br><span class=\"line\">stu2.eat();</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//属性和方法都被继承了</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"寄生组合继承（组合继承升级版）\"><a href=\"#寄生组合继承（组合继承升级版）\" class=\"headerlink\" title=\"寄生组合继承（组合继承升级版）\"></a>寄生组合继承（组合继承升级版）</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">object</span>(<span class=\"params\">o</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">F</span>(<span class=\"params\"></span>)</span>&#123;&#125;</span><br><span class=\"line\">  F.prototype = o;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> F();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">inheritPrototype</span>(<span class=\"params\">subType, superType</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> prototype = object(superType.prototype); <span class=\"comment\">// 创建了父类原型的浅复制</span></span><br><span class=\"line\">    prototype.constructor = subType;             <span class=\"comment\">// 修正原型的构造函数</span></span><br><span class=\"line\">    subType.prototype = prototype;               <span class=\"comment\">// 将子类的原型替换为这个原型</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\">name</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = name;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.colors = [<span class=\"string\">&quot;red&quot;</span>, <span class=\"string\">&quot;blue&quot;</span>, <span class=\"string\">&quot;green&quot;</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SuperType.prototype.sayName = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\">name, age</span>) </span>&#123;</span><br><span class=\"line\">    SuperType.call(<span class=\"built_in\">this</span>, name);</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.age = age;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 核心：因为是对父类原型的复制，所以不包含父类的构造函数，也就不会调用两次父类的构造函数造成浪费</span></span><br><span class=\"line\">inheritPrototype(SubType, SuperType);</span><br><span class=\"line\">SubType.prototype.sayAge = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    alert(<span class=\"built_in\">this</span>.age);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"ES6继承写法\"><a href=\"#ES6继承写法\" class=\"headerlink\" title=\"ES6继承写法\"></a>ES6继承写法</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age</span>)</span> &#123;<span class=\"built_in\">this</span>.name=name;<span class=\"built_in\">this</span>.age=age&#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">sayHi</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Student</span> <span class=\"keyword\">extends</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">constructor</span>(<span class=\"params\">name, age, weight</span>)</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">super</span>(name, age); <span class=\"built_in\">this</span>.weight = weight;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"title\">run</span>(<span class=\"params\"></span>)</span> &#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"在原型链继承时，为什么不直接-Student-prototype-Person-prototype-？\"><a href=\"#在原型链继承时，为什么不直接-Student-prototype-Person-prototype-？\" class=\"headerlink\" title=\"在原型链继承时，为什么不直接 Student.prototype = Person.prototype ？\"></a>在原型链继承时，为什么不直接 <code>Student.prototype = Person.prototype</code> ？</h2><p>因为对象的赋值只是引用的赋值, 上面两者都指向同一个内存地址，只要随便通过1个途径就能修改该内存地址的对象，这样子类就无法单独扩展方法，而且会影响父类。</p>\n<h2 id=\"组合继承的缺点\"><a href=\"#组合继承的缺点\" class=\"headerlink\" title=\"组合继承的缺点\"></a>组合继承的缺点</h2><p>缺点就是调用了两次父类的构造函数。<br>第一次给子类的原型添加了父类构造函数中的属性方法；第二次又给子类的构造函数添加了父类的构造函数的属性方法，从而覆盖了子类原型中的同名参数。这种被覆盖的情况造成了性能上的浪费：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SuperType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.name = <span class=\"string\">&#x27;parent&#x27;</span>;</span><br><span class=\"line\">    <span class=\"built_in\">this</span>.arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SuperType.prototype.say = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123; </span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;this is parent&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">SubType</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    SuperType.call(<span class=\"built_in\">this</span>) <span class=\"comment\">// 第二次调用SuperType</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">SubType.prototype = <span class=\"keyword\">new</span> SuperType() <span class=\"comment\">// 第一次调用SuperType</span></span><br></pre></td></tr></table></figure>"},{"title":"JS数组有哪些常用方法","abbrlink":21501,"date":"2018-12-13T15:34:46.000Z","_content":"\n## 改变原数组的方法\n\n### splice() 添加/删除数组元素\n\n> splice() 方法**向/从数组中添加/删除**项目，然后返回被删除的项目\n>\n> array.splice(index,howmany,item1,…..,itemX)\n>\n> 1. index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\n> 2. howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。\n> 3. item1, …, itemX： 可选。向数组添加的新项目。\n>\n> 返回值: 如果有元素被删除,返回包含被删除项目的新数组。\n\n<!-- more -->\n\n#### 删除元素\n\n```js\n// 从数组下标0开始，删除3个元素\nlet a = [1, 2, 3, 4, 5, 6, 7];\nlet item = a.splice(0, 3); // [1,2,3]\nconsole.log(a); // [4,5,6,7]\n\n// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7\nlet item = a.splice(-1, 3); // [7]\n```\n\n#### 删除并添加\n\n```js\n// 从数组下标0开始，删除3个元素，并添加元素'添加'\nlet a = [1, 2, 3, 4, 5, 6, 7];\nlet item = a.splice(0,3,'添加'); // [1,2,3]\nconsole.log(a); // ['添加',4,5,6,7]\n\n// 从数组最后第二个元素开始，删除3个元素，并添加两个元素'添加1'、'添加2'\nlet b = [1, 2, 3, 4, 5, 6, 7];\nlet item = b.splice(-2,3,'添加1','添加2'); // [6,7]\nconsole.log(b); // [1,2,3,4,5,'添加1','添加2']\n```\n\n#### 不删除只添加\n\n```js\nlet a = [1, 2, 3, 4, 5, 6, 7];\nlet item = a.splice(0,0,'添加1','添加2'); // [] 没有删除元素，返回空数组\nconsole.log(a); // ['添加1','添加2',1,2,3,4,5,6,7]\n\nlet b = [1, 2, 3, 4, 5, 6, 7];\nlet item = b.splice(-1,0,'添加1','添加2'); // [] 没有删除元素，返回空数组\nconsole.log(b); // [1,2,3,4,5,6,'添加1','添加2',7] 在最后一个元素的前面添加两个元素\n```\n\n### sort() 数组排序\n\n> 定义: sort()方法对数组元素进行排序，并返回这个数组。\n>\n> 参数可选: 规定排序顺序的比较函数。\n>\n> 默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用`toString()`方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。\n\n#### 不传参\n\n```js\n// 字符串排列 看起来很正常\nvar a = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\na.sort(); // [\"Apple\",\"Banana\",\"Mango\",\"Orange\"]\n\n// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的\nvar a = [10, 1, 3, 20,25,8];\nconsole.log(a.sort()) // [1,10,20,25,3,8];\n```\n\n**比较函数的两个参数：**\n\nsort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：\n\n- 若比较函数返回值<0，那么a将排到b的前面;\n- 若比较函数返回值=0，那么a 和 b 相对位置不变；\n- 若比较函数返回值>0，那么b 排在a 将的前面；\n\n#### 数字升降序\n\n```js\nvar array =  [10, 1, 3, 4, 20, 4, 25, 8];  \narray.sort(function(a,b){\n  return a-b;\n});\nconsole.log(array); // [1,3,4,4,8,10,20,25];\n\narray.sort(function(a,b){\n  return b-a;\n});\nconsole.log(array); // [25,20,10,8,4,4,3,1];\n```\n\n### pop() 删除一个数组中的最后的一个元素\n\n> 定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。\n\n```js\nlet  a =  [1,2,3];\nlet item = a.pop();  // 3\nconsole.log(a); // [1,2]\n```\n\n### shift() 删除数组的第一个元素\n\n> 定义: shift()方法删除数组的第一个元素，并返回这个元素。\n\n```js\nlet  a =  [1,2,3];\nlet item = a.shift();  // 1\nconsole.log(a); // [2,3]\n```\n\n### push() 向数组的末尾添加元素\n\n> 定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。\n>\n> 参数: item1, item2, …, itemX ,要添加到数组末尾的元素\n\n```js\nlet  a =  [1,2,3];\nlet item = a.push('末尾', '233');  // 5\nconsole.log(a); // [1,2,3,'末尾', '233']\n```\n\n### unshift()\n\n> 定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。\n>\n> 参数: item1, item2, …, itemX ,要添加到数组开头的元素\n\n```js\nlet a = [1, 2, 3];\nlet item = a.unshift('开头', '开头2');  // 5\nconsole.log(a); // [ '开头', '开头2', 1, 2, 3 ]\n```\n\n### reverse() 颠倒数组中元素的顺序\n\n> 定义: reverse() 方法用于颠倒数组中元素的顺序。\n\n```js\nlet  a =  [1,2,3];\na.reverse();  \nconsole.log(a); // [3,2,1]\n```\n\n## 不改变原数组的方法\n\n### slice() 浅拷贝数组的元素\n\n> 定义： 方法返回一个从开始到结束（**不包括结束**）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。\n>\n> 语法：array.slice(begin, end);\n\n```js\nlet a= ['hello','world'];\nlet b=a.slice(0,1); // ['hello']\n\n// 新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。\n// 如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。\na[0]='改变原数组';\nconsole.log(a,b); // ['改变原数组','world'] ['hello']\n\nlet a= [{name:'OBKoro1'}];\nlet b=a.slice();\nconsole.log(b,a); // [{\"name\":\"OBKoro1\"}]  [{\"name\":\"OBKoro1\"}]\n// a[0].name='改变原数组';\n// console.log(b,a); // [{\"name\":\"改变原数组\"}] [{\"name\":\"改变原数组\"}]\n```\n\n### join() 数组转字符串\n\n> 定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。\n>\n> 语法: array.join(str)\n\n```js\nlet a= ['hello','world'];\nlet str=a.join(); // 'hello,world'\nlet str2=a.join('+'); // 'hello+world'\n\nlet a= [['OBKoro1','23'],'test'];\nlet str1=a.join(); // OBKoro1,23,test\nlet b= [{name:'OBKoro1',age:'23'},'test'];\nlet str2 = b.join(); // [object Object],test\n// 对象转字符串推荐JSON.stringify(obj);\n\n// 结论：\n// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),\n// 如果是对象的话，对象会被转为[object Object]字符串。\n```\n\n### join() 数组转字符串\n\n> 定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。\n>\n> 语法: array.join(str)\n\n```js\nlet a= ['hello','world'];\nlet str=a.join(); // 'hello,world'\nlet str2=a.join('+'); // 'hello+world'\n\nlet a= [['OBKoro1','23'],'test'];\nlet str1=a.join(); // OBKoro1,23,test\nlet b= [{name:'OBKoro1',age:'23'},'test'];\nlet str2 = b.join(); // [object Object],test\n// 对象转字符串推荐JSON.stringify(obj);\n\n// 结论：\n// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),\n// 如果是对象的话，对象会被转为[object Object]字符串。\n```\n\n### concat\n\n> 定义： 方法用于合并两个或多个数组，返回一个新数组。\n>\n> 语法：var newArr =oldArray.concat(arrayX,arrayX,……,arrayX)\n>\n> 参数：arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。\n\n```js\nlet a = [1, 2, 3];\nlet b = [4, 5, 6];\n//连接两个数组\nlet newVal=a.concat(b); // [1,2,3,4,5,6]\n// 连接三个数组\nlet c = [7, 8, 9]\nlet newVal2 = a.concat(b, c); // [1,2,3,4,5,6,7,8,9]\n// 添加元素\nlet newVal3 = a.concat('添加元素',b, c,'再加一个'); \n// [1,2,3,\"添加元素\",4,5,6,7,8,9,\"再加一个\"]\n// 合并嵌套数组  会浅拷贝嵌套数组\nlet d = [1,2 ];\nlet f = [3,[4]];\nlet newVal4 = d.concat(f); // [1,2,3,[4]]\n```\n\n### ES6扩展运算符`...`合并数组\n\n```js\nlet a = [2, 3, 4, 5]\nlet b = [ 4,...a, 4, 4]\nconsole.log(a,b); //  [2, 3, 4, 5] [4,2,3,4,5,4,4]\n```\n\n### indexOf() 查找数组是否存在某个元素，返回下标\n\n> 定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。\n>\n> p.s. 字符串也有此方法，要注意当 ‘lance’.indexOf(‘’) 一个空字符串时，返回0而不是-1\n>\n> 语法：array.indexOf(searchElement,fromIndex)\n>\n> 参数：\n>\n> searchElement(必须):被查找的元素\n>\n> fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。\n>\n> 严格相等的搜索:\n>\n> 数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等`===`搜索元素，即**数组元素要完全匹配**才能搜索成功。\n>\n> **注意**：indexOf()不能识别`NaN`\n\n```js\nlet a=['啦啦',2,4,24,NaN]\nconsole.log(a.indexOf('啦'));  // -1 \nconsole.log(a.indexOf('NaN'));  // -1 \nconsole.log(a.indexOf('啦啦')); // 0\n```\n\n### lastIndexOf() 查找指定元素在数组中的最后一个位置\n\n> 定义: 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）\n>\n> 语法：arr.lastIndexOf(searchElement,fromIndex)\n>\n> 参数:\n>\n> searchElement(必须): 被查找的元素\n>\n> fromIndex(可选): 逆向查找开始位置，默认值数组的 `长度-1`，即查找整个数组。\n>\n> 关于fromIndex有三个规则:\n>\n> 1. 正值。如果该值大于或等于数组的长度，则整个数组会被查找。\n> 2. 负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)\n> 3. 负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。\n\n```js\nlet a=['OB',4,'Koro1',1,2,'Koro1',3,4,5,'Koro1']; // 数组长度为10\n// let b=a.lastIndexOf('Koro1',4); // 从下标4开始往前找 返回下标2\n// let b=a.lastIndexOf('Koro1',100); //  大于或数组的长度 查找整个数组 返回9\n// let b=a.lastIndexOf('Koro1',-11); // -1 数组不会被查找\nlet b=a.lastIndexOf('Koro1',-9); // 从第二个元素4往前查找，没有找到 返回-1\n```\n\n### ES7 includes() 查找数组是否包含某个元素 返回布尔\n\n> 定义： 返回一个布尔值，表示某个数组是否包含给定的值\n>\n> 语法：array.includes(searchElement,fromIndex=0)\n>\n> 参数：\n>\n> searchElement(必须):被查找的元素\n>\n> fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。\n>\n> **includes方法是为了弥补indexOf方法的缺陷而出现的:**\n>\n> 1. indexOf方法不能识别`NaN`\n> 2. indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于`-1`，表达不够直观\n\n```js\nlet a=['OB','Koro1',1,NaN];\n// let b=a.includes(NaN); // true 识别NaN\n// let b=a.includes('Koro1',100); // false 超过数组长度 不搜索\n// let b=a.includes('Koro1',-3);  // true 从倒数第三个元素开始搜索 \n// let b=a.includes('Koro1',-100);  // true 负值绝对值超过数组长度，搜索整个数组\n```\n","source":"_posts/JS数组有哪些常用方法.md","raw":"---\ntitle: JS数组有哪些常用方法\ncategories:\n  - 前端\n  - JS\nabbrlink: 21501\ndate: 2018-12-13 23:34:46\ntags:\n---\n\n## 改变原数组的方法\n\n### splice() 添加/删除数组元素\n\n> splice() 方法**向/从数组中添加/删除**项目，然后返回被删除的项目\n>\n> array.splice(index,howmany,item1,…..,itemX)\n>\n> 1. index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。\n> 2. howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。\n> 3. item1, …, itemX： 可选。向数组添加的新项目。\n>\n> 返回值: 如果有元素被删除,返回包含被删除项目的新数组。\n\n<!-- more -->\n\n#### 删除元素\n\n```js\n// 从数组下标0开始，删除3个元素\nlet a = [1, 2, 3, 4, 5, 6, 7];\nlet item = a.splice(0, 3); // [1,2,3]\nconsole.log(a); // [4,5,6,7]\n\n// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7\nlet item = a.splice(-1, 3); // [7]\n```\n\n#### 删除并添加\n\n```js\n// 从数组下标0开始，删除3个元素，并添加元素'添加'\nlet a = [1, 2, 3, 4, 5, 6, 7];\nlet item = a.splice(0,3,'添加'); // [1,2,3]\nconsole.log(a); // ['添加',4,5,6,7]\n\n// 从数组最后第二个元素开始，删除3个元素，并添加两个元素'添加1'、'添加2'\nlet b = [1, 2, 3, 4, 5, 6, 7];\nlet item = b.splice(-2,3,'添加1','添加2'); // [6,7]\nconsole.log(b); // [1,2,3,4,5,'添加1','添加2']\n```\n\n#### 不删除只添加\n\n```js\nlet a = [1, 2, 3, 4, 5, 6, 7];\nlet item = a.splice(0,0,'添加1','添加2'); // [] 没有删除元素，返回空数组\nconsole.log(a); // ['添加1','添加2',1,2,3,4,5,6,7]\n\nlet b = [1, 2, 3, 4, 5, 6, 7];\nlet item = b.splice(-1,0,'添加1','添加2'); // [] 没有删除元素，返回空数组\nconsole.log(b); // [1,2,3,4,5,6,'添加1','添加2',7] 在最后一个元素的前面添加两个元素\n```\n\n### sort() 数组排序\n\n> 定义: sort()方法对数组元素进行排序，并返回这个数组。\n>\n> 参数可选: 规定排序顺序的比较函数。\n>\n> 默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用`toString()`方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。\n\n#### 不传参\n\n```js\n// 字符串排列 看起来很正常\nvar a = [\"Banana\", \"Orange\", \"Apple\", \"Mango\"];\na.sort(); // [\"Apple\",\"Banana\",\"Mango\",\"Orange\"]\n\n// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的\nvar a = [10, 1, 3, 20,25,8];\nconsole.log(a.sort()) // [1,10,20,25,3,8];\n```\n\n**比较函数的两个参数：**\n\nsort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：\n\n- 若比较函数返回值<0，那么a将排到b的前面;\n- 若比较函数返回值=0，那么a 和 b 相对位置不变；\n- 若比较函数返回值>0，那么b 排在a 将的前面；\n\n#### 数字升降序\n\n```js\nvar array =  [10, 1, 3, 4, 20, 4, 25, 8];  \narray.sort(function(a,b){\n  return a-b;\n});\nconsole.log(array); // [1,3,4,4,8,10,20,25];\n\narray.sort(function(a,b){\n  return b-a;\n});\nconsole.log(array); // [25,20,10,8,4,4,3,1];\n```\n\n### pop() 删除一个数组中的最后的一个元素\n\n> 定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。\n\n```js\nlet  a =  [1,2,3];\nlet item = a.pop();  // 3\nconsole.log(a); // [1,2]\n```\n\n### shift() 删除数组的第一个元素\n\n> 定义: shift()方法删除数组的第一个元素，并返回这个元素。\n\n```js\nlet  a =  [1,2,3];\nlet item = a.shift();  // 1\nconsole.log(a); // [2,3]\n```\n\n### push() 向数组的末尾添加元素\n\n> 定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。\n>\n> 参数: item1, item2, …, itemX ,要添加到数组末尾的元素\n\n```js\nlet  a =  [1,2,3];\nlet item = a.push('末尾', '233');  // 5\nconsole.log(a); // [1,2,3,'末尾', '233']\n```\n\n### unshift()\n\n> 定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。\n>\n> 参数: item1, item2, …, itemX ,要添加到数组开头的元素\n\n```js\nlet a = [1, 2, 3];\nlet item = a.unshift('开头', '开头2');  // 5\nconsole.log(a); // [ '开头', '开头2', 1, 2, 3 ]\n```\n\n### reverse() 颠倒数组中元素的顺序\n\n> 定义: reverse() 方法用于颠倒数组中元素的顺序。\n\n```js\nlet  a =  [1,2,3];\na.reverse();  \nconsole.log(a); // [3,2,1]\n```\n\n## 不改变原数组的方法\n\n### slice() 浅拷贝数组的元素\n\n> 定义： 方法返回一个从开始到结束（**不包括结束**）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。\n>\n> 语法：array.slice(begin, end);\n\n```js\nlet a= ['hello','world'];\nlet b=a.slice(0,1); // ['hello']\n\n// 新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。\n// 如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。\na[0]='改变原数组';\nconsole.log(a,b); // ['改变原数组','world'] ['hello']\n\nlet a= [{name:'OBKoro1'}];\nlet b=a.slice();\nconsole.log(b,a); // [{\"name\":\"OBKoro1\"}]  [{\"name\":\"OBKoro1\"}]\n// a[0].name='改变原数组';\n// console.log(b,a); // [{\"name\":\"改变原数组\"}] [{\"name\":\"改变原数组\"}]\n```\n\n### join() 数组转字符串\n\n> 定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。\n>\n> 语法: array.join(str)\n\n```js\nlet a= ['hello','world'];\nlet str=a.join(); // 'hello,world'\nlet str2=a.join('+'); // 'hello+world'\n\nlet a= [['OBKoro1','23'],'test'];\nlet str1=a.join(); // OBKoro1,23,test\nlet b= [{name:'OBKoro1',age:'23'},'test'];\nlet str2 = b.join(); // [object Object],test\n// 对象转字符串推荐JSON.stringify(obj);\n\n// 结论：\n// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),\n// 如果是对象的话，对象会被转为[object Object]字符串。\n```\n\n### join() 数组转字符串\n\n> 定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。\n>\n> 语法: array.join(str)\n\n```js\nlet a= ['hello','world'];\nlet str=a.join(); // 'hello,world'\nlet str2=a.join('+'); // 'hello+world'\n\nlet a= [['OBKoro1','23'],'test'];\nlet str1=a.join(); // OBKoro1,23,test\nlet b= [{name:'OBKoro1',age:'23'},'test'];\nlet str2 = b.join(); // [object Object],test\n// 对象转字符串推荐JSON.stringify(obj);\n\n// 结论：\n// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),\n// 如果是对象的话，对象会被转为[object Object]字符串。\n```\n\n### concat\n\n> 定义： 方法用于合并两个或多个数组，返回一个新数组。\n>\n> 语法：var newArr =oldArray.concat(arrayX,arrayX,……,arrayX)\n>\n> 参数：arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。\n\n```js\nlet a = [1, 2, 3];\nlet b = [4, 5, 6];\n//连接两个数组\nlet newVal=a.concat(b); // [1,2,3,4,5,6]\n// 连接三个数组\nlet c = [7, 8, 9]\nlet newVal2 = a.concat(b, c); // [1,2,3,4,5,6,7,8,9]\n// 添加元素\nlet newVal3 = a.concat('添加元素',b, c,'再加一个'); \n// [1,2,3,\"添加元素\",4,5,6,7,8,9,\"再加一个\"]\n// 合并嵌套数组  会浅拷贝嵌套数组\nlet d = [1,2 ];\nlet f = [3,[4]];\nlet newVal4 = d.concat(f); // [1,2,3,[4]]\n```\n\n### ES6扩展运算符`...`合并数组\n\n```js\nlet a = [2, 3, 4, 5]\nlet b = [ 4,...a, 4, 4]\nconsole.log(a,b); //  [2, 3, 4, 5] [4,2,3,4,5,4,4]\n```\n\n### indexOf() 查找数组是否存在某个元素，返回下标\n\n> 定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。\n>\n> p.s. 字符串也有此方法，要注意当 ‘lance’.indexOf(‘’) 一个空字符串时，返回0而不是-1\n>\n> 语法：array.indexOf(searchElement,fromIndex)\n>\n> 参数：\n>\n> searchElement(必须):被查找的元素\n>\n> fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。\n>\n> 严格相等的搜索:\n>\n> 数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等`===`搜索元素，即**数组元素要完全匹配**才能搜索成功。\n>\n> **注意**：indexOf()不能识别`NaN`\n\n```js\nlet a=['啦啦',2,4,24,NaN]\nconsole.log(a.indexOf('啦'));  // -1 \nconsole.log(a.indexOf('NaN'));  // -1 \nconsole.log(a.indexOf('啦啦')); // 0\n```\n\n### lastIndexOf() 查找指定元素在数组中的最后一个位置\n\n> 定义: 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）\n>\n> 语法：arr.lastIndexOf(searchElement,fromIndex)\n>\n> 参数:\n>\n> searchElement(必须): 被查找的元素\n>\n> fromIndex(可选): 逆向查找开始位置，默认值数组的 `长度-1`，即查找整个数组。\n>\n> 关于fromIndex有三个规则:\n>\n> 1. 正值。如果该值大于或等于数组的长度，则整个数组会被查找。\n> 2. 负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)\n> 3. 负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。\n\n```js\nlet a=['OB',4,'Koro1',1,2,'Koro1',3,4,5,'Koro1']; // 数组长度为10\n// let b=a.lastIndexOf('Koro1',4); // 从下标4开始往前找 返回下标2\n// let b=a.lastIndexOf('Koro1',100); //  大于或数组的长度 查找整个数组 返回9\n// let b=a.lastIndexOf('Koro1',-11); // -1 数组不会被查找\nlet b=a.lastIndexOf('Koro1',-9); // 从第二个元素4往前查找，没有找到 返回-1\n```\n\n### ES7 includes() 查找数组是否包含某个元素 返回布尔\n\n> 定义： 返回一个布尔值，表示某个数组是否包含给定的值\n>\n> 语法：array.includes(searchElement,fromIndex=0)\n>\n> 参数：\n>\n> searchElement(必须):被查找的元素\n>\n> fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。\n>\n> **includes方法是为了弥补indexOf方法的缺陷而出现的:**\n>\n> 1. indexOf方法不能识别`NaN`\n> 2. indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于`-1`，表达不够直观\n\n```js\nlet a=['OB','Koro1',1,NaN];\n// let b=a.includes(NaN); // true 识别NaN\n// let b=a.includes('Koro1',100); // false 超过数组长度 不搜索\n// let b=a.includes('Koro1',-3);  // true 从倒数第三个元素开始搜索 \n// let b=a.includes('Koro1',-100);  // true 负值绝对值超过数组长度，搜索整个数组\n```\n","slug":"JS数组有哪些常用方法","published":1,"updated":"2020-11-21T15:37:26.522Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyea000ckhsr6v3g1lhh","content":"<h2 id=\"改变原数组的方法\"><a href=\"#改变原数组的方法\" class=\"headerlink\" title=\"改变原数组的方法\"></a>改变原数组的方法</h2><h3 id=\"splice-添加-删除数组元素\"><a href=\"#splice-添加-删除数组元素\" class=\"headerlink\" title=\"splice() 添加/删除数组元素\"></a>splice() 添加/删除数组元素</h3><blockquote>\n<p>splice() 方法<strong>向/从数组中添加/删除</strong>项目，然后返回被删除的项目</p>\n<p>array.splice(index,howmany,item1,…..,itemX)</p>\n<ol>\n<li>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li>\n<li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li>\n<li>item1, …, itemX： 可选。向数组添加的新项目。</li>\n</ol>\n<p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从数组下标0开始，删除3个元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(-<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [7]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除并添加\"><a href=\"#删除并添加\" class=\"headerlink\" title=\"删除并添加\"></a>删除并添加</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从数组下标0开始，删除3个元素，并添加元素&#x27;添加&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;添加&#x27;</span>); <span class=\"comment\">// [1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [&#x27;添加&#x27;,4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素&#x27;添加1&#x27;、&#x27;添加2&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = b.splice(-<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;添加1&#x27;</span>,<span class=\"string\">&#x27;添加2&#x27;</span>); <span class=\"comment\">// [6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [1,2,3,4,5,&#x27;添加1&#x27;,&#x27;添加2&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不删除只添加\"><a href=\"#不删除只添加\" class=\"headerlink\" title=\"不删除只添加\"></a>不删除只添加</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;添加1&#x27;</span>,<span class=\"string\">&#x27;添加2&#x27;</span>); <span class=\"comment\">// [] 没有删除元素，返回空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [&#x27;添加1&#x27;,&#x27;添加2&#x27;,1,2,3,4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = b.splice(-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;添加1&#x27;</span>,<span class=\"string\">&#x27;添加2&#x27;</span>); <span class=\"comment\">// [] 没有删除元素，返回空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [1,2,3,4,5,6,&#x27;添加1&#x27;,&#x27;添加2&#x27;,7] 在最后一个元素的前面添加两个元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sort-数组排序\"><a href=\"#sort-数组排序\" class=\"headerlink\" title=\"sort() 数组排序\"></a>sort() 数组排序</h3><blockquote>\n<p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p>\n<p>参数可选: 规定排序顺序的比较函数。</p>\n<p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p>\n</blockquote>\n<h4 id=\"不传参\"><a href=\"#不传参\" class=\"headerlink\" title=\"不传参\"></a>不传参</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串排列 看起来很正常</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>];</span><br><span class=\"line\">a.sort(); <span class=\"comment\">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>,<span class=\"number\">25</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.sort()) <span class=\"comment\">// [1,10,20,25,3,8];</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>比较函数的两个参数：</strong></p>\n<p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p>\n<ul>\n<li>若比较函数返回值&lt;0，那么a将排到b的前面;</li>\n<li>若比较函数返回值=0，那么a 和 b 相对位置不变；</li>\n<li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li>\n</ul>\n<h4 id=\"数字升降序\"><a href=\"#数字升降序\" class=\"headerlink\" title=\"数字升降序\"></a>数字升降序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array =  [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">4</span>, <span class=\"number\">25</span>, <span class=\"number\">8</span>];  </span><br><span class=\"line\">array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [1,3,4,4,8,10,20,25];</span></span><br><span class=\"line\"></span><br><span class=\"line\">array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b-a;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [25,20,10,8,4,4,3,1];</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pop-删除一个数组中的最后的一个元素\"><a href=\"#pop-删除一个数组中的最后的一个元素\" class=\"headerlink\" title=\"pop() 删除一个数组中的最后的一个元素\"></a>pop() 删除一个数组中的最后的一个元素</h3><blockquote>\n<p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.pop();  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [1,2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shift-删除数组的第一个元素\"><a href=\"#shift-删除数组的第一个元素\" class=\"headerlink\" title=\"shift() 删除数组的第一个元素\"></a>shift() 删除数组的第一个元素</h3><blockquote>\n<p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.shift();  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [2,3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"push-向数组的末尾添加元素\"><a href=\"#push-向数组的末尾添加元素\" class=\"headerlink\" title=\"push() 向数组的末尾添加元素\"></a>push() 向数组的末尾添加元素</h3><blockquote>\n<p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>\n<p>参数: item1, item2, …, itemX ,要添加到数组末尾的元素</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.push(<span class=\"string\">&#x27;末尾&#x27;</span>, <span class=\"string\">&#x27;233&#x27;</span>);  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [1,2,3,&#x27;末尾&#x27;, &#x27;233&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><blockquote>\n<p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p>\n<p>参数: item1, item2, …, itemX ,要添加到数组开头的元素</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.unshift(<span class=\"string\">&#x27;开头&#x27;</span>, <span class=\"string\">&#x27;开头2&#x27;</span>);  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [ &#x27;开头&#x27;, &#x27;开头2&#x27;, 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reverse-颠倒数组中元素的顺序\"><a href=\"#reverse-颠倒数组中元素的顺序\" class=\"headerlink\" title=\"reverse() 颠倒数组中元素的顺序\"></a>reverse() 颠倒数组中元素的顺序</h3><blockquote>\n<p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.reverse();  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不改变原数组的方法\"><a href=\"#不改变原数组的方法\" class=\"headerlink\" title=\"不改变原数组的方法\"></a>不改变原数组的方法</h2><h3 id=\"slice-浅拷贝数组的元素\"><a href=\"#slice-浅拷贝数组的元素\" class=\"headerlink\" title=\"slice() 浅拷贝数组的元素\"></a>slice() 浅拷贝数组的元素</h3><blockquote>\n<p>定义： 方法返回一个从开始到结束（<strong>不包括结束</strong>）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p>\n<p>语法：array.slice(begin, end);</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a= [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">// [&#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;改变原数组&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b); <span class=\"comment\">// [&#x27;改变原数组&#x27;,&#x27;world&#x27;] [&#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;OBKoro1&#x27;</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.slice();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,a); <span class=\"comment\">// [&#123;&quot;name&quot;:&quot;OBKoro1&quot;&#125;]  [&#123;&quot;name&quot;:&quot;OBKoro1&quot;&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">// a[0].name=&#x27;改变原数组&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b,a); // [&#123;&quot;name&quot;:&quot;改变原数组&quot;&#125;] [&#123;&quot;name&quot;:&quot;改变原数组&quot;&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"join-数组转字符串\"><a href=\"#join-数组转字符串\" class=\"headerlink\" title=\"join() 数组转字符串\"></a>join() 数组转字符串</h3><blockquote>\n<p>定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p>\n<p>语法: array.join(str)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a= [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str=a.join(); <span class=\"comment\">// &#x27;hello,world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str2=a.join(<span class=\"string\">&#x27;+&#x27;</span>); <span class=\"comment\">// &#x27;hello+world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= [[<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"string\">&#x27;23&#x27;</span>],<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1=a.join(); <span class=\"comment\">// OBKoro1,23,test</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b= [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;23&#x27;</span>&#125;,<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = b.join(); <span class=\"comment\">// [object Object],test</span></span><br><span class=\"line\"><span class=\"comment\">// 对象转字符串推荐JSON.stringify(obj);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结论：</span></span><br><span class=\"line\"><span class=\"comment\">// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是对象的话，对象会被转为[object Object]字符串。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"join-数组转字符串-1\"><a href=\"#join-数组转字符串-1\" class=\"headerlink\" title=\"join() 数组转字符串\"></a>join() 数组转字符串</h3><blockquote>\n<p>定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p>\n<p>语法: array.join(str)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a= [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str=a.join(); <span class=\"comment\">// &#x27;hello,world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str2=a.join(<span class=\"string\">&#x27;+&#x27;</span>); <span class=\"comment\">// &#x27;hello+world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= [[<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"string\">&#x27;23&#x27;</span>],<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1=a.join(); <span class=\"comment\">// OBKoro1,23,test</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b= [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;23&#x27;</span>&#125;,<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = b.join(); <span class=\"comment\">// [object Object],test</span></span><br><span class=\"line\"><span class=\"comment\">// 对象转字符串推荐JSON.stringify(obj);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结论：</span></span><br><span class=\"line\"><span class=\"comment\">// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是对象的话，对象会被转为[object Object]字符串。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h3><blockquote>\n<p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p>\n<p>语法：var newArr =oldArray.concat(arrayX,arrayX,……,arrayX)</p>\n<p>参数：arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"comment\">//连接两个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal=a.concat(b); <span class=\"comment\">// [1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"comment\">// 连接三个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal2 = a.concat(b, c); <span class=\"comment\">// [1,2,3,4,5,6,7,8,9]</span></span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal3 = a.concat(<span class=\"string\">&#x27;添加元素&#x27;</span>,b, c,<span class=\"string\">&#x27;再加一个&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// [1,2,3,&quot;添加元素&quot;,4,5,6,7,8,9,&quot;再加一个&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// 合并嵌套数组  会浅拷贝嵌套数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [<span class=\"number\">1</span>,<span class=\"number\">2</span> ];</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = [<span class=\"number\">3</span>,[<span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal4 = d.concat(f); <span class=\"comment\">// [1,2,3,[4]]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6扩展运算符-合并数组\"><a href=\"#ES6扩展运算符-合并数组\" class=\"headerlink\" title=\"ES6扩展运算符...合并数组\"></a>ES6扩展运算符<code>...</code>合并数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [ <span class=\"number\">4</span>,...a, <span class=\"number\">4</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b); <span class=\"comment\">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"indexOf-查找数组是否存在某个元素，返回下标\"><a href=\"#indexOf-查找数组是否存在某个元素，返回下标\" class=\"headerlink\" title=\"indexOf() 查找数组是否存在某个元素，返回下标\"></a>indexOf() 查找数组是否存在某个元素，返回下标</h3><blockquote>\n<p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>\n<p>p.s. 字符串也有此方法，要注意当 ‘lance’.indexOf(‘’) 一个空字符串时，返回0而不是-1</p>\n<p>语法：array.indexOf(searchElement,fromIndex)</p>\n<p>参数：</p>\n<p>searchElement(必须):被查找的元素</p>\n<p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p>\n<p>严格相等的搜索:</p>\n<p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p>\n<p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=[<span class=\"string\">&#x27;啦啦&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">24</span>,<span class=\"literal\">NaN</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"string\">&#x27;啦&#x27;</span>));  <span class=\"comment\">// -1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"string\">&#x27;NaN&#x27;</span>));  <span class=\"comment\">// -1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"string\">&#x27;啦啦&#x27;</span>)); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lastIndexOf-查找指定元素在数组中的最后一个位置\"><a href=\"#lastIndexOf-查找指定元素在数组中的最后一个位置\" class=\"headerlink\" title=\"lastIndexOf() 查找指定元素在数组中的最后一个位置\"></a>lastIndexOf() 查找指定元素在数组中的最后一个位置</h3><blockquote>\n<p>定义: 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p>\n<p>语法：arr.lastIndexOf(searchElement,fromIndex)</p>\n<p>参数:</p>\n<p>searchElement(必须): 被查找的元素</p>\n<p>fromIndex(可选): 逆向查找开始位置，默认值数组的 <code>长度-1</code>，即查找整个数组。</p>\n<p>关于fromIndex有三个规则:</p>\n<ol>\n<li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li>\n<li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li>\n<li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=[<span class=\"string\">&#x27;OB&#x27;</span>,<span class=\"number\">4</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>]; <span class=\"comment\">// 数组长度为10</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,4); // 从下标4开始往前找 返回下标2</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,100); //  大于或数组的长度 查找整个数组 返回9</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,-11); // -1 数组不会被查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.lastIndexOf(<span class=\"string\">&#x27;Koro1&#x27;</span>,-<span class=\"number\">9</span>); <span class=\"comment\">// 从第二个元素4往前查找，没有找到 返回-1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES7-includes-查找数组是否包含某个元素-返回布尔\"><a href=\"#ES7-includes-查找数组是否包含某个元素-返回布尔\" class=\"headerlink\" title=\"ES7 includes() 查找数组是否包含某个元素 返回布尔\"></a>ES7 includes() 查找数组是否包含某个元素 返回布尔</h3><blockquote>\n<p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p>\n<p>语法：array.includes(searchElement,fromIndex=0)</p>\n<p>参数：</p>\n<p>searchElement(必须):被查找的元素</p>\n<p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p>\n<p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p>\n<ol>\n<li>indexOf方法不能识别<code>NaN</code></li>\n<li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=[<span class=\"string\">&#x27;OB&#x27;</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>,<span class=\"number\">1</span>,<span class=\"literal\">NaN</span>];</span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(NaN); // true 识别NaN</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(&#x27;Koro1&#x27;,100); // false 超过数组长度 不搜索</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(&#x27;Koro1&#x27;,-3);  // true 从倒数第三个元素开始搜索 </span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(&#x27;Koro1&#x27;,-100);  // true 负值绝对值超过数组长度，搜索整个数组</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"改变原数组的方法\"><a href=\"#改变原数组的方法\" class=\"headerlink\" title=\"改变原数组的方法\"></a>改变原数组的方法</h2><h3 id=\"splice-添加-删除数组元素\"><a href=\"#splice-添加-删除数组元素\" class=\"headerlink\" title=\"splice() 添加/删除数组元素\"></a>splice() 添加/删除数组元素</h3><blockquote>\n<p>splice() 方法<strong>向/从数组中添加/删除</strong>项目，然后返回被删除的项目</p>\n<p>array.splice(index,howmany,item1,…..,itemX)</p>\n<ol>\n<li>index：必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</li>\n<li>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。</li>\n<li>item1, …, itemX： 可选。向数组添加的新项目。</li>\n</ol>\n<p>返回值: 如果有元素被删除,返回包含被删除项目的新数组。</p>\n</blockquote>","more":"<h4 id=\"删除元素\"><a href=\"#删除元素\" class=\"headerlink\" title=\"删除元素\"></a>删除元素</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从数组下标0开始，删除3个元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(<span class=\"number\">0</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(-<span class=\"number\">1</span>, <span class=\"number\">3</span>); <span class=\"comment\">// [7]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"删除并添加\"><a href=\"#删除并添加\" class=\"headerlink\" title=\"删除并添加\"></a>删除并添加</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 从数组下标0开始，删除3个元素，并添加元素&#x27;添加&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(<span class=\"number\">0</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;添加&#x27;</span>); <span class=\"comment\">// [1,2,3]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [&#x27;添加&#x27;,4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素&#x27;添加1&#x27;、&#x27;添加2&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = b.splice(-<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"string\">&#x27;添加1&#x27;</span>,<span class=\"string\">&#x27;添加2&#x27;</span>); <span class=\"comment\">// [6,7]</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [1,2,3,4,5,&#x27;添加1&#x27;,&#x27;添加2&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"不删除只添加\"><a href=\"#不删除只添加\" class=\"headerlink\" title=\"不删除只添加\"></a>不删除只添加</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.splice(<span class=\"number\">0</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;添加1&#x27;</span>,<span class=\"string\">&#x27;添加2&#x27;</span>); <span class=\"comment\">// [] 没有删除元素，返回空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [&#x27;添加1&#x27;,&#x27;添加2&#x27;,1,2,3,4,5,6,7]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>, <span class=\"number\">7</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = b.splice(-<span class=\"number\">1</span>,<span class=\"number\">0</span>,<span class=\"string\">&#x27;添加1&#x27;</span>,<span class=\"string\">&#x27;添加2&#x27;</span>); <span class=\"comment\">// [] 没有删除元素，返回空数组</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b); <span class=\"comment\">// [1,2,3,4,5,6,&#x27;添加1&#x27;,&#x27;添加2&#x27;,7] 在最后一个元素的前面添加两个元素</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"sort-数组排序\"><a href=\"#sort-数组排序\" class=\"headerlink\" title=\"sort() 数组排序\"></a>sort() 数组排序</h3><blockquote>\n<p>定义: sort()方法对数组元素进行排序，并返回这个数组。</p>\n<p>参数可选: 规定排序顺序的比较函数。</p>\n<p>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用<code>toString()</code>方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p>\n</blockquote>\n<h4 id=\"不传参\"><a href=\"#不传参\" class=\"headerlink\" title=\"不传参\"></a>不传参</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字符串排列 看起来很正常</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"string\">&quot;Banana&quot;</span>, <span class=\"string\">&quot;Orange&quot;</span>, <span class=\"string\">&quot;Apple&quot;</span>, <span class=\"string\">&quot;Mango&quot;</span>];</span><br><span class=\"line\">a.sort(); <span class=\"comment\">// [&quot;Apple&quot;,&quot;Banana&quot;,&quot;Mango&quot;,&quot;Orange&quot;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 数字排序的时候 因为转换成Unicode字符串之后，有些数字会比较大会排在后面 这显然不是我们想要的</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> a = [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">20</span>,<span class=\"number\">25</span>,<span class=\"number\">8</span>];</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.sort()) <span class=\"comment\">// [1,10,20,25,3,8];</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>比较函数的两个参数：</strong></p>\n<p>sort的比较函数有两个默认参数，要在函数中接收这两个参数，这两个参数是数组中两个要比较的元素，通常我们用 a 和 b 接收两个将要比较的元素：</p>\n<ul>\n<li>若比较函数返回值&lt;0，那么a将排到b的前面;</li>\n<li>若比较函数返回值=0，那么a 和 b 相对位置不变；</li>\n<li>若比较函数返回值&gt;0，那么b 排在a 将的前面；</li>\n</ul>\n<h4 id=\"数字升降序\"><a href=\"#数字升降序\" class=\"headerlink\" title=\"数字升降序\"></a>数字升降序</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> array =  [<span class=\"number\">10</span>, <span class=\"number\">1</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">20</span>, <span class=\"number\">4</span>, <span class=\"number\">25</span>, <span class=\"number\">8</span>];  </span><br><span class=\"line\">array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> a-b;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [1,3,4,4,8,10,20,25];</span></span><br><span class=\"line\"></span><br><span class=\"line\">array.sort(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> b-a;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(array); <span class=\"comment\">// [25,20,10,8,4,4,3,1];</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"pop-删除一个数组中的最后的一个元素\"><a href=\"#pop-删除一个数组中的最后的一个元素\" class=\"headerlink\" title=\"pop() 删除一个数组中的最后的一个元素\"></a>pop() 删除一个数组中的最后的一个元素</h3><blockquote>\n<p>定义: pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.pop();  <span class=\"comment\">// 3</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [1,2]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"shift-删除数组的第一个元素\"><a href=\"#shift-删除数组的第一个元素\" class=\"headerlink\" title=\"shift() 删除数组的第一个元素\"></a>shift() 删除数组的第一个元素</h3><blockquote>\n<p>定义: shift()方法删除数组的第一个元素，并返回这个元素。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.shift();  <span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [2,3]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"push-向数组的末尾添加元素\"><a href=\"#push-向数组的末尾添加元素\" class=\"headerlink\" title=\"push() 向数组的末尾添加元素\"></a>push() 向数组的末尾添加元素</h3><blockquote>\n<p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。</p>\n<p>参数: item1, item2, …, itemX ,要添加到数组末尾的元素</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.push(<span class=\"string\">&#x27;末尾&#x27;</span>, <span class=\"string\">&#x27;233&#x27;</span>);  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [1,2,3,&#x27;末尾&#x27;, &#x27;233&#x27;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"unshift\"><a href=\"#unshift\" class=\"headerlink\" title=\"unshift()\"></a>unshift()</h3><blockquote>\n<p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。</p>\n<p>参数: item1, item2, …, itemX ,要添加到数组开头的元素</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> item = a.unshift(<span class=\"string\">&#x27;开头&#x27;</span>, <span class=\"string\">&#x27;开头2&#x27;</span>);  <span class=\"comment\">// 5</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [ &#x27;开头&#x27;, &#x27;开头2&#x27;, 1, 2, 3 ]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"reverse-颠倒数组中元素的顺序\"><a href=\"#reverse-颠倒数组中元素的顺序\" class=\"headerlink\" title=\"reverse() 颠倒数组中元素的顺序\"></a>reverse() 颠倒数组中元素的顺序</h3><blockquote>\n<p>定义: reverse() 方法用于颠倒数组中元素的顺序。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span>  a =  [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>];</span><br><span class=\"line\">a.reverse();  </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a); <span class=\"comment\">// [3,2,1]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"不改变原数组的方法\"><a href=\"#不改变原数组的方法\" class=\"headerlink\" title=\"不改变原数组的方法\"></a>不改变原数组的方法</h2><h3 id=\"slice-浅拷贝数组的元素\"><a href=\"#slice-浅拷贝数组的元素\" class=\"headerlink\" title=\"slice() 浅拷贝数组的元素\"></a>slice() 浅拷贝数组的元素</h3><blockquote>\n<p>定义： 方法返回一个从开始到结束（<strong>不包括结束</strong>）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。</p>\n<p>语法：array.slice(begin, end);</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a= [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.slice(<span class=\"number\">0</span>,<span class=\"number\">1</span>); <span class=\"comment\">// [&#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。</span></span><br><span class=\"line\">a[<span class=\"number\">0</span>]=<span class=\"string\">&#x27;改变原数组&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b); <span class=\"comment\">// [&#x27;改变原数组&#x27;,&#x27;world&#x27;] [&#x27;hello&#x27;]</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;OBKoro1&#x27;</span>&#125;];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.slice();</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(b,a); <span class=\"comment\">// [&#123;&quot;name&quot;:&quot;OBKoro1&quot;&#125;]  [&#123;&quot;name&quot;:&quot;OBKoro1&quot;&#125;]</span></span><br><span class=\"line\"><span class=\"comment\">// a[0].name=&#x27;改变原数组&#x27;;</span></span><br><span class=\"line\"><span class=\"comment\">// console.log(b,a); // [&#123;&quot;name&quot;:&quot;改变原数组&quot;&#125;] [&#123;&quot;name&quot;:&quot;改变原数组&quot;&#125;]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"join-数组转字符串\"><a href=\"#join-数组转字符串\" class=\"headerlink\" title=\"join() 数组转字符串\"></a>join() 数组转字符串</h3><blockquote>\n<p>定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p>\n<p>语法: array.join(str)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a= [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str=a.join(); <span class=\"comment\">// &#x27;hello,world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str2=a.join(<span class=\"string\">&#x27;+&#x27;</span>); <span class=\"comment\">// &#x27;hello+world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= [[<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"string\">&#x27;23&#x27;</span>],<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1=a.join(); <span class=\"comment\">// OBKoro1,23,test</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b= [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;23&#x27;</span>&#125;,<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = b.join(); <span class=\"comment\">// [object Object],test</span></span><br><span class=\"line\"><span class=\"comment\">// 对象转字符串推荐JSON.stringify(obj);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结论：</span></span><br><span class=\"line\"><span class=\"comment\">// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是对象的话，对象会被转为[object Object]字符串。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"join-数组转字符串-1\"><a href=\"#join-数组转字符串-1\" class=\"headerlink\" title=\"join() 数组转字符串\"></a>join() 数组转字符串</h3><blockquote>\n<p>定义: join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。</p>\n<p>语法: array.join(str)</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a= [<span class=\"string\">&#x27;hello&#x27;</span>,<span class=\"string\">&#x27;world&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str=a.join(); <span class=\"comment\">// &#x27;hello,world&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> str2=a.join(<span class=\"string\">&#x27;+&#x27;</span>); <span class=\"comment\">// &#x27;hello+world&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">let</span> a= [[<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"string\">&#x27;23&#x27;</span>],<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str1=a.join(); <span class=\"comment\">// OBKoro1,23,test</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b= [&#123;<span class=\"attr\">name</span>:<span class=\"string\">&#x27;OBKoro1&#x27;</span>,<span class=\"attr\">age</span>:<span class=\"string\">&#x27;23&#x27;</span>&#125;,<span class=\"string\">&#x27;test&#x27;</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> str2 = b.join(); <span class=\"comment\">// [object Object],test</span></span><br><span class=\"line\"><span class=\"comment\">// 对象转字符串推荐JSON.stringify(obj);</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 结论：</span></span><br><span class=\"line\"><span class=\"comment\">// join()/toString()方法在数组元素是数组的时候，会将里面的数组也调用join()/toString(),</span></span><br><span class=\"line\"><span class=\"comment\">// 如果是对象的话，对象会被转为[object Object]字符串。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"concat\"><a href=\"#concat\" class=\"headerlink\" title=\"concat\"></a>concat</h3><blockquote>\n<p>定义： 方法用于合并两个或多个数组，返回一个新数组。</p>\n<p>语法：var newArr =oldArray.concat(arrayX,arrayX,……,arrayX)</p>\n<p>参数：arrayX（必须）：该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>];</span><br><span class=\"line\"><span class=\"comment\">//连接两个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal=a.concat(b); <span class=\"comment\">// [1,2,3,4,5,6]</span></span><br><span class=\"line\"><span class=\"comment\">// 连接三个数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> c = [<span class=\"number\">7</span>, <span class=\"number\">8</span>, <span class=\"number\">9</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal2 = a.concat(b, c); <span class=\"comment\">// [1,2,3,4,5,6,7,8,9]</span></span><br><span class=\"line\"><span class=\"comment\">// 添加元素</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal3 = a.concat(<span class=\"string\">&#x27;添加元素&#x27;</span>,b, c,<span class=\"string\">&#x27;再加一个&#x27;</span>); </span><br><span class=\"line\"><span class=\"comment\">// [1,2,3,&quot;添加元素&quot;,4,5,6,7,8,9,&quot;再加一个&quot;]</span></span><br><span class=\"line\"><span class=\"comment\">// 合并嵌套数组  会浅拷贝嵌套数组</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> d = [<span class=\"number\">1</span>,<span class=\"number\">2</span> ];</span><br><span class=\"line\"><span class=\"keyword\">let</span> f = [<span class=\"number\">3</span>,[<span class=\"number\">4</span>]];</span><br><span class=\"line\"><span class=\"keyword\">let</span> newVal4 = d.concat(f); <span class=\"comment\">// [1,2,3,[4]]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES6扩展运算符-合并数组\"><a href=\"#ES6扩展运算符-合并数组\" class=\"headerlink\" title=\"ES6扩展运算符...合并数组\"></a>ES6扩展运算符<code>...</code>合并数组</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [ <span class=\"number\">4</span>,...a, <span class=\"number\">4</span>, <span class=\"number\">4</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a,b); <span class=\"comment\">//  [2, 3, 4, 5] [4,2,3,4,5,4,4]</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"indexOf-查找数组是否存在某个元素，返回下标\"><a href=\"#indexOf-查找数组是否存在某个元素，返回下标\" class=\"headerlink\" title=\"indexOf() 查找数组是否存在某个元素，返回下标\"></a>indexOf() 查找数组是否存在某个元素，返回下标</h3><blockquote>\n<p>定义: 返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。</p>\n<p>p.s. 字符串也有此方法，要注意当 ‘lance’.indexOf(‘’) 一个空字符串时，返回0而不是-1</p>\n<p>语法：array.indexOf(searchElement,fromIndex)</p>\n<p>参数：</p>\n<p>searchElement(必须):被查找的元素</p>\n<p>fromIndex(可选):开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。</p>\n<p>严格相等的搜索:</p>\n<p>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等<code>===</code>搜索元素，即<strong>数组元素要完全匹配</strong>才能搜索成功。</p>\n<p><strong>注意</strong>：indexOf()不能识别<code>NaN</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=[<span class=\"string\">&#x27;啦啦&#x27;</span>,<span class=\"number\">2</span>,<span class=\"number\">4</span>,<span class=\"number\">24</span>,<span class=\"literal\">NaN</span>]</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"string\">&#x27;啦&#x27;</span>));  <span class=\"comment\">// -1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"string\">&#x27;NaN&#x27;</span>));  <span class=\"comment\">// -1 </span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(a.indexOf(<span class=\"string\">&#x27;啦啦&#x27;</span>)); <span class=\"comment\">// 0</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"lastIndexOf-查找指定元素在数组中的最后一个位置\"><a href=\"#lastIndexOf-查找指定元素在数组中的最后一个位置\" class=\"headerlink\" title=\"lastIndexOf() 查找指定元素在数组中的最后一个位置\"></a>lastIndexOf() 查找指定元素在数组中的最后一个位置</h3><blockquote>\n<p>定义: 方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）</p>\n<p>语法：arr.lastIndexOf(searchElement,fromIndex)</p>\n<p>参数:</p>\n<p>searchElement(必须): 被查找的元素</p>\n<p>fromIndex(可选): 逆向查找开始位置，默认值数组的 <code>长度-1</code>，即查找整个数组。</p>\n<p>关于fromIndex有三个规则:</p>\n<ol>\n<li>正值。如果该值大于或等于数组的长度，则整个数组会被查找。</li>\n<li>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)</li>\n<li>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=[<span class=\"string\">&#x27;OB&#x27;</span>,<span class=\"number\">4</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>,<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>]; <span class=\"comment\">// 数组长度为10</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,4); // 从下标4开始往前找 返回下标2</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,100); //  大于或数组的长度 查找整个数组 返回9</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.lastIndexOf(&#x27;Koro1&#x27;,-11); // -1 数组不会被查找</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b=a.lastIndexOf(<span class=\"string\">&#x27;Koro1&#x27;</span>,-<span class=\"number\">9</span>); <span class=\"comment\">// 从第二个元素4往前查找，没有找到 返回-1</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ES7-includes-查找数组是否包含某个元素-返回布尔\"><a href=\"#ES7-includes-查找数组是否包含某个元素-返回布尔\" class=\"headerlink\" title=\"ES7 includes() 查找数组是否包含某个元素 返回布尔\"></a>ES7 includes() 查找数组是否包含某个元素 返回布尔</h3><blockquote>\n<p>定义： 返回一个布尔值，表示某个数组是否包含给定的值</p>\n<p>语法：array.includes(searchElement,fromIndex=0)</p>\n<p>参数：</p>\n<p>searchElement(必须):被查找的元素</p>\n<p>fromIndex(可选):默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。</p>\n<p><strong>includes方法是为了弥补indexOf方法的缺陷而出现的:</strong></p>\n<ol>\n<li>indexOf方法不能识别<code>NaN</code></li>\n<li>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于<code>-1</code>，表达不够直观</li>\n</ol>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> a=[<span class=\"string\">&#x27;OB&#x27;</span>,<span class=\"string\">&#x27;Koro1&#x27;</span>,<span class=\"number\">1</span>,<span class=\"literal\">NaN</span>];</span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(NaN); // true 识别NaN</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(&#x27;Koro1&#x27;,100); // false 超过数组长度 不搜索</span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(&#x27;Koro1&#x27;,-3);  // true 从倒数第三个元素开始搜索 </span></span><br><span class=\"line\"><span class=\"comment\">// let b=a.includes(&#x27;Koro1&#x27;,-100);  // true 负值绝对值超过数组长度，搜索整个数组</span></span><br></pre></td></tr></table></figure>"},{"title":"【翻译】Minification 压缩与 Gzip 压缩的区别","abbrlink":8214,"date":"2019-03-14T02:43:53.000Z","_content":"\n> 原链接：https://css-tricks.com/the-difference-between-minification-and-gzipping/\n> 作者：Chris Coyier\n\n这两种方法都针对你网站上的资源（比如 .css 文件和 .js 文件）所使用。它们都用来压缩文件大小，使服务器和浏览器之间的网络更加通畅，提高网页性能。网络是网页的速度瓶颈所在，而压缩文件大小能够改善这一点。\n\n但这两者也截然不同。如果之前你并不知道这一点，那么你应当花时间来了解它。\n\n<!-- more -->\n\n# Minification 能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少 hex 代码的长度…\n\n……诸如此类。剩下的文件依然是有效代码。你不必尝试读取它或是使用它，它并没有违反任何规则。就像对原始文件那样，浏览器可以读取它和使用它。\n\nMinification 能够创建你最终使用的新文件。比如当你创建了一个名为 `style.css` 的文件之后，你可以把它压缩为 `style.min.css`。\n\n# Gizpping 能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\n\nJulia Evans 曾想出一个绝佳的方法来解释这一点（点击[这里](https://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/)查阅她发布的内容和视频）。下面是一首诗的第一段：\n\n```js\nOnce upon a midnight dreary, while I {pon}dered weak an{d wea}{ry,}\nOver many{ a }quaint{ and }curious volume of forgotten lore,\nW{hile I }nodded, n{ear}ly napping, su{dde}n{ly }th{ere} ca{me }a t{apping,}\nAs{ of }so{me o}ne gent{ly }r{apping, }{rapping} at my chamb{er }door.\n`'Tis{ some }visitor,'{ I }mu{tte}r{ed, }`t{apping at my chamber door} -\nO{nly th}is,{ and }no{thi}{ng }m{ore}.\n```\n\nGzip 识别出括弧里的文字都是重复的，因此将会使用指针来代替它们，这样这些文字占用的空间将会比原来更小。\n\n对于减少文件大小、尤其是代码而言，这种方法十分高效，因为代码中有大量重复的内容。设想一下一个 HTML 文件里有多少个 `<div`，一个 CSS 文件里又有多少 `{`。\n\n你也可以创建某个文件的 Gzip 压缩版本，比如 style.css.zip。但你一般不会这样做，浏览器也不知道应该如何使用这个文件。\n\n在网页中，Gzip 压缩直接通过服务器完成。因此你要做的是配置服务器。一旦完成配置，Gzip 压缩将会自动进行，你无需再做任何工作。服务器会压缩文件，并通过网络传送文件。浏览器则接受文件，并在使用之前进行解压。我从未听谁提到过压缩和解压的成本，因此在这里我假设这些成本可以忽略不计，并且我们获得的受益远大于成本。\n\n点击[这里](https://css-tricks.com/snippets/htaccess/active-gzip-compression/)查看如何在 Apache 服务器中进行配置，这里使用了 `mod_deflate` 模块。H5BP 也为所有常见的服务器[提供了服务器配置](https://github.com/h5bp/server-configs)，包括 Gzipping。\n\n# 示例\n\n我们将用到 [Bootstrap](https://getbootstrap.com/) 中常见的 CSS 文件。\n\n{% asset_img 3e99e9b284d401c365c5044bc715ba44c9246f83.jpg 3e99e9b284d401c365c5044bc715ba44c9246f83 %}\n\n通过 Minification 来压缩这个 CSS 文件，你将节省 17% 的空间，而使用 Gzipping 能够节省 85%，将两种方法结合使用节省的空间是 86%。\n\n下面是使用 DevTools 检查工作状况时的理想情况：\n\n{% asset_img 997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg 997aee7f7378ac61ca5b36877a65f44c3ed70bc5 %}\n\n# Gzip压缩 要高效得多，而将两种方法结合起来更为理想。\n\nGzip 压缩节省的空间大概是 Minification 压缩的五倍。然而，通过 Minification 压缩，你也可以获得一些帮助，不过在构建步骤时你需要耗费一些额外的力气。\n\n同样[有证据](http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html#minifi)证明浏览器在读取和解析 Minification 压缩的文件时速度更快：\n\n> 正如预期的那样，除了缩短网络传输时间以外，Minification 压缩还有助于解析和加载。这也许是因为缺少注释符和额外的空白符。\n\n微软也开始为此优化它们的语法分析器：\n\n> 因此，在 Window 10 和 Microsoft Edge 中，我们新添加了快速路径，改善了在 Chakra 的 JIT 编译器中嵌入和优化部分探视程序的体验，以保证压缩代码的运行速度不低于原始版本。通过这些改变，通过 UglifyJS 压缩过的个体代码模式的性能提高了 20% 到 50%。\n\n缓存资源同样与这段对话相关，没有什么比一个不需要请求任何资源的浏览器速度更快了！关于这一点，网上或者[书](https://www.amazon.com/Designing-Performance-Weighing-Aesthetics-Speed/dp/1491902515/ref=as_li_ss_tl?ie=UTF8&linkCode=sl1&tag=css-tricks-20&linkId=d4d794b5604a084164c8ba33d2540283)中还有许多相关知识，不过很快我们也许会发布一些有关使用技巧的内容。","source":"_posts/Minification-压缩与-Gzip-压缩的区别（翻译）.md","raw":"---\ntitle: 【翻译】Minification 压缩与 Gzip 压缩的区别\ntags:\n  - 翻译\ncategories:\n  - 后端\n  - 构建工具\nabbrlink: 8214\ndate: 2019-03-14 10:43:53\n---\n\n> 原链接：https://css-tricks.com/the-difference-between-minification-and-gzipping/\n> 作者：Chris Coyier\n\n这两种方法都针对你网站上的资源（比如 .css 文件和 .js 文件）所使用。它们都用来压缩文件大小，使服务器和浏览器之间的网络更加通畅，提高网页性能。网络是网页的速度瓶颈所在，而压缩文件大小能够改善这一点。\n\n但这两者也截然不同。如果之前你并不知道这一点，那么你应当花时间来了解它。\n\n<!-- more -->\n\n# Minification 能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少 hex 代码的长度…\n\n……诸如此类。剩下的文件依然是有效代码。你不必尝试读取它或是使用它，它并没有违反任何规则。就像对原始文件那样，浏览器可以读取它和使用它。\n\nMinification 能够创建你最终使用的新文件。比如当你创建了一个名为 `style.css` 的文件之后，你可以把它压缩为 `style.min.css`。\n\n# Gizpping 能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\n\nJulia Evans 曾想出一个绝佳的方法来解释这一点（点击[这里](https://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/)查阅她发布的内容和视频）。下面是一首诗的第一段：\n\n```js\nOnce upon a midnight dreary, while I {pon}dered weak an{d wea}{ry,}\nOver many{ a }quaint{ and }curious volume of forgotten lore,\nW{hile I }nodded, n{ear}ly napping, su{dde}n{ly }th{ere} ca{me }a t{apping,}\nAs{ of }so{me o}ne gent{ly }r{apping, }{rapping} at my chamb{er }door.\n`'Tis{ some }visitor,'{ I }mu{tte}r{ed, }`t{apping at my chamber door} -\nO{nly th}is,{ and }no{thi}{ng }m{ore}.\n```\n\nGzip 识别出括弧里的文字都是重复的，因此将会使用指针来代替它们，这样这些文字占用的空间将会比原来更小。\n\n对于减少文件大小、尤其是代码而言，这种方法十分高效，因为代码中有大量重复的内容。设想一下一个 HTML 文件里有多少个 `<div`，一个 CSS 文件里又有多少 `{`。\n\n你也可以创建某个文件的 Gzip 压缩版本，比如 style.css.zip。但你一般不会这样做，浏览器也不知道应该如何使用这个文件。\n\n在网页中，Gzip 压缩直接通过服务器完成。因此你要做的是配置服务器。一旦完成配置，Gzip 压缩将会自动进行，你无需再做任何工作。服务器会压缩文件，并通过网络传送文件。浏览器则接受文件，并在使用之前进行解压。我从未听谁提到过压缩和解压的成本，因此在这里我假设这些成本可以忽略不计，并且我们获得的受益远大于成本。\n\n点击[这里](https://css-tricks.com/snippets/htaccess/active-gzip-compression/)查看如何在 Apache 服务器中进行配置，这里使用了 `mod_deflate` 模块。H5BP 也为所有常见的服务器[提供了服务器配置](https://github.com/h5bp/server-configs)，包括 Gzipping。\n\n# 示例\n\n我们将用到 [Bootstrap](https://getbootstrap.com/) 中常见的 CSS 文件。\n\n{% asset_img 3e99e9b284d401c365c5044bc715ba44c9246f83.jpg 3e99e9b284d401c365c5044bc715ba44c9246f83 %}\n\n通过 Minification 来压缩这个 CSS 文件，你将节省 17% 的空间，而使用 Gzipping 能够节省 85%，将两种方法结合使用节省的空间是 86%。\n\n下面是使用 DevTools 检查工作状况时的理想情况：\n\n{% asset_img 997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg 997aee7f7378ac61ca5b36877a65f44c3ed70bc5 %}\n\n# Gzip压缩 要高效得多，而将两种方法结合起来更为理想。\n\nGzip 压缩节省的空间大概是 Minification 压缩的五倍。然而，通过 Minification 压缩，你也可以获得一些帮助，不过在构建步骤时你需要耗费一些额外的力气。\n\n同样[有证据](http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html#minifi)证明浏览器在读取和解析 Minification 压缩的文件时速度更快：\n\n> 正如预期的那样，除了缩短网络传输时间以外，Minification 压缩还有助于解析和加载。这也许是因为缺少注释符和额外的空白符。\n\n微软也开始为此优化它们的语法分析器：\n\n> 因此，在 Window 10 和 Microsoft Edge 中，我们新添加了快速路径，改善了在 Chakra 的 JIT 编译器中嵌入和优化部分探视程序的体验，以保证压缩代码的运行速度不低于原始版本。通过这些改变，通过 UglifyJS 压缩过的个体代码模式的性能提高了 20% 到 50%。\n\n缓存资源同样与这段对话相关，没有什么比一个不需要请求任何资源的浏览器速度更快了！关于这一点，网上或者[书](https://www.amazon.com/Designing-Performance-Weighing-Aesthetics-Speed/dp/1491902515/ref=as_li_ss_tl?ie=UTF8&linkCode=sl1&tag=css-tricks-20&linkId=d4d794b5604a084164c8ba33d2540283)中还有许多相关知识，不过很快我们也许会发布一些有关使用技巧的内容。","slug":"Minification-压缩与-Gzip-压缩的区别（翻译）","published":1,"updated":"2020-11-22T02:46:42.369Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyeb000dkhsr6cdw00si","content":"<blockquote>\n<p>原链接：<a href=\"https://css-tricks.com/the-difference-between-minification-and-gzipping/\">https://css-tricks.com/the-difference-between-minification-and-gzipping/</a><br>作者：Chris Coyier</p>\n</blockquote>\n<p>这两种方法都针对你网站上的资源（比如 .css 文件和 .js 文件）所使用。它们都用来压缩文件大小，使服务器和浏览器之间的网络更加通畅，提高网页性能。网络是网页的速度瓶颈所在，而压缩文件大小能够改善这一点。</p>\n<p>但这两者也截然不同。如果之前你并不知道这一点，那么你应当花时间来了解它。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"Minification-能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少-hex-代码的长度…\"><a href=\"#Minification-能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少-hex-代码的长度…\" class=\"headerlink\" title=\"Minification 能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少 hex 代码的长度…\"></a>Minification 能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少 hex 代码的长度…</h1><p>……诸如此类。剩下的文件依然是有效代码。你不必尝试读取它或是使用它，它并没有违反任何规则。就像对原始文件那样，浏览器可以读取它和使用它。</p>\n<p>Minification 能够创建你最终使用的新文件。比如当你创建了一个名为 <code>style.css</code> 的文件之后，你可以把它压缩为 <code>style.min.css</code>。</p>\n<h1 id=\"Gizpping-能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\"><a href=\"#Gizpping-能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\" class=\"headerlink\" title=\"Gizpping 能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\"></a>Gizpping 能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。</h1><p>Julia Evans 曾想出一个绝佳的方法来解释这一点（点击<a href=\"https://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/\">这里</a>查阅她发布的内容和视频）。下面是一首诗的第一段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Once upon a midnight dreary, <span class=\"keyword\">while</span> I &#123;pon&#125;dered weak an&#123;d wea&#125;&#123;ry,&#125;</span><br><span class=\"line\">Over many&#123; a &#125;quaint&#123; and &#125;curious volume <span class=\"keyword\">of</span> forgotten lore,</span><br><span class=\"line\">W&#123;hile I &#125;nodded, n&#123;ear&#125;ly napping, su&#123;dde&#125;n&#123;ly &#125;th&#123;ere&#125; ca&#123;me &#125;a t&#123;apping,&#125;</span><br><span class=\"line\">As&#123; <span class=\"keyword\">of</span> &#125;so&#123;me o&#125;ne gent&#123;ly &#125;r&#123;apping, &#125;&#123;rapping&#125; at my chamb&#123;er &#125;door.</span><br><span class=\"line\"><span class=\"string\">`&#x27;Tis&#123; some &#125;visitor,&#x27;&#123; I &#125;mu&#123;tte&#125;r&#123;ed, &#125;`</span>t&#123;apping at my chamber door&#125; -</span><br><span class=\"line\">O&#123;nly th&#125;is,&#123; and &#125;no&#123;thi&#125;&#123;ng &#125;m&#123;ore&#125;.</span><br></pre></td></tr></table></figure>\n\n<p>Gzip 识别出括弧里的文字都是重复的，因此将会使用指针来代替它们，这样这些文字占用的空间将会比原来更小。</p>\n<p>对于减少文件大小、尤其是代码而言，这种方法十分高效，因为代码中有大量重复的内容。设想一下一个 HTML 文件里有多少个 <code>&lt;div</code>，一个 CSS 文件里又有多少 <code>&#123;</code>。</p>\n<p>你也可以创建某个文件的 Gzip 压缩版本，比如 style.css.zip。但你一般不会这样做，浏览器也不知道应该如何使用这个文件。</p>\n<p>在网页中，Gzip 压缩直接通过服务器完成。因此你要做的是配置服务器。一旦完成配置，Gzip 压缩将会自动进行，你无需再做任何工作。服务器会压缩文件，并通过网络传送文件。浏览器则接受文件，并在使用之前进行解压。我从未听谁提到过压缩和解压的成本，因此在这里我假设这些成本可以忽略不计，并且我们获得的受益远大于成本。</p>\n<p>点击<a href=\"https://css-tricks.com/snippets/htaccess/active-gzip-compression/\">这里</a>查看如何在 Apache 服务器中进行配置，这里使用了 <code>mod_deflate</code> 模块。H5BP 也为所有常见的服务器<a href=\"https://github.com/h5bp/server-configs\">提供了服务器配置</a>，包括 Gzipping。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>我们将用到 <a href=\"https://getbootstrap.com/\">Bootstrap</a> 中常见的 CSS 文件。</p>\n<img src=\"/posts/8214/3e99e9b284d401c365c5044bc715ba44c9246f83.jpg\" class=\"\" title=\"3e99e9b284d401c365c5044bc715ba44c9246f83\">\n\n<p>通过 Minification 来压缩这个 CSS 文件，你将节省 17% 的空间，而使用 Gzipping 能够节省 85%，将两种方法结合使用节省的空间是 86%。</p>\n<p>下面是使用 DevTools 检查工作状况时的理想情况：</p>\n<img src=\"/posts/8214/997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg\" class=\"\" title=\"997aee7f7378ac61ca5b36877a65f44c3ed70bc5\">\n\n<h1 id=\"Gzip压缩-要高效得多，而将两种方法结合起来更为理想。\"><a href=\"#Gzip压缩-要高效得多，而将两种方法结合起来更为理想。\" class=\"headerlink\" title=\"Gzip压缩 要高效得多，而将两种方法结合起来更为理想。\"></a>Gzip压缩 要高效得多，而将两种方法结合起来更为理想。</h1><p>Gzip 压缩节省的空间大概是 Minification 压缩的五倍。然而，通过 Minification 压缩，你也可以获得一些帮助，不过在构建步骤时你需要耗费一些额外的力气。</p>\n<p>同样<a href=\"http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html#minifi\">有证据</a>证明浏览器在读取和解析 Minification 压缩的文件时速度更快：</p>\n<blockquote>\n<p>正如预期的那样，除了缩短网络传输时间以外，Minification 压缩还有助于解析和加载。这也许是因为缺少注释符和额外的空白符。</p>\n</blockquote>\n<p>微软也开始为此优化它们的语法分析器：</p>\n<blockquote>\n<p>因此，在 Window 10 和 Microsoft Edge 中，我们新添加了快速路径，改善了在 Chakra 的 JIT 编译器中嵌入和优化部分探视程序的体验，以保证压缩代码的运行速度不低于原始版本。通过这些改变，通过 UglifyJS 压缩过的个体代码模式的性能提高了 20% 到 50%。</p>\n</blockquote>\n<p>缓存资源同样与这段对话相关，没有什么比一个不需要请求任何资源的浏览器速度更快了！关于这一点，网上或者<a href=\"https://www.amazon.com/Designing-Performance-Weighing-Aesthetics-Speed/dp/1491902515/ref=as_li_ss_tl?ie=UTF8&linkCode=sl1&tag=css-tricks-20&linkId=d4d794b5604a084164c8ba33d2540283\">书</a>中还有许多相关知识，不过很快我们也许会发布一些有关使用技巧的内容。</p>\n","site":{"data":{}},"excerpt":"<blockquote>\n<p>原链接：<a href=\"https://css-tricks.com/the-difference-between-minification-and-gzipping/\">https://css-tricks.com/the-difference-between-minification-and-gzipping/</a><br>作者：Chris Coyier</p>\n</blockquote>\n<p>这两种方法都针对你网站上的资源（比如 .css 文件和 .js 文件）所使用。它们都用来压缩文件大小，使服务器和浏览器之间的网络更加通畅，提高网页性能。网络是网页的速度瓶颈所在，而压缩文件大小能够改善这一点。</p>\n<p>但这两者也截然不同。如果之前你并不知道这一点，那么你应当花时间来了解它。</p>","more":"<h1 id=\"Minification-能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少-hex-代码的长度…\"><a href=\"#Minification-能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少-hex-代码的长度…\" class=\"headerlink\" title=\"Minification 能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少 hex 代码的长度…\"></a>Minification 能够删除空格符（whitespace）、注释符（comments）、无用的分号（semicolons）或是减少 hex 代码的长度…</h1><p>……诸如此类。剩下的文件依然是有效代码。你不必尝试读取它或是使用它，它并没有违反任何规则。就像对原始文件那样，浏览器可以读取它和使用它。</p>\n<p>Minification 能够创建你最终使用的新文件。比如当你创建了一个名为 <code>style.css</code> 的文件之后，你可以把它压缩为 <code>style.min.css</code>。</p>\n<h1 id=\"Gizpping-能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\"><a href=\"#Gizpping-能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\" class=\"headerlink\" title=\"Gizpping 能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。\"></a>Gizpping 能识别所有重复的字符串，并使用指代该字符串第一个实例的指针来代替。</h1><p>Julia Evans 曾想出一个绝佳的方法来解释这一点（点击<a href=\"https://jvns.ca/blog/2013/10/24/day-16-gzip-plus-poetry-equals-awesome/\">这里</a>查阅她发布的内容和视频）。下面是一首诗的第一段：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Once upon a midnight dreary, <span class=\"keyword\">while</span> I &#123;pon&#125;dered weak an&#123;d wea&#125;&#123;ry,&#125;</span><br><span class=\"line\">Over many&#123; a &#125;quaint&#123; and &#125;curious volume <span class=\"keyword\">of</span> forgotten lore,</span><br><span class=\"line\">W&#123;hile I &#125;nodded, n&#123;ear&#125;ly napping, su&#123;dde&#125;n&#123;ly &#125;th&#123;ere&#125; ca&#123;me &#125;a t&#123;apping,&#125;</span><br><span class=\"line\">As&#123; <span class=\"keyword\">of</span> &#125;so&#123;me o&#125;ne gent&#123;ly &#125;r&#123;apping, &#125;&#123;rapping&#125; at my chamb&#123;er &#125;door.</span><br><span class=\"line\"><span class=\"string\">`&#x27;Tis&#123; some &#125;visitor,&#x27;&#123; I &#125;mu&#123;tte&#125;r&#123;ed, &#125;`</span>t&#123;apping at my chamber door&#125; -</span><br><span class=\"line\">O&#123;nly th&#125;is,&#123; and &#125;no&#123;thi&#125;&#123;ng &#125;m&#123;ore&#125;.</span><br></pre></td></tr></table></figure>\n\n<p>Gzip 识别出括弧里的文字都是重复的，因此将会使用指针来代替它们，这样这些文字占用的空间将会比原来更小。</p>\n<p>对于减少文件大小、尤其是代码而言，这种方法十分高效，因为代码中有大量重复的内容。设想一下一个 HTML 文件里有多少个 <code>&lt;div</code>，一个 CSS 文件里又有多少 <code>&#123;</code>。</p>\n<p>你也可以创建某个文件的 Gzip 压缩版本，比如 style.css.zip。但你一般不会这样做，浏览器也不知道应该如何使用这个文件。</p>\n<p>在网页中，Gzip 压缩直接通过服务器完成。因此你要做的是配置服务器。一旦完成配置，Gzip 压缩将会自动进行，你无需再做任何工作。服务器会压缩文件，并通过网络传送文件。浏览器则接受文件，并在使用之前进行解压。我从未听谁提到过压缩和解压的成本，因此在这里我假设这些成本可以忽略不计，并且我们获得的受益远大于成本。</p>\n<p>点击<a href=\"https://css-tricks.com/snippets/htaccess/active-gzip-compression/\">这里</a>查看如何在 Apache 服务器中进行配置，这里使用了 <code>mod_deflate</code> 模块。H5BP 也为所有常见的服务器<a href=\"https://github.com/h5bp/server-configs\">提供了服务器配置</a>，包括 Gzipping。</p>\n<h1 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h1><p>我们将用到 <a href=\"https://getbootstrap.com/\">Bootstrap</a> 中常见的 CSS 文件。</p>\n<img src=\"/posts/8214/3e99e9b284d401c365c5044bc715ba44c9246f83.jpg\" class=\"\" title=\"3e99e9b284d401c365c5044bc715ba44c9246f83\">\n\n<p>通过 Minification 来压缩这个 CSS 文件，你将节省 17% 的空间，而使用 Gzipping 能够节省 85%，将两种方法结合使用节省的空间是 86%。</p>\n<p>下面是使用 DevTools 检查工作状况时的理想情况：</p>\n<img src=\"/posts/8214/997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg\" class=\"\" title=\"997aee7f7378ac61ca5b36877a65f44c3ed70bc5\">\n\n<h1 id=\"Gzip压缩-要高效得多，而将两种方法结合起来更为理想。\"><a href=\"#Gzip压缩-要高效得多，而将两种方法结合起来更为理想。\" class=\"headerlink\" title=\"Gzip压缩 要高效得多，而将两种方法结合起来更为理想。\"></a>Gzip压缩 要高效得多，而将两种方法结合起来更为理想。</h1><p>Gzip 压缩节省的空间大概是 Minification 压缩的五倍。然而，通过 Minification 压缩，你也可以获得一些帮助，不过在构建步骤时你需要耗费一些额外的力气。</p>\n<p>同样<a href=\"http://carlos.bueno.org/2010/02/measuring-javascript-parse-and-load.html#minifi\">有证据</a>证明浏览器在读取和解析 Minification 压缩的文件时速度更快：</p>\n<blockquote>\n<p>正如预期的那样，除了缩短网络传输时间以外，Minification 压缩还有助于解析和加载。这也许是因为缺少注释符和额外的空白符。</p>\n</blockquote>\n<p>微软也开始为此优化它们的语法分析器：</p>\n<blockquote>\n<p>因此，在 Window 10 和 Microsoft Edge 中，我们新添加了快速路径，改善了在 Chakra 的 JIT 编译器中嵌入和优化部分探视程序的体验，以保证压缩代码的运行速度不低于原始版本。通过这些改变，通过 UglifyJS 压缩过的个体代码模式的性能提高了 20% 到 50%。</p>\n</blockquote>\n<p>缓存资源同样与这段对话相关，没有什么比一个不需要请求任何资源的浏览器速度更快了！关于这一点，网上或者<a href=\"https://www.amazon.com/Designing-Performance-Weighing-Aesthetics-Speed/dp/1491902515/ref=as_li_ss_tl?ie=UTF8&linkCode=sl1&tag=css-tricks-20&linkId=d4d794b5604a084164c8ba33d2540283\">书</a>中还有许多相关知识，不过很快我们也许会发布一些有关使用技巧的内容。</p>"},{"title":"Promise用法","abbrlink":7878,"date":"2019-01-07T15:50:07.000Z","_content":"\n## Promise是什么\n\nPromise 是一种异步编程的解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大。\n\n## 诞生的原因\n\n异步网络请求的**回调地狱**，而且我们还得对每次请求的结果进行一些处理，代码会更加臃肿。一张图完美诠释：\n\n{% asset_img call-back-hello.jpg 回调地狱 %}\n\n不够？再加一张：\n\n{% asset_img 8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg 行为艺术 %}\n\n<!-- more -->\n\n## Promise的三种状态\n\n- pedding 等待（默认状态。异步代码执行完毕后会转换为以下两种状态）\n- resolve 成功\n- reject 失败\n\n## 基本用法\n\n### 语法\n\n- Promise:\n  - 构造函数\n  - 接受一个参数：callback，我们把要执行的异步任务放置在这个callback中\n- then:\n  - Promise对象下的一个方法：该方法在Promise对象的状态发生改变的时候触发then的回调\n\n```js\n//defined Promise async function\nfunction asyncFun(){\n    return new Promise((resolve, reject) => {\n        if (resolve) {\n            resolve(/*resolve parameter*/);\n        }else{\n            reject(new Error(/*Error*/));\n        }\n    })\n}\n\n//use Promise&then\nasyncFun().then(/*function*/).then(/*function*/)...\n```\n\n## Promise特性\n\n### 立即执行\n\n```js\nlet p = new Promise((resolve, reject) => {\n    // 当Promise被实例化的时候，callback的异步任务就会被执行\n    console.log(\"一个Promise对象被创建出来\");\n    resolve(\"success\");\n});\n\nconsole.log(\"flag\");\n\np.then((data) => {\n    console.log(data);\n});\n\n// 执行结果：\n// 一个Promise对象被创建出来\n// flag\n// success\n```\n\n### 状态不可逆\n\n```js\nlet p = new Promise((resolve, reject) => {\n    resolve(\"success\");\n    reject(\"reject\");\n});\n\np.then((data) => {\n    console.log(data);\n});\n\n// 执行结果：\n// success\n```\n\n### 链式调用\n\n```js\nlet p = new Promise((resolve, reject) => {\n    // 通过传入的resolve, reject，去改变当前Promise任务的状态\n    // resolve, reject 是两个函数，调用 resolve ，会把状态改成 resolved ，调用 reject 函数会把状态改成 rejected\n    setTimeout(() => {\n        console.log(1);\n        reject();\n    }, 1000);\n});\n\n// then接受两个参数：这两个参数都是回调，当对应的 promise 对象的状态变成了resolved，那么 then 的第一个 callback 就会被执行，如果状态变成了 rejected ，那么 then 的第二个 callback 就会被执行\np.then(() => {\n    console.log('成功');\n}, () => {\n    console.log('失败');\n} );\n\n// 执行结果：\n// 1\n// 失败\n```\n\n### then的回调异步性\n\n```js\nlet p = new Promise((resolve, reject) => {\n    console.log(\"我是Promise的callback中的代码\");\n    setTimeout(() => {\n        resolve(\"我1s后才会被执行\");\n    }, 1000);\n});\n\np.then((data) => {\n    console.log(data);\n});\n\nconsole.log(\"我是主线程中的同步代码\");\n\n// 执行结果：\n// 我是Promise的callback中的代码\n// 我是主线程中的同步代码\n// 我1s后才会被执行\n```\n\n解释：Promise 的 callback 回调函数中的代码是立即执行的（setTimeout 这个定时器也是立即执行的，只是函数内的 resolve 被延迟1s执行，跟 Promise 本身的立即执行没关系），但 then 方法中的回调函数执行则是异步的，因此，`\"我1s后才会被执行\"` 会在最后输出。\n\n### 异常的捕获\n\nPromise的异常有两种方法可以捕获，一种是 then 的第二个回调；一种 `.catch()` 来捕获前一个 Promise 抛出的错误。\n\n```js\nlet p = new Promise((resolve, reject) => {\n    reject(\"error\");\n});\n\np.then(data => {\n    console.log(\"success\")\n}, error => {\n    console.log(error);\n});\n\n// 执行结果：\n// error\nlet p = new Promise((resolve, reject) => {\n    reject(\"error\");\n});\n\np.then(data => {\n    console.log(\"success\")\n}).catch(error => {\n    console.log(\"catch:\" + error);\n});\n\n// 执行结果：\n// catch:error\n```\n\n## Promise.all 和 Promise.race\n\n### Promise.all\n\nPromise.all 接收一个参数，它必须是可以迭代的，例如数组。\n它通常用来处理一些并发的异步操作，即它们的结果互不干扰，但是又需要异步执行。当所有 Promise 都成功的时候，整个 Promise.all 才成功。成功调用后返回一个数组，数组的值是有序的，顺序就是传入参数的数组顺序：\n\n> 成功的情况\n\n```js\nlet arr = [1, 2, 3];\nlet tasks = arr.map(num => {\n    return new Promise((resolve, reject) => {\n        resolve(num * 5);\n    });\n});\n\nPromise.all(tasks).then(data => {\n    // 有序输出\n    console.log(arr); // [1, 2, 3]\n    console.log(data); // [5, 10, 15]\n});\n```\n\n> 失败的情况\n\n```js\nlet arr = [1, 2, 3];\nlet tasks = arr.map(num => {\n    return new Promise((resolve, reject) => {\n        if (num === 3) {\n            reject('rejected');\n        }\n        resolve(num * 5);\n    });\n});\n\nPromise.all(tasks).then(data => {\n    // 这里不会执行\n    console.log(arr);\n    console.log(data);\n}).catch(err => {\n    console.log(err); // rejected\n});\n```\n\n### Promise.race\n\nPromise.race 和 Promise.all 类似，都接收一个可以迭代的参数，但是不同之处是 Promise.race 的状态变化不是全部受参数内的状态影响，一旦参数内有一个值的状态发生的改变，那么该 Promise 的状态就是改变的状态。就跟 race 单词的字面意思一样，谁跑的快谁赢。\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 300, 'p1 doned');\n});\n\nvar p2 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 50, 'p2 doned');\n});\n\nvar p3 = new Promise((resolve, reject) => {\n    setTimeout(reject, 100, 'p3 rejected');\n});\n\nPromise.race([p1, p2, p3]).then(data => {\n    // 显然p2更快，所以状态变成了fulfilled\n    // 如果p3更快，那么状态就会变成rejected\n    console.log(data); // p2 doned\n}).catch(function(err) {\n    console.log(err); // 不执行\n});\n```\n","source":"_posts/Promise用法.md","raw":"---\ntitle: Promise用法\ntags:\n  - Promise\ncategories:\n  - 前端\n  - JS\nabbrlink: 7878\ndate: 2019-01-07 23:50:07\n---\n\n## Promise是什么\n\nPromise 是一种异步编程的解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大。\n\n## 诞生的原因\n\n异步网络请求的**回调地狱**，而且我们还得对每次请求的结果进行一些处理，代码会更加臃肿。一张图完美诠释：\n\n{% asset_img call-back-hello.jpg 回调地狱 %}\n\n不够？再加一张：\n\n{% asset_img 8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg 行为艺术 %}\n\n<!-- more -->\n\n## Promise的三种状态\n\n- pedding 等待（默认状态。异步代码执行完毕后会转换为以下两种状态）\n- resolve 成功\n- reject 失败\n\n## 基本用法\n\n### 语法\n\n- Promise:\n  - 构造函数\n  - 接受一个参数：callback，我们把要执行的异步任务放置在这个callback中\n- then:\n  - Promise对象下的一个方法：该方法在Promise对象的状态发生改变的时候触发then的回调\n\n```js\n//defined Promise async function\nfunction asyncFun(){\n    return new Promise((resolve, reject) => {\n        if (resolve) {\n            resolve(/*resolve parameter*/);\n        }else{\n            reject(new Error(/*Error*/));\n        }\n    })\n}\n\n//use Promise&then\nasyncFun().then(/*function*/).then(/*function*/)...\n```\n\n## Promise特性\n\n### 立即执行\n\n```js\nlet p = new Promise((resolve, reject) => {\n    // 当Promise被实例化的时候，callback的异步任务就会被执行\n    console.log(\"一个Promise对象被创建出来\");\n    resolve(\"success\");\n});\n\nconsole.log(\"flag\");\n\np.then((data) => {\n    console.log(data);\n});\n\n// 执行结果：\n// 一个Promise对象被创建出来\n// flag\n// success\n```\n\n### 状态不可逆\n\n```js\nlet p = new Promise((resolve, reject) => {\n    resolve(\"success\");\n    reject(\"reject\");\n});\n\np.then((data) => {\n    console.log(data);\n});\n\n// 执行结果：\n// success\n```\n\n### 链式调用\n\n```js\nlet p = new Promise((resolve, reject) => {\n    // 通过传入的resolve, reject，去改变当前Promise任务的状态\n    // resolve, reject 是两个函数，调用 resolve ，会把状态改成 resolved ，调用 reject 函数会把状态改成 rejected\n    setTimeout(() => {\n        console.log(1);\n        reject();\n    }, 1000);\n});\n\n// then接受两个参数：这两个参数都是回调，当对应的 promise 对象的状态变成了resolved，那么 then 的第一个 callback 就会被执行，如果状态变成了 rejected ，那么 then 的第二个 callback 就会被执行\np.then(() => {\n    console.log('成功');\n}, () => {\n    console.log('失败');\n} );\n\n// 执行结果：\n// 1\n// 失败\n```\n\n### then的回调异步性\n\n```js\nlet p = new Promise((resolve, reject) => {\n    console.log(\"我是Promise的callback中的代码\");\n    setTimeout(() => {\n        resolve(\"我1s后才会被执行\");\n    }, 1000);\n});\n\np.then((data) => {\n    console.log(data);\n});\n\nconsole.log(\"我是主线程中的同步代码\");\n\n// 执行结果：\n// 我是Promise的callback中的代码\n// 我是主线程中的同步代码\n// 我1s后才会被执行\n```\n\n解释：Promise 的 callback 回调函数中的代码是立即执行的（setTimeout 这个定时器也是立即执行的，只是函数内的 resolve 被延迟1s执行，跟 Promise 本身的立即执行没关系），但 then 方法中的回调函数执行则是异步的，因此，`\"我1s后才会被执行\"` 会在最后输出。\n\n### 异常的捕获\n\nPromise的异常有两种方法可以捕获，一种是 then 的第二个回调；一种 `.catch()` 来捕获前一个 Promise 抛出的错误。\n\n```js\nlet p = new Promise((resolve, reject) => {\n    reject(\"error\");\n});\n\np.then(data => {\n    console.log(\"success\")\n}, error => {\n    console.log(error);\n});\n\n// 执行结果：\n// error\nlet p = new Promise((resolve, reject) => {\n    reject(\"error\");\n});\n\np.then(data => {\n    console.log(\"success\")\n}).catch(error => {\n    console.log(\"catch:\" + error);\n});\n\n// 执行结果：\n// catch:error\n```\n\n## Promise.all 和 Promise.race\n\n### Promise.all\n\nPromise.all 接收一个参数，它必须是可以迭代的，例如数组。\n它通常用来处理一些并发的异步操作，即它们的结果互不干扰，但是又需要异步执行。当所有 Promise 都成功的时候，整个 Promise.all 才成功。成功调用后返回一个数组，数组的值是有序的，顺序就是传入参数的数组顺序：\n\n> 成功的情况\n\n```js\nlet arr = [1, 2, 3];\nlet tasks = arr.map(num => {\n    return new Promise((resolve, reject) => {\n        resolve(num * 5);\n    });\n});\n\nPromise.all(tasks).then(data => {\n    // 有序输出\n    console.log(arr); // [1, 2, 3]\n    console.log(data); // [5, 10, 15]\n});\n```\n\n> 失败的情况\n\n```js\nlet arr = [1, 2, 3];\nlet tasks = arr.map(num => {\n    return new Promise((resolve, reject) => {\n        if (num === 3) {\n            reject('rejected');\n        }\n        resolve(num * 5);\n    });\n});\n\nPromise.all(tasks).then(data => {\n    // 这里不会执行\n    console.log(arr);\n    console.log(data);\n}).catch(err => {\n    console.log(err); // rejected\n});\n```\n\n### Promise.race\n\nPromise.race 和 Promise.all 类似，都接收一个可以迭代的参数，但是不同之处是 Promise.race 的状态变化不是全部受参数内的状态影响，一旦参数内有一个值的状态发生的改变，那么该 Promise 的状态就是改变的状态。就跟 race 单词的字面意思一样，谁跑的快谁赢。\n\n```js\nlet p1 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 300, 'p1 doned');\n});\n\nvar p2 = new Promise((resolve, reject) => {\n    setTimeout(resolve, 50, 'p2 doned');\n});\n\nvar p3 = new Promise((resolve, reject) => {\n    setTimeout(reject, 100, 'p3 rejected');\n});\n\nPromise.race([p1, p2, p3]).then(data => {\n    // 显然p2更快，所以状态变成了fulfilled\n    // 如果p3更快，那么状态就会变成rejected\n    console.log(data); // p2 doned\n}).catch(function(err) {\n    console.log(err); // 不执行\n});\n```\n","slug":"Promise用法","published":1,"updated":"2020-11-21T15:59:31.680Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyee000gkhsr0rao8e1c","content":"<h2 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h2><p>Promise 是一种异步编程的解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大。</p>\n<h2 id=\"诞生的原因\"><a href=\"#诞生的原因\" class=\"headerlink\" title=\"诞生的原因\"></a>诞生的原因</h2><p>异步网络请求的<strong>回调地狱</strong>，而且我们还得对每次请求的结果进行一些处理，代码会更加臃肿。一张图完美诠释：</p>\n<img src=\"/posts/7878/call-back-hello.jpg\" class=\"\" title=\"回调地狱\">\n\n<p>不够？再加一张：</p>\n<img src=\"/posts/7878/8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg\" class=\"\" title=\"行为艺术\">\n\n<a id=\"more\"></a>\n\n<h2 id=\"Promise的三种状态\"><a href=\"#Promise的三种状态\" class=\"headerlink\" title=\"Promise的三种状态\"></a>Promise的三种状态</h2><ul>\n<li>pedding 等待（默认状态。异步代码执行完毕后会转换为以下两种状态）</li>\n<li>resolve 成功</li>\n<li>reject 失败</li>\n</ul>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>Promise:<ul>\n<li>构造函数</li>\n<li>接受一个参数：callback，我们把要执行的异步任务放置在这个callback中</li>\n</ul>\n</li>\n<li>then:<ul>\n<li>Promise对象下的一个方法：该方法在Promise对象的状态发生改变的时候触发then的回调</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//defined Promise async function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">            resolve(<span class=\"comment\">/*resolve parameter*/</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"comment\">/*Error*/</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use Promise&amp;then</span></span><br><span class=\"line\">asyncFun().then(<span class=\"comment\">/*function*/</span>).then(<span class=\"comment\">/*function*/</span>)...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise特性\"><a href=\"#Promise特性\" class=\"headerlink\" title=\"Promise特性\"></a>Promise特性</h2><h3 id=\"立即执行\"><a href=\"#立即执行\" class=\"headerlink\" title=\"立即执行\"></a>立即执行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当Promise被实例化的时候，callback的异步任务就会被执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;一个Promise对象被创建出来&quot;</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;flag&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 一个Promise对象被创建出来</span></span><br><span class=\"line\"><span class=\"comment\">// flag</span></span><br><span class=\"line\"><span class=\"comment\">// success</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"状态不可逆\"><a href=\"#状态不可逆\" class=\"headerlink\" title=\"状态不可逆\"></a>状态不可逆</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;reject&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// success</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过传入的resolve, reject，去改变当前Promise任务的状态</span></span><br><span class=\"line\">    <span class=\"comment\">// resolve, reject 是两个函数，调用 resolve ，会把状态改成 resolved ，调用 reject 函数会把状态改成 rejected</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        reject();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// then接受两个参数：这两个参数都是回调，当对应的 promise 对象的状态变成了resolved，那么 then 的第一个 callback 就会被执行，如果状态变成了 rejected ，那么 then 的第二个 callback 就会被执行</span></span><br><span class=\"line\">p.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 失败</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"then的回调异步性\"><a href=\"#then的回调异步性\" class=\"headerlink\" title=\"then的回调异步性\"></a>then的回调异步性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是Promise的callback中的代码&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;我1s后才会被执行&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是主线程中的同步代码&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 我是Promise的callback中的代码</span></span><br><span class=\"line\"><span class=\"comment\">// 我是主线程中的同步代码</span></span><br><span class=\"line\"><span class=\"comment\">// 我1s后才会被执行</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：Promise 的 callback 回调函数中的代码是立即执行的（setTimeout 这个定时器也是立即执行的，只是函数内的 resolve 被延迟1s执行，跟 Promise 本身的立即执行没关系），但 then 方法中的回调函数执行则是异步的，因此，<code>&quot;我1s后才会被执行&quot;</code> 会在最后输出。</p>\n<h3 id=\"异常的捕获\"><a href=\"#异常的捕获\" class=\"headerlink\" title=\"异常的捕获\"></a>异常的捕获</h3><p>Promise的异常有两种方法可以捕获，一种是 then 的第二个回调；一种 <code>.catch()</code> 来捕获前一个 Promise 抛出的错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;catch:&quot;</span> + error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// catch:error</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all-和-Promise-race\"><a href=\"#Promise-all-和-Promise-race\" class=\"headerlink\" title=\"Promise.all 和 Promise.race\"></a>Promise.all 和 Promise.race</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>Promise.all 接收一个参数，它必须是可以迭代的，例如数组。<br>它通常用来处理一些并发的异步操作，即它们的结果互不干扰，但是又需要异步执行。当所有 Promise 都成功的时候，整个 Promise.all 才成功。成功调用后返回一个数组，数组的值是有序的，顺序就是传入参数的数组顺序：</p>\n<blockquote>\n<p>成功的情况</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tasks = arr.map(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(num * <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(tasks).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有序输出</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// [5, 10, 15]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>失败的情况</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tasks = arr.map(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;rejected&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resolve(num * <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(tasks).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里不会执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// rejected</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p>Promise.race 和 Promise.all 类似，都接收一个可以迭代的参数，但是不同之处是 Promise.race 的状态变化不是全部受参数内的状态影响，一旦参数内有一个值的状态发生的改变，那么该 Promise 的状态就是改变的状态。就跟 race 单词的字面意思一样，谁跑的快谁赢。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">300</span>, <span class=\"string\">&#x27;p1 doned&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">50</span>, <span class=\"string\">&#x27;p2 doned&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(reject, <span class=\"number\">100</span>, <span class=\"string\">&#x27;p3 rejected&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显然p2更快，所以状态变成了fulfilled</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果p3更快，那么状态就会变成rejected</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// p2 doned</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"Promise是什么\"><a href=\"#Promise是什么\" class=\"headerlink\" title=\"Promise是什么\"></a>Promise是什么</h2><p>Promise 是一种异步编程的解决方案，比传统的异步解决方案【回调函数】和【事件】更合理、更强大。</p>\n<h2 id=\"诞生的原因\"><a href=\"#诞生的原因\" class=\"headerlink\" title=\"诞生的原因\"></a>诞生的原因</h2><p>异步网络请求的<strong>回调地狱</strong>，而且我们还得对每次请求的结果进行一些处理，代码会更加臃肿。一张图完美诠释：</p>\n<img src=\"/posts/7878/call-back-hello.jpg\" class=\"\" title=\"回调地狱\">\n\n<p>不够？再加一张：</p>\n<img src=\"/posts/7878/8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg\" class=\"\" title=\"行为艺术\">","more":"<h2 id=\"Promise的三种状态\"><a href=\"#Promise的三种状态\" class=\"headerlink\" title=\"Promise的三种状态\"></a>Promise的三种状态</h2><ul>\n<li>pedding 等待（默认状态。异步代码执行完毕后会转换为以下两种状态）</li>\n<li>resolve 成功</li>\n<li>reject 失败</li>\n</ul>\n<h2 id=\"基本用法\"><a href=\"#基本用法\" class=\"headerlink\" title=\"基本用法\"></a>基本用法</h2><h3 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h3><ul>\n<li>Promise:<ul>\n<li>构造函数</li>\n<li>接受一个参数：callback，我们把要执行的异步任务放置在这个callback中</li>\n</ul>\n</li>\n<li>then:<ul>\n<li>Promise对象下的一个方法：该方法在Promise对象的状态发生改变的时候触发then的回调</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//defined Promise async function</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">asyncFun</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (resolve) &#123;</span><br><span class=\"line\">            resolve(<span class=\"comment\">/*resolve parameter*/</span>);</span><br><span class=\"line\">        &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            reject(<span class=\"keyword\">new</span> <span class=\"built_in\">Error</span>(<span class=\"comment\">/*Error*/</span>));</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//use Promise&amp;then</span></span><br><span class=\"line\">asyncFun().then(<span class=\"comment\">/*function*/</span>).then(<span class=\"comment\">/*function*/</span>)...</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise特性\"><a href=\"#Promise特性\" class=\"headerlink\" title=\"Promise特性\"></a>Promise特性</h2><h3 id=\"立即执行\"><a href=\"#立即执行\" class=\"headerlink\" title=\"立即执行\"></a>立即执行</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 当Promise被实例化的时候，callback的异步任务就会被执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;一个Promise对象被创建出来&quot;</span>);</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;flag&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 一个Promise对象被创建出来</span></span><br><span class=\"line\"><span class=\"comment\">// flag</span></span><br><span class=\"line\"><span class=\"comment\">// success</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"状态不可逆\"><a href=\"#状态不可逆\" class=\"headerlink\" title=\"状态不可逆\"></a>状态不可逆</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    resolve(<span class=\"string\">&quot;success&quot;</span>);</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;reject&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// success</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链式调用\"><a href=\"#链式调用\" class=\"headerlink\" title=\"链式调用\"></a>链式调用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 通过传入的resolve, reject，去改变当前Promise任务的状态</span></span><br><span class=\"line\">    <span class=\"comment\">// resolve, reject 是两个函数，调用 resolve ，会把状态改成 resolved ，调用 reject 函数会把状态改成 rejected</span></span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"number\">1</span>);</span><br><span class=\"line\">        reject();</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// then接受两个参数：这两个参数都是回调，当对应的 promise 对象的状态变成了resolved，那么 then 的第一个 callback 就会被执行，如果状态变成了 rejected ，那么 then 的第二个 callback 就会被执行</span></span><br><span class=\"line\">p.then(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;成功&#x27;</span>);</span><br><span class=\"line\">&#125;, <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;失败&#x27;</span>);</span><br><span class=\"line\">&#125; );</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 失败</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"then的回调异步性\"><a href=\"#then的回调异步性\" class=\"headerlink\" title=\"then的回调异步性\"></a>then的回调异步性</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是Promise的callback中的代码&quot;</span>);</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(<span class=\"string\">&quot;我1s后才会被执行&quot;</span>);</span><br><span class=\"line\">    &#125;, <span class=\"number\">1000</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\">(<span class=\"params\">data</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是主线程中的同步代码&quot;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// 我是Promise的callback中的代码</span></span><br><span class=\"line\"><span class=\"comment\">// 我是主线程中的同步代码</span></span><br><span class=\"line\"><span class=\"comment\">// 我1s后才会被执行</span></span><br></pre></td></tr></table></figure>\n\n<p>解释：Promise 的 callback 回调函数中的代码是立即执行的（setTimeout 这个定时器也是立即执行的，只是函数内的 resolve 被延迟1s执行，跟 Promise 本身的立即执行没关系），但 then 方法中的回调函数执行则是异步的，因此，<code>&quot;我1s后才会被执行&quot;</code> 会在最后输出。</p>\n<h3 id=\"异常的捕获\"><a href=\"#异常的捕获\" class=\"headerlink\" title=\"异常的捕获\"></a>异常的捕获</h3><p>Promise的异常有两种方法可以捕获，一种是 then 的第二个回调；一种 <code>.catch()</code> 来捕获前一个 Promise 抛出的错误。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">&#125;, <span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// error</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> p = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    reject(<span class=\"string\">&quot;error&quot;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">p.then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;success&quot;</span>)</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">error</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;catch:&quot;</span> + error);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 执行结果：</span></span><br><span class=\"line\"><span class=\"comment\">// catch:error</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Promise-all-和-Promise-race\"><a href=\"#Promise-all-和-Promise-race\" class=\"headerlink\" title=\"Promise.all 和 Promise.race\"></a>Promise.all 和 Promise.race</h2><h3 id=\"Promise-all\"><a href=\"#Promise-all\" class=\"headerlink\" title=\"Promise.all\"></a>Promise.all</h3><p>Promise.all 接收一个参数，它必须是可以迭代的，例如数组。<br>它通常用来处理一些并发的异步操作，即它们的结果互不干扰，但是又需要异步执行。当所有 Promise 都成功的时候，整个 Promise.all 才成功。成功调用后返回一个数组，数组的值是有序的，顺序就是传入参数的数组顺序：</p>\n<blockquote>\n<p>成功的情况</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tasks = arr.map(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        resolve(num * <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(tasks).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 有序输出</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr); <span class=\"comment\">// [1, 2, 3]</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// [5, 10, 15]</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>失败的情况</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> arr = [<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>];</span><br><span class=\"line\"><span class=\"keyword\">let</span> tasks = arr.map(<span class=\"function\"><span class=\"params\">num</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (num === <span class=\"number\">3</span>) &#123;</span><br><span class=\"line\">            reject(<span class=\"string\">&#x27;rejected&#x27;</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        resolve(num * <span class=\"number\">5</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.all(tasks).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 这里不会执行</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// rejected</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Promise-race\"><a href=\"#Promise-race\" class=\"headerlink\" title=\"Promise.race\"></a>Promise.race</h3><p>Promise.race 和 Promise.all 类似，都接收一个可以迭代的参数，但是不同之处是 Promise.race 的状态变化不是全部受参数内的状态影响，一旦参数内有一个值的状态发生的改变，那么该 Promise 的状态就是改变的状态。就跟 race 单词的字面意思一样，谁跑的快谁赢。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> p1 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">300</span>, <span class=\"string\">&#x27;p1 doned&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p2 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(resolve, <span class=\"number\">50</span>, <span class=\"string\">&#x27;p2 doned&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> p3 = <span class=\"keyword\">new</span> <span class=\"built_in\">Promise</span>(<span class=\"function\">(<span class=\"params\">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">setTimeout</span>(reject, <span class=\"number\">100</span>, <span class=\"string\">&#x27;p3 rejected&#x27;</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">Promise</span>.race([p1, p2, p3]).then(<span class=\"function\"><span class=\"params\">data</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 显然p2更快，所以状态变成了fulfilled</span></span><br><span class=\"line\">    <span class=\"comment\">// 如果p3更快，那么状态就会变成rejected</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data); <span class=\"comment\">// p2 doned</span></span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">err</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err); <span class=\"comment\">// 不执行</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>"},{"title":"Sequelize框架进阶","abbrlink":3278,"date":"2019-03-13T02:30:18.000Z","_content":"\n## 传送门\n\n- [Sequelize框架入门](https://evestorm.github.io/posts/1183/)\n\n## 前言\n\n上一篇入门讲到了 `Sequelize框架` 的基本用法，比如实现简单的增删查改。原本打算一篇文章写到底的，但感觉内容太多，对读者不太友好，就另开了这篇文章。\n\n虽然标题写着“进阶”，但其实有标题党的以为。这篇文章仍然着手于框架的使用，不涉及源码。大纲见侧边栏的目录，我们直接开始吧~\n\n<!-- more -->\n\n## 连表查询\n\n### 准备工作\n\n既然是连表查询，至少得有两个表吧。所以我们还需要另外新建一张表，这里起名为 `message` 表，表结构如下：\n\n{% asset_img message-table.png message-table %}\n\n其中 uid 对应用户的 id 。下面是两表的数据：\n\n{% asset_img user-message-data.png user-message-data %}\n\n接着我们新建一个 `app2.js` 文件，引入之前 `app.js` 中的部分代码（连接数据库+UserModel）以及创建一个 `MessageModel` 模型：\n\n```js\nconst Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize(\"miaov\", \"root\", \"root\", {\n    host: \"127.0.0.1\",\n    port: 8889,\n    dialect: \"mysql\"\n});\n\ntry {\n    sequelize.authenticate();\n    console.log('数据库连接成功!');\n} catch (err) {\n    console.log('连接失败');\n}\n\nconst UserModel = sequelize.define('User', {\n    id: {\n        type: Sequelize.INTEGER(11),\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n    },\n    username: {\n        type: Sequelize.STRING(50),\n        allowNull: false,\n        defaultValue: '',\n    },\n    age: {\n        type: Sequelize.TINYINT(3),\n        allowNull: false,\n    },\n    gender: {\n        type: Sequelize.ENUM(['men', 'women', 'other']),\n        allowNull: false,\n        defaultValue: 'men',\n    },\n}, {\n    timestamps: false,\n    tableName: 'users',\n});\n\nconst MessageModel = sequelize.define('Message', {\n    id: {\n        type: Sequelize.INTEGER(11),\n        primaryKey: true,\n        allowNull: false,\n        autoIncrement: true,\n    },\n    uid: {\n        type: Sequelize.INTEGER(11),\n        allowNull: false,\n        defaultValue: 0,\n    },\n    content: {\n        type: Sequelize.STRING(255),\n        allowNull: false,\n        defaultValue: '',\n    }\n}, {\n    timestamps: false,\n    freezeTableName: true, // 默认 false 将自动修改表名为复数，true 表示不修改表名，与数据库表名同步\n    tableName: 'message'\n});\n```\n\n\n\n### 需求+普通做法\n\n我们这次的需求是获取某条留言的所有数据，其中包含 `留言本身的数据` + `该留言的用户数据` ，先来看最“耿直”的做法：\n\n```js\n(async () => {\n    let data = {};\n    // 根据 id 查找 message\n    let message = await MessageModel.findByPk(1);\n    // 根据 message 的 uid 反查出发布这条 message 的 user\n    let user = await UserModel.findByPk(message.get('uid'));\n\n    Object.assign(data, {\n        id: message.id,\n        uid: message.uid,\n        content: message.content,\n        username: user.username,\n        age: user.age,\n        gender: user.gender,\n    });\n\n    console.log(data);\n})();\n```\n\n### BelongsTo\n\n除了上面这种做法外，我们还可以使用 `sequelize` 提供的 `BelongsTo` 来关联两个模型进行查询。\n\n思考一下我们的 `users` 和 `message` 表，从 `message` 的角度来讲，一条留言属于一个用户发布的，是一对一的关系。而 `BelongsTo` 关联的含义就是 A 属于 B。那我们应该怎么写代码呢？步骤如下：\n\n1. 首先在模型中给关联的字段定义外键关系\n\n   ```js\n   references: {\n      model: 关联的外键表模型, e.g. UserModel\n      key: 关联的外键表的字段, e.g. id\n   }\n   ```\n\n2. 在调用 `belongsTo` 或 `hasMany` 等方法的时候，通过第二个参数设置对象\n\n   ```js\n   { \n      foreignKey: 当前关联表的字段, e.g. uid\n   }\n   ```\n\n没有完全理解上面的步骤也没关系，直接上代码更加清晰：\n\n```js\nconst MessageModel = sequelize.define('Message', {\n    ...,\n    uid: { // 第一步：在模型中给关联的字段定义外键关系\n        ...\n        references: {\n            model: UserModel, // 关联的外键表模型\n            key: 'id',        // 关联的外键表的字段\n        }\n    },\n    ...\n}, ...);\n\n(async () => {\n    // 第二步：声明两表关系及外键\n    // 下面方法翻译过来：留言属于用户\n    MessageModel.belongsTo(UserModel, {\n        foreignKey: 'uid' // 声明自己（message）的外键是 uid\n    });\n\n    let data = await MessageModel.findByPk(1, {\n        include: [UserModel] // 表述查出的 message 记录中包含有对应的 user\n    });\n\n    console.log(`\n        留言id：${data.id}\n        留言人名称：${data.User.username}\n        留言内容：${data.content}\n    `);\n})();\n```\n\n\n\n### HasMany\n\n这次我们换个角度，来通过某个用户查找他/她所有的留言。稍微想一下，一个用户是可以发布多条留言的，所以从 `users` 角度来讲，跟 `message` 是一对多的关系。而 `sequelize` 也提供了处理这种关系的方法，那就是 `HasMany`。直接上代码：\n\n```js\n(async () => {\n    // users 拥有\n    UserModel.hasMany(MessageModel, {\n        foreignKey: 'uid',\n    });\n\n    let data = await UserModel.findByPk(3, {\n        include: [MessageModel]\n    });\n\n    console.log(`\n        id为 ${data.id} 的留言人 ${data.username} 的留言内容：\n    `);\n    data.Messages.forEach(m => {\n        console.log(`\n            ${m.content}`);\n    });\n})();\n```\n\n\n\n## 版本\n\n安装的 sequelize 和 mysql2 的版本为：\n\n```js\n\"dependencies\": {\n    \"mysql2\": \"^1.6.5\",\n    \"sequelize\": \"^5.3.1\"\n}\n```\n","source":"_posts/Sequelize框架进阶.md","raw":"---\ntitle: Sequelize框架进阶\ntags:\n  - Sequelize\ncategories:\n  - 后端\n  - SQL\nabbrlink: 3278\ndate: 2019-03-13 10:30:18\n---\n\n## 传送门\n\n- [Sequelize框架入门](https://evestorm.github.io/posts/1183/)\n\n## 前言\n\n上一篇入门讲到了 `Sequelize框架` 的基本用法，比如实现简单的增删查改。原本打算一篇文章写到底的，但感觉内容太多，对读者不太友好，就另开了这篇文章。\n\n虽然标题写着“进阶”，但其实有标题党的以为。这篇文章仍然着手于框架的使用，不涉及源码。大纲见侧边栏的目录，我们直接开始吧~\n\n<!-- more -->\n\n## 连表查询\n\n### 准备工作\n\n既然是连表查询，至少得有两个表吧。所以我们还需要另外新建一张表，这里起名为 `message` 表，表结构如下：\n\n{% asset_img message-table.png message-table %}\n\n其中 uid 对应用户的 id 。下面是两表的数据：\n\n{% asset_img user-message-data.png user-message-data %}\n\n接着我们新建一个 `app2.js` 文件，引入之前 `app.js` 中的部分代码（连接数据库+UserModel）以及创建一个 `MessageModel` 模型：\n\n```js\nconst Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize(\"miaov\", \"root\", \"root\", {\n    host: \"127.0.0.1\",\n    port: 8889,\n    dialect: \"mysql\"\n});\n\ntry {\n    sequelize.authenticate();\n    console.log('数据库连接成功!');\n} catch (err) {\n    console.log('连接失败');\n}\n\nconst UserModel = sequelize.define('User', {\n    id: {\n        type: Sequelize.INTEGER(11),\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n    },\n    username: {\n        type: Sequelize.STRING(50),\n        allowNull: false,\n        defaultValue: '',\n    },\n    age: {\n        type: Sequelize.TINYINT(3),\n        allowNull: false,\n    },\n    gender: {\n        type: Sequelize.ENUM(['men', 'women', 'other']),\n        allowNull: false,\n        defaultValue: 'men',\n    },\n}, {\n    timestamps: false,\n    tableName: 'users',\n});\n\nconst MessageModel = sequelize.define('Message', {\n    id: {\n        type: Sequelize.INTEGER(11),\n        primaryKey: true,\n        allowNull: false,\n        autoIncrement: true,\n    },\n    uid: {\n        type: Sequelize.INTEGER(11),\n        allowNull: false,\n        defaultValue: 0,\n    },\n    content: {\n        type: Sequelize.STRING(255),\n        allowNull: false,\n        defaultValue: '',\n    }\n}, {\n    timestamps: false,\n    freezeTableName: true, // 默认 false 将自动修改表名为复数，true 表示不修改表名，与数据库表名同步\n    tableName: 'message'\n});\n```\n\n\n\n### 需求+普通做法\n\n我们这次的需求是获取某条留言的所有数据，其中包含 `留言本身的数据` + `该留言的用户数据` ，先来看最“耿直”的做法：\n\n```js\n(async () => {\n    let data = {};\n    // 根据 id 查找 message\n    let message = await MessageModel.findByPk(1);\n    // 根据 message 的 uid 反查出发布这条 message 的 user\n    let user = await UserModel.findByPk(message.get('uid'));\n\n    Object.assign(data, {\n        id: message.id,\n        uid: message.uid,\n        content: message.content,\n        username: user.username,\n        age: user.age,\n        gender: user.gender,\n    });\n\n    console.log(data);\n})();\n```\n\n### BelongsTo\n\n除了上面这种做法外，我们还可以使用 `sequelize` 提供的 `BelongsTo` 来关联两个模型进行查询。\n\n思考一下我们的 `users` 和 `message` 表，从 `message` 的角度来讲，一条留言属于一个用户发布的，是一对一的关系。而 `BelongsTo` 关联的含义就是 A 属于 B。那我们应该怎么写代码呢？步骤如下：\n\n1. 首先在模型中给关联的字段定义外键关系\n\n   ```js\n   references: {\n      model: 关联的外键表模型, e.g. UserModel\n      key: 关联的外键表的字段, e.g. id\n   }\n   ```\n\n2. 在调用 `belongsTo` 或 `hasMany` 等方法的时候，通过第二个参数设置对象\n\n   ```js\n   { \n      foreignKey: 当前关联表的字段, e.g. uid\n   }\n   ```\n\n没有完全理解上面的步骤也没关系，直接上代码更加清晰：\n\n```js\nconst MessageModel = sequelize.define('Message', {\n    ...,\n    uid: { // 第一步：在模型中给关联的字段定义外键关系\n        ...\n        references: {\n            model: UserModel, // 关联的外键表模型\n            key: 'id',        // 关联的外键表的字段\n        }\n    },\n    ...\n}, ...);\n\n(async () => {\n    // 第二步：声明两表关系及外键\n    // 下面方法翻译过来：留言属于用户\n    MessageModel.belongsTo(UserModel, {\n        foreignKey: 'uid' // 声明自己（message）的外键是 uid\n    });\n\n    let data = await MessageModel.findByPk(1, {\n        include: [UserModel] // 表述查出的 message 记录中包含有对应的 user\n    });\n\n    console.log(`\n        留言id：${data.id}\n        留言人名称：${data.User.username}\n        留言内容：${data.content}\n    `);\n})();\n```\n\n\n\n### HasMany\n\n这次我们换个角度，来通过某个用户查找他/她所有的留言。稍微想一下，一个用户是可以发布多条留言的，所以从 `users` 角度来讲，跟 `message` 是一对多的关系。而 `sequelize` 也提供了处理这种关系的方法，那就是 `HasMany`。直接上代码：\n\n```js\n(async () => {\n    // users 拥有\n    UserModel.hasMany(MessageModel, {\n        foreignKey: 'uid',\n    });\n\n    let data = await UserModel.findByPk(3, {\n        include: [MessageModel]\n    });\n\n    console.log(`\n        id为 ${data.id} 的留言人 ${data.username} 的留言内容：\n    `);\n    data.Messages.forEach(m => {\n        console.log(`\n            ${m.content}`);\n    });\n})();\n```\n\n\n\n## 版本\n\n安装的 sequelize 和 mysql2 的版本为：\n\n```js\n\"dependencies\": {\n    \"mysql2\": \"^1.6.5\",\n    \"sequelize\": \"^5.3.1\"\n}\n```\n","slug":"Sequelize框架进阶","published":1,"updated":"2020-11-22T02:40:10.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyef000hkhsrfnur77zb","content":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/1183/\">Sequelize框架入门</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇入门讲到了 <code>Sequelize框架</code> 的基本用法，比如实现简单的增删查改。原本打算一篇文章写到底的，但感觉内容太多，对读者不太友好，就另开了这篇文章。</p>\n<p>虽然标题写着“进阶”，但其实有标题党的以为。这篇文章仍然着手于框架的使用，不涉及源码。大纲见侧边栏的目录，我们直接开始吧~</p>\n<a id=\"more\"></a>\n\n<h2 id=\"连表查询\"><a href=\"#连表查询\" class=\"headerlink\" title=\"连表查询\"></a>连表查询</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>既然是连表查询，至少得有两个表吧。所以我们还需要另外新建一张表，这里起名为 <code>message</code> 表，表结构如下：</p>\n<img src=\"/posts/3278/message-table.png\" class=\"\" title=\"message-table\">\n\n<p>其中 uid 对应用户的 id 。下面是两表的数据：</p>\n<img src=\"/posts/3278/user-message-data.png\" class=\"\" title=\"user-message-data\">\n\n<p>接着我们新建一个 <code>app2.js</code> 文件，引入之前 <code>app.js</code> 中的部分代码（连接数据库+UserModel）以及创建一个 <code>MessageModel</code> 模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sequelize&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">&quot;miaov&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, &#123;</span><br><span class=\"line\">    host: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8889</span>,</span><br><span class=\"line\">    dialect: <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sequelize.authenticate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接成功!&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT(<span class=\"number\">3</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    gender: &#123;</span><br><span class=\"line\">        type: Sequelize.ENUM([<span class=\"string\">&#x27;men&#x27;</span>, <span class=\"string\">&#x27;women&#x27;</span>, <span class=\"string\">&#x27;other&#x27;</span>]),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;men&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MessageModel = sequelize.define(<span class=\"string\">&#x27;Message&#x27;</span>, &#123;</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    uid: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">255</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    freezeTableName: <span class=\"literal\">true</span>, <span class=\"comment\">// 默认 false 将自动修改表名为复数，true 表示不修改表名，与数据库表名同步</span></span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"需求-普通做法\"><a href=\"#需求-普通做法\" class=\"headerlink\" title=\"需求+普通做法\"></a>需求+普通做法</h3><p>我们这次的需求是获取某条留言的所有数据，其中包含 <code>留言本身的数据</code> + <code>该留言的用户数据</code> ，先来看最“耿直”的做法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 根据 id 查找 message</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"keyword\">await</span> MessageModel.findByPk(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 根据 message 的 uid 反查出发布这条 message 的 user</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> UserModel.findByPk(message.get(<span class=\"string\">&#x27;uid&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(data, &#123;</span><br><span class=\"line\">        id: message.id,</span><br><span class=\"line\">        uid: message.uid,</span><br><span class=\"line\">        content: message.content,</span><br><span class=\"line\">        username: user.username,</span><br><span class=\"line\">        age: user.age,</span><br><span class=\"line\">        gender: user.gender,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BelongsTo\"><a href=\"#BelongsTo\" class=\"headerlink\" title=\"BelongsTo\"></a>BelongsTo</h3><p>除了上面这种做法外，我们还可以使用 <code>sequelize</code> 提供的 <code>BelongsTo</code> 来关联两个模型进行查询。</p>\n<p>思考一下我们的 <code>users</code> 和 <code>message</code> 表，从 <code>message</code> 的角度来讲，一条留言属于一个用户发布的，是一对一的关系。而 <code>BelongsTo</code> 关联的含义就是 A 属于 B。那我们应该怎么写代码呢？步骤如下：</p>\n<ol>\n<li><p>首先在模型中给关联的字段定义外键关系</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">references: &#123;</span><br><span class=\"line\">   model: 关联的外键表模型, e.g. UserModel</span><br><span class=\"line\">   key: 关联的外键表的字段, e.g. id</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在调用 <code>belongsTo</code> 或 <code>hasMany</code> 等方法的时候，通过第二个参数设置对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">   foreignKey: 当前关联表的字段, e.g. uid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>没有完全理解上面的步骤也没关系，直接上代码更加清晰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MessageModel = sequelize.define(<span class=\"string\">&#x27;Message&#x27;</span>, &#123;</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    uid: &#123; <span class=\"comment\">// 第一步：在模型中给关联的字段定义外键关系</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        references: &#123;</span><br><span class=\"line\">            model: UserModel, <span class=\"comment\">// 关联的外键表模型</span></span><br><span class=\"line\">            key: <span class=\"string\">&#x27;id&#x27;</span>,        <span class=\"comment\">// 关联的外键表的字段</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;, ...);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二步：声明两表关系及外键</span></span><br><span class=\"line\">    <span class=\"comment\">// 下面方法翻译过来：留言属于用户</span></span><br><span class=\"line\">    MessageModel.belongsTo(UserModel, &#123;</span><br><span class=\"line\">        foreignKey: <span class=\"string\">&#x27;uid&#x27;</span> <span class=\"comment\">// 声明自己（message）的外键是 uid</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> MessageModel.findByPk(<span class=\"number\">1</span>, &#123;</span><br><span class=\"line\">        include: [UserModel] <span class=\"comment\">// 表述查出的 message 记录中包含有对应的 user</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        留言id：<span class=\"subst\">$&#123;data.id&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">        留言人名称：<span class=\"subst\">$&#123;data.User.username&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">        留言内容：<span class=\"subst\">$&#123;data.content&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HasMany\"><a href=\"#HasMany\" class=\"headerlink\" title=\"HasMany\"></a>HasMany</h3><p>这次我们换个角度，来通过某个用户查找他/她所有的留言。稍微想一下，一个用户是可以发布多条留言的，所以从 <code>users</code> 角度来讲，跟 <code>message</code> 是一对多的关系。而 <code>sequelize</code> 也提供了处理这种关系的方法，那就是 <code>HasMany</code>。直接上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// users 拥有</span></span><br><span class=\"line\">    UserModel.hasMany(MessageModel, &#123;</span><br><span class=\"line\">        foreignKey: <span class=\"string\">&#x27;uid&#x27;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">3</span>, &#123;</span><br><span class=\"line\">        include: [MessageModel]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        id为 <span class=\"subst\">$&#123;data.id&#125;</span> 的留言人 <span class=\"subst\">$&#123;data.username&#125;</span> 的留言内容：</span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">    data.Messages.forEach(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"subst\">$&#123;m.content&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>安装的 sequelize 和 mysql2 的版本为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;mysql2&quot;</span>: <span class=\"string\">&quot;^1.6.5&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sequelize&quot;</span>: <span class=\"string\">&quot;^5.3.1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/1183/\">Sequelize框架入门</a></li>\n</ul>\n<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>上一篇入门讲到了 <code>Sequelize框架</code> 的基本用法，比如实现简单的增删查改。原本打算一篇文章写到底的，但感觉内容太多，对读者不太友好，就另开了这篇文章。</p>\n<p>虽然标题写着“进阶”，但其实有标题党的以为。这篇文章仍然着手于框架的使用，不涉及源码。大纲见侧边栏的目录，我们直接开始吧~</p>","more":"<h2 id=\"连表查询\"><a href=\"#连表查询\" class=\"headerlink\" title=\"连表查询\"></a>连表查询</h2><h3 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h3><p>既然是连表查询，至少得有两个表吧。所以我们还需要另外新建一张表，这里起名为 <code>message</code> 表，表结构如下：</p>\n<img src=\"/posts/3278/message-table.png\" class=\"\" title=\"message-table\">\n\n<p>其中 uid 对应用户的 id 。下面是两表的数据：</p>\n<img src=\"/posts/3278/user-message-data.png\" class=\"\" title=\"user-message-data\">\n\n<p>接着我们新建一个 <code>app2.js</code> 文件，引入之前 <code>app.js</code> 中的部分代码（连接数据库+UserModel）以及创建一个 <code>MessageModel</code> 模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sequelize&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">&quot;miaov&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, &#123;</span><br><span class=\"line\">    host: <span class=\"string\">&quot;127.0.0.1&quot;</span>,</span><br><span class=\"line\">    port: <span class=\"number\">8889</span>,</span><br><span class=\"line\">    dialect: <span class=\"string\">&quot;mysql&quot;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sequelize.authenticate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接成功!&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接失败&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT(<span class=\"number\">3</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    gender: &#123;</span><br><span class=\"line\">        type: Sequelize.ENUM([<span class=\"string\">&#x27;men&#x27;</span>, <span class=\"string\">&#x27;women&#x27;</span>, <span class=\"string\">&#x27;other&#x27;</span>]),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;men&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> MessageModel = sequelize.define(<span class=\"string\">&#x27;Message&#x27;</span>, &#123;</span><br><span class=\"line\">    id: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    uid: &#123;</span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    content: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">255</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;, &#123;</span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    freezeTableName: <span class=\"literal\">true</span>, <span class=\"comment\">// 默认 false 将自动修改表名为复数，true 表示不修改表名，与数据库表名同步</span></span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;message&#x27;</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"需求-普通做法\"><a href=\"#需求-普通做法\" class=\"headerlink\" title=\"需求+普通做法\"></a>需求+普通做法</h3><p>我们这次的需求是获取某条留言的所有数据，其中包含 <code>留言本身的数据</code> + <code>该留言的用户数据</code> ，先来看最“耿直”的做法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = &#123;&#125;;</span><br><span class=\"line\">    <span class=\"comment\">// 根据 id 查找 message</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> message = <span class=\"keyword\">await</span> MessageModel.findByPk(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 根据 message 的 uid 反查出发布这条 message 的 user</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> user = <span class=\"keyword\">await</span> UserModel.findByPk(message.get(<span class=\"string\">&#x27;uid&#x27;</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">Object</span>.assign(data, &#123;</span><br><span class=\"line\">        id: message.id,</span><br><span class=\"line\">        uid: message.uid,</span><br><span class=\"line\">        content: message.content,</span><br><span class=\"line\">        username: user.username,</span><br><span class=\"line\">        age: user.age,</span><br><span class=\"line\">        gender: user.gender,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"BelongsTo\"><a href=\"#BelongsTo\" class=\"headerlink\" title=\"BelongsTo\"></a>BelongsTo</h3><p>除了上面这种做法外，我们还可以使用 <code>sequelize</code> 提供的 <code>BelongsTo</code> 来关联两个模型进行查询。</p>\n<p>思考一下我们的 <code>users</code> 和 <code>message</code> 表，从 <code>message</code> 的角度来讲，一条留言属于一个用户发布的，是一对一的关系。而 <code>BelongsTo</code> 关联的含义就是 A 属于 B。那我们应该怎么写代码呢？步骤如下：</p>\n<ol>\n<li><p>首先在模型中给关联的字段定义外键关系</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">references: &#123;</span><br><span class=\"line\">   model: 关联的外键表模型, e.g. UserModel</span><br><span class=\"line\">   key: 关联的外键表的字段, e.g. id</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在调用 <code>belongsTo</code> 或 <code>hasMany</code> 等方法的时候，通过第二个参数设置对象</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">   foreignKey: 当前关联表的字段, e.g. uid</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<p>没有完全理解上面的步骤也没关系，直接上代码更加清晰：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> MessageModel = sequelize.define(<span class=\"string\">&#x27;Message&#x27;</span>, &#123;</span><br><span class=\"line\">    ...,</span><br><span class=\"line\">    uid: &#123; <span class=\"comment\">// 第一步：在模型中给关联的字段定义外键关系</span></span><br><span class=\"line\">        ...</span><br><span class=\"line\">        references: &#123;</span><br><span class=\"line\">            model: UserModel, <span class=\"comment\">// 关联的外键表模型</span></span><br><span class=\"line\">            key: <span class=\"string\">&#x27;id&#x27;</span>,        <span class=\"comment\">// 关联的外键表的字段</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">&#125;, ...);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 第二步：声明两表关系及外键</span></span><br><span class=\"line\">    <span class=\"comment\">// 下面方法翻译过来：留言属于用户</span></span><br><span class=\"line\">    MessageModel.belongsTo(UserModel, &#123;</span><br><span class=\"line\">        foreignKey: <span class=\"string\">&#x27;uid&#x27;</span> <span class=\"comment\">// 声明自己（message）的外键是 uid</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> MessageModel.findByPk(<span class=\"number\">1</span>, &#123;</span><br><span class=\"line\">        include: [UserModel] <span class=\"comment\">// 表述查出的 message 记录中包含有对应的 user</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        留言id：<span class=\"subst\">$&#123;data.id&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">        留言人名称：<span class=\"subst\">$&#123;data.User.username&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">        留言内容：<span class=\"subst\">$&#123;data.content&#125;</span></span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"HasMany\"><a href=\"#HasMany\" class=\"headerlink\" title=\"HasMany\"></a>HasMany</h3><p>这次我们换个角度，来通过某个用户查找他/她所有的留言。稍微想一下，一个用户是可以发布多条留言的，所以从 <code>users</code> 角度来讲，跟 <code>message</code> 是一对多的关系。而 <code>sequelize</code> 也提供了处理这种关系的方法，那就是 <code>HasMany</code>。直接上代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// users 拥有</span></span><br><span class=\"line\">    UserModel.hasMany(MessageModel, &#123;</span><br><span class=\"line\">        foreignKey: <span class=\"string\">&#x27;uid&#x27;</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">let</span> data = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">3</span>, &#123;</span><br><span class=\"line\">        include: [MessageModel]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">        id为 <span class=\"subst\">$&#123;data.id&#125;</span> 的留言人 <span class=\"subst\">$&#123;data.username&#125;</span> 的留言内容：</span></span><br><span class=\"line\"><span class=\"string\">    `</span>);</span><br><span class=\"line\">    data.Messages.forEach(<span class=\"function\"><span class=\"params\">m</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`</span></span><br><span class=\"line\"><span class=\"string\">            <span class=\"subst\">$&#123;m.content&#125;</span>`</span>);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>安装的 sequelize 和 mysql2 的版本为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;mysql2&quot;</span>: <span class=\"string\">&quot;^1.6.5&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sequelize&quot;</span>: <span class=\"string\">&quot;^5.3.1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"VSCode+Vue项目Ctrl加V自动格式化代码","abbrlink":22469,"date":"2020-11-23T05:48:36.000Z","_content":"\n## 背景\n\n期望多人开发 Vue 项目时，大家的代码风格保持一致。并且在 VSCode 中，Ctrl+V 保存代码时自动按照 eslint 规范格式化代码。\n\n## 插件安装\n\n- [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n- [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)\n- [Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n- [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n\n<!-- more -->\n\n## 配置 VSCode 用户 Settings.json\n\n### 打开方式\n\n1. 文件——>首选项——>设置\n2. Ctrl+P 搜索 settings.json\n\n### 添加配置\n\n> 有注释的才需要添加，其他没注释的可以不用管\n\n```json\n{\n  \"editor.fontSize\": 14,\n  \"bracket-pair-colorizer-2.showBracketsInGutter\": true,\n  \"workbench.iconTheme\": \"material-icon-theme\",\n  \"sync.gist\": \"e9262ee54aa0988ee98c24e6be1dada1\",\n  \"workbench.colorTheme\": \"Atom One Dark\",\n  \"editor.fontFamily\": \"'Fira Code', Menlo, Monaco, 'Courier New', monospace\",\n\n  // 新增配置\n\n  \"editor.formatOnSave\": true, // #每次保存的时候自动格式化\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  }, // 每次保存的时候将代码按eslint格式进行修复\n  \"editor.tabSize\": 2, // 重新设定tabSize\n  \"prettier.semi\": true, // 添加代码结尾的分号\n  \"prettier.singleQuote\": true, // 使用单引号替代双引号\n  \"prettier.arrowParens\": \"avoid\", // 箭头函数参数只有一个时是否要有小括号。\n  // avoid - 省略括号\n  // always - 总是不省略\n  \"prettier.htmlWhitespaceSensitivity\": \"ignore\", // 指定 HTML 文件的全局空白区域敏感度\n  // \"css\"- 遵守 CSS display属性的默认值。\n  // \"strict\" - 空格被认为是敏感的。\n  // \"ignore\" - 空格被认为是不敏感的。\n  // html 中空格也会占位，影响布局，prettier 格式化的时候可能会将文本换行，造成布局错乱\n\n  // --------------- html -----------------\n  //  <a href=\"https://prettier.io/\">Prettier is an opinionated code formatter.</a>\n  //  <!-- 变成 -->\n  //  <!-- \"Prettier is an opinionated code formatter. \" 另起一行，在页面的布局上就会多一个节点文本出来 -->\n  //  <a href=\"https://prettier.io/\">\n  //    Prettier is an opinionated code formatter.\n  //  </a>\n  // --------------- html -----------------\n  \"prettier.jsxBracketSameLine\": true, // 将 > 多行 JSX 元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。\n  // true - 放最后一行末尾\n  // false - 单独放在末尾的下一行\n  \"prettier.bracketSpacing\": true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n  \"prettier.trailingComma\": \"none\", // 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）\n  \"javascript.preferences.quoteStyle\": \"single\", // JS格式化设置单引号\n  \"typescript.preferences.quoteStyle\": \"single\", // TS格式化设置单引号\n  \"javascript.format.insertSpaceBeforeFunctionParenthesis\": false, // 让函数(名)和后面的括号之间加个空格\n  // 配置 ESLint 检查的文件类型\n  \"eslint.validate\": [\"javascript\", \"vue\", \"html\"],\n  \"eslint.options\": {\n    // 指定vscode的eslint所处理的文件的后缀\n    \"extensions\": [\".js\", \".vue\", \".ts\", \".tsx\"]\n  },\n  //一定要在vutur.defaultFormatterOptions参数中设置，单独修改prettier扩展的设置是无法解决这个问题的，因为perttier默认忽略了vue文件（事实上从忽略列表移除vue也不能解决这个问题）\n  \"vetur.format.defaultFormatterOptions\": {\n    \"prettier\": {\n      \"semi\": true, // 格式化末尾加分号\n      \"singleQuote\": true, // 格式化以单引号为主\n      \"trailingComma\": \"none\" // 是否末尾自动添加逗号（数组，json，对象）\n      // \"es5\" - 在ES5中的对象、数组等最后一个元素后面加逗号\n      // \"none\" - 不加逗号\n      // \"all\" - 尽可能都加逗号 (包括函数function的参数).\n    }, // 配置文档：https://prettier.io/docs/en/options.html\n    \"js-beautify-html\": {\n      // force-aligned | force-expand-multiline vue html代码格式化\n      \"wrap_attributes\": \"force-aligned\", // 对除第一个属性外的其他每个属性进行换行，并保持对齐\n      // - auto: 仅在超出行长度时才对属性进行换行。\n      // - force: 对除第一个属性外的其他每个属性进行换行。\n      // - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。\n      // - force-expand-multiline: 对每个属性进行换行。\n      // - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐。\n      \"wrap_line_length\": 200, // 换行长度\n      \"wrap_width_line\": false, // 根据行宽换行\n      \"semi\": false, // 格式化不加分号\n      \"singleQuote\": true // 格式化使用单引号\n    },\n    \"prettyhtml\": {\n      \"printWidth\": 200, // 每行最多多少字符换行\n      \"singleQuote\": false, // 格式化使用单引号\n      \"wrapAttributes\": false, // 强制属性换行\n      \"sortAttributes\": true // 按字母顺序排序属性\n    } // 配置文档：https://github.com/Prettyhtml/prettyhtml\n  },\n  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\", // 使用 js-beautify-html 格式化 html\n  \"vetur.format.defaultFormatter.js\": \"prettier\", // 使用 prettier 格式化 js\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\" // 使用 vetur 格式化 vue\n  },\n  \"editor.fontFamily\": \"'Fira Code', Menlo, Monaco, 'Courier New', monospace\",\n  \"path-intellisense.mappings\": {\n    \"@\": \"${workspaceRoot}/src\"\n  } // Vue路径提示配置\n}\n```\n\n## 配置 .eslintrc.js\n\nVue 项目的根目录下创建 .eslintrc.js ：\n\n```js\nmodule.exports = {\n  root: true,\n  parserOptions: {\n    parser: 'babel-eslint'\n  },\n  env: {\n    browser: true,\n    node: true\n  },\n  extends: ['plugin:vue/essential', 'eslint:recommended', 'airbnb-base/legacy'],\n  rules: {\n    // 文档：https://cn.eslint.org/docs/rules/\n    'generator-star-spacing': 'off', // 强制 generator 函数中 * 号周围使用一致的空格\n    // 开发模式允许使用console\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    // 开发环境允许使用调试 (生产模式禁用)\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    // 禁止使用 var\n    'no-var': 'error',\n    'padded-blocks': 'off', // 代码块中避免多余留白\n    'comma-dangle': ['error', 'never'], // 是否允许对象中出现结尾逗号\n    'no-undef': 0, // 禁用未声明的变量，除非它们在 /*global */ 注释中被提到\n    quotes: 0, // 强制使用一致的反勾号、双引号或单引号 (0: double, 1: single, 2: backtick)\n    eqeqeq: 'off', //  关闭 (要求使用 === 和 !==) 的校验\n    'eol-last': 'off', // 要求或禁止文件末尾存在空行\n    indent: 0, // 忽略强制使用一致的缩进\n    'no-tabs': 0, // 忽略tab检查\n    'no-mixed-spaces-and-tabs': 0 // 忽略检查当空格用于对齐时，允许混合制表符和空格。\n  }\n};\n```\n\nnpm 安装 `eslint-config-airbnb-base` ：\n\n```shell\nnpm info \"eslint-config-airbnb-base@latest\" peerDependencies\n```\n\n在 `.eslintrc.js` 中添加（上面配置已添加）：\n\n```js\n\"extends\": \"airbnb-base/legacy\"\n```\n","source":"_posts/VSCode-Vue项目Ctrl加V自动格式化代码.md","raw":"---\ntitle: VSCode+Vue项目Ctrl加V自动格式化代码\ntags:\n  - VSCode\ncategories:\n  - 工具\n  - IDE\nabbrlink: 22469\ndate: 2020-11-23 13:48:36\n---\n\n## 背景\n\n期望多人开发 Vue 项目时，大家的代码风格保持一致。并且在 VSCode 中，Ctrl+V 保存代码时自动按照 eslint 规范格式化代码。\n\n## 插件安装\n\n- [ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)\n- [Vetur](https://marketplace.visualstudio.com/items?itemName=octref.vetur)\n- [Prettier - Code formatter](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)\n- [Path Intellisense](https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense)\n\n<!-- more -->\n\n## 配置 VSCode 用户 Settings.json\n\n### 打开方式\n\n1. 文件——>首选项——>设置\n2. Ctrl+P 搜索 settings.json\n\n### 添加配置\n\n> 有注释的才需要添加，其他没注释的可以不用管\n\n```json\n{\n  \"editor.fontSize\": 14,\n  \"bracket-pair-colorizer-2.showBracketsInGutter\": true,\n  \"workbench.iconTheme\": \"material-icon-theme\",\n  \"sync.gist\": \"e9262ee54aa0988ee98c24e6be1dada1\",\n  \"workbench.colorTheme\": \"Atom One Dark\",\n  \"editor.fontFamily\": \"'Fira Code', Menlo, Monaco, 'Courier New', monospace\",\n\n  // 新增配置\n\n  \"editor.formatOnSave\": true, // #每次保存的时候自动格式化\n  \"editor.codeActionsOnSave\": {\n    \"source.fixAll.eslint\": true\n  }, // 每次保存的时候将代码按eslint格式进行修复\n  \"editor.tabSize\": 2, // 重新设定tabSize\n  \"prettier.semi\": true, // 添加代码结尾的分号\n  \"prettier.singleQuote\": true, // 使用单引号替代双引号\n  \"prettier.arrowParens\": \"avoid\", // 箭头函数参数只有一个时是否要有小括号。\n  // avoid - 省略括号\n  // always - 总是不省略\n  \"prettier.htmlWhitespaceSensitivity\": \"ignore\", // 指定 HTML 文件的全局空白区域敏感度\n  // \"css\"- 遵守 CSS display属性的默认值。\n  // \"strict\" - 空格被认为是敏感的。\n  // \"ignore\" - 空格被认为是不敏感的。\n  // html 中空格也会占位，影响布局，prettier 格式化的时候可能会将文本换行，造成布局错乱\n\n  // --------------- html -----------------\n  //  <a href=\"https://prettier.io/\">Prettier is an opinionated code formatter.</a>\n  //  <!-- 变成 -->\n  //  <!-- \"Prettier is an opinionated code formatter. \" 另起一行，在页面的布局上就会多一个节点文本出来 -->\n  //  <a href=\"https://prettier.io/\">\n  //    Prettier is an opinionated code formatter.\n  //  </a>\n  // --------------- html -----------------\n  \"prettier.jsxBracketSameLine\": true, // 将 > 多行 JSX 元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。\n  // true - 放最后一行末尾\n  // false - 单独放在末尾的下一行\n  \"prettier.bracketSpacing\": true, // 在对象，数组括号与文字之间加空格 \"{ foo: bar }\"\n  \"prettier.trailingComma\": \"none\", // 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）\n  \"javascript.preferences.quoteStyle\": \"single\", // JS格式化设置单引号\n  \"typescript.preferences.quoteStyle\": \"single\", // TS格式化设置单引号\n  \"javascript.format.insertSpaceBeforeFunctionParenthesis\": false, // 让函数(名)和后面的括号之间加个空格\n  // 配置 ESLint 检查的文件类型\n  \"eslint.validate\": [\"javascript\", \"vue\", \"html\"],\n  \"eslint.options\": {\n    // 指定vscode的eslint所处理的文件的后缀\n    \"extensions\": [\".js\", \".vue\", \".ts\", \".tsx\"]\n  },\n  //一定要在vutur.defaultFormatterOptions参数中设置，单独修改prettier扩展的设置是无法解决这个问题的，因为perttier默认忽略了vue文件（事实上从忽略列表移除vue也不能解决这个问题）\n  \"vetur.format.defaultFormatterOptions\": {\n    \"prettier\": {\n      \"semi\": true, // 格式化末尾加分号\n      \"singleQuote\": true, // 格式化以单引号为主\n      \"trailingComma\": \"none\" // 是否末尾自动添加逗号（数组，json，对象）\n      // \"es5\" - 在ES5中的对象、数组等最后一个元素后面加逗号\n      // \"none\" - 不加逗号\n      // \"all\" - 尽可能都加逗号 (包括函数function的参数).\n    }, // 配置文档：https://prettier.io/docs/en/options.html\n    \"js-beautify-html\": {\n      // force-aligned | force-expand-multiline vue html代码格式化\n      \"wrap_attributes\": \"force-aligned\", // 对除第一个属性外的其他每个属性进行换行，并保持对齐\n      // - auto: 仅在超出行长度时才对属性进行换行。\n      // - force: 对除第一个属性外的其他每个属性进行换行。\n      // - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。\n      // - force-expand-multiline: 对每个属性进行换行。\n      // - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐。\n      \"wrap_line_length\": 200, // 换行长度\n      \"wrap_width_line\": false, // 根据行宽换行\n      \"semi\": false, // 格式化不加分号\n      \"singleQuote\": true // 格式化使用单引号\n    },\n    \"prettyhtml\": {\n      \"printWidth\": 200, // 每行最多多少字符换行\n      \"singleQuote\": false, // 格式化使用单引号\n      \"wrapAttributes\": false, // 强制属性换行\n      \"sortAttributes\": true // 按字母顺序排序属性\n    } // 配置文档：https://github.com/Prettyhtml/prettyhtml\n  },\n  \"vetur.format.defaultFormatter.html\": \"js-beautify-html\", // 使用 js-beautify-html 格式化 html\n  \"vetur.format.defaultFormatter.js\": \"prettier\", // 使用 prettier 格式化 js\n  \"[vue]\": {\n    \"editor.defaultFormatter\": \"octref.vetur\" // 使用 vetur 格式化 vue\n  },\n  \"editor.fontFamily\": \"'Fira Code', Menlo, Monaco, 'Courier New', monospace\",\n  \"path-intellisense.mappings\": {\n    \"@\": \"${workspaceRoot}/src\"\n  } // Vue路径提示配置\n}\n```\n\n## 配置 .eslintrc.js\n\nVue 项目的根目录下创建 .eslintrc.js ：\n\n```js\nmodule.exports = {\n  root: true,\n  parserOptions: {\n    parser: 'babel-eslint'\n  },\n  env: {\n    browser: true,\n    node: true\n  },\n  extends: ['plugin:vue/essential', 'eslint:recommended', 'airbnb-base/legacy'],\n  rules: {\n    // 文档：https://cn.eslint.org/docs/rules/\n    'generator-star-spacing': 'off', // 强制 generator 函数中 * 号周围使用一致的空格\n    // 开发模式允许使用console\n    'no-console': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    // 开发环境允许使用调试 (生产模式禁用)\n    'no-debugger': process.env.NODE_ENV === 'production' ? 'error' : 'off',\n    // 禁止使用 var\n    'no-var': 'error',\n    'padded-blocks': 'off', // 代码块中避免多余留白\n    'comma-dangle': ['error', 'never'], // 是否允许对象中出现结尾逗号\n    'no-undef': 0, // 禁用未声明的变量，除非它们在 /*global */ 注释中被提到\n    quotes: 0, // 强制使用一致的反勾号、双引号或单引号 (0: double, 1: single, 2: backtick)\n    eqeqeq: 'off', //  关闭 (要求使用 === 和 !==) 的校验\n    'eol-last': 'off', // 要求或禁止文件末尾存在空行\n    indent: 0, // 忽略强制使用一致的缩进\n    'no-tabs': 0, // 忽略tab检查\n    'no-mixed-spaces-and-tabs': 0 // 忽略检查当空格用于对齐时，允许混合制表符和空格。\n  }\n};\n```\n\nnpm 安装 `eslint-config-airbnb-base` ：\n\n```shell\nnpm info \"eslint-config-airbnb-base@latest\" peerDependencies\n```\n\n在 `.eslintrc.js` 中添加（上面配置已添加）：\n\n```js\n\"extends\": \"airbnb-base/legacy\"\n```\n","slug":"VSCode-Vue项目Ctrl加V自动格式化代码","published":1,"updated":"2020-11-25T14:39:03.190Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyeg000kkhsremj5d2r9","content":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>期望多人开发 Vue 项目时，大家的代码风格保持一致。并且在 VSCode 中，Ctrl+V 保存代码时自动按照 eslint 规范格式化代码。</p>\n<h2 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h2><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\">Vetur</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"配置-VSCode-用户-Settings-json\"><a href=\"#配置-VSCode-用户-Settings-json\" class=\"headerlink\" title=\"配置 VSCode 用户 Settings.json\"></a>配置 VSCode 用户 Settings.json</h2><h3 id=\"打开方式\"><a href=\"#打开方式\" class=\"headerlink\" title=\"打开方式\"></a>打开方式</h3><ol>\n<li>文件——&gt;首选项——&gt;设置</li>\n<li>Ctrl+P 搜索 settings.json</li>\n</ol>\n<h3 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h3><blockquote>\n<p>有注释的才需要添加，其他没注释的可以不用管</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.fontSize&quot;</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;bracket-pair-colorizer-2.showBracketsInGutter&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.iconTheme&quot;</span>: <span class=\"string\">&quot;material-icon-theme&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;sync.gist&quot;</span>: <span class=\"string\">&quot;e9262ee54aa0988ee98c24e6be1dada1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.colorTheme&quot;</span>: <span class=\"string\">&quot;Atom One Dark&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.fontFamily&quot;</span>: <span class=\"string\">&quot;&#x27;Fira Code&#x27;, Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 新增配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// #每次保存的时候自动格式化</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;, <span class=\"comment\">// 每次保存的时候将代码按eslint格式进行修复</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.tabSize&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 重新设定tabSize</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.semi&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 添加代码结尾的分号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.singleQuote&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 使用单引号替代双引号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.arrowParens&quot;</span>: <span class=\"string\">&quot;avoid&quot;</span>, <span class=\"comment\">// 箭头函数参数只有一个时是否要有小括号。</span></span><br><span class=\"line\">  <span class=\"comment\">// avoid - 省略括号</span></span><br><span class=\"line\">  <span class=\"comment\">// always - 总是不省略</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.htmlWhitespaceSensitivity&quot;</span>: <span class=\"string\">&quot;ignore&quot;</span>, <span class=\"comment\">// 指定 HTML 文件的全局空白区域敏感度</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;css&quot;- 遵守 CSS display属性的默认值。</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;strict&quot; - 空格被认为是敏感的。</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;ignore&quot; - 空格被认为是不敏感的。</span></span><br><span class=\"line\">  <span class=\"comment\">// html 中空格也会占位，影响布局，prettier 格式化的时候可能会将文本换行，造成布局错乱</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// --------------- html -----------------</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier is an opinionated code formatter.&lt;/a&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;!-- 变成 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;!-- &quot;Prettier is an opinionated code formatter. &quot; 另起一行，在页面的布局上就会多一个节点文本出来 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;a href=&quot;https://prettier.io/&quot;&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//    Prettier is an opinionated code formatter.</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;/a&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// --------------- html -----------------</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.jsxBracketSameLine&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 将 &gt; 多行 JSX 元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。</span></span><br><span class=\"line\">  <span class=\"comment\">// true - 放最后一行末尾</span></span><br><span class=\"line\">  <span class=\"comment\">// false - 单独放在末尾的下一行</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.bracketSpacing&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.trailingComma&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"comment\">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;javascript.preferences.quoteStyle&quot;</span>: <span class=\"string\">&quot;single&quot;</span>, <span class=\"comment\">// JS格式化设置单引号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typescript.preferences.quoteStyle&quot;</span>: <span class=\"string\">&quot;single&quot;</span>, <span class=\"comment\">// TS格式化设置单引号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 让函数(名)和后面的括号之间加个空格</span></span><br><span class=\"line\">  <span class=\"comment\">// 配置 ESLint 检查的文件类型</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.validate&quot;</span>: [<span class=\"string\">&quot;javascript&quot;</span>, <span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;html&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.options&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定vscode的eslint所处理的文件的后缀</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extensions&quot;</span>: [<span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.vue&quot;</span>, <span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.tsx&quot;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//一定要在vutur.defaultFormatterOptions参数中设置，单独修改prettier扩展的设置是无法解决这个问题的，因为perttier默认忽略了vue文件（事实上从忽略列表移除vue也不能解决这个问题）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatterOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;prettier&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;semi&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 格式化末尾加分号</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 格式化以单引号为主</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;none&quot;</span> <span class=\"comment\">// 是否末尾自动添加逗号（数组，json，对象）</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;es5&quot; - 在ES5中的对象、数组等最后一个元素后面加逗号</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;none&quot; - 不加逗号</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;all&quot; - 尽可能都加逗号 (包括函数function的参数).</span></span><br><span class=\"line\">    &#125;, <span class=\"comment\">// 配置文档：https://prettier.io/docs/en/options.html</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;js-beautify-html&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// force-aligned | force-expand-multiline vue html代码格式化</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap_attributes&quot;</span>: <span class=\"string\">&quot;force-aligned&quot;</span>, <span class=\"comment\">// 对除第一个属性外的其他每个属性进行换行，并保持对齐</span></span><br><span class=\"line\">      <span class=\"comment\">// - auto: 仅在超出行长度时才对属性进行换行。</span></span><br><span class=\"line\">      <span class=\"comment\">// - force: 对除第一个属性外的其他每个属性进行换行。</span></span><br><span class=\"line\">      <span class=\"comment\">// - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。</span></span><br><span class=\"line\">      <span class=\"comment\">// - force-expand-multiline: 对每个属性进行换行。</span></span><br><span class=\"line\">      <span class=\"comment\">// - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐。</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap_line_length&quot;</span>: <span class=\"number\">200</span>, <span class=\"comment\">// 换行长度</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap_width_line&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 根据行宽换行</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;semi&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 格式化不加分号</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 格式化使用单引号</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;prettyhtml&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;printWidth&quot;</span>: <span class=\"number\">200</span>, <span class=\"comment\">// 每行最多多少字符换行</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 格式化使用单引号</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrapAttributes&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 强制属性换行</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sortAttributes&quot;</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 按字母顺序排序属性</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// 配置文档：https://github.com/Prettyhtml/prettyhtml</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class=\"string\">&quot;js-beautify-html&quot;</span>, <span class=\"comment\">// 使用 js-beautify-html 格式化 html</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class=\"string\">&quot;prettier&quot;</span>, <span class=\"comment\">// 使用 prettier 格式化 js</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[vue]&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;octref.vetur&quot;</span> <span class=\"comment\">// 使用 vetur 格式化 vue</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.fontFamily&quot;</span>: <span class=\"string\">&quot;&#x27;Fira Code&#x27;, Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;path-intellisense.mappings&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;@&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/src&quot;</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">// Vue路径提示配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-eslintrc-js\"><a href=\"#配置-eslintrc-js\" class=\"headerlink\" title=\"配置 .eslintrc.js\"></a>配置 .eslintrc.js</h2><p>Vue 项目的根目录下创建 .eslintrc.js ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  root: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    parser: <span class=\"string\">&#x27;babel-eslint&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: [<span class=\"string\">&#x27;plugin:vue/essential&#x27;</span>, <span class=\"string\">&#x27;eslint:recommended&#x27;</span>, <span class=\"string\">&#x27;airbnb-base/legacy&#x27;</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文档：https://cn.eslint.org/docs/rules/</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;generator-star-spacing&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">// 强制 generator 函数中 * 号周围使用一致的空格</span></span><br><span class=\"line\">    <span class=\"comment\">// 开发模式允许使用console</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;error&#x27;</span> : <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 开发环境允许使用调试 (生产模式禁用)</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;error&#x27;</span> : <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 禁止使用 var</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-var&#x27;</span>: <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;padded-blocks&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">// 代码块中避免多余留白</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;comma-dangle&#x27;</span>: [<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"string\">&#x27;never&#x27;</span>], <span class=\"comment\">// 是否允许对象中出现结尾逗号</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-undef&#x27;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class=\"line\">    quotes: <span class=\"number\">0</span>, <span class=\"comment\">// 强制使用一致的反勾号、双引号或单引号 (0: double, 1: single, 2: backtick)</span></span><br><span class=\"line\">    eqeqeq: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">//  关闭 (要求使用 === 和 !==) 的校验</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;eol-last&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">// 要求或禁止文件末尾存在空行</span></span><br><span class=\"line\">    indent: <span class=\"number\">0</span>, <span class=\"comment\">// 忽略强制使用一致的缩进</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-tabs&#x27;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 忽略tab检查</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: <span class=\"number\">0</span> <span class=\"comment\">// 忽略检查当空格用于对齐时，允许混合制表符和空格。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>npm 安装 <code>eslint-config-airbnb-base</code> ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &quot;eslint-config-airbnb-base@latest&quot; peerDependencies</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>.eslintrc.js</code> 中添加（上面配置已添加）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&quot;airbnb-base/legacy&quot;</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h2><p>期望多人开发 Vue 项目时，大家的代码风格保持一致。并且在 VSCode 中，Ctrl+V 保存代码时自动按照 eslint 规范格式化代码。</p>\n<h2 id=\"插件安装\"><a href=\"#插件安装\" class=\"headerlink\" title=\"插件安装\"></a>插件安装</h2><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=octref.vetur\">Vetur</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier - Code formatter</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a></li>\n</ul>","more":"<h2 id=\"配置-VSCode-用户-Settings-json\"><a href=\"#配置-VSCode-用户-Settings-json\" class=\"headerlink\" title=\"配置 VSCode 用户 Settings.json\"></a>配置 VSCode 用户 Settings.json</h2><h3 id=\"打开方式\"><a href=\"#打开方式\" class=\"headerlink\" title=\"打开方式\"></a>打开方式</h3><ol>\n<li>文件——&gt;首选项——&gt;设置</li>\n<li>Ctrl+P 搜索 settings.json</li>\n</ol>\n<h3 id=\"添加配置\"><a href=\"#添加配置\" class=\"headerlink\" title=\"添加配置\"></a>添加配置</h3><blockquote>\n<p>有注释的才需要添加，其他没注释的可以不用管</p>\n</blockquote>\n<figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.fontSize&quot;</span>: <span class=\"number\">14</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;bracket-pair-colorizer-2.showBracketsInGutter&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.iconTheme&quot;</span>: <span class=\"string\">&quot;material-icon-theme&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;sync.gist&quot;</span>: <span class=\"string\">&quot;e9262ee54aa0988ee98c24e6be1dada1&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.colorTheme&quot;</span>: <span class=\"string\">&quot;Atom One Dark&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.fontFamily&quot;</span>: <span class=\"string\">&quot;&#x27;Fira Code&#x27;, Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 新增配置</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.formatOnSave&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// #每次保存的时候自动格式化</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.codeActionsOnSave&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;source.fixAll.eslint&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;, <span class=\"comment\">// 每次保存的时候将代码按eslint格式进行修复</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.tabSize&quot;</span>: <span class=\"number\">2</span>, <span class=\"comment\">// 重新设定tabSize</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.semi&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 添加代码结尾的分号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.singleQuote&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 使用单引号替代双引号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.arrowParens&quot;</span>: <span class=\"string\">&quot;avoid&quot;</span>, <span class=\"comment\">// 箭头函数参数只有一个时是否要有小括号。</span></span><br><span class=\"line\">  <span class=\"comment\">// avoid - 省略括号</span></span><br><span class=\"line\">  <span class=\"comment\">// always - 总是不省略</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.htmlWhitespaceSensitivity&quot;</span>: <span class=\"string\">&quot;ignore&quot;</span>, <span class=\"comment\">// 指定 HTML 文件的全局空白区域敏感度</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;css&quot;- 遵守 CSS display属性的默认值。</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;strict&quot; - 空格被认为是敏感的。</span></span><br><span class=\"line\">  <span class=\"comment\">// &quot;ignore&quot; - 空格被认为是不敏感的。</span></span><br><span class=\"line\">  <span class=\"comment\">// html 中空格也会占位，影响布局，prettier 格式化的时候可能会将文本换行，造成布局错乱</span></span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// --------------- html -----------------</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;a href=&quot;https://prettier.io/&quot;&gt;Prettier is an opinionated code formatter.&lt;/a&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;!-- 变成 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;!-- &quot;Prettier is an opinionated code formatter. &quot; 另起一行，在页面的布局上就会多一个节点文本出来 --&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;a href=&quot;https://prettier.io/&quot;&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">//    Prettier is an opinionated code formatter.</span></span><br><span class=\"line\">  <span class=\"comment\">//  &lt;/a&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">// --------------- html -----------------</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.jsxBracketSameLine&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 将 &gt; 多行 JSX 元素放在最后一行的末尾，而不是单独放在下一行（不适用于自闭元素）。</span></span><br><span class=\"line\">  <span class=\"comment\">// true - 放最后一行末尾</span></span><br><span class=\"line\">  <span class=\"comment\">// false - 单独放在末尾的下一行</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.bracketSpacing&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 在对象，数组括号与文字之间加空格 &quot;&#123; foo: bar &#125;&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;prettier.trailingComma&quot;</span>: <span class=\"string\">&quot;none&quot;</span>, <span class=\"comment\">// 在对象或数组最后一个元素后面是否加逗号（在ES5中加尾逗号）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;javascript.preferences.quoteStyle&quot;</span>: <span class=\"string\">&quot;single&quot;</span>, <span class=\"comment\">// JS格式化设置单引号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;typescript.preferences.quoteStyle&quot;</span>: <span class=\"string\">&quot;single&quot;</span>, <span class=\"comment\">// TS格式化设置单引号</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;javascript.format.insertSpaceBeforeFunctionParenthesis&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 让函数(名)和后面的括号之间加个空格</span></span><br><span class=\"line\">  <span class=\"comment\">// 配置 ESLint 检查的文件类型</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.validate&quot;</span>: [<span class=\"string\">&quot;javascript&quot;</span>, <span class=\"string\">&quot;vue&quot;</span>, <span class=\"string\">&quot;html&quot;</span>],</span><br><span class=\"line\">  <span class=\"attr\">&quot;eslint.options&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 指定vscode的eslint所处理的文件的后缀</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;extensions&quot;</span>: [<span class=\"string\">&quot;.js&quot;</span>, <span class=\"string\">&quot;.vue&quot;</span>, <span class=\"string\">&quot;.ts&quot;</span>, <span class=\"string\">&quot;.tsx&quot;</span>]</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"comment\">//一定要在vutur.defaultFormatterOptions参数中设置，单独修改prettier扩展的设置是无法解决这个问题的，因为perttier默认忽略了vue文件（事实上从忽略列表移除vue也不能解决这个问题）</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatterOptions&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;prettier&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;semi&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 格式化末尾加分号</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span>, <span class=\"comment\">// 格式化以单引号为主</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;trailingComma&quot;</span>: <span class=\"string\">&quot;none&quot;</span> <span class=\"comment\">// 是否末尾自动添加逗号（数组，json，对象）</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;es5&quot; - 在ES5中的对象、数组等最后一个元素后面加逗号</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;none&quot; - 不加逗号</span></span><br><span class=\"line\">      <span class=\"comment\">// &quot;all&quot; - 尽可能都加逗号 (包括函数function的参数).</span></span><br><span class=\"line\">    &#125;, <span class=\"comment\">// 配置文档：https://prettier.io/docs/en/options.html</span></span><br><span class=\"line\">    <span class=\"attr\">&quot;js-beautify-html&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"comment\">// force-aligned | force-expand-multiline vue html代码格式化</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap_attributes&quot;</span>: <span class=\"string\">&quot;force-aligned&quot;</span>, <span class=\"comment\">// 对除第一个属性外的其他每个属性进行换行，并保持对齐</span></span><br><span class=\"line\">      <span class=\"comment\">// - auto: 仅在超出行长度时才对属性进行换行。</span></span><br><span class=\"line\">      <span class=\"comment\">// - force: 对除第一个属性外的其他每个属性进行换行。</span></span><br><span class=\"line\">      <span class=\"comment\">// - force-aligned: 对除第一个属性外的其他每个属性进行换行，并保持对齐。</span></span><br><span class=\"line\">      <span class=\"comment\">// - force-expand-multiline: 对每个属性进行换行。</span></span><br><span class=\"line\">      <span class=\"comment\">// - aligned-multiple: 当超出折行长度时，将属性进行垂直对齐。</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap_line_length&quot;</span>: <span class=\"number\">200</span>, <span class=\"comment\">// 换行长度</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrap_width_line&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 根据行宽换行</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;semi&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 格式化不加分号</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 格式化使用单引号</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"attr\">&quot;prettyhtml&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;printWidth&quot;</span>: <span class=\"number\">200</span>, <span class=\"comment\">// 每行最多多少字符换行</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;singleQuote&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 格式化使用单引号</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;wrapAttributes&quot;</span>: <span class=\"literal\">false</span>, <span class=\"comment\">// 强制属性换行</span></span><br><span class=\"line\">      <span class=\"attr\">&quot;sortAttributes&quot;</span>: <span class=\"literal\">true</span> <span class=\"comment\">// 按字母顺序排序属性</span></span><br><span class=\"line\">    &#125; <span class=\"comment\">// 配置文档：https://github.com/Prettyhtml/prettyhtml</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.html&quot;</span>: <span class=\"string\">&quot;js-beautify-html&quot;</span>, <span class=\"comment\">// 使用 js-beautify-html 格式化 html</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;vetur.format.defaultFormatter.js&quot;</span>: <span class=\"string\">&quot;prettier&quot;</span>, <span class=\"comment\">// 使用 prettier 格式化 js</span></span><br><span class=\"line\">  <span class=\"attr\">&quot;[vue]&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.defaultFormatter&quot;</span>: <span class=\"string\">&quot;octref.vetur&quot;</span> <span class=\"comment\">// 使用 vetur 格式化 vue</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"attr\">&quot;editor.fontFamily&quot;</span>: <span class=\"string\">&quot;&#x27;Fira Code&#x27;, Menlo, Monaco, &#x27;Courier New&#x27;, monospace&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;path-intellisense.mappings&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;@&quot;</span>: <span class=\"string\">&quot;$&#123;workspaceRoot&#125;/src&quot;</span></span><br><span class=\"line\">  &#125; <span class=\"comment\">// Vue路径提示配置</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置-eslintrc-js\"><a href=\"#配置-eslintrc-js\" class=\"headerlink\" title=\"配置 .eslintrc.js\"></a>配置 .eslintrc.js</h2><p>Vue 项目的根目录下创建 .eslintrc.js ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  root: <span class=\"literal\">true</span>,</span><br><span class=\"line\">  parserOptions: &#123;</span><br><span class=\"line\">    parser: <span class=\"string\">&#x27;babel-eslint&#x27;</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  env: &#123;</span><br><span class=\"line\">    browser: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    node: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  <span class=\"keyword\">extends</span>: [<span class=\"string\">&#x27;plugin:vue/essential&#x27;</span>, <span class=\"string\">&#x27;eslint:recommended&#x27;</span>, <span class=\"string\">&#x27;airbnb-base/legacy&#x27;</span>],</span><br><span class=\"line\">  rules: &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 文档：https://cn.eslint.org/docs/rules/</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;generator-star-spacing&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">// 强制 generator 函数中 * 号周围使用一致的空格</span></span><br><span class=\"line\">    <span class=\"comment\">// 开发模式允许使用console</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-console&#x27;</span>: process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;error&#x27;</span> : <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 开发环境允许使用调试 (生产模式禁用)</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-debugger&#x27;</span>: process.env.NODE_ENV === <span class=\"string\">&#x27;production&#x27;</span> ? <span class=\"string\">&#x27;error&#x27;</span> : <span class=\"string\">&#x27;off&#x27;</span>,</span><br><span class=\"line\">    <span class=\"comment\">// 禁止使用 var</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-var&#x27;</span>: <span class=\"string\">&#x27;error&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;padded-blocks&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">// 代码块中避免多余留白</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;comma-dangle&#x27;</span>: [<span class=\"string\">&#x27;error&#x27;</span>, <span class=\"string\">&#x27;never&#x27;</span>], <span class=\"comment\">// 是否允许对象中出现结尾逗号</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-undef&#x27;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 禁用未声明的变量，除非它们在 /*global */ 注释中被提到</span></span><br><span class=\"line\">    quotes: <span class=\"number\">0</span>, <span class=\"comment\">// 强制使用一致的反勾号、双引号或单引号 (0: double, 1: single, 2: backtick)</span></span><br><span class=\"line\">    eqeqeq: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">//  关闭 (要求使用 === 和 !==) 的校验</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;eol-last&#x27;</span>: <span class=\"string\">&#x27;off&#x27;</span>, <span class=\"comment\">// 要求或禁止文件末尾存在空行</span></span><br><span class=\"line\">    indent: <span class=\"number\">0</span>, <span class=\"comment\">// 忽略强制使用一致的缩进</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-tabs&#x27;</span>: <span class=\"number\">0</span>, <span class=\"comment\">// 忽略tab检查</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;no-mixed-spaces-and-tabs&#x27;</span>: <span class=\"number\">0</span> <span class=\"comment\">// 忽略检查当空格用于对齐时，允许混合制表符和空格。</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>npm 安装 <code>eslint-config-airbnb-base</code> ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm info &quot;eslint-config-airbnb-base@latest&quot; peerDependencies</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>.eslintrc.js</code> 中添加（上面配置已添加）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;extends&quot;</span>: <span class=\"string\">&quot;airbnb-base/legacy&quot;</span></span><br></pre></td></tr></table></figure>"},{"title":"Vuex的基本使用","abbrlink":36068,"date":"2019-03-19T02:57:28.000Z","_content":"\n## 什么是 Vuex\n\nVuex 是一个专为 Vue.js 应用程序开发的状态管理工具。\n\n## 准备工作\n\n首先使用 vue-cli 脚手架工具新建一个项目：\n\n```shell\nvue create vuex-demo\n```\n\nsrc文件夹下的目录结构：\n\n```shell\nsrc\n├── App.vue\n├── assets\n│   └── logo.png\n├── components\n│   └── HelloWorld.vue\n└── main.js # 入口文件\n```\n\n<!-- more -->\n\n## 安装 vuex\n\n命令行下执行：\n\n```shell\nnpm i vuex\n```\n\n然后在入口文件引入 vuex ：\n\n```js\nimport Vuex from 'vuex'\nVue.use(Vuex)\n```\n\n## 一个例子\n\n为了了解 vuex 到底做了什么事情、解决了哪些问题。我们先来实现一个简单的 demo ，有一个标签显示数字，两个按钮分别做数字的 +1 和 -1 操作。\n\n我们先在 `src/components/` 下的 Normal.vue 组件中使用纯 Vue 版本编写代码：\n\n> Normal.vue\n\n```html\n<template>\n  <div id=\"normal\">\n    <p>{{count}}\n      <button @click=\"inc\"> + </button>\n      <button @click=\"dec\"> - </button>\n    </p>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    inc() {\n      this.count++\n    },\n    dec() {\n      this.count--\n    }\n  },\n}\n</script>\n```\n\n然后在 `src/App.vue` 中引入并使用该组件：\n\n```html\n<template>\n  <div id=\"app\">\n    <Normal></Normal>\n  </div>\n</template>\n\n<script>\nimport Normal from '@/components/Normal'\nexport default {\n  components: {\n    Normal,\n  }\n}\n</script>\n```\n\n命令行执行 `npm run serve` 就能运行 App 了。\n\n如上的代码的含义是：两个 button 标签绑定函数，当点击的时候分别调用 inc 和 dec 方法，接着会调用 vue 中的 methods 的对应的方法\n。然后会让 data 中的 count 属性值发生改变，改变后会把最新值渲染到视图中。\n\n现在我们来看看使用 vuex 的方式来实现如上 demo ：\n\n> src下新建 `vuex/store.js`\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// 注意是new【Vuex.Store】实例而不是【Vuex】\nexport const store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        inc: state => state.count++,\n        dec: state => state.count--\n    }\n})\n```\n\n> main.js 中引入\n\n```js\n...\nimport store from '@/vuex/store'\n...\nnew Vue({\n  render: h => h(App),\n  store\n}).$mount('#app')\n```\n\n> 在 `src/components/` 下新建 SWVuex.vue 组件\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>{{count}}\n            <button @click=\"inc\">+</button>\n            <button @click=\"dec\">-</button>\n        </p>\n    </div>\n</template>\n\n<script>\n    export default {\n        computed: {\n            count() {\n                return this.$store.state.count\n            }\n        },\n        methods: {\n            inc() {\n                this.$store.commit('inc')\n            },\n            dec() {\n                this.$store.commit('dec')\n            }\n        },\n    }\n</script>\n```\n\n> 在 App.vue 中使用 SWVuex 组件\n\n```html\n<template>\n  <div id=\"app\">\n    <SWVuex></SWVuex>\n  </div>\n</template>\n\n<script>\nimport SWVuex from '@/components/SWVuex'\nexport default {\n  components: {\n    SWVuex\n  }\n}\n</script>\n```\n\n### 两者比较\n\n1. 需要引用 vuex 。\n2. methods 的方法不变，但是方法内的逻辑不在函数内进行，而是让 store 对象去处理。\n3. count 数据不再是一个 data 函数返回的对象的属性了。而是通过 store 方法内的计算字段返回的。\n\n回到 store 对象上来，store 对象是 Vuex.Store 的实例。在 store 内分为 state 对象和 mutations 对象，其中 state 存放的是状态，\n比如 count 属性就是它的状态值，而 mutations 则是一个会引发状态改变的所有方法。\n\n## 什么是状态管理模式\n\n简单的理解就是**统一管理和维护各个 vue 组件的可变化状态**。\n\n我们明白 vue 是单向数据流的，那么它的状态管理一般包含如下几部分：\n\n1. state：驱动应用的数据（一般指 data 中返回的数据）\n2. view：一般指模板，以声明的方式将 state 的数据映射到视图\n3. actions：响应在 view 上的用户输入导致的状态变化\n\n但是当我们的应用遇到多个组件共享状态时候，那么单向数据流可能不太满足我们的需求，比如：\n\n1. 组件的多层嵌套\n2. 多个视图依赖同一个状态\n\n上面这些情况确实能在不使用 vuex 的情况下实现，但往往会导致写出无法维护的代码。因此我们可以把组件的共享状态**提取出来、全局管理**，因此 vuex 产生了。\n\n## Vuex 的优点\n\n最主要解决了组件之间共享同一状态的问题。可以把组件的共享状态提取出来，作为全局来管理。\n\n## 什么情况下才推荐使用 Vuex\n\n大型单页应用！！！如果你的项目不够大，足够简单，最好不要使用 Vuex ，一个简单的 global event bus 就足够所需了。\n\n## State 对象状态的访问\n\n### 通过 computed 计算属性直接赋值\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{count}}</p>\n        <p>\n            <button @click=\"inc\">+</button>\n            <button @click=\"dec\">-</button>\n        </p>\n    </div>\n</template>\n\n<script>\n    export default {\n        computed: {\n            count() {\n                return this.$store.state.count\n            }\n        },\n        methods: {\n            inc() {\n                this.$store.commit('inc')\n            },\n            dec() {\n                this.$store.commit('dec')\n            }\n        },\n    }\n</script>\n```\n\n### 借助 mapState 辅助函数\n\n#### 对象形式\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{count}}</p>\n        <p>\n            <button @click=\"inc\">+</button>\n            <button @click=\"dec\">-</button>\n        </p>\n    </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\n    export default {\n        computed: mapState({\n            count: state => state.count\n        }),\n        methods: {\n            inc() {\n                this.$store.commit('inc')\n            },\n            dec() {\n                this.$store.commit('dec')\n            }\n        },\n    }\n</script>\n```\n\n#### 数组形式\n\n```js\n// 数组中的 count 必须和 store.js 中定义的常量 count 同名，因为这是直接访问 state 的 count\ncomputed: mapState(['count'])\n```\n\n## Getters 计算过滤操作\n\n有时候我们需要从 store 的 state 中派生出一些状态，比如在使用 store 中的 state 之前，我们会对 state 中的某些字段进行过滤——让 count 字段都进行加 10 这样的数据操作；但是如果有多个组件需要用到这个操作的话，那么我们就需要复制这个函数，或者抽取到一个共享函数内，\n然后多处导入这个函数，但是这上面两种方式都不是太好，因为我们现在有更好的方式来解决它。\n\nVuex 允许我们在 store 中定义 getters，getters 的返回值会根据它的依赖被缓存起来，且只有当他的依赖值发生改变了才会重新计算。\n\n现在我们对 store.js 文件中的 count 进行一个计算属性的操作，在它每次输出之前，加上20。\n\n如下代码有两个按钮，一个加5，一个减5，那么在加5或者减5之前，先加20，然后再进行加5或者5操作。代码如下：\n\n> store.js\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        inc: (state, num) => state.count += num,\n        dec: (state, num) => state.count -= num\n    },\n    getters: {\n        myCount(state) {\n            return state.count + 20\n        }\n    }\n})\n```\n\n> SWVuex.vue\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{myCount}}</p>\n        <p>\n            <p>使用 $store.commit('inc', 5) 方式调用</p>\n            <!-- $store.commit('inc', 5) 第一个参数是方法名，第二个是参数 -->\n            <button @click=\"$store.commit('inc', 5)\">+</button>\n            <button @click=\"$store.commit('dec', 5)\">-</button>\n        </p>\n        <div>\n            <p>使用mapMutations修改状态：</p>\n            <p>\n                <button @click=\"inc(10)\">+</button>\n                <button @click=\"dec(10)\">-</button>\n            </p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {mapState, mapGetters, mapMutations} from 'vuex'\n    export default {\n        computed: {\n            // mapState(['count']) 此处的 count 必须和 store.js\n            // state 中的 count 同名，因为这是直接访问 state 的 count\n            ...mapState(['count']),\n            // mapGetters 辅助函数，\n            // 可以将 store 中的 getter 映射到局部计算属性 myCount\n            ...mapGetters(['myCount'])\n        },\n        methods: {\n            ...mapMutations(['inc', 'dec'])\n        },\n    }\n</script>\n```\n\n## Mutations 修改状态\n\nMutations 是修改 vuex 中的 store 的唯一方法。每个 mutations 都有一个字符串的事件类型(type)和一个回调函数(handler)。这个回调函数就是我们进行更改的地方。它也会接受 state 作为第一个参数。\n\n回顾上面的 `store.js` 中有关 mutations 的代码：\n\n```js\nmutations: {\n    inc: (state, num) => state.count += num,\n    dec: (state, num) => state.count -= num\n},\n```\n\n当我们点击页面上的按钮后会触发事件并执行方法，方法中又会调用 `$store.commit(type, args)` 来传入参数改变 state 数据。\n\n## Actions 异步修改状态\n\nActions 和 Mutations 类似，但它用来异步修改 state 的状态。而 Mutations 则是同步修改 state 的状态。\n\n我们在 store.js 中声明 actions，actions 可以调用 mutations 的方法的。代码如下：\n\n> store.js\n\n```js\n// 增加两个 actions 方法\nactions: {\n    incAction(context) {\n        console.log(context)\n        // 调用 mutations 中的 inc 方法，并传参数5\n        context.commit('inc', 5)\n    },\n    decAction(context) {\n        context.commit('dec', 5)\n    }\n}\n```\n\n上方代码中的参数 context 指上下文，即 store 本身。\n\n然后在 SWVuex.vue 中通过 `this.$store.dispatch(action方法名, 参数)` 的方式调用：\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{myCount}}</p>\n        <div>\n            <p>使用 $store.commit('inc', 5) 方式调用</p>\n            <!-- $store.commit('inc', 5) 第一个参数是方法名，第二个是参数 -->\n            <button @click=\"$store.commit('inc', 5)\">+</button>\n            <button @click=\"$store.commit('dec', 5)\">-</button>\n        </div>\n        <div>\n            <p>使用mapMutations修改状态：</p>\n            <p>\n                <button @click=\"inc(10)\">+</button>\n                <button @click=\"dec(10)\">-</button>\n            </p>\n        </div>\n        <div>\n            <p>actions的异步操作</p>\n            <button @click=\"incAction\"> + </button>\n            <button @click=\"decAction\"> - </button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {mapState, mapGetters, mapMutations} from 'vuex'\n    export default {\n        computed: {\n            // mapState(['count']) 此处的 count 必须和 store.js\n            // state 中的 count 同名，因为这是直接访问 state 的 count\n            ...mapState(['count']),\n            // mapGetters 辅助函数，\n            // 可以将 store 中的 getter 映射到局部计算属性 myCount\n            ...mapGetters(['myCount'])\n        },\n        methods: {\n            ...mapMutations(['inc', 'dec']),\n            incAction() {\n                this.$store.dispatch('incAction')\n            },\n            decAction() {\n                this.$store.dispatch('decAction')\n            },\n        },\n    }\n</script>\n```\n\n当然，除了使用 `this.$store.dispatch()` 的方式以外，还可以借助 `mapActions` 来简化代码：\n\n```js\n// 新加 mapActions\nimport {mapState, mapGetters, mapMutations, mapActions} from 'vuex'\n...\nmethods: {\n    ...mapMutations(['inc', 'dec']),\n    ...mapActions(['incAction', 'decAction']) // +\n},\n```\n","source":"_posts/Vuex的基本使用.md","raw":"---\ntitle: Vuex的基本使用\ntags:\n  - Vuex\ncategories:\n  - 前端\n  - 框架\n  - Vue\nabbrlink: 36068\ndate: 2019-03-19 10:57:28\n---\n\n## 什么是 Vuex\n\nVuex 是一个专为 Vue.js 应用程序开发的状态管理工具。\n\n## 准备工作\n\n首先使用 vue-cli 脚手架工具新建一个项目：\n\n```shell\nvue create vuex-demo\n```\n\nsrc文件夹下的目录结构：\n\n```shell\nsrc\n├── App.vue\n├── assets\n│   └── logo.png\n├── components\n│   └── HelloWorld.vue\n└── main.js # 入口文件\n```\n\n<!-- more -->\n\n## 安装 vuex\n\n命令行下执行：\n\n```shell\nnpm i vuex\n```\n\n然后在入口文件引入 vuex ：\n\n```js\nimport Vuex from 'vuex'\nVue.use(Vuex)\n```\n\n## 一个例子\n\n为了了解 vuex 到底做了什么事情、解决了哪些问题。我们先来实现一个简单的 demo ，有一个标签显示数字，两个按钮分别做数字的 +1 和 -1 操作。\n\n我们先在 `src/components/` 下的 Normal.vue 组件中使用纯 Vue 版本编写代码：\n\n> Normal.vue\n\n```html\n<template>\n  <div id=\"normal\">\n    <p>{{count}}\n      <button @click=\"inc\"> + </button>\n      <button @click=\"dec\"> - </button>\n    </p>\n  </div>\n</template>\n\n<script>\n\nexport default {\n  data() {\n    return {\n      count: 0\n    }\n  },\n  methods: {\n    inc() {\n      this.count++\n    },\n    dec() {\n      this.count--\n    }\n  },\n}\n</script>\n```\n\n然后在 `src/App.vue` 中引入并使用该组件：\n\n```html\n<template>\n  <div id=\"app\">\n    <Normal></Normal>\n  </div>\n</template>\n\n<script>\nimport Normal from '@/components/Normal'\nexport default {\n  components: {\n    Normal,\n  }\n}\n</script>\n```\n\n命令行执行 `npm run serve` 就能运行 App 了。\n\n如上的代码的含义是：两个 button 标签绑定函数，当点击的时候分别调用 inc 和 dec 方法，接着会调用 vue 中的 methods 的对应的方法\n。然后会让 data 中的 count 属性值发生改变，改变后会把最新值渲染到视图中。\n\n现在我们来看看使用 vuex 的方式来实现如上 demo ：\n\n> src下新建 `vuex/store.js`\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\n// 注意是new【Vuex.Store】实例而不是【Vuex】\nexport const store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        inc: state => state.count++,\n        dec: state => state.count--\n    }\n})\n```\n\n> main.js 中引入\n\n```js\n...\nimport store from '@/vuex/store'\n...\nnew Vue({\n  render: h => h(App),\n  store\n}).$mount('#app')\n```\n\n> 在 `src/components/` 下新建 SWVuex.vue 组件\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>{{count}}\n            <button @click=\"inc\">+</button>\n            <button @click=\"dec\">-</button>\n        </p>\n    </div>\n</template>\n\n<script>\n    export default {\n        computed: {\n            count() {\n                return this.$store.state.count\n            }\n        },\n        methods: {\n            inc() {\n                this.$store.commit('inc')\n            },\n            dec() {\n                this.$store.commit('dec')\n            }\n        },\n    }\n</script>\n```\n\n> 在 App.vue 中使用 SWVuex 组件\n\n```html\n<template>\n  <div id=\"app\">\n    <SWVuex></SWVuex>\n  </div>\n</template>\n\n<script>\nimport SWVuex from '@/components/SWVuex'\nexport default {\n  components: {\n    SWVuex\n  }\n}\n</script>\n```\n\n### 两者比较\n\n1. 需要引用 vuex 。\n2. methods 的方法不变，但是方法内的逻辑不在函数内进行，而是让 store 对象去处理。\n3. count 数据不再是一个 data 函数返回的对象的属性了。而是通过 store 方法内的计算字段返回的。\n\n回到 store 对象上来，store 对象是 Vuex.Store 的实例。在 store 内分为 state 对象和 mutations 对象，其中 state 存放的是状态，\n比如 count 属性就是它的状态值，而 mutations 则是一个会引发状态改变的所有方法。\n\n## 什么是状态管理模式\n\n简单的理解就是**统一管理和维护各个 vue 组件的可变化状态**。\n\n我们明白 vue 是单向数据流的，那么它的状态管理一般包含如下几部分：\n\n1. state：驱动应用的数据（一般指 data 中返回的数据）\n2. view：一般指模板，以声明的方式将 state 的数据映射到视图\n3. actions：响应在 view 上的用户输入导致的状态变化\n\n但是当我们的应用遇到多个组件共享状态时候，那么单向数据流可能不太满足我们的需求，比如：\n\n1. 组件的多层嵌套\n2. 多个视图依赖同一个状态\n\n上面这些情况确实能在不使用 vuex 的情况下实现，但往往会导致写出无法维护的代码。因此我们可以把组件的共享状态**提取出来、全局管理**，因此 vuex 产生了。\n\n## Vuex 的优点\n\n最主要解决了组件之间共享同一状态的问题。可以把组件的共享状态提取出来，作为全局来管理。\n\n## 什么情况下才推荐使用 Vuex\n\n大型单页应用！！！如果你的项目不够大，足够简单，最好不要使用 Vuex ，一个简单的 global event bus 就足够所需了。\n\n## State 对象状态的访问\n\n### 通过 computed 计算属性直接赋值\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{count}}</p>\n        <p>\n            <button @click=\"inc\">+</button>\n            <button @click=\"dec\">-</button>\n        </p>\n    </div>\n</template>\n\n<script>\n    export default {\n        computed: {\n            count() {\n                return this.$store.state.count\n            }\n        },\n        methods: {\n            inc() {\n                this.$store.commit('inc')\n            },\n            dec() {\n                this.$store.commit('dec')\n            }\n        },\n    }\n</script>\n```\n\n### 借助 mapState 辅助函数\n\n#### 对象形式\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{count}}</p>\n        <p>\n            <button @click=\"inc\">+</button>\n            <button @click=\"dec\">-</button>\n        </p>\n    </div>\n</template>\n\n<script>\nimport {mapState} from 'vuex'\n    export default {\n        computed: mapState({\n            count: state => state.count\n        }),\n        methods: {\n            inc() {\n                this.$store.commit('inc')\n            },\n            dec() {\n                this.$store.commit('dec')\n            }\n        },\n    }\n</script>\n```\n\n#### 数组形式\n\n```js\n// 数组中的 count 必须和 store.js 中定义的常量 count 同名，因为这是直接访问 state 的 count\ncomputed: mapState(['count'])\n```\n\n## Getters 计算过滤操作\n\n有时候我们需要从 store 的 state 中派生出一些状态，比如在使用 store 中的 state 之前，我们会对 state 中的某些字段进行过滤——让 count 字段都进行加 10 这样的数据操作；但是如果有多个组件需要用到这个操作的话，那么我们就需要复制这个函数，或者抽取到一个共享函数内，\n然后多处导入这个函数，但是这上面两种方式都不是太好，因为我们现在有更好的方式来解决它。\n\nVuex 允许我们在 store 中定义 getters，getters 的返回值会根据它的依赖被缓存起来，且只有当他的依赖值发生改变了才会重新计算。\n\n现在我们对 store.js 文件中的 count 进行一个计算属性的操作，在它每次输出之前，加上20。\n\n如下代码有两个按钮，一个加5，一个减5，那么在加5或者减5之前，先加20，然后再进行加5或者5操作。代码如下：\n\n> store.js\n\n```js\nimport Vue from 'vue'\nimport Vuex from 'vuex'\n\nVue.use(Vuex)\n\nexport const store = new Vuex.Store({\n    state: {\n        count: 0\n    },\n    mutations: {\n        inc: (state, num) => state.count += num,\n        dec: (state, num) => state.count -= num\n    },\n    getters: {\n        myCount(state) {\n            return state.count + 20\n        }\n    }\n})\n```\n\n> SWVuex.vue\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{myCount}}</p>\n        <p>\n            <p>使用 $store.commit('inc', 5) 方式调用</p>\n            <!-- $store.commit('inc', 5) 第一个参数是方法名，第二个是参数 -->\n            <button @click=\"$store.commit('inc', 5)\">+</button>\n            <button @click=\"$store.commit('dec', 5)\">-</button>\n        </p>\n        <div>\n            <p>使用mapMutations修改状态：</p>\n            <p>\n                <button @click=\"inc(10)\">+</button>\n                <button @click=\"dec(10)\">-</button>\n            </p>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {mapState, mapGetters, mapMutations} from 'vuex'\n    export default {\n        computed: {\n            // mapState(['count']) 此处的 count 必须和 store.js\n            // state 中的 count 同名，因为这是直接访问 state 的 count\n            ...mapState(['count']),\n            // mapGetters 辅助函数，\n            // 可以将 store 中的 getter 映射到局部计算属性 myCount\n            ...mapGetters(['myCount'])\n        },\n        methods: {\n            ...mapMutations(['inc', 'dec'])\n        },\n    }\n</script>\n```\n\n## Mutations 修改状态\n\nMutations 是修改 vuex 中的 store 的唯一方法。每个 mutations 都有一个字符串的事件类型(type)和一个回调函数(handler)。这个回调函数就是我们进行更改的地方。它也会接受 state 作为第一个参数。\n\n回顾上面的 `store.js` 中有关 mutations 的代码：\n\n```js\nmutations: {\n    inc: (state, num) => state.count += num,\n    dec: (state, num) => state.count -= num\n},\n```\n\n当我们点击页面上的按钮后会触发事件并执行方法，方法中又会调用 `$store.commit(type, args)` 来传入参数改变 state 数据。\n\n## Actions 异步修改状态\n\nActions 和 Mutations 类似，但它用来异步修改 state 的状态。而 Mutations 则是同步修改 state 的状态。\n\n我们在 store.js 中声明 actions，actions 可以调用 mutations 的方法的。代码如下：\n\n> store.js\n\n```js\n// 增加两个 actions 方法\nactions: {\n    incAction(context) {\n        console.log(context)\n        // 调用 mutations 中的 inc 方法，并传参数5\n        context.commit('inc', 5)\n    },\n    decAction(context) {\n        context.commit('dec', 5)\n    }\n}\n```\n\n上方代码中的参数 context 指上下文，即 store 本身。\n\n然后在 SWVuex.vue 中通过 `this.$store.dispatch(action方法名, 参数)` 的方式调用：\n\n```html\n<template>\n    <div id=\"vuex\">\n        <p>通过 $store.state 方式获取：{{$store.state.count}}</p>\n        <p>通过 computed 计算属性赋值：{{myCount}}</p>\n        <div>\n            <p>使用 $store.commit('inc', 5) 方式调用</p>\n            <!-- $store.commit('inc', 5) 第一个参数是方法名，第二个是参数 -->\n            <button @click=\"$store.commit('inc', 5)\">+</button>\n            <button @click=\"$store.commit('dec', 5)\">-</button>\n        </div>\n        <div>\n            <p>使用mapMutations修改状态：</p>\n            <p>\n                <button @click=\"inc(10)\">+</button>\n                <button @click=\"dec(10)\">-</button>\n            </p>\n        </div>\n        <div>\n            <p>actions的异步操作</p>\n            <button @click=\"incAction\"> + </button>\n            <button @click=\"decAction\"> - </button>\n        </div>\n    </div>\n</template>\n\n<script>\nimport {mapState, mapGetters, mapMutations} from 'vuex'\n    export default {\n        computed: {\n            // mapState(['count']) 此处的 count 必须和 store.js\n            // state 中的 count 同名，因为这是直接访问 state 的 count\n            ...mapState(['count']),\n            // mapGetters 辅助函数，\n            // 可以将 store 中的 getter 映射到局部计算属性 myCount\n            ...mapGetters(['myCount'])\n        },\n        methods: {\n            ...mapMutations(['inc', 'dec']),\n            incAction() {\n                this.$store.dispatch('incAction')\n            },\n            decAction() {\n                this.$store.dispatch('decAction')\n            },\n        },\n    }\n</script>\n```\n\n当然，除了使用 `this.$store.dispatch()` 的方式以外，还可以借助 `mapActions` 来简化代码：\n\n```js\n// 新加 mapActions\nimport {mapState, mapGetters, mapMutations, mapActions} from 'vuex'\n...\nmethods: {\n    ...mapMutations(['inc', 'dec']),\n    ...mapActions(['incAction', 'decAction']) // +\n},\n```\n","slug":"Vuex的基本使用","published":1,"updated":"2020-11-22T03:00:44.423Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyeh000mkhsr16hwf680","content":"<h2 id=\"什么是-Vuex\"><a href=\"#什么是-Vuex\" class=\"headerlink\" title=\"什么是 Vuex\"></a>什么是 Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理工具。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先使用 vue-cli 脚手架工具新建一个项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create vuex-demo</span><br></pre></td></tr></table></figure>\n\n<p>src文件夹下的目录结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── App.vue</span><br><span class=\"line\">├── assets</span><br><span class=\"line\">│   └── logo.png</span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   └── HelloWorld.vue</span><br><span class=\"line\">└── main.js # 入口文件</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"安装-vuex\"><a href=\"#安装-vuex\" class=\"headerlink\" title=\"安装 vuex\"></a>安装 vuex</h2><p>命令行下执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuex</span><br></pre></td></tr></table></figure>\n\n<p>然后在入口文件引入 vuex ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>为了了解 vuex 到底做了什么事情、解决了哪些问题。我们先来实现一个简单的 demo ，有一个标签显示数字，两个按钮分别做数字的 +1 和 -1 操作。</p>\n<p>我们先在 <code>src/components/</code> 下的 Normal.vue 组件中使用纯 Vue 版本编写代码：</p>\n<blockquote>\n<p>Normal.vue</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;normal&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;count&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.count++</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.count--</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>src/App.vue</code> 中引入并使用该组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Normal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Normal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Normal <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/Normal&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Normal,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>命令行执行 <code>npm run serve</code> 就能运行 App 了。</p>\n<p>如上的代码的含义是：两个 button 标签绑定函数，当点击的时候分别调用 inc 和 dec 方法，接着会调用 vue 中的 methods 的对应的方法<br>。然后会让 data 中的 count 属性值发生改变，改变后会把最新值渲染到视图中。</p>\n<p>现在我们来看看使用 vuex 的方式来实现如上 demo ：</p>\n<blockquote>\n<p>src下新建 <code>vuex/store.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意是new【Vuex.Store】实例而不是【Vuex】</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        inc: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count++,</span><br><span class=\"line\">        dec: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>main.js 中引入</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/vuex/store&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 <code>src/components/</code> 下新建 SWVuex.vue 组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;count&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">count</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;inc&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;dec&#x27;</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 App.vue 中使用 SWVuex 组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SWVuex</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SWVuex</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> SWVuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/SWVuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    SWVuex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两者比较\"><a href=\"#两者比较\" class=\"headerlink\" title=\"两者比较\"></a>两者比较</h3><ol>\n<li>需要引用 vuex 。</li>\n<li>methods 的方法不变，但是方法内的逻辑不在函数内进行，而是让 store 对象去处理。</li>\n<li>count 数据不再是一个 data 函数返回的对象的属性了。而是通过 store 方法内的计算字段返回的。</li>\n</ol>\n<p>回到 store 对象上来，store 对象是 Vuex.Store 的实例。在 store 内分为 state 对象和 mutations 对象，其中 state 存放的是状态，<br>比如 count 属性就是它的状态值，而 mutations 则是一个会引发状态改变的所有方法。</p>\n<h2 id=\"什么是状态管理模式\"><a href=\"#什么是状态管理模式\" class=\"headerlink\" title=\"什么是状态管理模式\"></a>什么是状态管理模式</h2><p>简单的理解就是<strong>统一管理和维护各个 vue 组件的可变化状态</strong>。</p>\n<p>我们明白 vue 是单向数据流的，那么它的状态管理一般包含如下几部分：</p>\n<ol>\n<li>state：驱动应用的数据（一般指 data 中返回的数据）</li>\n<li>view：一般指模板，以声明的方式将 state 的数据映射到视图</li>\n<li>actions：响应在 view 上的用户输入导致的状态变化</li>\n</ol>\n<p>但是当我们的应用遇到多个组件共享状态时候，那么单向数据流可能不太满足我们的需求，比如：</p>\n<ol>\n<li>组件的多层嵌套</li>\n<li>多个视图依赖同一个状态</li>\n</ol>\n<p>上面这些情况确实能在不使用 vuex 的情况下实现，但往往会导致写出无法维护的代码。因此我们可以把组件的共享状态<strong>提取出来、全局管理</strong>，因此 vuex 产生了。</p>\n<h2 id=\"Vuex-的优点\"><a href=\"#Vuex-的优点\" class=\"headerlink\" title=\"Vuex 的优点\"></a>Vuex 的优点</h2><p>最主要解决了组件之间共享同一状态的问题。可以把组件的共享状态提取出来，作为全局来管理。</p>\n<h2 id=\"什么情况下才推荐使用-Vuex\"><a href=\"#什么情况下才推荐使用-Vuex\" class=\"headerlink\" title=\"什么情况下才推荐使用 Vuex\"></a>什么情况下才推荐使用 Vuex</h2><p>大型单页应用！！！如果你的项目不够大，足够简单，最好不要使用 Vuex ，一个简单的 global event bus 就足够所需了。</p>\n<h2 id=\"State-对象状态的访问\"><a href=\"#State-对象状态的访问\" class=\"headerlink\" title=\"State 对象状态的访问\"></a>State 对象状态的访问</h2><h3 id=\"通过-computed-计算属性直接赋值\"><a href=\"#通过-computed-计算属性直接赋值\" class=\"headerlink\" title=\"通过 computed 计算属性直接赋值\"></a>通过 computed 计算属性直接赋值</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">count</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;inc&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;dec&#x27;</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"借助-mapState-辅助函数\"><a href=\"#借助-mapState-辅助函数\" class=\"headerlink\" title=\"借助 mapState 辅助函数\"></a>借助 mapState 辅助函数</h3><h4 id=\"对象形式\"><a href=\"#对象形式\" class=\"headerlink\" title=\"对象形式\"></a>对象形式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: mapState(&#123;</span><br><span class=\"line\"><span class=\"javascript\">            count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;inc&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;dec&#x27;</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组形式\"><a href=\"#数组形式\" class=\"headerlink\" title=\"数组形式\"></a>数组形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组中的 count 必须和 store.js 中定义的常量 count 同名，因为这是直接访问 state 的 count</span></span><br><span class=\"line\">computed: mapState([<span class=\"string\">&#x27;count&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Getters-计算过滤操作\"><a href=\"#Getters-计算过滤操作\" class=\"headerlink\" title=\"Getters 计算过滤操作\"></a>Getters 计算过滤操作</h2><p>有时候我们需要从 store 的 state 中派生出一些状态，比如在使用 store 中的 state 之前，我们会对 state 中的某些字段进行过滤——让 count 字段都进行加 10 这样的数据操作；但是如果有多个组件需要用到这个操作的话，那么我们就需要复制这个函数，或者抽取到一个共享函数内，<br>然后多处导入这个函数，但是这上面两种方式都不是太好，因为我们现在有更好的方式来解决它。</p>\n<p>Vuex 允许我们在 store 中定义 getters，getters 的返回值会根据它的依赖被缓存起来，且只有当他的依赖值发生改变了才会重新计算。</p>\n<p>现在我们对 store.js 文件中的 count 进行一个计算属性的操作，在它每次输出之前，加上20。</p>\n<p>如下代码有两个按钮，一个加5，一个减5，那么在加5或者减5之前，先加20，然后再进行加5或者5操作。代码如下：</p>\n<blockquote>\n<p>store.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        inc: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count += num,</span><br><span class=\"line\">        dec: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count -= num</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">myCount</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.count + <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SWVuex.vue</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;myCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 $store.commit(&#x27;inc&#x27;, 5) 方式调用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- $store.commit(&#x27;inc&#x27;, 5) 第一个参数是方法名，第二个是参数 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;inc&#x27;, 5)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;dec&#x27;, 5)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用mapMutations修改状态：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc(10)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec(10)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123;mapState, mapGetters, mapMutations&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapState([&#x27;count&#x27;]) 此处的 count 必须和 store.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// state 中的 count 同名，因为这是直接访问 state 的 count</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapState([<span class=\"string\">&#x27;count&#x27;</span>]),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapGetters 辅助函数，</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 可以将 store 中的 getter 映射到局部计算属性 myCount</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapGetters([<span class=\"string\">&#x27;myCount&#x27;</span>])</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            ...mapMutations([<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"string\">&#x27;dec&#x27;</span>])</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mutations-修改状态\"><a href=\"#Mutations-修改状态\" class=\"headerlink\" title=\"Mutations 修改状态\"></a>Mutations 修改状态</h2><p>Mutations 是修改 vuex 中的 store 的唯一方法。每个 mutations 都有一个字符串的事件类型(type)和一个回调函数(handler)。这个回调函数就是我们进行更改的地方。它也会接受 state 作为第一个参数。</p>\n<p>回顾上面的 <code>store.js</code> 中有关 mutations 的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">    inc: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count += num,</span><br><span class=\"line\">    dec: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count -= num</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当我们点击页面上的按钮后会触发事件并执行方法，方法中又会调用 <code>$store.commit(type, args)</code> 来传入参数改变 state 数据。</p>\n<h2 id=\"Actions-异步修改状态\"><a href=\"#Actions-异步修改状态\" class=\"headerlink\" title=\"Actions 异步修改状态\"></a>Actions 异步修改状态</h2><p>Actions 和 Mutations 类似，但它用来异步修改 state 的状态。而 Mutations 则是同步修改 state 的状态。</p>\n<p>我们在 store.js 中声明 actions，actions 可以调用 mutations 的方法的。代码如下：</p>\n<blockquote>\n<p>store.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加两个 actions 方法</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">incAction</span>(<span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(context)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 mutations 中的 inc 方法，并传参数5</span></span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">decAction</span>(<span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;dec&#x27;</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中的参数 context 指上下文，即 store 本身。</p>\n<p>然后在 SWVuex.vue 中通过 <code>this.$store.dispatch(action方法名, 参数)</code> 的方式调用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;myCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 $store.commit(&#x27;inc&#x27;, 5) 方式调用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- $store.commit(&#x27;inc&#x27;, 5) 第一个参数是方法名，第二个是参数 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;inc&#x27;, 5)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;dec&#x27;, 5)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用mapMutations修改状态：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc(10)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec(10)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>actions的异步操作<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;incAction&quot;</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;decAction&quot;</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123;mapState, mapGetters, mapMutations&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapState([&#x27;count&#x27;]) 此处的 count 必须和 store.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// state 中的 count 同名，因为这是直接访问 state 的 count</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapState([<span class=\"string\">&#x27;count&#x27;</span>]),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapGetters 辅助函数，</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 可以将 store 中的 getter 映射到局部计算属性 myCount</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapGetters([<span class=\"string\">&#x27;myCount&#x27;</span>])</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            ...mapMutations([<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"string\">&#x27;dec&#x27;</span>]),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">incAction</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;incAction&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">decAction</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;decAction&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，除了使用 <code>this.$store.dispatch()</code> 的方式以外，还可以借助 <code>mapActions</code> 来简化代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新加 mapActions</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState, mapGetters, mapMutations, mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    ...mapMutations([<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"string\">&#x27;dec&#x27;</span>]),</span><br><span class=\"line\">    ...mapActions([<span class=\"string\">&#x27;incAction&#x27;</span>, <span class=\"string\">&#x27;decAction&#x27;</span>]) <span class=\"comment\">// +</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-Vuex\"><a href=\"#什么是-Vuex\" class=\"headerlink\" title=\"什么是 Vuex\"></a>什么是 Vuex</h2><p>Vuex 是一个专为 Vue.js 应用程序开发的状态管理工具。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>首先使用 vue-cli 脚手架工具新建一个项目：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vue create vuex-demo</span><br></pre></td></tr></table></figure>\n\n<p>src文件夹下的目录结构：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">src</span><br><span class=\"line\">├── App.vue</span><br><span class=\"line\">├── assets</span><br><span class=\"line\">│   └── logo.png</span><br><span class=\"line\">├── components</span><br><span class=\"line\">│   └── HelloWorld.vue</span><br><span class=\"line\">└── main.js # 入口文件</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"安装-vuex\"><a href=\"#安装-vuex\" class=\"headerlink\" title=\"安装 vuex\"></a>安装 vuex</h2><p>命令行下执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i vuex</span><br></pre></td></tr></table></figure>\n\n<p>然后在入口文件引入 vuex ：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">Vue.use(Vuex)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"一个例子\"><a href=\"#一个例子\" class=\"headerlink\" title=\"一个例子\"></a>一个例子</h2><p>为了了解 vuex 到底做了什么事情、解决了哪些问题。我们先来实现一个简单的 demo ，有一个标签显示数字，两个按钮分别做数字的 +1 和 -1 操作。</p>\n<p>我们先在 <code>src/components/</code> 下的 Normal.vue 组件中使用纯 Vue 版本编写代码：</p>\n<blockquote>\n<p>Normal.vue</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;normal&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;count&#125;&#125;</span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">      <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">  <span class=\"function\"><span class=\"title\">data</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">return</span> &#123;</span></span><br><span class=\"line\">      count: 0</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.count++</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">this</span>.count--</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>src/App.vue</code> 中引入并使用该组件：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Normal</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">Normal</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> Normal <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/Normal&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    Normal,</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>命令行执行 <code>npm run serve</code> 就能运行 App 了。</p>\n<p>如上的代码的含义是：两个 button 标签绑定函数，当点击的时候分别调用 inc 和 dec 方法，接着会调用 vue 中的 methods 的对应的方法<br>。然后会让 data 中的 count 属性值发生改变，改变后会把最新值渲染到视图中。</p>\n<p>现在我们来看看使用 vuex 的方式来实现如上 demo ：</p>\n<blockquote>\n<p>src下新建 <code>vuex/store.js</code></p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 注意是new【Vuex.Store】实例而不是【Vuex】</span></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        inc: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count++,</span><br><span class=\"line\">        dec: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count--</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>main.js 中引入</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">import</span> store <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/vuex/store&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">new</span> Vue(&#123;</span><br><span class=\"line\">  render: <span class=\"function\"><span class=\"params\">h</span> =&gt;</span> h(App),</span><br><span class=\"line\">  store</span><br><span class=\"line\">&#125;).$mount(<span class=\"string\">&#x27;#app&#x27;</span>)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 <code>src/components/</code> 下新建 SWVuex.vue 组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>&#123;&#123;count&#125;&#125;</span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">count</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;inc&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;dec&#x27;</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>在 App.vue 中使用 SWVuex 组件</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;app&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">SWVuex</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">SWVuex</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> SWVuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;@/components/SWVuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">  components: &#123;</span><br><span class=\"line\">    SWVuex</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"两者比较\"><a href=\"#两者比较\" class=\"headerlink\" title=\"两者比较\"></a>两者比较</h3><ol>\n<li>需要引用 vuex 。</li>\n<li>methods 的方法不变，但是方法内的逻辑不在函数内进行，而是让 store 对象去处理。</li>\n<li>count 数据不再是一个 data 函数返回的对象的属性了。而是通过 store 方法内的计算字段返回的。</li>\n</ol>\n<p>回到 store 对象上来，store 对象是 Vuex.Store 的实例。在 store 内分为 state 对象和 mutations 对象，其中 state 存放的是状态，<br>比如 count 属性就是它的状态值，而 mutations 则是一个会引发状态改变的所有方法。</p>\n<h2 id=\"什么是状态管理模式\"><a href=\"#什么是状态管理模式\" class=\"headerlink\" title=\"什么是状态管理模式\"></a>什么是状态管理模式</h2><p>简单的理解就是<strong>统一管理和维护各个 vue 组件的可变化状态</strong>。</p>\n<p>我们明白 vue 是单向数据流的，那么它的状态管理一般包含如下几部分：</p>\n<ol>\n<li>state：驱动应用的数据（一般指 data 中返回的数据）</li>\n<li>view：一般指模板，以声明的方式将 state 的数据映射到视图</li>\n<li>actions：响应在 view 上的用户输入导致的状态变化</li>\n</ol>\n<p>但是当我们的应用遇到多个组件共享状态时候，那么单向数据流可能不太满足我们的需求，比如：</p>\n<ol>\n<li>组件的多层嵌套</li>\n<li>多个视图依赖同一个状态</li>\n</ol>\n<p>上面这些情况确实能在不使用 vuex 的情况下实现，但往往会导致写出无法维护的代码。因此我们可以把组件的共享状态<strong>提取出来、全局管理</strong>，因此 vuex 产生了。</p>\n<h2 id=\"Vuex-的优点\"><a href=\"#Vuex-的优点\" class=\"headerlink\" title=\"Vuex 的优点\"></a>Vuex 的优点</h2><p>最主要解决了组件之间共享同一状态的问题。可以把组件的共享状态提取出来，作为全局来管理。</p>\n<h2 id=\"什么情况下才推荐使用-Vuex\"><a href=\"#什么情况下才推荐使用-Vuex\" class=\"headerlink\" title=\"什么情况下才推荐使用 Vuex\"></a>什么情况下才推荐使用 Vuex</h2><p>大型单页应用！！！如果你的项目不够大，足够简单，最好不要使用 Vuex ，一个简单的 global event bus 就足够所需了。</p>\n<h2 id=\"State-对象状态的访问\"><a href=\"#State-对象状态的访问\" class=\"headerlink\" title=\"State 对象状态的访问\"></a>State 对象状态的访问</h2><h3 id=\"通过-computed-计算属性直接赋值\"><a href=\"#通过-computed-计算属性直接赋值\" class=\"headerlink\" title=\"通过 computed 计算属性直接赋值\"></a>通过 computed 计算属性直接赋值</h3><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">count</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"keyword\">return</span> <span class=\"built_in\">this</span>.$store.state.count</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;inc&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;dec&#x27;</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"借助-mapState-辅助函数\"><a href=\"#借助-mapState-辅助函数\" class=\"headerlink\" title=\"借助 mapState 辅助函数\"></a>借助 mapState 辅助函数</h3><h4 id=\"对象形式\"><a href=\"#对象形式\" class=\"headerlink\" title=\"对象形式\"></a>对象形式</h4><figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123;mapState&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: mapState(&#123;</span><br><span class=\"line\"><span class=\"javascript\">            count: <span class=\"function\"><span class=\"params\">state</span> =&gt;</span> state.count</span></span><br><span class=\"line\">        &#125;),</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">inc</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;inc&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">dec</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.commit(<span class=\"string\">&#x27;dec&#x27;</span>)</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"数组形式\"><a href=\"#数组形式\" class=\"headerlink\" title=\"数组形式\"></a>数组形式</h4><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 数组中的 count 必须和 store.js 中定义的常量 count 同名，因为这是直接访问 state 的 count</span></span><br><span class=\"line\">computed: mapState([<span class=\"string\">&#x27;count&#x27;</span>])</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Getters-计算过滤操作\"><a href=\"#Getters-计算过滤操作\" class=\"headerlink\" title=\"Getters 计算过滤操作\"></a>Getters 计算过滤操作</h2><p>有时候我们需要从 store 的 state 中派生出一些状态，比如在使用 store 中的 state 之前，我们会对 state 中的某些字段进行过滤——让 count 字段都进行加 10 这样的数据操作；但是如果有多个组件需要用到这个操作的话，那么我们就需要复制这个函数，或者抽取到一个共享函数内，<br>然后多处导入这个函数，但是这上面两种方式都不是太好，因为我们现在有更好的方式来解决它。</p>\n<p>Vuex 允许我们在 store 中定义 getters，getters 的返回值会根据它的依赖被缓存起来，且只有当他的依赖值发生改变了才会重新计算。</p>\n<p>现在我们对 store.js 文件中的 count 进行一个计算属性的操作，在它每次输出之前，加上20。</p>\n<p>如下代码有两个按钮，一个加5，一个减5，那么在加5或者减5之前，先加20，然后再进行加5或者5操作。代码如下：</p>\n<blockquote>\n<p>store.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> Vue <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vue&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> Vuex <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\">Vue.use(Vuex)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">const</span> store = <span class=\"keyword\">new</span> Vuex.Store(&#123;</span><br><span class=\"line\">    state: &#123;</span><br><span class=\"line\">        count: <span class=\"number\">0</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    mutations: &#123;</span><br><span class=\"line\">        inc: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count += num,</span><br><span class=\"line\">        dec: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count -= num</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    getters: &#123;</span><br><span class=\"line\">        <span class=\"function\"><span class=\"title\">myCount</span>(<span class=\"params\">state</span>)</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> state.count + <span class=\"number\">20</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>SWVuex.vue</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;myCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 $store.commit(&#x27;inc&#x27;, 5) 方式调用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- $store.commit(&#x27;inc&#x27;, 5) 第一个参数是方法名，第二个是参数 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;inc&#x27;, 5)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;dec&#x27;, 5)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用mapMutations修改状态：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc(10)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec(10)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123;mapState, mapGetters, mapMutations&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapState([&#x27;count&#x27;]) 此处的 count 必须和 store.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// state 中的 count 同名，因为这是直接访问 state 的 count</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapState([<span class=\"string\">&#x27;count&#x27;</span>]),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapGetters 辅助函数，</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 可以将 store 中的 getter 映射到局部计算属性 myCount</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapGetters([<span class=\"string\">&#x27;myCount&#x27;</span>])</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            ...mapMutations([<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"string\">&#x27;dec&#x27;</span>])</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Mutations-修改状态\"><a href=\"#Mutations-修改状态\" class=\"headerlink\" title=\"Mutations 修改状态\"></a>Mutations 修改状态</h2><p>Mutations 是修改 vuex 中的 store 的唯一方法。每个 mutations 都有一个字符串的事件类型(type)和一个回调函数(handler)。这个回调函数就是我们进行更改的地方。它也会接受 state 作为第一个参数。</p>\n<p>回顾上面的 <code>store.js</code> 中有关 mutations 的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mutations: &#123;</span><br><span class=\"line\">    inc: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count += num,</span><br><span class=\"line\">    dec: <span class=\"function\">(<span class=\"params\">state, num</span>) =&gt;</span> state.count -= num</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>当我们点击页面上的按钮后会触发事件并执行方法，方法中又会调用 <code>$store.commit(type, args)</code> 来传入参数改变 state 数据。</p>\n<h2 id=\"Actions-异步修改状态\"><a href=\"#Actions-异步修改状态\" class=\"headerlink\" title=\"Actions 异步修改状态\"></a>Actions 异步修改状态</h2><p>Actions 和 Mutations 类似，但它用来异步修改 state 的状态。而 Mutations 则是同步修改 state 的状态。</p>\n<p>我们在 store.js 中声明 actions，actions 可以调用 mutations 的方法的。代码如下：</p>\n<blockquote>\n<p>store.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 增加两个 actions 方法</span></span><br><span class=\"line\">actions: &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">incAction</span>(<span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(context)</span><br><span class=\"line\">        <span class=\"comment\">// 调用 mutations 中的 inc 方法，并传参数5</span></span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">decAction</span>(<span class=\"params\">context</span>)</span> &#123;</span><br><span class=\"line\">        context.commit(<span class=\"string\">&#x27;dec&#x27;</span>, <span class=\"number\">5</span>)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>上方代码中的参数 context 指上下文，即 store 本身。</p>\n<p>然后在 SWVuex.vue 中通过 <code>this.$store.dispatch(action方法名, 参数)</code> 的方式调用：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;vuex&quot;</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 $store.state 方式获取：&#123;&#123;$store.state.count&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>通过 computed 计算属性赋值：&#123;&#123;myCount&#125;&#125;<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用 $store.commit(&#x27;inc&#x27;, 5) 方式调用<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"comment\">&lt;!-- $store.commit(&#x27;inc&#x27;, 5) 第一个参数是方法名，第二个是参数 --&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;inc&#x27;, 5)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;$store.commit(&#x27;dec&#x27;, 5)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>使用mapMutations修改状态：<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;inc(10)&quot;</span>&gt;</span>+<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">                <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;dec(10)&quot;</span>&gt;</span>-<span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">p</span>&gt;</span>actions的异步操作<span class=\"tag\">&lt;/<span class=\"name\">p</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;incAction&quot;</span>&gt;</span> + <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">            <span class=\"tag\">&lt;<span class=\"name\">button</span> @<span class=\"attr\">click</span>=<span class=\"string\">&quot;decAction&quot;</span>&gt;</span> - <span class=\"tag\">&lt;/<span class=\"name\">button</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">template</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\"><span class=\"keyword\">import</span> &#123;mapState, mapGetters, mapMutations&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">export</span> <span class=\"keyword\">default</span> &#123;</span></span><br><span class=\"line\">        computed: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapState([&#x27;count&#x27;]) 此处的 count 必须和 store.js</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// state 中的 count 同名，因为这是直接访问 state 的 count</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapState([<span class=\"string\">&#x27;count&#x27;</span>]),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// mapGetters 辅助函数，</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"comment\">// 可以将 store 中的 getter 映射到局部计算属性 myCount</span></span></span><br><span class=\"line\"><span class=\"javascript\">            ...mapGetters([<span class=\"string\">&#x27;myCount&#x27;</span>])</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        methods: &#123;</span><br><span class=\"line\"><span class=\"javascript\">            ...mapMutations([<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"string\">&#x27;dec&#x27;</span>]),</span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">incAction</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;incAction&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"function\"><span class=\"title\">decAction</span>(<span class=\"params\"></span>)</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">this</span>.$store.dispatch(<span class=\"string\">&#x27;decAction&#x27;</span>)</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>当然，除了使用 <code>this.$store.dispatch()</code> 的方式以外，还可以借助 <code>mapActions</code> 来简化代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新加 mapActions</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> &#123;mapState, mapGetters, mapMutations, mapActions&#125; <span class=\"keyword\">from</span> <span class=\"string\">&#x27;vuex&#x27;</span></span><br><span class=\"line\">...</span><br><span class=\"line\">methods: &#123;</span><br><span class=\"line\">    ...mapMutations([<span class=\"string\">&#x27;inc&#x27;</span>, <span class=\"string\">&#x27;dec&#x27;</span>]),</span><br><span class=\"line\">    ...mapActions([<span class=\"string\">&#x27;incAction&#x27;</span>, <span class=\"string\">&#x27;decAction&#x27;</span>]) <span class=\"comment\">// +</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>"},{"title":"Vue的生命周期函数","abbrlink":33186,"date":"2019-02-23T01:34:47.000Z","_content":"\n## 创建期间的生命周期函数\n\n### beforeCreate\n\n实例刚在内存中被创建出来，此时还没有初始化好 data 和 methods 属性。\n\n#### 作用\n\n执行 loading 动画。\n\n### created\n\n实例已经在内存中创建完毕，data 和 methods 等属性也已经创建完成。但此刻**还没有开始编译模板**。\n\n<!-- more -->\n\n#### 作用\n\n- 结束掉 loading 动画\n- 做一些初始化工作，比如函数自执行，发起异步请求获取数据\n\n### beforeMount\n\n此刻**已经完成了模板的编译**，但**还没有挂载到页面上**。换句话说，此时页面中类似 的语法还没有被替换成真正的数据。\n\n### mounted\n\n此刻已经将编译好的模板挂载到了页面中指定的容器中显示。用户已经可以看到渲染好的页面了。\n\n#### 作用\n\n- 由于此刻已经把模板挂载到了页面，所以能够在此钩子函数中获取 DOM 节点。\n- 此函数中也能发起异步请求\n\n## 运行期间的生命周期函数\n\n### beforeUpdate\n\n状态更新之前执行此函数，此刻 data 中的状态值是最新的，但是**界面上显示的数据还是旧的**。因此此时还没有开始重新渲染 DOM 节点。\n\n### updated\n\n实例更新完毕后调用此函数，此刻 data 中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了。\n\n## 销毁期间的生命周期函数\n\n### beforeDestroy\n\n实例销毁之前调用。此刻实例仍然完全可用。\n\n#### 作用\n\n一切你想要在组件销毁之前做事，例如弹出确认窗：“你确认删除XXX吗？”\n\n### destroyed\n\n实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n","source":"_posts/Vue的生命周期函数.md","raw":"---\ntitle: Vue的生命周期函数\ntags:\n  - Vue\ncategories:\n  - 前端\n  - 框架\n  - Vue\nabbrlink: 33186\ndate: 2019-02-23 09:34:47\n---\n\n## 创建期间的生命周期函数\n\n### beforeCreate\n\n实例刚在内存中被创建出来，此时还没有初始化好 data 和 methods 属性。\n\n#### 作用\n\n执行 loading 动画。\n\n### created\n\n实例已经在内存中创建完毕，data 和 methods 等属性也已经创建完成。但此刻**还没有开始编译模板**。\n\n<!-- more -->\n\n#### 作用\n\n- 结束掉 loading 动画\n- 做一些初始化工作，比如函数自执行，发起异步请求获取数据\n\n### beforeMount\n\n此刻**已经完成了模板的编译**，但**还没有挂载到页面上**。换句话说，此时页面中类似 的语法还没有被替换成真正的数据。\n\n### mounted\n\n此刻已经将编译好的模板挂载到了页面中指定的容器中显示。用户已经可以看到渲染好的页面了。\n\n#### 作用\n\n- 由于此刻已经把模板挂载到了页面，所以能够在此钩子函数中获取 DOM 节点。\n- 此函数中也能发起异步请求\n\n## 运行期间的生命周期函数\n\n### beforeUpdate\n\n状态更新之前执行此函数，此刻 data 中的状态值是最新的，但是**界面上显示的数据还是旧的**。因此此时还没有开始重新渲染 DOM 节点。\n\n### updated\n\n实例更新完毕后调用此函数，此刻 data 中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了。\n\n## 销毁期间的生命周期函数\n\n### beforeDestroy\n\n实例销毁之前调用。此刻实例仍然完全可用。\n\n#### 作用\n\n一切你想要在组件销毁之前做事，例如弹出确认窗：“你确认删除XXX吗？”\n\n### destroyed\n\n实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。\n","slug":"Vue的生命周期函数","published":1,"updated":"2020-11-22T01:43:27.004Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyej000qkhsrg08b4c4g","content":"<h2 id=\"创建期间的生命周期函数\"><a href=\"#创建期间的生命周期函数\" class=\"headerlink\" title=\"创建期间的生命周期函数\"></a>创建期间的生命周期函数</h2><h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><p>实例刚在内存中被创建出来，此时还没有初始化好 data 和 methods 属性。</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>执行 loading 动画。</p>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><p>实例已经在内存中创建完毕，data 和 methods 等属性也已经创建完成。但此刻<strong>还没有开始编译模板</strong>。</p>\n<a id=\"more\"></a>\n\n<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>结束掉 loading 动画</li>\n<li>做一些初始化工作，比如函数自执行，发起异步请求获取数据</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><p>此刻<strong>已经完成了模板的编译</strong>，但<strong>还没有挂载到页面上</strong>。换句话说，此时页面中类似 的语法还没有被替换成真正的数据。</p>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><p>此刻已经将编译好的模板挂载到了页面中指定的容器中显示。用户已经可以看到渲染好的页面了。</p>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>由于此刻已经把模板挂载到了页面，所以能够在此钩子函数中获取 DOM 节点。</li>\n<li>此函数中也能发起异步请求</li>\n</ul>\n<h2 id=\"运行期间的生命周期函数\"><a href=\"#运行期间的生命周期函数\" class=\"headerlink\" title=\"运行期间的生命周期函数\"></a>运行期间的生命周期函数</h2><h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><p>状态更新之前执行此函数，此刻 data 中的状态值是最新的，但是<strong>界面上显示的数据还是旧的</strong>。因此此时还没有开始重新渲染 DOM 节点。</p>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><p>实例更新完毕后调用此函数，此刻 data 中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了。</p>\n<h2 id=\"销毁期间的生命周期函数\"><a href=\"#销毁期间的生命周期函数\" class=\"headerlink\" title=\"销毁期间的生命周期函数\"></a>销毁期间的生命周期函数</h2><h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><p>实例销毁之前调用。此刻实例仍然完全可用。</p>\n<h4 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>一切你想要在组件销毁之前做事，例如弹出确认窗：“你确认删除XXX吗？”</p>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><p>实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"创建期间的生命周期函数\"><a href=\"#创建期间的生命周期函数\" class=\"headerlink\" title=\"创建期间的生命周期函数\"></a>创建期间的生命周期函数</h2><h3 id=\"beforeCreate\"><a href=\"#beforeCreate\" class=\"headerlink\" title=\"beforeCreate\"></a>beforeCreate</h3><p>实例刚在内存中被创建出来，此时还没有初始化好 data 和 methods 属性。</p>\n<h4 id=\"作用\"><a href=\"#作用\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>执行 loading 动画。</p>\n<h3 id=\"created\"><a href=\"#created\" class=\"headerlink\" title=\"created\"></a>created</h3><p>实例已经在内存中创建完毕，data 和 methods 等属性也已经创建完成。但此刻<strong>还没有开始编译模板</strong>。</p>","more":"<h4 id=\"作用-1\"><a href=\"#作用-1\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>结束掉 loading 动画</li>\n<li>做一些初始化工作，比如函数自执行，发起异步请求获取数据</li>\n</ul>\n<h3 id=\"beforeMount\"><a href=\"#beforeMount\" class=\"headerlink\" title=\"beforeMount\"></a>beforeMount</h3><p>此刻<strong>已经完成了模板的编译</strong>，但<strong>还没有挂载到页面上</strong>。换句话说，此时页面中类似 的语法还没有被替换成真正的数据。</p>\n<h3 id=\"mounted\"><a href=\"#mounted\" class=\"headerlink\" title=\"mounted\"></a>mounted</h3><p>此刻已经将编译好的模板挂载到了页面中指定的容器中显示。用户已经可以看到渲染好的页面了。</p>\n<h4 id=\"作用-2\"><a href=\"#作用-2\" class=\"headerlink\" title=\"作用\"></a>作用</h4><ul>\n<li>由于此刻已经把模板挂载到了页面，所以能够在此钩子函数中获取 DOM 节点。</li>\n<li>此函数中也能发起异步请求</li>\n</ul>\n<h2 id=\"运行期间的生命周期函数\"><a href=\"#运行期间的生命周期函数\" class=\"headerlink\" title=\"运行期间的生命周期函数\"></a>运行期间的生命周期函数</h2><h3 id=\"beforeUpdate\"><a href=\"#beforeUpdate\" class=\"headerlink\" title=\"beforeUpdate\"></a>beforeUpdate</h3><p>状态更新之前执行此函数，此刻 data 中的状态值是最新的，但是<strong>界面上显示的数据还是旧的</strong>。因此此时还没有开始重新渲染 DOM 节点。</p>\n<h3 id=\"updated\"><a href=\"#updated\" class=\"headerlink\" title=\"updated\"></a>updated</h3><p>实例更新完毕后调用此函数，此刻 data 中的状态值和界面上显示的数据，都已经完成了更新，界面已经被重新渲染好了。</p>\n<h2 id=\"销毁期间的生命周期函数\"><a href=\"#销毁期间的生命周期函数\" class=\"headerlink\" title=\"销毁期间的生命周期函数\"></a>销毁期间的生命周期函数</h2><h3 id=\"beforeDestroy\"><a href=\"#beforeDestroy\" class=\"headerlink\" title=\"beforeDestroy\"></a>beforeDestroy</h3><p>实例销毁之前调用。此刻实例仍然完全可用。</p>\n<h4 id=\"作用-3\"><a href=\"#作用-3\" class=\"headerlink\" title=\"作用\"></a>作用</h4><p>一切你想要在组件销毁之前做事，例如弹出确认窗：“你确认删除XXX吗？”</p>\n<h3 id=\"destroyed\"><a href=\"#destroyed\" class=\"headerlink\" title=\"destroyed\"></a>destroyed</h3><p>实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。</p>"},{"title":"Webpack4 如何优雅打包缓存文件（转载）","abbrlink":64694,"date":"2019-03-14T02:34:04.000Z","_content":"\n一般来说，对于静态资源，我们都希望浏览器能够进行缓存，那样以后进入页面就可以直接使用缓存资源，页面直接直逼火箭速度打开，既提高了用户的体验也节省了宽带资源。\n\n当然浏览器缓存方法有很多种，这里只简单讨论下 webpack 利用 hash 方式修改文件名，以达到缓存目的。\n\n## webpack hash\n\nwebpack 内置了多种可使用 hash，官网解释分别如下：\n\n- `hash`：the hash of the module identifier\n- `chunkHash`：the hash of the chunk content\n- `contentHash`：the hash of extracted content\n\n注：hash 的默认长度为 20 个字符，可通过 `output.hashDigestLength` 全局配置，或使用 `[hash:16]` 方式配置，还可以通过 `output.hashDigest` 配置何时生成 hash。\n\n那么问题来了，这么多种 hash 该如何选择呢？\n\n<!-- more -->\n\n## 实战 hash\n\n基础的配置文件如下（基于webpack 4，入口文件分别为 index 和 detail，其中每个文件中引入了一个图片）：\n\n```js\nmodule.exports = {\n  mode: 'none', // 设置为 none，避免 development 或 production 默认设置的一些影响\n  entry: {\n    index: './src/index.js', \n    detail: './src/detail.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist')\n  }\n}\n```\n\n### hash（the hash of the module identifier）\n\n首先，我们来解释下 the module identifier。webpack 默认为给各个模块分配一个 id 以作标识，用来处理模块之间的依赖关系。而默认的 id 命名规则是根据模块引入的顺序，赋予一个整数(1、2、3……)。如下图就是使用 hash 的打包，index 和 detail 作为 entry 的两个入口，可以看到其 hash 值是一样的，而另外两个图片的 hash 值是不同的。\n\n{% asset_img hash.png hash %}\n\n由于该 hash 是基于整个 module identifier 序列计算得到的，所以 JS 或 CSS 文件如果使用该 hash，则所有值都一样，而任意增添或删减一个模块的依赖，都会对整个 id 序列造成影响，从而改变 hash 值。这样的话 JS 或 CSS 文件是不适合使用该 hash 值的。\n\n当然对于图片、字体、PDF 等资源该 hash 还是可以生成一个唯一值的。\n\n#### runtime & manifest\n\n假如我们什么都不改动，只是重新跑一次构建，会惊奇的发现 index 和 detail 的 hash 值居然变了（图片的 hash 是不变的），如下图：\n\n{% asset_img runtimehash.png runtimehash %}\n\n这究竟是怎么回事呢？webpack 官方解释为：\n\n> This is because webpack includes certain boilerplate, specifically the [runtime and manifest](https://webpack.js.org/concepts/manifest/), in the entry chunk.\n\n为了解决这个不稳定的因素，webpack 4 提供了一个配置可以直接把 boilerplate 给单独抽离出来，配置如下：\n\n```js\noptimization: {\n    runtimeChunk: 'single'\n}\n```\n\n这样我们就能得到一个 runtime 的 js 文件，如下图：\n\n{% asset_img runtimejs.png runtimejs %}\n\n### chunkhash（the hash of the chunk content）\n\n现在我们把 hash 改成 chunkhash ，如下：\n\n```js\noutput: {\n  filename: '[name].[chunkhash].js',\n  path: path.resolve(__dirname, 'dist')\n}\n```\n\n重新跑下构建，会发现打包出来的三个 JS 文件的 chunkhash 值是不一样的了，如下：\n\n{% asset_img chunkhash.png chunkhash %}\n\n现在我们在 index 文件中再引入一个 JS 模块，重新打包如下：\n\n{% asset_img chunkhash.png chunkhash %}\n\n我们会发现 index 和 detail 文件的 chunkhash 都变了，这就奇怪了，按理来说 detail 文件我们根本没有改变啊，为什么它的 chunkhash 值变了呢？\n\n其实根本原因还是 module identifier，因为 index 新引入的模块改变了以后所有模块的 id 值，所以 detail 文件中引入的模块 id 值发生了改变，于是 detail 的 chunkhash 也随着发生改变。\n\n解决方案是将默认的数字 id 命名规则换成路径的方式。webpack 4 中当 mode 为 development 会默认启动\n\n```js\noptimization: {\n    namedModules: true\n}\n```\n\n当然如果是生产环境的话，全路径是有点太长，所以我们可以换成使用[HashedModuleIdsPlugin](https://webpack.js.org/plugins/hashed-module-ids-plugin/) 插件来根据路径生成的 hash 作为 module identifier。\n\n```js\nplugins: [\n    new webpack.HashedModuleIdsPlugin(),\n],\n```\n\n这样最后 chunkhash 改变的就只有修改的文件了，也达到了我们想要的效果。\n\n### contenthash（the hash of extracted content）\n\n现在我们将 CSS 样式单独抽离生成文件（使用了 [MiniCssExtractPlugin](https://webpack.js.org/plugins/mini-css-extract-plugin/) 插件），会发现其 chunkhash 值跟该 entry 的 js 文件的 chunkhash 是一样的，如下图：\n\n{% asset_img contenthash.png contenthash %}\n\n现在如果只改变 CSS 文件，会发现对应的 entry JS 和 CSS 文件的 chunkhash 都会改变。（注意：可能以前 [ExtractTextWebpackPlugin](https://webpack.js.org/plugins/extract-text-webpack-plugin/) 不会改变，所以只能对抽离的 CSS 文件使用 contenthash）。\n\n反正不管同时变或不变，可能都不是我们想要的效果，我们需要应该是改变了什么就反应到什么文件上。而不是 CSS 和 JS 文件的 chunkhash 同时改变或不变，无法区分 CSS 和 JS 的更新。\n\n所以这里抽离出来的 CSS 文件将使用 contenthash，以区分 CSS 文件和 JS 文件的更新。\n\n### Chunks ID\n\n然而这还没有结束，还有个问题，那就是目前我们的 chunks ID 还是以自增的数字命名的，这当我们的 entry 文件发生改变（新增或删除）的时候，原先的 chunks ID 就有可能发生变化。于是我们也需要把数字改掉就好，webpack 4 在 `optimization` 新增了一个 `namedChunks` 配置，该配置开发环境为 `true`，生产环境为 `false`，所以在生产环境的时候我们为了构建稳定的 hash 时，还是需要把该选项设置为 `true`，如下：\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    namedChunks: true\n  }\n};\n```\n\n## 总结\n\n为了一份理想的缓存文件，我们需要做这些事情：\n\n- 抽离 boilerplate（[runtime & manifest）\n- 将 module identifier 默认的数字标识方式转成使用路径标识\n- JS 文件使用 chunkhash\n- 抽离的 CSS 样式文件使用 contenthash\n- gif|png|jpe?g|eot|woff|ttf|svg|pdf 等使用 hash\n- 设置 `namedChunks` 为 true\n\n## 原文地址\n\n[Webpack4 如何优雅打包缓存文件](https://imweb.io/topic/5b6f224a3cb5a02f33c013ba)\n","source":"_posts/Webpack4-如何优雅打包缓存文件（转载）.md","raw":"---\ntitle: Webpack4 如何优雅打包缓存文件（转载）\ntags:\n  - Webpack\ncategories:\n  - 前端\n  - 构建工具\nabbrlink: 64694\ndate: 2019-03-14 10:34:04\n---\n\n一般来说，对于静态资源，我们都希望浏览器能够进行缓存，那样以后进入页面就可以直接使用缓存资源，页面直接直逼火箭速度打开，既提高了用户的体验也节省了宽带资源。\n\n当然浏览器缓存方法有很多种，这里只简单讨论下 webpack 利用 hash 方式修改文件名，以达到缓存目的。\n\n## webpack hash\n\nwebpack 内置了多种可使用 hash，官网解释分别如下：\n\n- `hash`：the hash of the module identifier\n- `chunkHash`：the hash of the chunk content\n- `contentHash`：the hash of extracted content\n\n注：hash 的默认长度为 20 个字符，可通过 `output.hashDigestLength` 全局配置，或使用 `[hash:16]` 方式配置，还可以通过 `output.hashDigest` 配置何时生成 hash。\n\n那么问题来了，这么多种 hash 该如何选择呢？\n\n<!-- more -->\n\n## 实战 hash\n\n基础的配置文件如下（基于webpack 4，入口文件分别为 index 和 detail，其中每个文件中引入了一个图片）：\n\n```js\nmodule.exports = {\n  mode: 'none', // 设置为 none，避免 development 或 production 默认设置的一些影响\n  entry: {\n    index: './src/index.js', \n    detail: './src/detail.js',\n  },\n  output: {\n    filename: '[name].[hash].js',\n    path: path.resolve(__dirname, 'dist')\n  }\n}\n```\n\n### hash（the hash of the module identifier）\n\n首先，我们来解释下 the module identifier。webpack 默认为给各个模块分配一个 id 以作标识，用来处理模块之间的依赖关系。而默认的 id 命名规则是根据模块引入的顺序，赋予一个整数(1、2、3……)。如下图就是使用 hash 的打包，index 和 detail 作为 entry 的两个入口，可以看到其 hash 值是一样的，而另外两个图片的 hash 值是不同的。\n\n{% asset_img hash.png hash %}\n\n由于该 hash 是基于整个 module identifier 序列计算得到的，所以 JS 或 CSS 文件如果使用该 hash，则所有值都一样，而任意增添或删减一个模块的依赖，都会对整个 id 序列造成影响，从而改变 hash 值。这样的话 JS 或 CSS 文件是不适合使用该 hash 值的。\n\n当然对于图片、字体、PDF 等资源该 hash 还是可以生成一个唯一值的。\n\n#### runtime & manifest\n\n假如我们什么都不改动，只是重新跑一次构建，会惊奇的发现 index 和 detail 的 hash 值居然变了（图片的 hash 是不变的），如下图：\n\n{% asset_img runtimehash.png runtimehash %}\n\n这究竟是怎么回事呢？webpack 官方解释为：\n\n> This is because webpack includes certain boilerplate, specifically the [runtime and manifest](https://webpack.js.org/concepts/manifest/), in the entry chunk.\n\n为了解决这个不稳定的因素，webpack 4 提供了一个配置可以直接把 boilerplate 给单独抽离出来，配置如下：\n\n```js\noptimization: {\n    runtimeChunk: 'single'\n}\n```\n\n这样我们就能得到一个 runtime 的 js 文件，如下图：\n\n{% asset_img runtimejs.png runtimejs %}\n\n### chunkhash（the hash of the chunk content）\n\n现在我们把 hash 改成 chunkhash ，如下：\n\n```js\noutput: {\n  filename: '[name].[chunkhash].js',\n  path: path.resolve(__dirname, 'dist')\n}\n```\n\n重新跑下构建，会发现打包出来的三个 JS 文件的 chunkhash 值是不一样的了，如下：\n\n{% asset_img chunkhash.png chunkhash %}\n\n现在我们在 index 文件中再引入一个 JS 模块，重新打包如下：\n\n{% asset_img chunkhash.png chunkhash %}\n\n我们会发现 index 和 detail 文件的 chunkhash 都变了，这就奇怪了，按理来说 detail 文件我们根本没有改变啊，为什么它的 chunkhash 值变了呢？\n\n其实根本原因还是 module identifier，因为 index 新引入的模块改变了以后所有模块的 id 值，所以 detail 文件中引入的模块 id 值发生了改变，于是 detail 的 chunkhash 也随着发生改变。\n\n解决方案是将默认的数字 id 命名规则换成路径的方式。webpack 4 中当 mode 为 development 会默认启动\n\n```js\noptimization: {\n    namedModules: true\n}\n```\n\n当然如果是生产环境的话，全路径是有点太长，所以我们可以换成使用[HashedModuleIdsPlugin](https://webpack.js.org/plugins/hashed-module-ids-plugin/) 插件来根据路径生成的 hash 作为 module identifier。\n\n```js\nplugins: [\n    new webpack.HashedModuleIdsPlugin(),\n],\n```\n\n这样最后 chunkhash 改变的就只有修改的文件了，也达到了我们想要的效果。\n\n### contenthash（the hash of extracted content）\n\n现在我们将 CSS 样式单独抽离生成文件（使用了 [MiniCssExtractPlugin](https://webpack.js.org/plugins/mini-css-extract-plugin/) 插件），会发现其 chunkhash 值跟该 entry 的 js 文件的 chunkhash 是一样的，如下图：\n\n{% asset_img contenthash.png contenthash %}\n\n现在如果只改变 CSS 文件，会发现对应的 entry JS 和 CSS 文件的 chunkhash 都会改变。（注意：可能以前 [ExtractTextWebpackPlugin](https://webpack.js.org/plugins/extract-text-webpack-plugin/) 不会改变，所以只能对抽离的 CSS 文件使用 contenthash）。\n\n反正不管同时变或不变，可能都不是我们想要的效果，我们需要应该是改变了什么就反应到什么文件上。而不是 CSS 和 JS 文件的 chunkhash 同时改变或不变，无法区分 CSS 和 JS 的更新。\n\n所以这里抽离出来的 CSS 文件将使用 contenthash，以区分 CSS 文件和 JS 文件的更新。\n\n### Chunks ID\n\n然而这还没有结束，还有个问题，那就是目前我们的 chunks ID 还是以自增的数字命名的，这当我们的 entry 文件发生改变（新增或删除）的时候，原先的 chunks ID 就有可能发生变化。于是我们也需要把数字改掉就好，webpack 4 在 `optimization` 新增了一个 `namedChunks` 配置，该配置开发环境为 `true`，生产环境为 `false`，所以在生产环境的时候我们为了构建稳定的 hash 时，还是需要把该选项设置为 `true`，如下：\n\n```js\nmodule.exports = {\n  //...\n  optimization: {\n    namedChunks: true\n  }\n};\n```\n\n## 总结\n\n为了一份理想的缓存文件，我们需要做这些事情：\n\n- 抽离 boilerplate（[runtime & manifest）\n- 将 module identifier 默认的数字标识方式转成使用路径标识\n- JS 文件使用 chunkhash\n- 抽离的 CSS 样式文件使用 contenthash\n- gif|png|jpe?g|eot|woff|ttf|svg|pdf 等使用 hash\n- 设置 `namedChunks` 为 true\n\n## 原文地址\n\n[Webpack4 如何优雅打包缓存文件](https://imweb.io/topic/5b6f224a3cb5a02f33c013ba)\n","slug":"Webpack4-如何优雅打包缓存文件（转载）","published":1,"updated":"2020-11-22T02:40:10.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyf8002ekhsrbbk50i2b","content":"<p>一般来说，对于静态资源，我们都希望浏览器能够进行缓存，那样以后进入页面就可以直接使用缓存资源，页面直接直逼火箭速度打开，既提高了用户的体验也节省了宽带资源。</p>\n<p>当然浏览器缓存方法有很多种，这里只简单讨论下 webpack 利用 hash 方式修改文件名，以达到缓存目的。</p>\n<h2 id=\"webpack-hash\"><a href=\"#webpack-hash\" class=\"headerlink\" title=\"webpack hash\"></a>webpack hash</h2><p>webpack 内置了多种可使用 hash，官网解释分别如下：</p>\n<ul>\n<li><code>hash</code>：the hash of the module identifier</li>\n<li><code>chunkHash</code>：the hash of the chunk content</li>\n<li><code>contentHash</code>：the hash of extracted content</li>\n</ul>\n<p>注：hash 的默认长度为 20 个字符，可通过 <code>output.hashDigestLength</code> 全局配置，或使用 <code>[hash:16]</code> 方式配置，还可以通过 <code>output.hashDigest</code> 配置何时生成 hash。</p>\n<p>那么问题来了，这么多种 hash 该如何选择呢？</p>\n<a id=\"more\"></a>\n\n<h2 id=\"实战-hash\"><a href=\"#实战-hash\" class=\"headerlink\" title=\"实战 hash\"></a>实战 hash</h2><p>基础的配置文件如下（基于webpack 4，入口文件分别为 index 和 detail，其中每个文件中引入了一个图片）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;none&#x27;</span>, <span class=\"comment\">// 设置为 none，避免 development 或 production 默认设置的一些影响</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, </span><br><span class=\"line\">    detail: <span class=\"string\">&#x27;./src/detail.js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;[name].[hash].js&#x27;</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hash（the-hash-of-the-module-identifier）\"><a href=\"#hash（the-hash-of-the-module-identifier）\" class=\"headerlink\" title=\"hash（the hash of the module identifier）\"></a>hash（the hash of the module identifier）</h3><p>首先，我们来解释下 the module identifier。webpack 默认为给各个模块分配一个 id 以作标识，用来处理模块之间的依赖关系。而默认的 id 命名规则是根据模块引入的顺序，赋予一个整数(1、2、3……)。如下图就是使用 hash 的打包，index 和 detail 作为 entry 的两个入口，可以看到其 hash 值是一样的，而另外两个图片的 hash 值是不同的。</p>\n\n\n<p>由于该 hash 是基于整个 module identifier 序列计算得到的，所以 JS 或 CSS 文件如果使用该 hash，则所有值都一样，而任意增添或删减一个模块的依赖，都会对整个 id 序列造成影响，从而改变 hash 值。这样的话 JS 或 CSS 文件是不适合使用该 hash 值的。</p>\n<p>当然对于图片、字体、PDF 等资源该 hash 还是可以生成一个唯一值的。</p>\n<h4 id=\"runtime-amp-manifest\"><a href=\"#runtime-amp-manifest\" class=\"headerlink\" title=\"runtime &amp; manifest\"></a>runtime &amp; manifest</h4><p>假如我们什么都不改动，只是重新跑一次构建，会惊奇的发现 index 和 detail 的 hash 值居然变了（图片的 hash 是不变的），如下图：</p>\n\n\n<p>这究竟是怎么回事呢？webpack 官方解释为：</p>\n<blockquote>\n<p>This is because webpack includes certain boilerplate, specifically the <a href=\"https://webpack.js.org/concepts/manifest/\">runtime and manifest</a>, in the entry chunk.</p>\n</blockquote>\n<p>为了解决这个不稳定的因素，webpack 4 提供了一个配置可以直接把 boilerplate 给单独抽离出来，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    runtimeChunk: <span class=\"string\">&#x27;single&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就能得到一个 runtime 的 js 文件，如下图：</p>\n\n\n<h3 id=\"chunkhash（the-hash-of-the-chunk-content）\"><a href=\"#chunkhash（the-hash-of-the-chunk-content）\" class=\"headerlink\" title=\"chunkhash（the hash of the chunk content）\"></a>chunkhash（the hash of the chunk content）</h3><p>现在我们把 hash 改成 chunkhash ，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  filename: <span class=\"string\">&#x27;[name].[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">  path: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新跑下构建，会发现打包出来的三个 JS 文件的 chunkhash 值是不一样的了，如下：</p>\n\n\n<p>现在我们在 index 文件中再引入一个 JS 模块，重新打包如下：</p>\n\n\n<p>我们会发现 index 和 detail 文件的 chunkhash 都变了，这就奇怪了，按理来说 detail 文件我们根本没有改变啊，为什么它的 chunkhash 值变了呢？</p>\n<p>其实根本原因还是 module identifier，因为 index 新引入的模块改变了以后所有模块的 id 值，所以 detail 文件中引入的模块 id 值发生了改变，于是 detail 的 chunkhash 也随着发生改变。</p>\n<p>解决方案是将默认的数字 id 命名规则换成路径的方式。webpack 4 中当 mode 为 development 会默认启动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    namedModules: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果是生产环境的话，全路径是有点太长，所以我们可以换成使用<a href=\"https://webpack.js.org/plugins/hashed-module-ids-plugin/\">HashedModuleIdsPlugin</a> 插件来根据路径生成的 hash 作为 module identifier。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<p>这样最后 chunkhash 改变的就只有修改的文件了，也达到了我们想要的效果。</p>\n<h3 id=\"contenthash（the-hash-of-extracted-content）\"><a href=\"#contenthash（the-hash-of-extracted-content）\" class=\"headerlink\" title=\"contenthash（the hash of extracted content）\"></a>contenthash（the hash of extracted content）</h3><p>现在我们将 CSS 样式单独抽离生成文件（使用了 <a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin/\">MiniCssExtractPlugin</a> 插件），会发现其 chunkhash 值跟该 entry 的 js 文件的 chunkhash 是一样的，如下图：</p>\n\n\n<p>现在如果只改变 CSS 文件，会发现对应的 entry JS 和 CSS 文件的 chunkhash 都会改变。（注意：可能以前 <a href=\"https://webpack.js.org/plugins/extract-text-webpack-plugin/\">ExtractTextWebpackPlugin</a> 不会改变，所以只能对抽离的 CSS 文件使用 contenthash）。</p>\n<p>反正不管同时变或不变，可能都不是我们想要的效果，我们需要应该是改变了什么就反应到什么文件上。而不是 CSS 和 JS 文件的 chunkhash 同时改变或不变，无法区分 CSS 和 JS 的更新。</p>\n<p>所以这里抽离出来的 CSS 文件将使用 contenthash，以区分 CSS 文件和 JS 文件的更新。</p>\n<h3 id=\"Chunks-ID\"><a href=\"#Chunks-ID\" class=\"headerlink\" title=\"Chunks ID\"></a>Chunks ID</h3><p>然而这还没有结束，还有个问题，那就是目前我们的 chunks ID 还是以自增的数字命名的，这当我们的 entry 文件发生改变（新增或删除）的时候，原先的 chunks ID 就有可能发生变化。于是我们也需要把数字改掉就好，webpack 4 在 <code>optimization</code> 新增了一个 <code>namedChunks</code> 配置，该配置开发环境为 <code>true</code>，生产环境为 <code>false</code>，所以在生产环境的时候我们为了构建稳定的 hash 时，还是需要把该选项设置为 <code>true</code>，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    namedChunks: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了一份理想的缓存文件，我们需要做这些事情：</p>\n<ul>\n<li>抽离 boilerplate（[runtime &amp; manifest）</li>\n<li>将 module identifier 默认的数字标识方式转成使用路径标识</li>\n<li>JS 文件使用 chunkhash</li>\n<li>抽离的 CSS 样式文件使用 contenthash</li>\n<li>gif|png|jpe?g|eot|woff|ttf|svg|pdf 等使用 hash</li>\n<li>设置 <code>namedChunks</code> 为 true</li>\n</ul>\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a>原文地址</h2><p><a href=\"https://imweb.io/topic/5b6f224a3cb5a02f33c013ba\">Webpack4 如何优雅打包缓存文件</a></p>\n","site":{"data":{}},"excerpt":"<p>一般来说，对于静态资源，我们都希望浏览器能够进行缓存，那样以后进入页面就可以直接使用缓存资源，页面直接直逼火箭速度打开，既提高了用户的体验也节省了宽带资源。</p>\n<p>当然浏览器缓存方法有很多种，这里只简单讨论下 webpack 利用 hash 方式修改文件名，以达到缓存目的。</p>\n<h2 id=\"webpack-hash\"><a href=\"#webpack-hash\" class=\"headerlink\" title=\"webpack hash\"></a>webpack hash</h2><p>webpack 内置了多种可使用 hash，官网解释分别如下：</p>\n<ul>\n<li><code>hash</code>：the hash of the module identifier</li>\n<li><code>chunkHash</code>：the hash of the chunk content</li>\n<li><code>contentHash</code>：the hash of extracted content</li>\n</ul>\n<p>注：hash 的默认长度为 20 个字符，可通过 <code>output.hashDigestLength</code> 全局配置，或使用 <code>[hash:16]</code> 方式配置，还可以通过 <code>output.hashDigest</code> 配置何时生成 hash。</p>\n<p>那么问题来了，这么多种 hash 该如何选择呢？</p>","more":"<h2 id=\"实战-hash\"><a href=\"#实战-hash\" class=\"headerlink\" title=\"实战 hash\"></a>实战 hash</h2><p>基础的配置文件如下（基于webpack 4，入口文件分别为 index 和 detail，其中每个文件中引入了一个图片）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  mode: <span class=\"string\">&#x27;none&#x27;</span>, <span class=\"comment\">// 设置为 none，避免 development 或 production 默认设置的一些影响</span></span><br><span class=\"line\">  entry: &#123;</span><br><span class=\"line\">    index: <span class=\"string\">&#x27;./src/index.js&#x27;</span>, </span><br><span class=\"line\">    detail: <span class=\"string\">&#x27;./src/detail.js&#x27;</span>,</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  output: &#123;</span><br><span class=\"line\">    filename: <span class=\"string\">&#x27;[name].[hash].js&#x27;</span>,</span><br><span class=\"line\">    path: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"hash（the-hash-of-the-module-identifier）\"><a href=\"#hash（the-hash-of-the-module-identifier）\" class=\"headerlink\" title=\"hash（the hash of the module identifier）\"></a>hash（the hash of the module identifier）</h3><p>首先，我们来解释下 the module identifier。webpack 默认为给各个模块分配一个 id 以作标识，用来处理模块之间的依赖关系。而默认的 id 命名规则是根据模块引入的顺序，赋予一个整数(1、2、3……)。如下图就是使用 hash 的打包，index 和 detail 作为 entry 的两个入口，可以看到其 hash 值是一样的，而另外两个图片的 hash 值是不同的。</p>\n\n\n<p>由于该 hash 是基于整个 module identifier 序列计算得到的，所以 JS 或 CSS 文件如果使用该 hash，则所有值都一样，而任意增添或删减一个模块的依赖，都会对整个 id 序列造成影响，从而改变 hash 值。这样的话 JS 或 CSS 文件是不适合使用该 hash 值的。</p>\n<p>当然对于图片、字体、PDF 等资源该 hash 还是可以生成一个唯一值的。</p>\n<h4 id=\"runtime-amp-manifest\"><a href=\"#runtime-amp-manifest\" class=\"headerlink\" title=\"runtime &amp; manifest\"></a>runtime &amp; manifest</h4><p>假如我们什么都不改动，只是重新跑一次构建，会惊奇的发现 index 和 detail 的 hash 值居然变了（图片的 hash 是不变的），如下图：</p>\n\n\n<p>这究竟是怎么回事呢？webpack 官方解释为：</p>\n<blockquote>\n<p>This is because webpack includes certain boilerplate, specifically the <a href=\"https://webpack.js.org/concepts/manifest/\">runtime and manifest</a>, in the entry chunk.</p>\n</blockquote>\n<p>为了解决这个不稳定的因素，webpack 4 提供了一个配置可以直接把 boilerplate 给单独抽离出来，配置如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    runtimeChunk: <span class=\"string\">&#x27;single&#x27;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就能得到一个 runtime 的 js 文件，如下图：</p>\n\n\n<h3 id=\"chunkhash（the-hash-of-the-chunk-content）\"><a href=\"#chunkhash（the-hash-of-the-chunk-content）\" class=\"headerlink\" title=\"chunkhash（the hash of the chunk content）\"></a>chunkhash（the hash of the chunk content）</h3><p>现在我们把 hash 改成 chunkhash ，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">output: &#123;</span><br><span class=\"line\">  filename: <span class=\"string\">&#x27;[name].[chunkhash].js&#x27;</span>,</span><br><span class=\"line\">  path: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>重新跑下构建，会发现打包出来的三个 JS 文件的 chunkhash 值是不一样的了，如下：</p>\n\n\n<p>现在我们在 index 文件中再引入一个 JS 模块，重新打包如下：</p>\n\n\n<p>我们会发现 index 和 detail 文件的 chunkhash 都变了，这就奇怪了，按理来说 detail 文件我们根本没有改变啊，为什么它的 chunkhash 值变了呢？</p>\n<p>其实根本原因还是 module identifier，因为 index 新引入的模块改变了以后所有模块的 id 值，所以 detail 文件中引入的模块 id 值发生了改变，于是 detail 的 chunkhash 也随着发生改变。</p>\n<p>解决方案是将默认的数字 id 命名规则换成路径的方式。webpack 4 中当 mode 为 development 会默认启动</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    namedModules: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>当然如果是生产环境的话，全路径是有点太长，所以我们可以换成使用<a href=\"https://webpack.js.org/plugins/hashed-module-ids-plugin/\">HashedModuleIdsPlugin</a> 插件来根据路径生成的 hash 作为 module identifier。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> webpack.HashedModuleIdsPlugin(),</span><br><span class=\"line\">],</span><br></pre></td></tr></table></figure>\n\n<p>这样最后 chunkhash 改变的就只有修改的文件了，也达到了我们想要的效果。</p>\n<h3 id=\"contenthash（the-hash-of-extracted-content）\"><a href=\"#contenthash（the-hash-of-extracted-content）\" class=\"headerlink\" title=\"contenthash（the hash of extracted content）\"></a>contenthash（the hash of extracted content）</h3><p>现在我们将 CSS 样式单独抽离生成文件（使用了 <a href=\"https://webpack.js.org/plugins/mini-css-extract-plugin/\">MiniCssExtractPlugin</a> 插件），会发现其 chunkhash 值跟该 entry 的 js 文件的 chunkhash 是一样的，如下图：</p>\n\n\n<p>现在如果只改变 CSS 文件，会发现对应的 entry JS 和 CSS 文件的 chunkhash 都会改变。（注意：可能以前 <a href=\"https://webpack.js.org/plugins/extract-text-webpack-plugin/\">ExtractTextWebpackPlugin</a> 不会改变，所以只能对抽离的 CSS 文件使用 contenthash）。</p>\n<p>反正不管同时变或不变，可能都不是我们想要的效果，我们需要应该是改变了什么就反应到什么文件上。而不是 CSS 和 JS 文件的 chunkhash 同时改变或不变，无法区分 CSS 和 JS 的更新。</p>\n<p>所以这里抽离出来的 CSS 文件将使用 contenthash，以区分 CSS 文件和 JS 文件的更新。</p>\n<h3 id=\"Chunks-ID\"><a href=\"#Chunks-ID\" class=\"headerlink\" title=\"Chunks ID\"></a>Chunks ID</h3><p>然而这还没有结束，还有个问题，那就是目前我们的 chunks ID 还是以自增的数字命名的，这当我们的 entry 文件发生改变（新增或删除）的时候，原先的 chunks ID 就有可能发生变化。于是我们也需要把数字改掉就好，webpack 4 在 <code>optimization</code> 新增了一个 <code>namedChunks</code> 配置，该配置开发环境为 <code>true</code>，生产环境为 <code>false</code>，所以在生产环境的时候我们为了构建稳定的 hash 时，还是需要把该选项设置为 <code>true</code>，如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  <span class=\"comment\">//...</span></span><br><span class=\"line\">  optimization: &#123;</span><br><span class=\"line\">    namedChunks: <span class=\"literal\">true</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>为了一份理想的缓存文件，我们需要做这些事情：</p>\n<ul>\n<li>抽离 boilerplate（[runtime &amp; manifest）</li>\n<li>将 module identifier 默认的数字标识方式转成使用路径标识</li>\n<li>JS 文件使用 chunkhash</li>\n<li>抽离的 CSS 样式文件使用 contenthash</li>\n<li>gif|png|jpe?g|eot|woff|ttf|svg|pdf 等使用 hash</li>\n<li>设置 <code>namedChunks</code> 为 true</li>\n</ul>\n<h2 id=\"原文地址\"><a href=\"#原文地址\" class=\"headerlink\" title=\"原文地址\"></a>原文地址</h2><p><a href=\"https://imweb.io/topic/5b6f224a3cb5a02f33c013ba\">Webpack4 如何优雅打包缓存文件</a></p>"},{"title":"animation动画（一）","abbrlink":57136,"date":"2019-03-05T01:47:28.000Z","_content":"\n## 传送门\n\n- [animation动画（一）](https://evestorm.github.io/posts/31280/)\n- [animation动画（二）](https://evestorm.github.io/posts/20298/)\n\n## 介绍\n\n> CSS Animations 是CSS的一个模块，它定义了如何用关键帧来随时间推移对CSS属性的值进行动画处理。关键帧动画的行为可以通过指定它们的持续时间，它们的重复次数以及它们如何重复来控制。\n\n———— 出自 [CSS Animations | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations)\n\n<!-- more -->\n\n## 语法\n\n```css\n/* 简写 */\nanimation: 动画名称，一个周期所花费的时间，运动曲线（默认ease），\n           动画延迟（默认0），播放次数（默认1），\n           是否反向播放动画（默认normal），是否暂停动画（默认running）\n```\n\n就像在介绍中写到的那样，整个 animations 是个模块，包含很多属性来定义动画，比方说 `animation-name` 、`animation-duration` 和 `animation-delay` 等等。但本着快速上手的目的，第一篇文章主要围绕 `animation` 这个简写属性来讲，因为用它最直观，而且就经验来讲，日常使用最多的也是这个属性。\n\n## 如何使用\n\n一个CSS3动画由两个基本项组成：\n\n1. 关键帧（Keyforames） - 用来定义动画的阶段和样式。\n2. 动画属性 - 分配关键帧（@keyframes）到一个特定的css元素，来定义它的动画方式。\n\n我们围绕这两项讨论，并在这个过程中实现一个按钮不断放大缩小的动画效果：\n\n{% asset_img shrink.gif shrink %}\n\n### keyframes\n\n关键帧 keyframes 定义了动画在每个阶段的动画效果。它包括：\n\n- 动画名称：定义动画的名称\n- 动画阶段：整个动画阶段用百分比来表示。0% 表示动画的开始状态。100% 表示动画的结束状态。可以在其间添加多个中间状态，比如 20%，60%…\n- 动画属性：给动画每个阶段定义的CSS属性\n\n现在我们来编写一段 @keyframes 。动画名称命名为 `shrink` 。它只有简单的两个阶段：\n\n- 第一阶段（0%）：元素的缩放比例为 1:1\n- 第二阶段（100%）：元素的缩放比例为 1:0.8\n\n```css\n@keyframes shrink {\n  0% {\n    -webkit-transform: scale(1);\n    transform: scale(1);\n  }\n  100% {\n    -webkit-transform: scale(0.8);\n    transform: scale(0.8);\n  }\n}\n```\n\n### 动画属性\n\n接着，我们给要设置动画的元素添加上动画属性。要使动画生效，我们至少要添加以下两个动画属性：\n\n- animation-name: 动画的名称，在 @keyframes 中定义。\n- animation-duration: 动画的持续时间，以秒为单位（例如 5s）或毫秒（例如 200ms）。\n\n```css\nbutton {\n  /*  其他样式  */\n  ...\n  /*  动画名称: shrink  */\n  animation-name: shrink;\n  /*  动画持续时间: 0.5秒 */\n  animation-duration: .5s;\n}\n```\n\n这样我们就实现页面加载后，一个按钮从开始的原始大小，经过0.5s后变成了原始大小的0.8的动画效果。然而我们希望最终的效果是一个按钮的不断放大和缩小，交替进行。这就得添加 `animation-iteration-count` 和 `animation-direction` 两个动画属性了，它们一个用来定义元素动画的循环次数，一个用来定义动画在循环过程中是否反向运动：\n\n```css\nbutton {\n  ...\n  /*  动画的循环次数: 无限次  */\n  animation-iteration-count: infinite;\n  /*  循环是否反向：先正向后反向  */\n  animation-direction: alternate;\n}\n```\n\n最终的简写形式如下：\n\n```css\nbutton {\n  ...\n  animation: shrink .5s linear alternate infinite;\n}\n```\n\n完整效果：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"animation-shrink\" src=\"https://codepen.io/JingW/embed/MRaJrz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 资源 📚\n\n- animation | 一个CSS3动画库\n\n  【推荐】\n\n  - [点我查看效果](https://daneden.github.io/animate.css/)\n\n- magic | 另一个CSS3动画库\n\n  - [点我查看效果](https://www.minimamente.com/example/magic_animations/)\n","source":"_posts/animation动画（一）.md","raw":"---\ntitle: animation动画（一）\ntags:\n  - CSS3\ncategories:\n  - 前端\n  - CSS\nabbrlink: 57136\ndate: 2019-03-05 09:47:28\n---\n\n## 传送门\n\n- [animation动画（一）](https://evestorm.github.io/posts/31280/)\n- [animation动画（二）](https://evestorm.github.io/posts/20298/)\n\n## 介绍\n\n> CSS Animations 是CSS的一个模块，它定义了如何用关键帧来随时间推移对CSS属性的值进行动画处理。关键帧动画的行为可以通过指定它们的持续时间，它们的重复次数以及它们如何重复来控制。\n\n———— 出自 [CSS Animations | MDN](https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations)\n\n<!-- more -->\n\n## 语法\n\n```css\n/* 简写 */\nanimation: 动画名称，一个周期所花费的时间，运动曲线（默认ease），\n           动画延迟（默认0），播放次数（默认1），\n           是否反向播放动画（默认normal），是否暂停动画（默认running）\n```\n\n就像在介绍中写到的那样，整个 animations 是个模块，包含很多属性来定义动画，比方说 `animation-name` 、`animation-duration` 和 `animation-delay` 等等。但本着快速上手的目的，第一篇文章主要围绕 `animation` 这个简写属性来讲，因为用它最直观，而且就经验来讲，日常使用最多的也是这个属性。\n\n## 如何使用\n\n一个CSS3动画由两个基本项组成：\n\n1. 关键帧（Keyforames） - 用来定义动画的阶段和样式。\n2. 动画属性 - 分配关键帧（@keyframes）到一个特定的css元素，来定义它的动画方式。\n\n我们围绕这两项讨论，并在这个过程中实现一个按钮不断放大缩小的动画效果：\n\n{% asset_img shrink.gif shrink %}\n\n### keyframes\n\n关键帧 keyframes 定义了动画在每个阶段的动画效果。它包括：\n\n- 动画名称：定义动画的名称\n- 动画阶段：整个动画阶段用百分比来表示。0% 表示动画的开始状态。100% 表示动画的结束状态。可以在其间添加多个中间状态，比如 20%，60%…\n- 动画属性：给动画每个阶段定义的CSS属性\n\n现在我们来编写一段 @keyframes 。动画名称命名为 `shrink` 。它只有简单的两个阶段：\n\n- 第一阶段（0%）：元素的缩放比例为 1:1\n- 第二阶段（100%）：元素的缩放比例为 1:0.8\n\n```css\n@keyframes shrink {\n  0% {\n    -webkit-transform: scale(1);\n    transform: scale(1);\n  }\n  100% {\n    -webkit-transform: scale(0.8);\n    transform: scale(0.8);\n  }\n}\n```\n\n### 动画属性\n\n接着，我们给要设置动画的元素添加上动画属性。要使动画生效，我们至少要添加以下两个动画属性：\n\n- animation-name: 动画的名称，在 @keyframes 中定义。\n- animation-duration: 动画的持续时间，以秒为单位（例如 5s）或毫秒（例如 200ms）。\n\n```css\nbutton {\n  /*  其他样式  */\n  ...\n  /*  动画名称: shrink  */\n  animation-name: shrink;\n  /*  动画持续时间: 0.5秒 */\n  animation-duration: .5s;\n}\n```\n\n这样我们就实现页面加载后，一个按钮从开始的原始大小，经过0.5s后变成了原始大小的0.8的动画效果。然而我们希望最终的效果是一个按钮的不断放大和缩小，交替进行。这就得添加 `animation-iteration-count` 和 `animation-direction` 两个动画属性了，它们一个用来定义元素动画的循环次数，一个用来定义动画在循环过程中是否反向运动：\n\n```css\nbutton {\n  ...\n  /*  动画的循环次数: 无限次  */\n  animation-iteration-count: infinite;\n  /*  循环是否反向：先正向后反向  */\n  animation-direction: alternate;\n}\n```\n\n最终的简写形式如下：\n\n```css\nbutton {\n  ...\n  animation: shrink .5s linear alternate infinite;\n}\n```\n\n完整效果：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"animation-shrink\" src=\"https://codepen.io/JingW/embed/MRaJrz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 资源 📚\n\n- animation | 一个CSS3动画库\n\n  【推荐】\n\n  - [点我查看效果](https://daneden.github.io/animate.css/)\n\n- magic | 另一个CSS3动画库\n\n  - [点我查看效果](https://www.minimamente.com/example/magic_animations/)\n","slug":"animation动画（一）","published":1,"updated":"2020-11-22T02:29:06.946Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyf8002fkhsrhelt2tzc","content":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/31280/\">animation动画（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/20298/\">animation动画（二）</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>CSS Animations 是CSS的一个模块，它定义了如何用关键帧来随时间推移对CSS属性的值进行动画处理。关键帧动画的行为可以通过指定它们的持续时间，它们的重复次数以及它们如何重复来控制。</p>\n</blockquote>\n<p>———— 出自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations\">CSS Animations | MDN</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 简写 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">animation</span>: 动画名称，一个周期所花费的时间，运动曲线（默认<span class=\"selector-tag\">ease</span>），</span><br><span class=\"line\">           动画延迟（默认0），播放次数（默认1），</span><br><span class=\"line\">           是否反向播放动画（默认<span class=\"selector-tag\">normal</span>），是否暂停动画（默认<span class=\"selector-tag\">running</span>）</span><br></pre></td></tr></table></figure>\n\n<p>就像在介绍中写到的那样，整个 animations 是个模块，包含很多属性来定义动画，比方说 <code>animation-name</code> 、<code>animation-duration</code> 和 <code>animation-delay</code> 等等。但本着快速上手的目的，第一篇文章主要围绕 <code>animation</code> 这个简写属性来讲，因为用它最直观，而且就经验来讲，日常使用最多的也是这个属性。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>一个CSS3动画由两个基本项组成：</p>\n<ol>\n<li>关键帧（Keyforames） - 用来定义动画的阶段和样式。</li>\n<li>动画属性 - 分配关键帧（@keyframes）到一个特定的css元素，来定义它的动画方式。</li>\n</ol>\n<p>我们围绕这两项讨论，并在这个过程中实现一个按钮不断放大缩小的动画效果：</p>\n<img src=\"/posts/57136/shrink.gif\" class=\"\" title=\"shrink\">\n\n<h3 id=\"keyframes\"><a href=\"#keyframes\" class=\"headerlink\" title=\"keyframes\"></a>keyframes</h3><p>关键帧 keyframes 定义了动画在每个阶段的动画效果。它包括：</p>\n<ul>\n<li>动画名称：定义动画的名称</li>\n<li>动画阶段：整个动画阶段用百分比来表示。0% 表示动画的开始状态。100% 表示动画的结束状态。可以在其间添加多个中间状态，比如 20%，60%…</li>\n<li>动画属性：给动画每个阶段定义的CSS属性</li>\n</ul>\n<p>现在我们来编写一段 @keyframes 。动画名称命名为 <code>shrink</code> 。它只有简单的两个阶段：</p>\n<ul>\n<li>第一阶段（0%）：元素的缩放比例为 1:1</li>\n<li>第二阶段（100%）：元素的缩放比例为 1:0.8</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> shrink &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.8</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动画属性\"><a href=\"#动画属性\" class=\"headerlink\" title=\"动画属性\"></a>动画属性</h3><p>接着，我们给要设置动画的元素添加上动画属性。要使动画生效，我们至少要添加以下两个动画属性：</p>\n<ul>\n<li>animation-name: 动画的名称，在 @keyframes 中定义。</li>\n<li>animation-duration: 动画的持续时间，以秒为单位（例如 5s）或毫秒（例如 200ms）。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*  其他样式  */</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">/*  动画名称: shrink  */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-name</span>: <span class=\"selector-tag\">shrink</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  动画持续时间: 0.5秒 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-duration</span>: .5<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就实现页面加载后，一个按钮从开始的原始大小，经过0.5s后变成了原始大小的0.8的动画效果。然而我们希望最终的效果是一个按钮的不断放大和缩小，交替进行。这就得添加 <code>animation-iteration-count</code> 和 <code>animation-direction</code> 两个动画属性了，它们一个用来定义元素动画的循环次数，一个用来定义动画在循环过程中是否反向运动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">/*  动画的循环次数: 无限次  */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-iteration-count</span>: <span class=\"selector-tag\">infinite</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  循环是否反向：先正向后反向  */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-direction</span>: <span class=\"selector-tag\">alternate</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终的简写形式如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">shrink</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">linear</span> <span class=\"selector-tag\">alternate</span> <span class=\"selector-tag\">infinite</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整效果：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"animation-shrink\" src=\"https://codepen.io/JingW/embed/MRaJrz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"资源-📚\"><a href=\"#资源-📚\" class=\"headerlink\" title=\"资源 📚\"></a>资源 📚</h2><ul>\n<li><p>animation | 一个CSS3动画库</p>\n<p>【推荐】</p>\n<ul>\n<li><a href=\"https://daneden.github.io/animate.css/\">点我查看效果</a></li>\n</ul>\n</li>\n<li><p>magic | 另一个CSS3动画库</p>\n<ul>\n<li><a href=\"https://www.minimamente.com/example/magic_animations/\">点我查看效果</a></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/31280/\">animation动画（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/20298/\">animation动画（二）</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>CSS Animations 是CSS的一个模块，它定义了如何用关键帧来随时间推移对CSS属性的值进行动画处理。关键帧动画的行为可以通过指定它们的持续时间，它们的重复次数以及它们如何重复来控制。</p>\n</blockquote>\n<p>———— 出自 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations\">CSS Animations | MDN</a></p>","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 简写 */</span></span><br><span class=\"line\"><span class=\"selector-tag\">animation</span>: 动画名称，一个周期所花费的时间，运动曲线（默认<span class=\"selector-tag\">ease</span>），</span><br><span class=\"line\">           动画延迟（默认0），播放次数（默认1），</span><br><span class=\"line\">           是否反向播放动画（默认<span class=\"selector-tag\">normal</span>），是否暂停动画（默认<span class=\"selector-tag\">running</span>）</span><br></pre></td></tr></table></figure>\n\n<p>就像在介绍中写到的那样，整个 animations 是个模块，包含很多属性来定义动画，比方说 <code>animation-name</code> 、<code>animation-duration</code> 和 <code>animation-delay</code> 等等。但本着快速上手的目的，第一篇文章主要围绕 <code>animation</code> 这个简写属性来讲，因为用它最直观，而且就经验来讲，日常使用最多的也是这个属性。</p>\n<h2 id=\"如何使用\"><a href=\"#如何使用\" class=\"headerlink\" title=\"如何使用\"></a>如何使用</h2><p>一个CSS3动画由两个基本项组成：</p>\n<ol>\n<li>关键帧（Keyforames） - 用来定义动画的阶段和样式。</li>\n<li>动画属性 - 分配关键帧（@keyframes）到一个特定的css元素，来定义它的动画方式。</li>\n</ol>\n<p>我们围绕这两项讨论，并在这个过程中实现一个按钮不断放大缩小的动画效果：</p>\n<img src=\"/posts/57136/shrink.gif\" class=\"\" title=\"shrink\">\n\n<h3 id=\"keyframes\"><a href=\"#keyframes\" class=\"headerlink\" title=\"keyframes\"></a>keyframes</h3><p>关键帧 keyframes 定义了动画在每个阶段的动画效果。它包括：</p>\n<ul>\n<li>动画名称：定义动画的名称</li>\n<li>动画阶段：整个动画阶段用百分比来表示。0% 表示动画的开始状态。100% 表示动画的结束状态。可以在其间添加多个中间状态，比如 20%，60%…</li>\n<li>动画属性：给动画每个阶段定义的CSS属性</li>\n</ul>\n<p>现在我们来编写一段 @keyframes 。动画名称命名为 <code>shrink</code> 。它只有简单的两个阶段：</p>\n<ul>\n<li>第一阶段（0%）：元素的缩放比例为 1:1</li>\n<li>第二阶段（100%）：元素的缩放比例为 1:0.8</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">@keyframes</span> shrink &#123;</span><br><span class=\"line\">  0% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">1</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  100% &#123;</span><br><span class=\"line\">    <span class=\"attribute\">-webkit-transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.8</span>);</span><br><span class=\"line\">    <span class=\"attribute\">transform</span>: <span class=\"built_in\">scale</span>(<span class=\"number\">0.8</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动画属性\"><a href=\"#动画属性\" class=\"headerlink\" title=\"动画属性\"></a>动画属性</h3><p>接着，我们给要设置动画的元素添加上动画属性。要使动画生效，我们至少要添加以下两个动画属性：</p>\n<ul>\n<li>animation-name: 动画的名称，在 @keyframes 中定义。</li>\n<li>animation-duration: 动画的持续时间，以秒为单位（例如 5s）或毫秒（例如 200ms）。</li>\n</ul>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  <span class=\"comment\">/*  其他样式  */</span></span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">/*  动画名称: shrink  */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-name</span>: <span class=\"selector-tag\">shrink</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  动画持续时间: 0.5秒 */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-duration</span>: .5<span class=\"selector-tag\">s</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就实现页面加载后，一个按钮从开始的原始大小，经过0.5s后变成了原始大小的0.8的动画效果。然而我们希望最终的效果是一个按钮的不断放大和缩小，交替进行。这就得添加 <code>animation-iteration-count</code> 和 <code>animation-direction</code> 两个动画属性了，它们一个用来定义元素动画的循环次数，一个用来定义动画在循环过程中是否反向运动：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"comment\">/*  动画的循环次数: 无限次  */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-iteration-count</span>: <span class=\"selector-tag\">infinite</span>;</span><br><span class=\"line\">  <span class=\"comment\">/*  循环是否反向：先正向后反向  */</span></span><br><span class=\"line\">  <span class=\"selector-tag\">animation-direction</span>: <span class=\"selector-tag\">alternate</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最终的简写形式如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">button</span> &#123;</span><br><span class=\"line\">  ...</span><br><span class=\"line\">  <span class=\"selector-tag\">animation</span>: <span class=\"selector-tag\">shrink</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">linear</span> <span class=\"selector-tag\">alternate</span> <span class=\"selector-tag\">infinite</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>完整效果：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"animation-shrink\" src=\"https://codepen.io/JingW/embed/MRaJrz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"资源-📚\"><a href=\"#资源-📚\" class=\"headerlink\" title=\"资源 📚\"></a>资源 📚</h2><ul>\n<li><p>animation | 一个CSS3动画库</p>\n<p>【推荐】</p>\n<ul>\n<li><a href=\"https://daneden.github.io/animate.css/\">点我查看效果</a></li>\n</ul>\n</li>\n<li><p>magic | 另一个CSS3动画库</p>\n<ul>\n<li><a href=\"https://www.minimamente.com/example/magic_animations/\">点我查看效果</a></li>\n</ul>\n</li>\n</ul>"},{"title":"animation动画（二）","abbrlink":20298,"date":"2019-03-09T02:18:06.000Z","_content":"\n## 传送门\n\n- [animation动画（一）](https://evestorm.github.io/posts/31280/)\n- [animation动画（二）](https://evestorm.github.io/posts/20298/)\n\n老规矩，二系列来谈谈具体每个动画属性的含义和用法，算是一个对知识点的总结吧。\n\n## animation-name 动画名称\n\nCSS语法：`animation-name: shrink`\n\n用来设置元素的动画名称。\n\n<!-- more -->\n\n## animation-duration 持续时间\n\nCSS语法：`animation-duration: 1s`\n\n用来指定动画在一个周期内所花费的时间。\n\n## animation-timing-function 运动曲线\n\nCSS语法：`animation-timing-function: ease-in-out`\n\n用来设置元素的动画速度曲线，它的用法和 [transition-timing-function](https://evestorm.github.io/posts/13167/#transition-timing-function-效果曲线) 类似，想要了解详情的直接点这个链接吧。\n\n> DEMO\n\n<iframe height=\"521\" scrolling=\"no\" title=\"animation-timing-function\" src=\"https://codepen.io/JingW/embed/qwbVgB/?height=521&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## animation-delay 动画延迟\n\nCSS语法：`animation-delay: 1s`\n\n用来设置动画延迟多少秒/毫秒后才开始执行。正值（例如2s）将在2s后启动动画；负值（例如-2s）将立即执行动画，但是动画会从它的动画序列中的第2s位置处立即开始。\n\n## animation-iteration-count 循环次数\n\nCSS语法：`animation-iteration-count: 1s`\n\n用来设置动画循环的次数，默认值是1，表示动画只播放一次。除了使用正整数来设置次数外，还可以将值设置为 `infinite` ，表示无限循环。\n\n## animation-direction 是否反向\n\nCSS语法：`animation-direction: normal | reverse | alternate | alternate-reverse`\n\n用来设置动画在循环过程中是否反向运动，默认值为 `normal` ，即正常模式，动画会从第一帧播放到最后一帧；`reverse` 表示反向模式，动画会从最后一帧倒着播放到第一帧；`alternate` 设置动画先正向播放，第二次再从反向播放，交替进行，例如 animation 系列一中的案例；`alternate-reverse` 则是先让动画反向播放，第二次再正向播放，交替进行。\n\n## animation-fill-mode 动画填充模式\n\nCSS语法：`animation-fill-mode: none | forwards | backwards | both`\n\n用来指定在动画执行之前和之后如何给动画的目标应用样式。这个属性在我第一次接触时没太理解，直到我看了 [segmentfault](https://segmentfault.com/) 上的 [这篇文章](https://segmentfault.com/q/1010000003867335) 。\n\n在理解它之前，我们需要在脑海里有个概念，那就是一个动画是分为初始状态、等待期、动画执行期、完成期四个阶段的。而上面 animation-fill-mode 接收的四个值则分别对应：\n\n- none 表示 等待期和完成期，元素样式都为初始状态样式，不受动画定义（@keyframes）的影响\n- forwards 表示等待期保持初始样式，完成期间保持最后一帧样式\n- backwards 表示等待期为第一帧样式，完成期跳转为初始样式\n- both 表示 等待期样式为第一帧样式，完成期保持最后一帧样式\n\n单纯的文字不直观？相信下面的这个demo能让你豁然开朗：\n\n<iframe height=\"435\" scrolling=\"no\" title=\"animation-fill-mode\" src=\"https://codepen.io/JingW/embed/qwNLJE/?height=435&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## animation-play-state 动画播放状态\n\nCSS语法：`animation-play-state: running | paused`\n\n用来设置动画的播放或者暂停。比如希望在鼠标经过的时候，让动画先停止下来，鼠标移开之后再继续播放，就可以通过设置 `.element:hover { animation-play-state: paused; }` 来实现。下面是一个案例，在鼠标移入时钟后指针暂停旋转；移出后时钟继续旋转。\n\n<iframe height=\"339\" scrolling=\"no\" title=\"animation-play-state闹钟示例\" src=\"https://codepen.io/JingW/embed/rbMWjB/?height=339&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","source":"_posts/animation动画（二）.md","raw":"---\ntitle: animation动画（二）\ntags:\n  - CSS3\ncategories:\n  - 前端\n  - CSS\nabbrlink: 20298\ndate: 2019-03-09 10:18:06\n---\n\n## 传送门\n\n- [animation动画（一）](https://evestorm.github.io/posts/31280/)\n- [animation动画（二）](https://evestorm.github.io/posts/20298/)\n\n老规矩，二系列来谈谈具体每个动画属性的含义和用法，算是一个对知识点的总结吧。\n\n## animation-name 动画名称\n\nCSS语法：`animation-name: shrink`\n\n用来设置元素的动画名称。\n\n<!-- more -->\n\n## animation-duration 持续时间\n\nCSS语法：`animation-duration: 1s`\n\n用来指定动画在一个周期内所花费的时间。\n\n## animation-timing-function 运动曲线\n\nCSS语法：`animation-timing-function: ease-in-out`\n\n用来设置元素的动画速度曲线，它的用法和 [transition-timing-function](https://evestorm.github.io/posts/13167/#transition-timing-function-效果曲线) 类似，想要了解详情的直接点这个链接吧。\n\n> DEMO\n\n<iframe height=\"521\" scrolling=\"no\" title=\"animation-timing-function\" src=\"https://codepen.io/JingW/embed/qwbVgB/?height=521&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## animation-delay 动画延迟\n\nCSS语法：`animation-delay: 1s`\n\n用来设置动画延迟多少秒/毫秒后才开始执行。正值（例如2s）将在2s后启动动画；负值（例如-2s）将立即执行动画，但是动画会从它的动画序列中的第2s位置处立即开始。\n\n## animation-iteration-count 循环次数\n\nCSS语法：`animation-iteration-count: 1s`\n\n用来设置动画循环的次数，默认值是1，表示动画只播放一次。除了使用正整数来设置次数外，还可以将值设置为 `infinite` ，表示无限循环。\n\n## animation-direction 是否反向\n\nCSS语法：`animation-direction: normal | reverse | alternate | alternate-reverse`\n\n用来设置动画在循环过程中是否反向运动，默认值为 `normal` ，即正常模式，动画会从第一帧播放到最后一帧；`reverse` 表示反向模式，动画会从最后一帧倒着播放到第一帧；`alternate` 设置动画先正向播放，第二次再从反向播放，交替进行，例如 animation 系列一中的案例；`alternate-reverse` 则是先让动画反向播放，第二次再正向播放，交替进行。\n\n## animation-fill-mode 动画填充模式\n\nCSS语法：`animation-fill-mode: none | forwards | backwards | both`\n\n用来指定在动画执行之前和之后如何给动画的目标应用样式。这个属性在我第一次接触时没太理解，直到我看了 [segmentfault](https://segmentfault.com/) 上的 [这篇文章](https://segmentfault.com/q/1010000003867335) 。\n\n在理解它之前，我们需要在脑海里有个概念，那就是一个动画是分为初始状态、等待期、动画执行期、完成期四个阶段的。而上面 animation-fill-mode 接收的四个值则分别对应：\n\n- none 表示 等待期和完成期，元素样式都为初始状态样式，不受动画定义（@keyframes）的影响\n- forwards 表示等待期保持初始样式，完成期间保持最后一帧样式\n- backwards 表示等待期为第一帧样式，完成期跳转为初始样式\n- both 表示 等待期样式为第一帧样式，完成期保持最后一帧样式\n\n单纯的文字不直观？相信下面的这个demo能让你豁然开朗：\n\n<iframe height=\"435\" scrolling=\"no\" title=\"animation-fill-mode\" src=\"https://codepen.io/JingW/embed/qwNLJE/?height=435&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## animation-play-state 动画播放状态\n\nCSS语法：`animation-play-state: running | paused`\n\n用来设置动画的播放或者暂停。比如希望在鼠标经过的时候，让动画先停止下来，鼠标移开之后再继续播放，就可以通过设置 `.element:hover { animation-play-state: paused; }` 来实现。下面是一个案例，在鼠标移入时钟后指针暂停旋转；移出后时钟继续旋转。\n\n<iframe height=\"339\" scrolling=\"no\" title=\"animation-play-state闹钟示例\" src=\"https://codepen.io/JingW/embed/rbMWjB/?height=339&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","slug":"animation动画（二）","published":1,"updated":"2020-11-22T02:29:06.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyf9002hkhsr22sy7yw5","content":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/31280/\">animation动画（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/20298/\">animation动画（二）</a></li>\n</ul>\n<p>老规矩，二系列来谈谈具体每个动画属性的含义和用法，算是一个对知识点的总结吧。</p>\n<h2 id=\"animation-name-动画名称\"><a href=\"#animation-name-动画名称\" class=\"headerlink\" title=\"animation-name 动画名称\"></a>animation-name 动画名称</h2><p>CSS语法：<code>animation-name: shrink</code></p>\n<p>用来设置元素的动画名称。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"animation-duration-持续时间\"><a href=\"#animation-duration-持续时间\" class=\"headerlink\" title=\"animation-duration 持续时间\"></a>animation-duration 持续时间</h2><p>CSS语法：<code>animation-duration: 1s</code></p>\n<p>用来指定动画在一个周期内所花费的时间。</p>\n<h2 id=\"animation-timing-function-运动曲线\"><a href=\"#animation-timing-function-运动曲线\" class=\"headerlink\" title=\"animation-timing-function 运动曲线\"></a>animation-timing-function 运动曲线</h2><p>CSS语法：<code>animation-timing-function: ease-in-out</code></p>\n<p>用来设置元素的动画速度曲线，它的用法和 <a href=\"https://evestorm.github.io/posts/13167/#transition-timing-function-%E6%95%88%E6%9E%9C%E6%9B%B2%E7%BA%BF\">transition-timing-function</a> 类似，想要了解详情的直接点这个链接吧。</p>\n<blockquote>\n<p>DEMO</p>\n</blockquote>\n<iframe height=\"521\" scrolling=\"no\" title=\"animation-timing-function\" src=\"https://codepen.io/JingW/embed/qwbVgB/?height=521&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"animation-delay-动画延迟\"><a href=\"#animation-delay-动画延迟\" class=\"headerlink\" title=\"animation-delay 动画延迟\"></a>animation-delay 动画延迟</h2><p>CSS语法：<code>animation-delay: 1s</code></p>\n<p>用来设置动画延迟多少秒/毫秒后才开始执行。正值（例如2s）将在2s后启动动画；负值（例如-2s）将立即执行动画，但是动画会从它的动画序列中的第2s位置处立即开始。</p>\n<h2 id=\"animation-iteration-count-循环次数\"><a href=\"#animation-iteration-count-循环次数\" class=\"headerlink\" title=\"animation-iteration-count 循环次数\"></a>animation-iteration-count 循环次数</h2><p>CSS语法：<code>animation-iteration-count: 1s</code></p>\n<p>用来设置动画循环的次数，默认值是1，表示动画只播放一次。除了使用正整数来设置次数外，还可以将值设置为 <code>infinite</code> ，表示无限循环。</p>\n<h2 id=\"animation-direction-是否反向\"><a href=\"#animation-direction-是否反向\" class=\"headerlink\" title=\"animation-direction 是否反向\"></a>animation-direction 是否反向</h2><p>CSS语法：<code>animation-direction: normal | reverse | alternate | alternate-reverse</code></p>\n<p>用来设置动画在循环过程中是否反向运动，默认值为 <code>normal</code> ，即正常模式，动画会从第一帧播放到最后一帧；<code>reverse</code> 表示反向模式，动画会从最后一帧倒着播放到第一帧；<code>alternate</code> 设置动画先正向播放，第二次再从反向播放，交替进行，例如 animation 系列一中的案例；<code>alternate-reverse</code> 则是先让动画反向播放，第二次再正向播放，交替进行。</p>\n<h2 id=\"animation-fill-mode-动画填充模式\"><a href=\"#animation-fill-mode-动画填充模式\" class=\"headerlink\" title=\"animation-fill-mode 动画填充模式\"></a>animation-fill-mode 动画填充模式</h2><p>CSS语法：<code>animation-fill-mode: none | forwards | backwards | both</code></p>\n<p>用来指定在动画执行之前和之后如何给动画的目标应用样式。这个属性在我第一次接触时没太理解，直到我看了 <a href=\"https://segmentfault.com/\">segmentfault</a> 上的 <a href=\"https://segmentfault.com/q/1010000003867335\">这篇文章</a> 。</p>\n<p>在理解它之前，我们需要在脑海里有个概念，那就是一个动画是分为初始状态、等待期、动画执行期、完成期四个阶段的。而上面 animation-fill-mode 接收的四个值则分别对应：</p>\n<ul>\n<li>none 表示 等待期和完成期，元素样式都为初始状态样式，不受动画定义（@keyframes）的影响</li>\n<li>forwards 表示等待期保持初始样式，完成期间保持最后一帧样式</li>\n<li>backwards 表示等待期为第一帧样式，完成期跳转为初始样式</li>\n<li>both 表示 等待期样式为第一帧样式，完成期保持最后一帧样式</li>\n</ul>\n<p>单纯的文字不直观？相信下面的这个demo能让你豁然开朗：</p>\n<iframe height=\"435\" scrolling=\"no\" title=\"animation-fill-mode\" src=\"https://codepen.io/JingW/embed/qwNLJE/?height=435&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"animation-play-state-动画播放状态\"><a href=\"#animation-play-state-动画播放状态\" class=\"headerlink\" title=\"animation-play-state 动画播放状态\"></a>animation-play-state 动画播放状态</h2><p>CSS语法：<code>animation-play-state: running | paused</code></p>\n<p>用来设置动画的播放或者暂停。比如希望在鼠标经过的时候，让动画先停止下来，鼠标移开之后再继续播放，就可以通过设置 <code>.element:hover &#123; animation-play-state: paused; &#125;</code> 来实现。下面是一个案例，在鼠标移入时钟后指针暂停旋转；移出后时钟继续旋转。</p>\n<iframe height=\"339\" scrolling=\"no\" title=\"animation-play-state闹钟示例\" src=\"https://codepen.io/JingW/embed/rbMWjB/?height=339&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","site":{"data":{}},"excerpt":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/31280/\">animation动画（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/20298/\">animation动画（二）</a></li>\n</ul>\n<p>老规矩，二系列来谈谈具体每个动画属性的含义和用法，算是一个对知识点的总结吧。</p>\n<h2 id=\"animation-name-动画名称\"><a href=\"#animation-name-动画名称\" class=\"headerlink\" title=\"animation-name 动画名称\"></a>animation-name 动画名称</h2><p>CSS语法：<code>animation-name: shrink</code></p>\n<p>用来设置元素的动画名称。</p>","more":"<h2 id=\"animation-duration-持续时间\"><a href=\"#animation-duration-持续时间\" class=\"headerlink\" title=\"animation-duration 持续时间\"></a>animation-duration 持续时间</h2><p>CSS语法：<code>animation-duration: 1s</code></p>\n<p>用来指定动画在一个周期内所花费的时间。</p>\n<h2 id=\"animation-timing-function-运动曲线\"><a href=\"#animation-timing-function-运动曲线\" class=\"headerlink\" title=\"animation-timing-function 运动曲线\"></a>animation-timing-function 运动曲线</h2><p>CSS语法：<code>animation-timing-function: ease-in-out</code></p>\n<p>用来设置元素的动画速度曲线，它的用法和 <a href=\"https://evestorm.github.io/posts/13167/#transition-timing-function-%E6%95%88%E6%9E%9C%E6%9B%B2%E7%BA%BF\">transition-timing-function</a> 类似，想要了解详情的直接点这个链接吧。</p>\n<blockquote>\n<p>DEMO</p>\n</blockquote>\n<iframe height=\"521\" scrolling=\"no\" title=\"animation-timing-function\" src=\"https://codepen.io/JingW/embed/qwbVgB/?height=521&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"animation-delay-动画延迟\"><a href=\"#animation-delay-动画延迟\" class=\"headerlink\" title=\"animation-delay 动画延迟\"></a>animation-delay 动画延迟</h2><p>CSS语法：<code>animation-delay: 1s</code></p>\n<p>用来设置动画延迟多少秒/毫秒后才开始执行。正值（例如2s）将在2s后启动动画；负值（例如-2s）将立即执行动画，但是动画会从它的动画序列中的第2s位置处立即开始。</p>\n<h2 id=\"animation-iteration-count-循环次数\"><a href=\"#animation-iteration-count-循环次数\" class=\"headerlink\" title=\"animation-iteration-count 循环次数\"></a>animation-iteration-count 循环次数</h2><p>CSS语法：<code>animation-iteration-count: 1s</code></p>\n<p>用来设置动画循环的次数，默认值是1，表示动画只播放一次。除了使用正整数来设置次数外，还可以将值设置为 <code>infinite</code> ，表示无限循环。</p>\n<h2 id=\"animation-direction-是否反向\"><a href=\"#animation-direction-是否反向\" class=\"headerlink\" title=\"animation-direction 是否反向\"></a>animation-direction 是否反向</h2><p>CSS语法：<code>animation-direction: normal | reverse | alternate | alternate-reverse</code></p>\n<p>用来设置动画在循环过程中是否反向运动，默认值为 <code>normal</code> ，即正常模式，动画会从第一帧播放到最后一帧；<code>reverse</code> 表示反向模式，动画会从最后一帧倒着播放到第一帧；<code>alternate</code> 设置动画先正向播放，第二次再从反向播放，交替进行，例如 animation 系列一中的案例；<code>alternate-reverse</code> 则是先让动画反向播放，第二次再正向播放，交替进行。</p>\n<h2 id=\"animation-fill-mode-动画填充模式\"><a href=\"#animation-fill-mode-动画填充模式\" class=\"headerlink\" title=\"animation-fill-mode 动画填充模式\"></a>animation-fill-mode 动画填充模式</h2><p>CSS语法：<code>animation-fill-mode: none | forwards | backwards | both</code></p>\n<p>用来指定在动画执行之前和之后如何给动画的目标应用样式。这个属性在我第一次接触时没太理解，直到我看了 <a href=\"https://segmentfault.com/\">segmentfault</a> 上的 <a href=\"https://segmentfault.com/q/1010000003867335\">这篇文章</a> 。</p>\n<p>在理解它之前，我们需要在脑海里有个概念，那就是一个动画是分为初始状态、等待期、动画执行期、完成期四个阶段的。而上面 animation-fill-mode 接收的四个值则分别对应：</p>\n<ul>\n<li>none 表示 等待期和完成期，元素样式都为初始状态样式，不受动画定义（@keyframes）的影响</li>\n<li>forwards 表示等待期保持初始样式，完成期间保持最后一帧样式</li>\n<li>backwards 表示等待期为第一帧样式，完成期跳转为初始样式</li>\n<li>both 表示 等待期样式为第一帧样式，完成期保持最后一帧样式</li>\n</ul>\n<p>单纯的文字不直观？相信下面的这个demo能让你豁然开朗：</p>\n<iframe height=\"435\" scrolling=\"no\" title=\"animation-fill-mode\" src=\"https://codepen.io/JingW/embed/qwNLJE/?height=435&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"animation-play-state-动画播放状态\"><a href=\"#animation-play-state-动画播放状态\" class=\"headerlink\" title=\"animation-play-state 动画播放状态\"></a>animation-play-state 动画播放状态</h2><p>CSS语法：<code>animation-play-state: running | paused</code></p>\n<p>用来设置动画的播放或者暂停。比如希望在鼠标经过的时候，让动画先停止下来，鼠标移开之后再继续播放，就可以通过设置 <code>.element:hover &#123; animation-play-state: paused; &#125;</code> 来实现。下面是一个案例，在鼠标移入时钟后指针暂停旋转；移出后时钟继续旋转。</p>\n<iframe height=\"339\" scrolling=\"no\" title=\"animation-play-state闹钟示例\" src=\"https://codepen.io/JingW/embed/rbMWjB/?height=339&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>"},{"title":"cookie与session区别","abbrlink":63891,"date":"2019-01-09T16:16:15.000Z","_content":"\n## 保存状态\n\ncookie 是通过在客户端记录信息确定用户身份的，而 session 则通过在服务器端记录信息来确定用户身份。下面是网上找到的两张图，能够对 cookie 以及 session 在客户端与服务端传递的过程有个较清晰的认识：\n\n{% asset_img 1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png cookie %}\n\n{% asset_img 1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png session %}\n\n<!-- more -->\n\n## 使用方式\n\ncookie机制：\n\n- 默认情况下，cookie 保存在内存中，**浏览器关闭**就没了；设置过期时间后，cookie 保存在硬盘上，关闭浏览器仍然存在，直到过期时间结束才消失。\n- cookie 以**文本形式**保存在客户端，每次请求时都带上它。\n\nsession机制：\n\n- 每次请求，服务器会检查是否有 sessionid\n  - 有，服务器根据 id 返回对应 session 对象\n  - 无，服务器创建新的 session 对象，并把 sessionid 在本次响应中返回给客户端。\n- 通常使用 cookie 方式存储 sessionid 到客户端\n  - 用户禁用 cookie 时，则服务端可以使用URL重写，可以通过 response.encodeURL(url) 进行实现\n\n## 存储方式\n\n- cookie 只能保存字符串类型，以文本的方式\n- session 能支持任何类型的对象\n\n## 存储大小\n\n- cookie单个不超过4kb\n- session没限制\n","source":"_posts/cookie与session区别.md","raw":"---\ntitle: cookie与session区别\ncategories:\n  - 前端\n  - JS\nabbrlink: 63891\ndate: 2019-01-10 00:16:15\ntags:\n---\n\n## 保存状态\n\ncookie 是通过在客户端记录信息确定用户身份的，而 session 则通过在服务器端记录信息来确定用户身份。下面是网上找到的两张图，能够对 cookie 以及 session 在客户端与服务端传递的过程有个较清晰的认识：\n\n{% asset_img 1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png cookie %}\n\n{% asset_img 1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png session %}\n\n<!-- more -->\n\n## 使用方式\n\ncookie机制：\n\n- 默认情况下，cookie 保存在内存中，**浏览器关闭**就没了；设置过期时间后，cookie 保存在硬盘上，关闭浏览器仍然存在，直到过期时间结束才消失。\n- cookie 以**文本形式**保存在客户端，每次请求时都带上它。\n\nsession机制：\n\n- 每次请求，服务器会检查是否有 sessionid\n  - 有，服务器根据 id 返回对应 session 对象\n  - 无，服务器创建新的 session 对象，并把 sessionid 在本次响应中返回给客户端。\n- 通常使用 cookie 方式存储 sessionid 到客户端\n  - 用户禁用 cookie 时，则服务端可以使用URL重写，可以通过 response.encodeURL(url) 进行实现\n\n## 存储方式\n\n- cookie 只能保存字符串类型，以文本的方式\n- session 能支持任何类型的对象\n\n## 存储大小\n\n- cookie单个不超过4kb\n- session没限制\n","slug":"cookie与session区别","published":1,"updated":"2020-11-21T16:25:13.923Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfa002kkhsr1uqdh9k7","content":"<h2 id=\"保存状态\"><a href=\"#保存状态\" class=\"headerlink\" title=\"保存状态\"></a>保存状态</h2><p>cookie 是通过在客户端记录信息确定用户身份的，而 session 则通过在服务器端记录信息来确定用户身份。下面是网上找到的两张图，能够对 cookie 以及 session 在客户端与服务端传递的过程有个较清晰的认识：</p>\n<img src=\"/posts/63891/1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png\" class=\"\" title=\"cookie\">\n\n<img src=\"/posts/63891/1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png\" class=\"\" title=\"session\">\n\n<a id=\"more\"></a>\n\n<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><p>cookie机制：</p>\n<ul>\n<li>默认情况下，cookie 保存在内存中，<strong>浏览器关闭</strong>就没了；设置过期时间后，cookie 保存在硬盘上，关闭浏览器仍然存在，直到过期时间结束才消失。</li>\n<li>cookie 以<strong>文本形式</strong>保存在客户端，每次请求时都带上它。</li>\n</ul>\n<p>session机制：</p>\n<ul>\n<li>每次请求，服务器会检查是否有 sessionid<ul>\n<li>有，服务器根据 id 返回对应 session 对象</li>\n<li>无，服务器创建新的 session 对象，并把 sessionid 在本次响应中返回给客户端。</li>\n</ul>\n</li>\n<li>通常使用 cookie 方式存储 sessionid 到客户端<ul>\n<li>用户禁用 cookie 时，则服务端可以使用URL重写，可以通过 response.encodeURL(url) 进行实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h2><ul>\n<li>cookie 只能保存字符串类型，以文本的方式</li>\n<li>session 能支持任何类型的对象</li>\n</ul>\n<h2 id=\"存储大小\"><a href=\"#存储大小\" class=\"headerlink\" title=\"存储大小\"></a>存储大小</h2><ul>\n<li>cookie单个不超过4kb</li>\n<li>session没限制</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"保存状态\"><a href=\"#保存状态\" class=\"headerlink\" title=\"保存状态\"></a>保存状态</h2><p>cookie 是通过在客户端记录信息确定用户身份的，而 session 则通过在服务器端记录信息来确定用户身份。下面是网上找到的两张图，能够对 cookie 以及 session 在客户端与服务端传递的过程有个较清晰的认识：</p>\n<img src=\"/posts/63891/1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png\" class=\"\" title=\"cookie\">\n\n<img src=\"/posts/63891/1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png\" class=\"\" title=\"session\">","more":"<h2 id=\"使用方式\"><a href=\"#使用方式\" class=\"headerlink\" title=\"使用方式\"></a>使用方式</h2><p>cookie机制：</p>\n<ul>\n<li>默认情况下，cookie 保存在内存中，<strong>浏览器关闭</strong>就没了；设置过期时间后，cookie 保存在硬盘上，关闭浏览器仍然存在，直到过期时间结束才消失。</li>\n<li>cookie 以<strong>文本形式</strong>保存在客户端，每次请求时都带上它。</li>\n</ul>\n<p>session机制：</p>\n<ul>\n<li>每次请求，服务器会检查是否有 sessionid<ul>\n<li>有，服务器根据 id 返回对应 session 对象</li>\n<li>无，服务器创建新的 session 对象，并把 sessionid 在本次响应中返回给客户端。</li>\n</ul>\n</li>\n<li>通常使用 cookie 方式存储 sessionid 到客户端<ul>\n<li>用户禁用 cookie 时，则服务端可以使用URL重写，可以通过 response.encodeURL(url) 进行实现</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"存储方式\"><a href=\"#存储方式\" class=\"headerlink\" title=\"存储方式\"></a>存储方式</h2><ul>\n<li>cookie 只能保存字符串类型，以文本的方式</li>\n<li>session 能支持任何类型的对象</li>\n</ul>\n<h2 id=\"存储大小\"><a href=\"#存储大小\" class=\"headerlink\" title=\"存储大小\"></a>存储大小</h2><ul>\n<li>cookie单个不超过4kb</li>\n<li>session没限制</li>\n</ul>"},{"title":"let和const和var的区别","abbrlink":37021,"date":"2019-01-03T15:48:36.000Z","_content":"\n## const 和 let 异同\n\n### 不同点\n\n- let 定义变量可以只声明不赋值\n- const 定义常量声明时必须赋值，一旦定义不可轻易改变\n\n### 相同点\n\n解决 var 没有块作用域,、变量提升、可以重复声明的问题。 let 和 const 有自己的块作用域, 不存在变量提升问题, 同一块作用域中不可重复声明（会报错）。\n\n## let/const 和 var 区别\n\n- var 有变量提升，let/const 没有\n- let/const 的作用域是块，而 var 的作用域是函数\n- let/const 有暂时性死区，只要 let/const 声明的变量，在未声明之前使用或者赋值都会报错（ReferenceError）\n- let/const 不能被重复定义\n","source":"_posts/let和const和var的区别.md","raw":"---\ntitle: let和const和var的区别\ntags:\n  - ES6\ncategories:\n  - 前端\n  - JS\nabbrlink: 37021\ndate: 2019-01-03 23:48:36\n---\n\n## const 和 let 异同\n\n### 不同点\n\n- let 定义变量可以只声明不赋值\n- const 定义常量声明时必须赋值，一旦定义不可轻易改变\n\n### 相同点\n\n解决 var 没有块作用域,、变量提升、可以重复声明的问题。 let 和 const 有自己的块作用域, 不存在变量提升问题, 同一块作用域中不可重复声明（会报错）。\n\n## let/const 和 var 区别\n\n- var 有变量提升，let/const 没有\n- let/const 的作用域是块，而 var 的作用域是函数\n- let/const 有暂时性死区，只要 let/const 声明的变量，在未声明之前使用或者赋值都会报错（ReferenceError）\n- let/const 不能被重复定义\n","slug":"let和const和var的区别","published":1,"updated":"2020-11-21T15:53:43.442Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfb002mkhsr9enscejg","content":"<h2 id=\"const-和-let-异同\"><a href=\"#const-和-let-异同\" class=\"headerlink\" title=\"const 和 let 异同\"></a>const 和 let 异同</h2><h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li>let 定义变量可以只声明不赋值</li>\n<li>const 定义常量声明时必须赋值，一旦定义不可轻易改变</li>\n</ul>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>解决 var 没有块作用域,、变量提升、可以重复声明的问题。 let 和 const 有自己的块作用域, 不存在变量提升问题, 同一块作用域中不可重复声明（会报错）。</p>\n<h2 id=\"let-const-和-var-区别\"><a href=\"#let-const-和-var-区别\" class=\"headerlink\" title=\"let/const 和 var 区别\"></a>let/const 和 var 区别</h2><ul>\n<li>var 有变量提升，let/const 没有</li>\n<li>let/const 的作用域是块，而 var 的作用域是函数</li>\n<li>let/const 有暂时性死区，只要 let/const 声明的变量，在未声明之前使用或者赋值都会报错（ReferenceError）</li>\n<li>let/const 不能被重复定义</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"const-和-let-异同\"><a href=\"#const-和-let-异同\" class=\"headerlink\" title=\"const 和 let 异同\"></a>const 和 let 异同</h2><h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><ul>\n<li>let 定义变量可以只声明不赋值</li>\n<li>const 定义常量声明时必须赋值，一旦定义不可轻易改变</li>\n</ul>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>解决 var 没有块作用域,、变量提升、可以重复声明的问题。 let 和 const 有自己的块作用域, 不存在变量提升问题, 同一块作用域中不可重复声明（会报错）。</p>\n<h2 id=\"let-const-和-var-区别\"><a href=\"#let-const-和-var-区别\" class=\"headerlink\" title=\"let/const 和 var 区别\"></a>let/const 和 var 区别</h2><ul>\n<li>var 有变量提升，let/const 没有</li>\n<li>let/const 的作用域是块，而 var 的作用域是函数</li>\n<li>let/const 有暂时性死区，只要 let/const 声明的变量，在未声明之前使用或者赋值都会报错（ReferenceError）</li>\n<li>let/const 不能被重复定义</li>\n</ul>\n"},{"title":"npm-run-build遇到Node Sass could not find a binding for your current environment: OS X 64-bit with Node.js 14.x","abbrlink":7710,"date":"2020-12-02T01:04:30.000Z","_content":"\n今天 `npm run build-prod` 打包项目的时候遇到如下报错信息：\n\n```shell\nNode Sass could not find a binding for your current environment: OS X 64-bit with Node.js\n```\n\n百度了一些解决方案都没法解决问题，后来在 Stack Overflow 上看到了一种解决方案，地址：https://stackoverflow.com/questions/64612707/node-sass-does-not-yet-support-your-current-environment-windows-64-bit-with-uns\n\n1. install / downgrade node.js to a stable version (LTS) like [14.15.0](https://nodejs.org/en/download/)\n2. install the compatible node-sass version via `npm install node-sass@4.14.0`; you can find the list [here](https://www.npmjs.com/package/node-sass), or even install `gulp-sass`with `npm i gulp-sass --save-dev`.\n","source":"_posts/npm-run-build遇到Node-Sass-could-not-find-a-binding-for-your-current-environment-OS-X-64-bit-with-Node-js-14-x.md","raw":"---\ntitle: >-\n  npm-run-build遇到Node Sass could not find a binding for your current\n  environment: OS X 64-bit with Node.js 14.x\ntags:\n  - 解决方案\n  - 笔记\ncategories:\n  - 解决方案\n  - Node\nabbrlink: 7710\ndate: 2020-12-02 09:04:30\n---\n\n今天 `npm run build-prod` 打包项目的时候遇到如下报错信息：\n\n```shell\nNode Sass could not find a binding for your current environment: OS X 64-bit with Node.js\n```\n\n百度了一些解决方案都没法解决问题，后来在 Stack Overflow 上看到了一种解决方案，地址：https://stackoverflow.com/questions/64612707/node-sass-does-not-yet-support-your-current-environment-windows-64-bit-with-uns\n\n1. install / downgrade node.js to a stable version (LTS) like [14.15.0](https://nodejs.org/en/download/)\n2. install the compatible node-sass version via `npm install node-sass@4.14.0`; you can find the list [here](https://www.npmjs.com/package/node-sass), or even install `gulp-sass`with `npm i gulp-sass --save-dev`.\n","slug":"npm-run-build遇到Node-Sass-could-not-find-a-binding-for-your-current-environment-OS-X-64-bit-with-Node-js-14-x","published":1,"updated":"2020-12-02T01:10:29.576Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfc002pkhsrcjsog2ox","content":"<p>今天 <code>npm run build-prod</code> 打包项目的时候遇到如下报错信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node Sass could not find a binding for your current environment: OS X 64-bit with Node.js</span><br></pre></td></tr></table></figure>\n\n<p>百度了一些解决方案都没法解决问题，后来在 Stack Overflow 上看到了一种解决方案，地址：<a href=\"https://stackoverflow.com/questions/64612707/node-sass-does-not-yet-support-your-current-environment-windows-64-bit-with-uns\">https://stackoverflow.com/questions/64612707/node-sass-does-not-yet-support-your-current-environment-windows-64-bit-with-uns</a></p>\n<ol>\n<li>install / downgrade node.js to a stable version (LTS) like <a href=\"https://nodejs.org/en/download/\">14.15.0</a></li>\n<li>install the compatible node-sass version via <code>npm install node-sass@4.14.0</code>; you can find the list <a href=\"https://www.npmjs.com/package/node-sass\">here</a>, or even install <code>gulp-sass</code>with <code>npm i gulp-sass --save-dev</code>.</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>今天 <code>npm run build-prod</code> 打包项目的时候遇到如下报错信息：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Node Sass could not find a binding for your current environment: OS X 64-bit with Node.js</span><br></pre></td></tr></table></figure>\n\n<p>百度了一些解决方案都没法解决问题，后来在 Stack Overflow 上看到了一种解决方案，地址：<a href=\"https://stackoverflow.com/questions/64612707/node-sass-does-not-yet-support-your-current-environment-windows-64-bit-with-uns\">https://stackoverflow.com/questions/64612707/node-sass-does-not-yet-support-your-current-environment-windows-64-bit-with-uns</a></p>\n<ol>\n<li>install / downgrade node.js to a stable version (LTS) like <a href=\"https://nodejs.org/en/download/\">14.15.0</a></li>\n<li>install the compatible node-sass version via <code>npm install node-sass@4.14.0</code>; you can find the list <a href=\"https://www.npmjs.com/package/node-sass\">here</a>, or even install <code>gulp-sass</code>with <code>npm i gulp-sass --save-dev</code>.</li>\n</ol>\n"},{"title":"null 和 undefined 的区别","abbrlink":63928,"date":"2018-12-21T15:41:25.000Z","_content":"\n## 含义\n\n- null 表示一个对象是“没有值”的值，也就是值为“空”\n- undefined 表示一个变量声明了没有初始化(赋值)\n\n## 类型\n\n- undefined 的类型(typeof)是 undefined\n- null 的类型(typeof)是 object\n\n<!-- more -->\n\n## 双等三等\n\n另外，在验证 null 时，一定要使用 `===` ，因为 `==` 无法分辨 null 和 undefined ：\n\n```\ncopynull == undefined // true \nnull === undefined // false\n```\n\n\n\n## 总结\n\n### undefined\n\n1. 变量提升：只声明未定义默认值就是 undefined\n2. 严格模式下：没有明确的执行主体，this 就是 undefined\n3. 对象没有这个属性名，属性值是 undefined\n4. 函数定义形参不传值，默认就是 undefined\n5. 函数没有返回值（没有 return 或者 return; ），默认返回的就是 undefined\n6. 数组越界取值也是 undefined （arr=[1,2]; arr[10] => undefined）\n7. …\n\n### null\n\n1. 手动设置变量的值或者对象某个属性值为null（此时不赋值，后面会赋值）\n2. 在 JS 的 DOM 元素获取中，如果没有获取到指定的元素对象，结果一般都是null\n3. Object.prototype.**proto** 的值也是 null\n4. 正则捕获的时候，如果没有捕获到结果，默认也是null\n5. …\n\n## 其他\n\nJavascript会将未赋值的变量默认值设为undefined；Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。","source":"_posts/null-和-undefined-的区别.md","raw":"---\ntitle: null 和 undefined 的区别\ncategories:\n  - 前端\n  - JS\nabbrlink: 63928\ndate: 2018-12-21 23:41:25\ntags:\n---\n\n## 含义\n\n- null 表示一个对象是“没有值”的值，也就是值为“空”\n- undefined 表示一个变量声明了没有初始化(赋值)\n\n## 类型\n\n- undefined 的类型(typeof)是 undefined\n- null 的类型(typeof)是 object\n\n<!-- more -->\n\n## 双等三等\n\n另外，在验证 null 时，一定要使用 `===` ，因为 `==` 无法分辨 null 和 undefined ：\n\n```\ncopynull == undefined // true \nnull === undefined // false\n```\n\n\n\n## 总结\n\n### undefined\n\n1. 变量提升：只声明未定义默认值就是 undefined\n2. 严格模式下：没有明确的执行主体，this 就是 undefined\n3. 对象没有这个属性名，属性值是 undefined\n4. 函数定义形参不传值，默认就是 undefined\n5. 函数没有返回值（没有 return 或者 return; ），默认返回的就是 undefined\n6. 数组越界取值也是 undefined （arr=[1,2]; arr[10] => undefined）\n7. …\n\n### null\n\n1. 手动设置变量的值或者对象某个属性值为null（此时不赋值，后面会赋值）\n2. 在 JS 的 DOM 元素获取中，如果没有获取到指定的元素对象，结果一般都是null\n3. Object.prototype.**proto** 的值也是 null\n4. 正则捕获的时候，如果没有捕获到结果，默认也是null\n5. …\n\n## 其他\n\nJavascript会将未赋值的变量默认值设为undefined；Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。","slug":"null-和-undefined-的区别","published":1,"updated":"2020-11-21T15:42:26.838Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfd002skhsrhsbafp3p","content":"<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><ul>\n<li>null 表示一个对象是“没有值”的值，也就是值为“空”</li>\n<li>undefined 表示一个变量声明了没有初始化(赋值)</li>\n</ul>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>undefined 的类型(typeof)是 undefined</li>\n<li>null 的类型(typeof)是 object</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"双等三等\"><a href=\"#双等三等\" class=\"headerlink\" title=\"双等三等\"></a>双等三等</h2><p>另外，在验证 null 时，一定要使用 <code>===</code> ，因为 <code>==</code> 无法分辨 null 和 undefined ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copynull &#x3D;&#x3D; undefined &#x2F;&#x2F; true </span><br><span class=\"line\">null &#x3D;&#x3D;&#x3D; undefined &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h3><ol>\n<li>变量提升：只声明未定义默认值就是 undefined</li>\n<li>严格模式下：没有明确的执行主体，this 就是 undefined</li>\n<li>对象没有这个属性名，属性值是 undefined</li>\n<li>函数定义形参不传值，默认就是 undefined</li>\n<li>函数没有返回值（没有 return 或者 return; ），默认返回的就是 undefined</li>\n<li>数组越界取值也是 undefined （arr=[1,2]; arr[10] =&gt; undefined）</li>\n<li>…</li>\n</ol>\n<h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><ol>\n<li>手动设置变量的值或者对象某个属性值为null（此时不赋值，后面会赋值）</li>\n<li>在 JS 的 DOM 元素获取中，如果没有获取到指定的元素对象，结果一般都是null</li>\n<li>Object.prototype.<strong>proto</strong> 的值也是 null</li>\n<li>正则捕获的时候，如果没有捕获到结果，默认也是null</li>\n<li>…</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Javascript会将未赋值的变量默认值设为undefined；Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"含义\"><a href=\"#含义\" class=\"headerlink\" title=\"含义\"></a>含义</h2><ul>\n<li>null 表示一个对象是“没有值”的值，也就是值为“空”</li>\n<li>undefined 表示一个变量声明了没有初始化(赋值)</li>\n</ul>\n<h2 id=\"类型\"><a href=\"#类型\" class=\"headerlink\" title=\"类型\"></a>类型</h2><ul>\n<li>undefined 的类型(typeof)是 undefined</li>\n<li>null 的类型(typeof)是 object</li>\n</ul>","more":"<h2 id=\"双等三等\"><a href=\"#双等三等\" class=\"headerlink\" title=\"双等三等\"></a>双等三等</h2><p>另外，在验证 null 时，一定要使用 <code>===</code> ，因为 <code>==</code> 无法分辨 null 和 undefined ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copynull &#x3D;&#x3D; undefined &#x2F;&#x2F; true </span><br><span class=\"line\">null &#x3D;&#x3D;&#x3D; undefined &#x2F;&#x2F; false</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><h3 id=\"undefined\"><a href=\"#undefined\" class=\"headerlink\" title=\"undefined\"></a>undefined</h3><ol>\n<li>变量提升：只声明未定义默认值就是 undefined</li>\n<li>严格模式下：没有明确的执行主体，this 就是 undefined</li>\n<li>对象没有这个属性名，属性值是 undefined</li>\n<li>函数定义形参不传值，默认就是 undefined</li>\n<li>函数没有返回值（没有 return 或者 return; ），默认返回的就是 undefined</li>\n<li>数组越界取值也是 undefined （arr=[1,2]; arr[10] =&gt; undefined）</li>\n<li>…</li>\n</ol>\n<h3 id=\"null\"><a href=\"#null\" class=\"headerlink\" title=\"null\"></a>null</h3><ol>\n<li>手动设置变量的值或者对象某个属性值为null（此时不赋值，后面会赋值）</li>\n<li>在 JS 的 DOM 元素获取中，如果没有获取到指定的元素对象，结果一般都是null</li>\n<li>Object.prototype.<strong>proto</strong> 的值也是 null</li>\n<li>正则捕获的时候，如果没有捕获到结果，默认也是null</li>\n<li>…</li>\n</ol>\n<h2 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他\"></a>其他</h2><p>Javascript会将未赋值的变量默认值设为undefined；Javascript从来不会将变量设为null。它是用来让程序员表明某个用var声明的变量时没有值的。</p>"},{"title":"transition过渡（一）","abbrlink":41749,"date":"2019-02-19T01:29:51.000Z","_content":"\n## 传送门\n\n- [transition过渡（一）](https://evestorm.github.io/posts/24967/)\n- [transition过渡（二）](https://evestorm.github.io/posts/13167/)\n\n## 介绍\n\n> CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。\n> 要实现这一点，必须规定两项内容：\n>\n> - 指定要添加效果的CSS属性\n> - 指定效果的持续时间。\n\n———— 出自 [菜鸟教程](http://www.runoob.com/css3/css3-transitions.html)\n\n<!-- more -->\n\n## 语法\n\n```css\n/* 分开写：*/\ntransition-property: css属性名称;\ntransition-duration: 过渡所花时间(默认0);\ntransition-timing-function: 过渡的时间曲线(默认ease);\ntransition-delay: 延迟时间(默认0);\n\n/* 简写形式： */\ntransition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)\n```\n\n## 栗子 🌰\n\n### 单个属性的变化 —> 按钮 :hover 效果\n\n下面的两个按钮，在鼠标移入时都被设置了 `background: yellow;` 样式。但只给第一个加上了 `transition: background 2s;` 属性，意思是如果背景发生变化，则给2s的过渡效果。\n\n<iframe height=\"265\" scrolling=\"no\" title=\"XGvqMB\" src=\"https://codepen.io/JingW/embed/XGvqMB/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 多个属性的变化 —> 单独设置\n\n针对多个属性设置过渡效果，用逗号隔开就好。下面案例鼠标移入后，使正方形过渡到圆形，且颜色逐渐变浅，核心代码：\n\n```css\ntransition: background .5s ease-out, border-radius .5s ease-in;\n```\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性\" src=\"https://codepen.io/JingW/embed/dLyWKM/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 多个属性的变化 -> all\n\n如果要过渡的css属性较多，可以尝试使用 all 一步搞定。下面案例中将鼠标移入正方形盒子，会使其慢慢缩小为一个圆形，且颜色逐渐变深，核心代码：\n\n```css\ntransition: all .5s ease-out;\n```\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性-all\" src=\"https://codepen.io/JingW/embed/GLRmXm/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 实用 demo\n\n### 下拉导航菜单\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-下拉导航\" src=\"https://codepen.io/JingW/embed/MxNXex/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","source":"_posts/transition过渡（一）.md","raw":"---\ntitle: transition过渡（一）\ntags:\n  - CSS3\ncategories:\n  - 前端\n  - CSS\nabbrlink: 41749\ndate: 2019-02-19 09:29:51\n---\n\n## 传送门\n\n- [transition过渡（一）](https://evestorm.github.io/posts/24967/)\n- [transition过渡（二）](https://evestorm.github.io/posts/13167/)\n\n## 介绍\n\n> CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。\n> 要实现这一点，必须规定两项内容：\n>\n> - 指定要添加效果的CSS属性\n> - 指定效果的持续时间。\n\n———— 出自 [菜鸟教程](http://www.runoob.com/css3/css3-transitions.html)\n\n<!-- more -->\n\n## 语法\n\n```css\n/* 分开写：*/\ntransition-property: css属性名称;\ntransition-duration: 过渡所花时间(默认0);\ntransition-timing-function: 过渡的时间曲线(默认ease);\ntransition-delay: 延迟时间(默认0);\n\n/* 简写形式： */\ntransition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)\n```\n\n## 栗子 🌰\n\n### 单个属性的变化 —> 按钮 :hover 效果\n\n下面的两个按钮，在鼠标移入时都被设置了 `background: yellow;` 样式。但只给第一个加上了 `transition: background 2s;` 属性，意思是如果背景发生变化，则给2s的过渡效果。\n\n<iframe height=\"265\" scrolling=\"no\" title=\"XGvqMB\" src=\"https://codepen.io/JingW/embed/XGvqMB/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 多个属性的变化 —> 单独设置\n\n针对多个属性设置过渡效果，用逗号隔开就好。下面案例鼠标移入后，使正方形过渡到圆形，且颜色逐渐变浅，核心代码：\n\n```css\ntransition: background .5s ease-out, border-radius .5s ease-in;\n```\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性\" src=\"https://codepen.io/JingW/embed/dLyWKM/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 多个属性的变化 -> all\n\n如果要过渡的css属性较多，可以尝试使用 all 一步搞定。下面案例中将鼠标移入正方形盒子，会使其慢慢缩小为一个圆形，且颜色逐渐变深，核心代码：\n\n```css\ntransition: all .5s ease-out;\n```\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性-all\" src=\"https://codepen.io/JingW/embed/GLRmXm/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 实用 demo\n\n### 下拉导航菜单\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-下拉导航\" src=\"https://codepen.io/JingW/embed/MxNXex/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","slug":"transition过渡（一）","published":1,"updated":"2020-11-22T01:31:24.856Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfe002vkhsrhvmlarjp","content":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/24967/\">transition过渡（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/13167/\">transition过渡（二）</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。<br>要实现这一点，必须规定两项内容：</p>\n<ul>\n<li>指定要添加效果的CSS属性</li>\n<li>指定效果的持续时间。</li>\n</ul>\n</blockquote>\n<p>———— 出自 <a href=\"http://www.runoob.com/css3/css3-transitions.html\">菜鸟教程</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 分开写：*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">css</span>属性名称;</span><br><span class=\"line\"><span class=\"selector-tag\">transition-duration</span>: 过渡所花时间(默认0);</span><br><span class=\"line\"><span class=\"selector-tag\">transition-timing-function</span>: 过渡的时间曲线(默认<span class=\"selector-tag\">ease</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">transition-delay</span>: 延迟时间(默认0);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 简写形式： */</span></span><br><span class=\"line\"><span class=\"selector-tag\">transition</span>： <span class=\"selector-tag\">CSS</span>属性，花费时间，效果曲线(默认<span class=\"selector-tag\">ease</span>)，延迟时间(默认0)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栗子-🌰\"><a href=\"#栗子-🌰\" class=\"headerlink\" title=\"栗子 🌰\"></a>栗子 🌰</h2><h3 id=\"单个属性的变化-—-gt-按钮-hover-效果\"><a href=\"#单个属性的变化-—-gt-按钮-hover-效果\" class=\"headerlink\" title=\"单个属性的变化 —&gt; 按钮 :hover 效果\"></a>单个属性的变化 —&gt; 按钮 :hover 效果</h3><p>下面的两个按钮，在鼠标移入时都被设置了 <code>background: yellow;</code> 样式。但只给第一个加上了 <code>transition: background 2s;</code> 属性，意思是如果背景发生变化，则给2s的过渡效果。</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"XGvqMB\" src=\"https://codepen.io/JingW/embed/XGvqMB/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"多个属性的变化-—-gt-单独设置\"><a href=\"#多个属性的变化-—-gt-单独设置\" class=\"headerlink\" title=\"多个属性的变化 —&gt; 单独设置\"></a>多个属性的变化 —&gt; 单独设置</h3><p>针对多个属性设置过渡效果，用逗号隔开就好。下面案例鼠标移入后，使正方形过渡到圆形，且颜色逐渐变浅，核心代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">background</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-out</span>, <span class=\"selector-tag\">border-radius</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-in</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性\" src=\"https://codepen.io/JingW/embed/dLyWKM/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"多个属性的变化-gt-all\"><a href=\"#多个属性的变化-gt-all\" class=\"headerlink\" title=\"多个属性的变化 -&gt; all\"></a>多个属性的变化 -&gt; all</h3><p>如果要过渡的css属性较多，可以尝试使用 all 一步搞定。下面案例中将鼠标移入正方形盒子，会使其慢慢缩小为一个圆形，且颜色逐渐变深，核心代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-out</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性-all\" src=\"https://codepen.io/JingW/embed/GLRmXm/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"实用-demo\"><a href=\"#实用-demo\" class=\"headerlink\" title=\"实用 demo\"></a>实用 demo</h2><h3 id=\"下拉导航菜单\"><a href=\"#下拉导航菜单\" class=\"headerlink\" title=\"下拉导航菜单\"></a>下拉导航菜单</h3><iframe height=\"265\" scrolling=\"no\" title=\"transition-下拉导航\" src=\"https://codepen.io/JingW/embed/MxNXex/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","site":{"data":{}},"excerpt":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/24967/\">transition过渡（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/13167/\">transition过渡（二）</a></li>\n</ul>\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><blockquote>\n<p>CSS3 过渡是元素从一种样式逐渐改变为另一种的效果。<br>要实现这一点，必须规定两项内容：</p>\n<ul>\n<li>指定要添加效果的CSS属性</li>\n<li>指定效果的持续时间。</li>\n</ul>\n</blockquote>\n<p>———— 出自 <a href=\"http://www.runoob.com/css3/css3-transitions.html\">菜鸟教程</a></p>","more":"<h2 id=\"语法\"><a href=\"#语法\" class=\"headerlink\" title=\"语法\"></a>语法</h2><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/* 分开写：*/</span></span><br><span class=\"line\"><span class=\"selector-tag\">transition-property</span>: <span class=\"selector-tag\">css</span>属性名称;</span><br><span class=\"line\"><span class=\"selector-tag\">transition-duration</span>: 过渡所花时间(默认0);</span><br><span class=\"line\"><span class=\"selector-tag\">transition-timing-function</span>: 过渡的时间曲线(默认<span class=\"selector-tag\">ease</span>);</span><br><span class=\"line\"><span class=\"selector-tag\">transition-delay</span>: 延迟时间(默认0);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/* 简写形式： */</span></span><br><span class=\"line\"><span class=\"selector-tag\">transition</span>： <span class=\"selector-tag\">CSS</span>属性，花费时间，效果曲线(默认<span class=\"selector-tag\">ease</span>)，延迟时间(默认0)</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"栗子-🌰\"><a href=\"#栗子-🌰\" class=\"headerlink\" title=\"栗子 🌰\"></a>栗子 🌰</h2><h3 id=\"单个属性的变化-—-gt-按钮-hover-效果\"><a href=\"#单个属性的变化-—-gt-按钮-hover-效果\" class=\"headerlink\" title=\"单个属性的变化 —&gt; 按钮 :hover 效果\"></a>单个属性的变化 —&gt; 按钮 :hover 效果</h3><p>下面的两个按钮，在鼠标移入时都被设置了 <code>background: yellow;</code> 样式。但只给第一个加上了 <code>transition: background 2s;</code> 属性，意思是如果背景发生变化，则给2s的过渡效果。</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"XGvqMB\" src=\"https://codepen.io/JingW/embed/XGvqMB/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"多个属性的变化-—-gt-单独设置\"><a href=\"#多个属性的变化-—-gt-单独设置\" class=\"headerlink\" title=\"多个属性的变化 —&gt; 单独设置\"></a>多个属性的变化 —&gt; 单独设置</h3><p>针对多个属性设置过渡效果，用逗号隔开就好。下面案例鼠标移入后，使正方形过渡到圆形，且颜色逐渐变浅，核心代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">background</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-out</span>, <span class=\"selector-tag\">border-radius</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-in</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性\" src=\"https://codepen.io/JingW/embed/dLyWKM/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"多个属性的变化-gt-all\"><a href=\"#多个属性的变化-gt-all\" class=\"headerlink\" title=\"多个属性的变化 -&gt; all\"></a>多个属性的变化 -&gt; all</h3><p>如果要过渡的css属性较多，可以尝试使用 all 一步搞定。下面案例中将鼠标移入正方形盒子，会使其慢慢缩小为一个圆形，且颜色逐渐变深，核心代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">transition</span>: <span class=\"selector-tag\">all</span> .5<span class=\"selector-tag\">s</span> <span class=\"selector-tag\">ease-out</span>;</span><br></pre></td></tr></table></figure>\n\n\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-多属性-all\" src=\"https://codepen.io/JingW/embed/GLRmXm/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"实用-demo\"><a href=\"#实用-demo\" class=\"headerlink\" title=\"实用 demo\"></a>实用 demo</h2><h3 id=\"下拉导航菜单\"><a href=\"#下拉导航菜单\" class=\"headerlink\" title=\"下拉导航菜单\"></a>下拉导航菜单</h3><iframe height=\"265\" scrolling=\"no\" title=\"transition-下拉导航\" src=\"https://codepen.io/JingW/embed/MxNXex/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>"},{"title":"transition过渡（二）","abbrlink":13167,"date":"2019-02-20T01:31:31.000Z","_content":"\n## 传送门\n\n- [transition过渡（一）](https://evestorm.github.io/posts/24967/)\n- [transition过渡（二）](https://evestorm.github.io/posts/13167/)\n\n上篇文章是对 transition过渡 的一个简单介绍和使用。这篇文章就来聊聊具体属性的含义和用法。\n\n<!-- more -->\n\n## transition-property 过渡属性\n\n从上一篇文章能够知道 transition-property 是拿来设置元素中参与过渡的属性的。它的可选值为：\n\n- none 指所有属性都不参与过渡\n- all 指所有属性都参与过渡\n- [IDENT] 指定个别属性参与过渡\n\n下面来看一个案例：\n\n👇温馨提示：为了方便看效果，可点击 `CSS` 按钮折叠代码部分，仅显示页面 👇\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-property-demo1\" src=\"https://codepen.io/JingW/embed/oONwww/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n当你依次将鼠标移入上方演示demo中的三个按钮就会发现，都在各自下方显示出了一段文本。我们想要实现的，就是这段文本的显示需要有一个过渡效果，不要太生硬。最简单的一种实现方案就是鼠标移入按钮前，文本容器的 `height: 0` ，鼠标移入后固定容器高度 `height: 150px` （第一个按钮效果就用的此方案）。但在实际情况中，往往文本是自适应的，高度无法确定，所以很自然的，我们会想到将 `height: 150px` 设置为 `height: auto` ，这样不就能够实现自适应高度的容器过渡了嘛，这就是第二个按钮的一套实现方案。但结果大家都知道了，文本容器不再拥有过渡的动画，而是直接从 `0px` 瞬间变化到 `auto`，这是为什么呢？\n\n**答案**：并不是所有的属性和属性值都能存在过渡动画。\n\n这里特别需要注意的是，如果想要指定某个属性有过渡状态，就需要保证我们能够计算出过渡过程中每个时间点的属性值。\n比如，从 `height: 0;` 过渡到 `height: 150px;` ，过渡时间是 `t` ，那我们可以算出在 `x` 时刻的属性状态是 `height: (150px-0)*x/t;` 。（注：这里公式成立的前提是假设 `transition-timing-function: linear;` ，如果`transition-timing-function` 为其他值，一样可以计算，只不过算法不同）\n然而刚才第二种方案设置了 `height: auto;`，则在 `x` 时刻的属性状态为 `height: (auto-0px)*x/t;` ，显然，这种状态是不存在的、无法被计算的，因此在设置高度变成 `auto` 之后，也自然不会再有过渡动画了。\n\n**解决方案**\n\n第三个按钮的效果就是我们的一种解决方案，在默认状态下，我们不设置文本容器的 `height: 0` ，而是用 `transform: scale(1, 0);` 来代替它，意思是在初始状态下，我们的文本容器比例为宽1:1，高1:0，换句话说，宽为我们设置的宽，但高度为0。在鼠标移入按钮后，用 `transform: scale(1, 1);` 来代替方案二中的 `height: auto` ，设置文本容器的宽高为1，这样就又能出现过渡动画了。\n\n**延伸**\n\n由此进行延伸，再比如日常中最常使用的控制元素显示隐藏的代码是 `display: block;` 和 `display: none;` ，这也是不存在过渡动画的，因此，可以调整改为使用 `opacity: 1;` 和 `opacity: 0;` 来替换。\n\n## transition-duration 过渡花费的时间\n\n这个属性没什么可讲的，用它来设置元素过渡的持续时间\n\n## transition-timing-function 效果曲线\n\n这个属性是设置过渡的动画类型的，换句话说，就是设置在过渡过程中元素值的变化速度。它的可选值包含这样几组：\n\n- ease | linear | ease-in | ease-out | ease-in-out\n- step-start | step-end | steps([, [ start | end ] ]?)\n- cubic-bezier(, , , )\n\n### 预设的五个时间曲线\n\n<iframe height=\"519\" scrolling=\"no\" title=\"transition-timing-function-五个预设时间曲线\" src=\"https://codepen.io/JingW/embed/dLyjoN/?height=519&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 阶跃函数 step\n\n直接上案例吧，看完效果再来讲阶跃函数几个参数的具体含义：\n\n<iframe height=\"413\" scrolling=\"no\" title=\"transition-timing-function-阶跃函数\" src=\"https://codepen.io/JingW/embed/PgwWXd/?height=413&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n实际体验了阶跃函数带来的效果后应该对其有个大概认知了吧。阶跃函数接收两个参数，第一个参数为**正整数**，指定阶跃函数的间隔数，你可以理解为把整个过渡过程拆成若干份儿；第二个参数可选，值为`[ start | end ]`，叫做跃点，指定是在每个间隔的起点还是终点发生阶跃变化，默认值为`end`。\n查看上面案例的css代码，你会发现两种 `steps` 的简写形式：`step-start` 和 `step-end` ，它们分别等同于：`step-start = steps(1, start)` 和 `step-end = steps(1, end)` 。\n\n### cubic-bezier 贝塞尔曲线函数\n\n贝塞尔曲线函数接收四个参数，取值范围是 0 到 1 之间的数值（包括0和1）。\n\n贝塞尔曲线函数，其实定义的是 **属性状态** 与 **时间** 的一个关系函数。如下坐标轴所示：\n\n{% asset_img cubic05000510.png cubic-bezier %}\n\n上图坐标轴中横坐标是时间，纵坐标是属性状态，右上角的坐标是(1,1)。在时间曲线中的每一个点，表示的就是对应时刻下属性的取值，每个点的斜率表示的就是在这个时刻属性的变化速度，因此在时间曲线中**斜率越小**，也就是**越平缓**的地方，表示**属性变化速度越慢**；**斜率越大**，也就是**越陡峭**的地方，表示**属性变化速度越快**。如上图中开始跟结束的时候，斜率都比较小，而中间的阶段，斜率比较大，因此这个曲线表示的就是在变化过程中由慢到快再到慢的一个过程。\n\n回到贝塞尔曲线函数接收的四个参数上，前两个是上图中红色点的坐标(x1,y1)，后两个是图中蓝色点的坐标(x2,y2)，也就是 `cubic-bezier(x1, y1, x2, y2)` 这样的形式。我们可以在 http://cubic-bezier.com/ 这个工具上来调整我们独特的贝塞尔曲线，通过拖拽红色跟蓝色点，可以形成不一样的贝塞尔曲线。我们发现，其实规定取值范围在[0,1]之间，针对的是**x坐标**，也就是**时间**，因为时间如果超过了这个范围，就会出现在同一个时刻对应了两个不同的属性状态，这个是没有意义的；而y坐标是可以超过这个范围的，如下我们通过拖拽两个点形成了这样一个曲线：\n\n{% asset_img cubic55465149.png cubic-bezier %}\n\n它表示的是在过渡过程中属性值会超过终止状态的设定值然后再回到终点位置，表现为回弹的效果。大家可以在 http://cubic-bezier.com/ 上自己拖动两个点尝试一下，最后点击 go 按钮查看效果。\n\n上面两个图的demo效果：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-timing-function-贝塞尔曲线\" src=\"https://codepen.io/JingW/embed/KYwqgb/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## transition-delay 延迟\n\n这个属性同样没啥讲的，用它来设置元素延迟过渡的时间。\n\n## transition 的不足\n\n- 无法在页面加载的时候自动触发，因为只有当属性值发生改变的时候才会触发过渡动画。\n- 无法重复播放过渡动画，除非再次触发过渡事件。\n- 无法设置多种状态（keyframes 只有 from，to），只能从初始状态过渡到终止状态，无法再设置其他的状态。\n- transition 规则作用的是单个属性的过渡状态，不能涉及多个属性，即使定义了 `transition: all 1s ease 0s;` 这样的规则，其对应的每个属性过渡动画也都是相互独立，相当于是定义了很多个 transition 规则，而每个 transition 只作用于一个属性。\n\n## 资源\n\n- [Easing Functions Cheat Sheet](https://easings.net/en#)\n- [cubic-bezier](http://cubic-bezier.com/)\n","source":"_posts/transition过渡（二）.md","raw":"---\ntitle: transition过渡（二）\ntags:\n  - CSS3\ncategories:\n  - 前端\n  - CSS\nabbrlink: 13167\ndate: 2019-02-20 09:31:31\n---\n\n## 传送门\n\n- [transition过渡（一）](https://evestorm.github.io/posts/24967/)\n- [transition过渡（二）](https://evestorm.github.io/posts/13167/)\n\n上篇文章是对 transition过渡 的一个简单介绍和使用。这篇文章就来聊聊具体属性的含义和用法。\n\n<!-- more -->\n\n## transition-property 过渡属性\n\n从上一篇文章能够知道 transition-property 是拿来设置元素中参与过渡的属性的。它的可选值为：\n\n- none 指所有属性都不参与过渡\n- all 指所有属性都参与过渡\n- [IDENT] 指定个别属性参与过渡\n\n下面来看一个案例：\n\n👇温馨提示：为了方便看效果，可点击 `CSS` 按钮折叠代码部分，仅显示页面 👇\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-property-demo1\" src=\"https://codepen.io/JingW/embed/oONwww/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n当你依次将鼠标移入上方演示demo中的三个按钮就会发现，都在各自下方显示出了一段文本。我们想要实现的，就是这段文本的显示需要有一个过渡效果，不要太生硬。最简单的一种实现方案就是鼠标移入按钮前，文本容器的 `height: 0` ，鼠标移入后固定容器高度 `height: 150px` （第一个按钮效果就用的此方案）。但在实际情况中，往往文本是自适应的，高度无法确定，所以很自然的，我们会想到将 `height: 150px` 设置为 `height: auto` ，这样不就能够实现自适应高度的容器过渡了嘛，这就是第二个按钮的一套实现方案。但结果大家都知道了，文本容器不再拥有过渡的动画，而是直接从 `0px` 瞬间变化到 `auto`，这是为什么呢？\n\n**答案**：并不是所有的属性和属性值都能存在过渡动画。\n\n这里特别需要注意的是，如果想要指定某个属性有过渡状态，就需要保证我们能够计算出过渡过程中每个时间点的属性值。\n比如，从 `height: 0;` 过渡到 `height: 150px;` ，过渡时间是 `t` ，那我们可以算出在 `x` 时刻的属性状态是 `height: (150px-0)*x/t;` 。（注：这里公式成立的前提是假设 `transition-timing-function: linear;` ，如果`transition-timing-function` 为其他值，一样可以计算，只不过算法不同）\n然而刚才第二种方案设置了 `height: auto;`，则在 `x` 时刻的属性状态为 `height: (auto-0px)*x/t;` ，显然，这种状态是不存在的、无法被计算的，因此在设置高度变成 `auto` 之后，也自然不会再有过渡动画了。\n\n**解决方案**\n\n第三个按钮的效果就是我们的一种解决方案，在默认状态下，我们不设置文本容器的 `height: 0` ，而是用 `transform: scale(1, 0);` 来代替它，意思是在初始状态下，我们的文本容器比例为宽1:1，高1:0，换句话说，宽为我们设置的宽，但高度为0。在鼠标移入按钮后，用 `transform: scale(1, 1);` 来代替方案二中的 `height: auto` ，设置文本容器的宽高为1，这样就又能出现过渡动画了。\n\n**延伸**\n\n由此进行延伸，再比如日常中最常使用的控制元素显示隐藏的代码是 `display: block;` 和 `display: none;` ，这也是不存在过渡动画的，因此，可以调整改为使用 `opacity: 1;` 和 `opacity: 0;` 来替换。\n\n## transition-duration 过渡花费的时间\n\n这个属性没什么可讲的，用它来设置元素过渡的持续时间\n\n## transition-timing-function 效果曲线\n\n这个属性是设置过渡的动画类型的，换句话说，就是设置在过渡过程中元素值的变化速度。它的可选值包含这样几组：\n\n- ease | linear | ease-in | ease-out | ease-in-out\n- step-start | step-end | steps([, [ start | end ] ]?)\n- cubic-bezier(, , , )\n\n### 预设的五个时间曲线\n\n<iframe height=\"519\" scrolling=\"no\" title=\"transition-timing-function-五个预设时间曲线\" src=\"https://codepen.io/JingW/embed/dLyjoN/?height=519&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 阶跃函数 step\n\n直接上案例吧，看完效果再来讲阶跃函数几个参数的具体含义：\n\n<iframe height=\"413\" scrolling=\"no\" title=\"transition-timing-function-阶跃函数\" src=\"https://codepen.io/JingW/embed/PgwWXd/?height=413&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n实际体验了阶跃函数带来的效果后应该对其有个大概认知了吧。阶跃函数接收两个参数，第一个参数为**正整数**，指定阶跃函数的间隔数，你可以理解为把整个过渡过程拆成若干份儿；第二个参数可选，值为`[ start | end ]`，叫做跃点，指定是在每个间隔的起点还是终点发生阶跃变化，默认值为`end`。\n查看上面案例的css代码，你会发现两种 `steps` 的简写形式：`step-start` 和 `step-end` ，它们分别等同于：`step-start = steps(1, start)` 和 `step-end = steps(1, end)` 。\n\n### cubic-bezier 贝塞尔曲线函数\n\n贝塞尔曲线函数接收四个参数，取值范围是 0 到 1 之间的数值（包括0和1）。\n\n贝塞尔曲线函数，其实定义的是 **属性状态** 与 **时间** 的一个关系函数。如下坐标轴所示：\n\n{% asset_img cubic05000510.png cubic-bezier %}\n\n上图坐标轴中横坐标是时间，纵坐标是属性状态，右上角的坐标是(1,1)。在时间曲线中的每一个点，表示的就是对应时刻下属性的取值，每个点的斜率表示的就是在这个时刻属性的变化速度，因此在时间曲线中**斜率越小**，也就是**越平缓**的地方，表示**属性变化速度越慢**；**斜率越大**，也就是**越陡峭**的地方，表示**属性变化速度越快**。如上图中开始跟结束的时候，斜率都比较小，而中间的阶段，斜率比较大，因此这个曲线表示的就是在变化过程中由慢到快再到慢的一个过程。\n\n回到贝塞尔曲线函数接收的四个参数上，前两个是上图中红色点的坐标(x1,y1)，后两个是图中蓝色点的坐标(x2,y2)，也就是 `cubic-bezier(x1, y1, x2, y2)` 这样的形式。我们可以在 http://cubic-bezier.com/ 这个工具上来调整我们独特的贝塞尔曲线，通过拖拽红色跟蓝色点，可以形成不一样的贝塞尔曲线。我们发现，其实规定取值范围在[0,1]之间，针对的是**x坐标**，也就是**时间**，因为时间如果超过了这个范围，就会出现在同一个时刻对应了两个不同的属性状态，这个是没有意义的；而y坐标是可以超过这个范围的，如下我们通过拖拽两个点形成了这样一个曲线：\n\n{% asset_img cubic55465149.png cubic-bezier %}\n\n它表示的是在过渡过程中属性值会超过终止状态的设定值然后再回到终点位置，表现为回弹的效果。大家可以在 http://cubic-bezier.com/ 上自己拖动两个点尝试一下，最后点击 go 按钮查看效果。\n\n上面两个图的demo效果：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-timing-function-贝塞尔曲线\" src=\"https://codepen.io/JingW/embed/KYwqgb/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## transition-delay 延迟\n\n这个属性同样没啥讲的，用它来设置元素延迟过渡的时间。\n\n## transition 的不足\n\n- 无法在页面加载的时候自动触发，因为只有当属性值发生改变的时候才会触发过渡动画。\n- 无法重复播放过渡动画，除非再次触发过渡事件。\n- 无法设置多种状态（keyframes 只有 from，to），只能从初始状态过渡到终止状态，无法再设置其他的状态。\n- transition 规则作用的是单个属性的过渡状态，不能涉及多个属性，即使定义了 `transition: all 1s ease 0s;` 这样的规则，其对应的每个属性过渡动画也都是相互独立，相当于是定义了很多个 transition 规则，而每个 transition 只作用于一个属性。\n\n## 资源\n\n- [Easing Functions Cheat Sheet](https://easings.net/en#)\n- [cubic-bezier](http://cubic-bezier.com/)\n","slug":"transition过渡（二）","published":1,"updated":"2020-11-22T01:43:27.011Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyff002xkhsr38d60r02","content":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/24967/\">transition过渡（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/13167/\">transition过渡（二）</a></li>\n</ul>\n<p>上篇文章是对 transition过渡 的一个简单介绍和使用。这篇文章就来聊聊具体属性的含义和用法。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"transition-property-过渡属性\"><a href=\"#transition-property-过渡属性\" class=\"headerlink\" title=\"transition-property 过渡属性\"></a>transition-property 过渡属性</h2><p>从上一篇文章能够知道 transition-property 是拿来设置元素中参与过渡的属性的。它的可选值为：</p>\n<ul>\n<li>none 指所有属性都不参与过渡</li>\n<li>all 指所有属性都参与过渡</li>\n<li>[IDENT] 指定个别属性参与过渡</li>\n</ul>\n<p>下面来看一个案例：</p>\n<p>👇温馨提示：为了方便看效果，可点击 <code>CSS</code> 按钮折叠代码部分，仅显示页面 👇</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-property-demo1\" src=\"https://codepen.io/JingW/embed/oONwww/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>当你依次将鼠标移入上方演示demo中的三个按钮就会发现，都在各自下方显示出了一段文本。我们想要实现的，就是这段文本的显示需要有一个过渡效果，不要太生硬。最简单的一种实现方案就是鼠标移入按钮前，文本容器的 <code>height: 0</code> ，鼠标移入后固定容器高度 <code>height: 150px</code> （第一个按钮效果就用的此方案）。但在实际情况中，往往文本是自适应的，高度无法确定，所以很自然的，我们会想到将 <code>height: 150px</code> 设置为 <code>height: auto</code> ，这样不就能够实现自适应高度的容器过渡了嘛，这就是第二个按钮的一套实现方案。但结果大家都知道了，文本容器不再拥有过渡的动画，而是直接从 <code>0px</code> 瞬间变化到 <code>auto</code>，这是为什么呢？</p>\n<p><strong>答案</strong>：并不是所有的属性和属性值都能存在过渡动画。</p>\n<p>这里特别需要注意的是，如果想要指定某个属性有过渡状态，就需要保证我们能够计算出过渡过程中每个时间点的属性值。<br>比如，从 <code>height: 0;</code> 过渡到 <code>height: 150px;</code> ，过渡时间是 <code>t</code> ，那我们可以算出在 <code>x</code> 时刻的属性状态是 <code>height: (150px-0)*x/t;</code> 。（注：这里公式成立的前提是假设 <code>transition-timing-function: linear;</code> ，如果<code>transition-timing-function</code> 为其他值，一样可以计算，只不过算法不同）<br>然而刚才第二种方案设置了 <code>height: auto;</code>，则在 <code>x</code> 时刻的属性状态为 <code>height: (auto-0px)*x/t;</code> ，显然，这种状态是不存在的、无法被计算的，因此在设置高度变成 <code>auto</code> 之后，也自然不会再有过渡动画了。</p>\n<p><strong>解决方案</strong></p>\n<p>第三个按钮的效果就是我们的一种解决方案，在默认状态下，我们不设置文本容器的 <code>height: 0</code> ，而是用 <code>transform: scale(1, 0);</code> 来代替它，意思是在初始状态下，我们的文本容器比例为宽1:1，高1:0，换句话说，宽为我们设置的宽，但高度为0。在鼠标移入按钮后，用 <code>transform: scale(1, 1);</code> 来代替方案二中的 <code>height: auto</code> ，设置文本容器的宽高为1，这样就又能出现过渡动画了。</p>\n<p><strong>延伸</strong></p>\n<p>由此进行延伸，再比如日常中最常使用的控制元素显示隐藏的代码是 <code>display: block;</code> 和 <code>display: none;</code> ，这也是不存在过渡动画的，因此，可以调整改为使用 <code>opacity: 1;</code> 和 <code>opacity: 0;</code> 来替换。</p>\n<h2 id=\"transition-duration-过渡花费的时间\"><a href=\"#transition-duration-过渡花费的时间\" class=\"headerlink\" title=\"transition-duration 过渡花费的时间\"></a>transition-duration 过渡花费的时间</h2><p>这个属性没什么可讲的，用它来设置元素过渡的持续时间</p>\n<h2 id=\"transition-timing-function-效果曲线\"><a href=\"#transition-timing-function-效果曲线\" class=\"headerlink\" title=\"transition-timing-function 效果曲线\"></a>transition-timing-function 效果曲线</h2><p>这个属性是设置过渡的动画类型的，换句话说，就是设置在过渡过程中元素值的变化速度。它的可选值包含这样几组：</p>\n<ul>\n<li>ease | linear | ease-in | ease-out | ease-in-out</li>\n<li>step-start | step-end | steps([, [ start | end ] ]?)</li>\n<li>cubic-bezier(, , , )</li>\n</ul>\n<h3 id=\"预设的五个时间曲线\"><a href=\"#预设的五个时间曲线\" class=\"headerlink\" title=\"预设的五个时间曲线\"></a>预设的五个时间曲线</h3><iframe height=\"519\" scrolling=\"no\" title=\"transition-timing-function-五个预设时间曲线\" src=\"https://codepen.io/JingW/embed/dLyjoN/?height=519&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"阶跃函数-step\"><a href=\"#阶跃函数-step\" class=\"headerlink\" title=\"阶跃函数 step\"></a>阶跃函数 step</h3><p>直接上案例吧，看完效果再来讲阶跃函数几个参数的具体含义：</p>\n<iframe height=\"413\" scrolling=\"no\" title=\"transition-timing-function-阶跃函数\" src=\"https://codepen.io/JingW/embed/PgwWXd/?height=413&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>实际体验了阶跃函数带来的效果后应该对其有个大概认知了吧。阶跃函数接收两个参数，第一个参数为<strong>正整数</strong>，指定阶跃函数的间隔数，你可以理解为把整个过渡过程拆成若干份儿；第二个参数可选，值为<code>[ start | end ]</code>，叫做跃点，指定是在每个间隔的起点还是终点发生阶跃变化，默认值为<code>end</code>。<br>查看上面案例的css代码，你会发现两种 <code>steps</code> 的简写形式：<code>step-start</code> 和 <code>step-end</code> ，它们分别等同于：<code>step-start = steps(1, start)</code> 和 <code>step-end = steps(1, end)</code> 。</p>\n<h3 id=\"cubic-bezier-贝塞尔曲线函数\"><a href=\"#cubic-bezier-贝塞尔曲线函数\" class=\"headerlink\" title=\"cubic-bezier 贝塞尔曲线函数\"></a>cubic-bezier 贝塞尔曲线函数</h3><p>贝塞尔曲线函数接收四个参数，取值范围是 0 到 1 之间的数值（包括0和1）。</p>\n<p>贝塞尔曲线函数，其实定义的是 <strong>属性状态</strong> 与 <strong>时间</strong> 的一个关系函数。如下坐标轴所示：</p>\n<img src=\"/posts/13167/cubic05000510.png\" class=\"\" title=\"cubic-bezier\">\n\n<p>上图坐标轴中横坐标是时间，纵坐标是属性状态，右上角的坐标是(1,1)。在时间曲线中的每一个点，表示的就是对应时刻下属性的取值，每个点的斜率表示的就是在这个时刻属性的变化速度，因此在时间曲线中<strong>斜率越小</strong>，也就是<strong>越平缓</strong>的地方，表示<strong>属性变化速度越慢</strong>；<strong>斜率越大</strong>，也就是<strong>越陡峭</strong>的地方，表示<strong>属性变化速度越快</strong>。如上图中开始跟结束的时候，斜率都比较小，而中间的阶段，斜率比较大，因此这个曲线表示的就是在变化过程中由慢到快再到慢的一个过程。</p>\n<p>回到贝塞尔曲线函数接收的四个参数上，前两个是上图中红色点的坐标(x1,y1)，后两个是图中蓝色点的坐标(x2,y2)，也就是 <code>cubic-bezier(x1, y1, x2, y2)</code> 这样的形式。我们可以在 <a href=\"http://cubic-bezier.com/\">http://cubic-bezier.com/</a> 这个工具上来调整我们独特的贝塞尔曲线，通过拖拽红色跟蓝色点，可以形成不一样的贝塞尔曲线。我们发现，其实规定取值范围在[0,1]之间，针对的是<strong>x坐标</strong>，也就是<strong>时间</strong>，因为时间如果超过了这个范围，就会出现在同一个时刻对应了两个不同的属性状态，这个是没有意义的；而y坐标是可以超过这个范围的，如下我们通过拖拽两个点形成了这样一个曲线：</p>\n<img src=\"/posts/13167/cubic55465149.png\" class=\"\" title=\"cubic-bezier\">\n\n<p>它表示的是在过渡过程中属性值会超过终止状态的设定值然后再回到终点位置，表现为回弹的效果。大家可以在 <a href=\"http://cubic-bezier.com/\">http://cubic-bezier.com/</a> 上自己拖动两个点尝试一下，最后点击 go 按钮查看效果。</p>\n<p>上面两个图的demo效果：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-timing-function-贝塞尔曲线\" src=\"https://codepen.io/JingW/embed/KYwqgb/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"transition-delay-延迟\"><a href=\"#transition-delay-延迟\" class=\"headerlink\" title=\"transition-delay 延迟\"></a>transition-delay 延迟</h2><p>这个属性同样没啥讲的，用它来设置元素延迟过渡的时间。</p>\n<h2 id=\"transition-的不足\"><a href=\"#transition-的不足\" class=\"headerlink\" title=\"transition 的不足\"></a>transition 的不足</h2><ul>\n<li>无法在页面加载的时候自动触发，因为只有当属性值发生改变的时候才会触发过渡动画。</li>\n<li>无法重复播放过渡动画，除非再次触发过渡事件。</li>\n<li>无法设置多种状态（keyframes 只有 from，to），只能从初始状态过渡到终止状态，无法再设置其他的状态。</li>\n<li>transition 规则作用的是单个属性的过渡状态，不能涉及多个属性，即使定义了 <code>transition: all 1s ease 0s;</code> 这样的规则，其对应的每个属性过渡动画也都是相互独立，相当于是定义了很多个 transition 规则，而每个 transition 只作用于一个属性。</li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://easings.net/en#\">Easing Functions Cheat Sheet</a></li>\n<li><a href=\"http://cubic-bezier.com/\">cubic-bezier</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"传送门\"><a href=\"#传送门\" class=\"headerlink\" title=\"传送门\"></a>传送门</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/24967/\">transition过渡（一）</a></li>\n<li><a href=\"https://evestorm.github.io/posts/13167/\">transition过渡（二）</a></li>\n</ul>\n<p>上篇文章是对 transition过渡 的一个简单介绍和使用。这篇文章就来聊聊具体属性的含义和用法。</p>","more":"<h2 id=\"transition-property-过渡属性\"><a href=\"#transition-property-过渡属性\" class=\"headerlink\" title=\"transition-property 过渡属性\"></a>transition-property 过渡属性</h2><p>从上一篇文章能够知道 transition-property 是拿来设置元素中参与过渡的属性的。它的可选值为：</p>\n<ul>\n<li>none 指所有属性都不参与过渡</li>\n<li>all 指所有属性都参与过渡</li>\n<li>[IDENT] 指定个别属性参与过渡</li>\n</ul>\n<p>下面来看一个案例：</p>\n<p>👇温馨提示：为了方便看效果，可点击 <code>CSS</code> 按钮折叠代码部分，仅显示页面 👇</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-property-demo1\" src=\"https://codepen.io/JingW/embed/oONwww/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>当你依次将鼠标移入上方演示demo中的三个按钮就会发现，都在各自下方显示出了一段文本。我们想要实现的，就是这段文本的显示需要有一个过渡效果，不要太生硬。最简单的一种实现方案就是鼠标移入按钮前，文本容器的 <code>height: 0</code> ，鼠标移入后固定容器高度 <code>height: 150px</code> （第一个按钮效果就用的此方案）。但在实际情况中，往往文本是自适应的，高度无法确定，所以很自然的，我们会想到将 <code>height: 150px</code> 设置为 <code>height: auto</code> ，这样不就能够实现自适应高度的容器过渡了嘛，这就是第二个按钮的一套实现方案。但结果大家都知道了，文本容器不再拥有过渡的动画，而是直接从 <code>0px</code> 瞬间变化到 <code>auto</code>，这是为什么呢？</p>\n<p><strong>答案</strong>：并不是所有的属性和属性值都能存在过渡动画。</p>\n<p>这里特别需要注意的是，如果想要指定某个属性有过渡状态，就需要保证我们能够计算出过渡过程中每个时间点的属性值。<br>比如，从 <code>height: 0;</code> 过渡到 <code>height: 150px;</code> ，过渡时间是 <code>t</code> ，那我们可以算出在 <code>x</code> 时刻的属性状态是 <code>height: (150px-0)*x/t;</code> 。（注：这里公式成立的前提是假设 <code>transition-timing-function: linear;</code> ，如果<code>transition-timing-function</code> 为其他值，一样可以计算，只不过算法不同）<br>然而刚才第二种方案设置了 <code>height: auto;</code>，则在 <code>x</code> 时刻的属性状态为 <code>height: (auto-0px)*x/t;</code> ，显然，这种状态是不存在的、无法被计算的，因此在设置高度变成 <code>auto</code> 之后，也自然不会再有过渡动画了。</p>\n<p><strong>解决方案</strong></p>\n<p>第三个按钮的效果就是我们的一种解决方案，在默认状态下，我们不设置文本容器的 <code>height: 0</code> ，而是用 <code>transform: scale(1, 0);</code> 来代替它，意思是在初始状态下，我们的文本容器比例为宽1:1，高1:0，换句话说，宽为我们设置的宽，但高度为0。在鼠标移入按钮后，用 <code>transform: scale(1, 1);</code> 来代替方案二中的 <code>height: auto</code> ，设置文本容器的宽高为1，这样就又能出现过渡动画了。</p>\n<p><strong>延伸</strong></p>\n<p>由此进行延伸，再比如日常中最常使用的控制元素显示隐藏的代码是 <code>display: block;</code> 和 <code>display: none;</code> ，这也是不存在过渡动画的，因此，可以调整改为使用 <code>opacity: 1;</code> 和 <code>opacity: 0;</code> 来替换。</p>\n<h2 id=\"transition-duration-过渡花费的时间\"><a href=\"#transition-duration-过渡花费的时间\" class=\"headerlink\" title=\"transition-duration 过渡花费的时间\"></a>transition-duration 过渡花费的时间</h2><p>这个属性没什么可讲的，用它来设置元素过渡的持续时间</p>\n<h2 id=\"transition-timing-function-效果曲线\"><a href=\"#transition-timing-function-效果曲线\" class=\"headerlink\" title=\"transition-timing-function 效果曲线\"></a>transition-timing-function 效果曲线</h2><p>这个属性是设置过渡的动画类型的，换句话说，就是设置在过渡过程中元素值的变化速度。它的可选值包含这样几组：</p>\n<ul>\n<li>ease | linear | ease-in | ease-out | ease-in-out</li>\n<li>step-start | step-end | steps([, [ start | end ] ]?)</li>\n<li>cubic-bezier(, , , )</li>\n</ul>\n<h3 id=\"预设的五个时间曲线\"><a href=\"#预设的五个时间曲线\" class=\"headerlink\" title=\"预设的五个时间曲线\"></a>预设的五个时间曲线</h3><iframe height=\"519\" scrolling=\"no\" title=\"transition-timing-function-五个预设时间曲线\" src=\"https://codepen.io/JingW/embed/dLyjoN/?height=519&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"阶跃函数-step\"><a href=\"#阶跃函数-step\" class=\"headerlink\" title=\"阶跃函数 step\"></a>阶跃函数 step</h3><p>直接上案例吧，看完效果再来讲阶跃函数几个参数的具体含义：</p>\n<iframe height=\"413\" scrolling=\"no\" title=\"transition-timing-function-阶跃函数\" src=\"https://codepen.io/JingW/embed/PgwWXd/?height=413&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>实际体验了阶跃函数带来的效果后应该对其有个大概认知了吧。阶跃函数接收两个参数，第一个参数为<strong>正整数</strong>，指定阶跃函数的间隔数，你可以理解为把整个过渡过程拆成若干份儿；第二个参数可选，值为<code>[ start | end ]</code>，叫做跃点，指定是在每个间隔的起点还是终点发生阶跃变化，默认值为<code>end</code>。<br>查看上面案例的css代码，你会发现两种 <code>steps</code> 的简写形式：<code>step-start</code> 和 <code>step-end</code> ，它们分别等同于：<code>step-start = steps(1, start)</code> 和 <code>step-end = steps(1, end)</code> 。</p>\n<h3 id=\"cubic-bezier-贝塞尔曲线函数\"><a href=\"#cubic-bezier-贝塞尔曲线函数\" class=\"headerlink\" title=\"cubic-bezier 贝塞尔曲线函数\"></a>cubic-bezier 贝塞尔曲线函数</h3><p>贝塞尔曲线函数接收四个参数，取值范围是 0 到 1 之间的数值（包括0和1）。</p>\n<p>贝塞尔曲线函数，其实定义的是 <strong>属性状态</strong> 与 <strong>时间</strong> 的一个关系函数。如下坐标轴所示：</p>\n<img src=\"/posts/13167/cubic05000510.png\" class=\"\" title=\"cubic-bezier\">\n\n<p>上图坐标轴中横坐标是时间，纵坐标是属性状态，右上角的坐标是(1,1)。在时间曲线中的每一个点，表示的就是对应时刻下属性的取值，每个点的斜率表示的就是在这个时刻属性的变化速度，因此在时间曲线中<strong>斜率越小</strong>，也就是<strong>越平缓</strong>的地方，表示<strong>属性变化速度越慢</strong>；<strong>斜率越大</strong>，也就是<strong>越陡峭</strong>的地方，表示<strong>属性变化速度越快</strong>。如上图中开始跟结束的时候，斜率都比较小，而中间的阶段，斜率比较大，因此这个曲线表示的就是在变化过程中由慢到快再到慢的一个过程。</p>\n<p>回到贝塞尔曲线函数接收的四个参数上，前两个是上图中红色点的坐标(x1,y1)，后两个是图中蓝色点的坐标(x2,y2)，也就是 <code>cubic-bezier(x1, y1, x2, y2)</code> 这样的形式。我们可以在 <a href=\"http://cubic-bezier.com/\">http://cubic-bezier.com/</a> 这个工具上来调整我们独特的贝塞尔曲线，通过拖拽红色跟蓝色点，可以形成不一样的贝塞尔曲线。我们发现，其实规定取值范围在[0,1]之间，针对的是<strong>x坐标</strong>，也就是<strong>时间</strong>，因为时间如果超过了这个范围，就会出现在同一个时刻对应了两个不同的属性状态，这个是没有意义的；而y坐标是可以超过这个范围的，如下我们通过拖拽两个点形成了这样一个曲线：</p>\n<img src=\"/posts/13167/cubic55465149.png\" class=\"\" title=\"cubic-bezier\">\n\n<p>它表示的是在过渡过程中属性值会超过终止状态的设定值然后再回到终点位置，表现为回弹的效果。大家可以在 <a href=\"http://cubic-bezier.com/\">http://cubic-bezier.com/</a> 上自己拖动两个点尝试一下，最后点击 go 按钮查看效果。</p>\n<p>上面两个图的demo效果：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"transition-timing-function-贝塞尔曲线\" src=\"https://codepen.io/JingW/embed/KYwqgb/?height=265&amp;theme-id=0&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"transition-delay-延迟\"><a href=\"#transition-delay-延迟\" class=\"headerlink\" title=\"transition-delay 延迟\"></a>transition-delay 延迟</h2><p>这个属性同样没啥讲的，用它来设置元素延迟过渡的时间。</p>\n<h2 id=\"transition-的不足\"><a href=\"#transition-的不足\" class=\"headerlink\" title=\"transition 的不足\"></a>transition 的不足</h2><ul>\n<li>无法在页面加载的时候自动触发，因为只有当属性值发生改变的时候才会触发过渡动画。</li>\n<li>无法重复播放过渡动画，除非再次触发过渡事件。</li>\n<li>无法设置多种状态（keyframes 只有 from，to），只能从初始状态过渡到终止状态，无法再设置其他的状态。</li>\n<li>transition 规则作用的是单个属性的过渡状态，不能涉及多个属性，即使定义了 <code>transition: all 1s ease 0s;</code> 这样的规则，其对应的每个属性过渡动画也都是相互独立，相当于是定义了很多个 transition 规则，而每个 transition 只作用于一个属性。</li>\n</ul>\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"https://easings.net/en#\">Easing Functions Cheat Sheet</a></li>\n<li><a href=\"http://cubic-bezier.com/\">cubic-bezier</a></li>\n</ul>"},{"title":"【转载】20个ChromeDevTools调试技巧","abbrlink":709,"date":"2019-11-17T07:38:03.000Z","_content":"\n**译者按：** Chrome DevTools 很强大，甚至可以替代 IDE 了！\n\n- 原文: [Art of debugging with Chrome DevTools](https://medium.com/frontmen/art-of-debugging-with-chrome-devtools-ab7b5fd8e0b4)\n- 译者: [Fundebug](https://www.fundebug.com/)\n\n**为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。**\n\n**小编推荐：[Fundebug](https://www.fundebug.com/)专注于 JavaScript、微信小程序、微信小游戏，Node.js 和 Java 线上 bug 实时监控。真的是一个很好用的 bug 监控服务，众多大佬公司都在使用。**\n\n谷歌开发者工具提供了一系列的功能来帮助开发者高效 Debug 网页应用，让他们可以更快地查找和修复 bug。在谷歌的开发者工具中，有非常多有用的小工具，但是很多开发者并不知道。通过这篇文章，我把我常用的那些高效 Debug 的 Chrome 开发者工具的功能分享给大家。\n\n_简洁起见，接下来我会使用`开发者工具`来指代`谷歌开发者工具`_。\n\n在我们开始之前，你需要做一些准备工作。\n\n<!-- more -->\n\n### **使用金丝雀版**\n\n如果你想使用谷歌最新的版本和开发者工具，你可以下载[金丝雀版本](https://www.google.com/chrome/canary/)，甚至把它设置为开发默认打开的浏览器。金丝雀版本旨在为早期接受者提供最新的更新。它可能不稳定，但是大多数时候是没问题的。你要习惯去使用最新最强的谷歌浏览器。\n\n**1. 开启开发者工具的实验性功能**\n\n你可以到`chrome://flags`页面，然后开启`Developer Tools experiments`选项。\n\n当开启后，在开发者工具的设置页面，可以发现多了一个`Experiments`选项。如果我使用的一些功能你没有看到，那么请到`Experiments`窗口打开。\n\n**2.超级实验性功能**\n\n如果我使用到的功能在`Experiments`列表没有，那么它可能是一个 WIP 功能(WIP 指 working in progress)。你可以这样开启：页面处在`Experiments`界面，连续敲击`shift`键 6 次来开启 WIP 功能。\n\n{% asset_img Experiments.gif Experiments %}\n\n### **Console**\n\n当 Debug 的时候，我们绝大部分时间是在和 Console 打交道。我们往往在代码中插入很多 Console logs，通过打印变量值来 debug。鉴于 Console 对于我们这么重要，很有必要了解所有开发者工具提供的相关的 APIs 和快捷键。\n\n**3. 总是打印对象**\n\n我的第一个建议其实和开发者工具没有关系，而是我一直使用的一个技巧。在使用`console.log();`的时候，不仅仅打印变量，而是要打印对象，用大括号(`{}`)将变量包围起来。这样的优点是不仅会把变量的值打印，同时还会将变量名打印出来。\n\n{% asset_img log.png log %}\n{% asset_img superlog.png superlog %}\n\n**4. 使用 console.table 来打印多条目数据**\n\n如果你要打印的变量是一个数组，每一个元素都是一个对象。我建议你使用`console.table`来打印，其表格化的呈现更加美观易读。\n\n{% asset_img logtable.png logtable %}\n\n**5. 给 log 加点颜色**\n\nlog 有时候变得非常多，包含你自己的、一些第三方扩展或者浏览器的 logs。除了使用过滤器(filter)以外，你还可以使用颜色来更好地区分。\n\n{% asset_img logcolor.png logcolor %}\n\n**6. $ 和 $$**\n\n如果你在 console 下没有任何库使用`$`和`$$`，那么你可以使用它们分别作为`document.querySelector()` 和 `document.querySelectorAll()`的快捷键。\n\n除了提供了一个更加快捷的方式外，还有一个好处，`$$`返回一个数组，而不是[array-like](http://2ality.com/2013/05/quirk-array-like-objects.html)的[NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList). 所以你可以直接使用[map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)和[filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) 函数。\n\n你可以使用`$$`检查页面中的无效链接：\n\n```js\nPromise.all(\n  $$('a')\n    .map(link => link.href)\n    .map(href => fetch(href))\n)\n  .then(() => console.log('All links working'))\n  .catch(() => console.error('Some links are broken'));\n```\n\n**7. $0**\n\n如果你想引用某个 DOM 元素，使用`$0`。`$0`指向你当前在 Element 中选中的元素。如果指定了`$0`，`$1`指向之前选中的元素。以此类推，直到`$4`都可以使用。\n\n**8. $\\_**\n\n`$_`记录了最后一次在 Console 计算的表达式。\n\n**9. getEventListeners()**\n\n`getEventListeners(domElement)` 返回在 DOM 元素上注册的所有的事件。请看下面的例子：\n\n{% asset_img getEventListeners.gif getEventListeners %}\n\n你也许注意到了，当我在 console 里输入表达式的时候，其结果立即被计算出来了。你可以看到我并没有敲击 Enter 键，而结果已经显示出来。这个是金丝雀版本的一个新功能，叫做”Eager Evaluation”。\n\n{% asset_img EagerEvaluation.png EagerEvaluation %}\n\n**10. debug(fn)**\n\n在上面的例子中，如果你想在点击按钮后的执行过程中暂停，你可以使用`debug`函数。`debug(fn)`接收一个函数作为参数，当每次该函数被调用时，Debugger 就会在该函数的第一行中断执行。\n\n想象一下你要 debug 一个按钮的问题，但是你不知道这个按钮对应的事件函数在代码中什么位置。除了去大量的源代码中慢慢寻找之外，还有一个巧妙的方法。使用`getEventListeners`函数，然后将`debug`方法注入进去。这样，当你点击按钮的时候，就会在该函数的第一行停下来。\n\n**11. copy(obj)**\n\n`copy(anything)` 是一个很有用的工具函数方便你将任何东西拷贝到系统的粘贴板暂存。\n\n给`copy`函数传入一个没有格式的 JSON，会返回格式化的结果：\n\n{% asset_img copy.gif copy %}\n\n**12. Top-level await**\n\n`async/await` 使得异步操作变得更加容易和可读。唯一的问题在于`await`需要在 async 函数中使用。如果我们要在 DevTools 的控制台使用，需要一些特殊的处理，使用**I**mmediately **I**nvoked **A**sync **F**unction **E**xpression (IIAFE). 一点都不方便。好在 DevTools 已经支持直接使用 await 了。\n\n{% asset_img await.png await %}\n\n### Debugging in the Sources panel\n\n在 source 面板，使用 breakpoints，stepping-into, stepping-over 等方式，你可以很好地掌控程序的执行状态，来发现代码问题。接下里我不会介绍大家都知道的基础内容，而是一些我经常使用的建议和技巧。\n\n**13. 开启 auto-pretty print**\n\n在金丝雀版本的实验模式下，你可以开启自动美化代码模式。\n\n{% asset_img autopre.png autopre %}\n\n**14. 使用条件断点在生产环境中注入 console logs**\n\n断点是一个很棒的功能。但还有一个更棒的：条件断点。只有当设定的条件满足的时候，中断才会执行。也就是说 DevTools 并不会每次都中断程序的执行，而只是在你想要它中断的时候才中断。想了解更多：查看[这里](https://developers.google.com/web/updates/2015/07/set-a-breakpoint-based-on-a-certain-condition).\n\n在生产环境下，因为不能修改源代码，我喜欢使用条件断点来注入 console.log。如果我的断点仅仅是一个 console.log，DevTools 不会中断，因为 console.log 返回 undefined,，是一个 false 的值。但是它会执行我注入的表达式，可以看到输出结果。\n\n[![img](【转载】20个ChromeDevTools调试技巧/insertlog.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/insertlog.gif)\n{% asset_img insertlog.gif insertlog %}\n\n为什么不直接使用普通的断点，并且查看变量呢？有时候我并不想这样做。比如，当我在分析那些频繁执行的操作，例如触摸或则滑动。我并不想每一次都导致 Debugger 触发程序中断，但是我想看到程序输出的结果。\n\n**15. 暂停 UI 在 Hover 状态下的展示结果**\n\n我们很难去检查一个只有在 Hover 状态下展示的元素。比如，如何去检查一个 tooltip？如果你右键并选择检查，元素已经消失了。那么有办法吗？\n\n我是这么操作的：\n\n1. 打开 sources 面板\n2. 显示 tooltip\n3. 使用快捷键来暂停脚本执行(将鼠标停留在暂停的图标上查看快捷键)\n4. 回到 Elements 面板，然后像通常一样去检查元素\n\n[![img](【转载】20个ChromeDevTools调试技巧/tooltips.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/tooltips.gif)\n{% asset_img tooltips.gif tooltips %}\n\n**16. XHR breakpoints**\n\n如果想要理解一个请求是如何执行的，可以使用 sources 面板的 XHR breakpoints。\n\n**17. 使用 DevTools 作为 IDE**\n\nDevTools 的 source 面板可以说相当强大。你可以快速查找，跳转到某一行，某个函数，执行一段代码，使用多行光标等等。这些功能在[这篇 medium 文章中有详细描述](https://medium.com/google-developers/devtools-tips-for-sublime-text-users-cdd559ee80f8)。\n\n既然如此，为啥不把整个开发都搬到这里呢。这样就不需要浪费时间切换 IDE 和浏览器了。\n\n如果你有一个使用[create-react-app](https://github.com/facebook/create-react-app)或则[vue-cli](https://github.com/vuejs/vue-cli)构建的项目，你可以直接把整个文件夹拖到 Sources 面板下。DevTools 会自动对所有文件做映射。所以，你可以在 DevTools 下修改文件并立即查看。这样，整个开发效率，特别是 Debugging 效率绝对提高了。\n\n{% asset_img ide.gif ide %}\n\n**18. 使用 network overrides 来简单调试生产代码**\n\n如果你正在 Debugging 一个生产环境下面的 bug，你可以使用`network overrides`来调试，而不用在本地搭建整个配置。\n\n你可以很容易将任何远程的资源下载一份本地的版本，然后可以在 DevTools 下编辑，并且 DevTools 会更新展示你编辑后的文件。\n\n{% asset_img networkoverrides.gif networkoverrides %}\n\n在生产环境下，也可以很容易 Debugging，并且做一些性能上的测试也变得容易。\n\n### **19. Nodejs debugging**\n\n如果你想使用 DevTools 的 Debugger 来 debug Node.js 应用，你可以使用`--inspect-brk` flag 来开启：\n\n```shell\nnode --inspect-brk script.js\n```\n\n跳转到`chrome://inspect`页面，在`Remote Target`选项，可以看到 Node 程序。\n\n并且，在 DevTools 中你会看到一个绿色的 Node 图标，点击图标会打开针对 Node 的 Chrome Debugger。\n\n[![img](【转载】20个ChromeDevTools调试技巧/node-debuger.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/node-debuger.gif)\n{% asset_img node-debuger.gif node-debuger %}\n\n如果你想要用 DevTools Debugger 来 debug 你的单元测试，你需要这样调用：\n\n```\ncopynode --inspect-brk ./node_modules/.bin/jest\n```\n\n不过这样做其实很麻烦，我们需要自己找到相应的路径。 GoogleChromeLabs 最近发布了一个新的工具非常好用，叫做：[ndb](https://github.com/GoogleChromeLabs/ndb)。使用 ndb，你只需要：\n\n```js\nndb npx jest\n```\n\n如果你有一个自定义的脚本，你可以这样调用：\n\n```js\nndb npm run unit\n```\n\n更妙的是，如果你在一个有配置`package.json`的项目下调用`ndb`，他甚至会自动分析 package.json 中的脚本，方便你直接使用 DevTools。\n\n**20. 使用 Snippets 来辅助 Debugging**\n\nDevTools 提供了一个可以创建和保存小段代码的工具，我很喜欢用它们来加速我的工作。比如 lodashify —  可以快速给任何应用添加 lodash。\n\n```js\n(function () {\n  'use strict';\n\n  var element = document.createElement('script');\n  element.src =\n    'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.15.0/lodash.min.js';\n  element.type = 'text/javascript';\n  document.head.appendChild(element);\n})();\n```\n\n另一个小的工具函数式用来增强对象的属性，每次被访问或则修改，它都会提供给我充分的信息，比如谁访问了，谁更改了它。在 Debugging 的时候，非常有用。\n\n```js\nconst traceProperty = (object, property) => {\n  let value = object[property];\n  Object.defineProperty(object, property, {\n    get() {\n      console.trace(`${property} requested`);\n      return value;\n    },\n    set(newValue) {\n      console.trace(`setting ${property} to `, newValue);\n      value = newValue;\n    }\n  });\n};\n```\n\n[![img](【转载】20个ChromeDevTools调试技巧/methodtools.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/methodtools.gif)\n{% asset_img methodtools.gif methodtools %}\n\n还有很多非常有用的[devtools 代码片段](http://bgrins.github.io/devtools-snippets/)，你可以直接拿去使用。\n\n### 关于 Fundebug\n\n[Fundebug](https://www.fundebug.com/)专注于 JavaScript、微信小程序、微信小游戏、支付宝小程序、React Native、Node.js 和 Java 实时 BUG 监控。 自从 2016 年双十一正式上线，Fundebug 累计处理了 6 亿+错误事件，得到了 Google、360、金山软件等众多知名用户的认可。欢迎免费试用！\n\n版权声明:\n转载时请注明作者 Fundebug 以及本文地址：\nhttps://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/\n","source":"_posts/【转载】20个ChromeDevTools调试技巧.md","raw":"---\ntitle: 【转载】20个ChromeDevTools调试技巧\ntags:\n  - 转载\n  - 技巧\ncategories:\n  - 前端\n  - 浏览器\nabbrlink: 709\ndate: 2019-11-17 15:38:03\n---\n\n**译者按：** Chrome DevTools 很强大，甚至可以替代 IDE 了！\n\n- 原文: [Art of debugging with Chrome DevTools](https://medium.com/frontmen/art-of-debugging-with-chrome-devtools-ab7b5fd8e0b4)\n- 译者: [Fundebug](https://www.fundebug.com/)\n\n**为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。**\n\n**小编推荐：[Fundebug](https://www.fundebug.com/)专注于 JavaScript、微信小程序、微信小游戏，Node.js 和 Java 线上 bug 实时监控。真的是一个很好用的 bug 监控服务，众多大佬公司都在使用。**\n\n谷歌开发者工具提供了一系列的功能来帮助开发者高效 Debug 网页应用，让他们可以更快地查找和修复 bug。在谷歌的开发者工具中，有非常多有用的小工具，但是很多开发者并不知道。通过这篇文章，我把我常用的那些高效 Debug 的 Chrome 开发者工具的功能分享给大家。\n\n_简洁起见，接下来我会使用`开发者工具`来指代`谷歌开发者工具`_。\n\n在我们开始之前，你需要做一些准备工作。\n\n<!-- more -->\n\n### **使用金丝雀版**\n\n如果你想使用谷歌最新的版本和开发者工具，你可以下载[金丝雀版本](https://www.google.com/chrome/canary/)，甚至把它设置为开发默认打开的浏览器。金丝雀版本旨在为早期接受者提供最新的更新。它可能不稳定，但是大多数时候是没问题的。你要习惯去使用最新最强的谷歌浏览器。\n\n**1. 开启开发者工具的实验性功能**\n\n你可以到`chrome://flags`页面，然后开启`Developer Tools experiments`选项。\n\n当开启后，在开发者工具的设置页面，可以发现多了一个`Experiments`选项。如果我使用的一些功能你没有看到，那么请到`Experiments`窗口打开。\n\n**2.超级实验性功能**\n\n如果我使用到的功能在`Experiments`列表没有，那么它可能是一个 WIP 功能(WIP 指 working in progress)。你可以这样开启：页面处在`Experiments`界面，连续敲击`shift`键 6 次来开启 WIP 功能。\n\n{% asset_img Experiments.gif Experiments %}\n\n### **Console**\n\n当 Debug 的时候，我们绝大部分时间是在和 Console 打交道。我们往往在代码中插入很多 Console logs，通过打印变量值来 debug。鉴于 Console 对于我们这么重要，很有必要了解所有开发者工具提供的相关的 APIs 和快捷键。\n\n**3. 总是打印对象**\n\n我的第一个建议其实和开发者工具没有关系，而是我一直使用的一个技巧。在使用`console.log();`的时候，不仅仅打印变量，而是要打印对象，用大括号(`{}`)将变量包围起来。这样的优点是不仅会把变量的值打印，同时还会将变量名打印出来。\n\n{% asset_img log.png log %}\n{% asset_img superlog.png superlog %}\n\n**4. 使用 console.table 来打印多条目数据**\n\n如果你要打印的变量是一个数组，每一个元素都是一个对象。我建议你使用`console.table`来打印，其表格化的呈现更加美观易读。\n\n{% asset_img logtable.png logtable %}\n\n**5. 给 log 加点颜色**\n\nlog 有时候变得非常多，包含你自己的、一些第三方扩展或者浏览器的 logs。除了使用过滤器(filter)以外，你还可以使用颜色来更好地区分。\n\n{% asset_img logcolor.png logcolor %}\n\n**6. $ 和 $$**\n\n如果你在 console 下没有任何库使用`$`和`$$`，那么你可以使用它们分别作为`document.querySelector()` 和 `document.querySelectorAll()`的快捷键。\n\n除了提供了一个更加快捷的方式外，还有一个好处，`$$`返回一个数组，而不是[array-like](http://2ality.com/2013/05/quirk-array-like-objects.html)的[NodeList](https://developer.mozilla.org/en-US/docs/Web/API/NodeList). 所以你可以直接使用[map](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map), [reduce](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce)和[filter](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter) 函数。\n\n你可以使用`$$`检查页面中的无效链接：\n\n```js\nPromise.all(\n  $$('a')\n    .map(link => link.href)\n    .map(href => fetch(href))\n)\n  .then(() => console.log('All links working'))\n  .catch(() => console.error('Some links are broken'));\n```\n\n**7. $0**\n\n如果你想引用某个 DOM 元素，使用`$0`。`$0`指向你当前在 Element 中选中的元素。如果指定了`$0`，`$1`指向之前选中的元素。以此类推，直到`$4`都可以使用。\n\n**8. $\\_**\n\n`$_`记录了最后一次在 Console 计算的表达式。\n\n**9. getEventListeners()**\n\n`getEventListeners(domElement)` 返回在 DOM 元素上注册的所有的事件。请看下面的例子：\n\n{% asset_img getEventListeners.gif getEventListeners %}\n\n你也许注意到了，当我在 console 里输入表达式的时候，其结果立即被计算出来了。你可以看到我并没有敲击 Enter 键，而结果已经显示出来。这个是金丝雀版本的一个新功能，叫做”Eager Evaluation”。\n\n{% asset_img EagerEvaluation.png EagerEvaluation %}\n\n**10. debug(fn)**\n\n在上面的例子中，如果你想在点击按钮后的执行过程中暂停，你可以使用`debug`函数。`debug(fn)`接收一个函数作为参数，当每次该函数被调用时，Debugger 就会在该函数的第一行中断执行。\n\n想象一下你要 debug 一个按钮的问题，但是你不知道这个按钮对应的事件函数在代码中什么位置。除了去大量的源代码中慢慢寻找之外，还有一个巧妙的方法。使用`getEventListeners`函数，然后将`debug`方法注入进去。这样，当你点击按钮的时候，就会在该函数的第一行停下来。\n\n**11. copy(obj)**\n\n`copy(anything)` 是一个很有用的工具函数方便你将任何东西拷贝到系统的粘贴板暂存。\n\n给`copy`函数传入一个没有格式的 JSON，会返回格式化的结果：\n\n{% asset_img copy.gif copy %}\n\n**12. Top-level await**\n\n`async/await` 使得异步操作变得更加容易和可读。唯一的问题在于`await`需要在 async 函数中使用。如果我们要在 DevTools 的控制台使用，需要一些特殊的处理，使用**I**mmediately **I**nvoked **A**sync **F**unction **E**xpression (IIAFE). 一点都不方便。好在 DevTools 已经支持直接使用 await 了。\n\n{% asset_img await.png await %}\n\n### Debugging in the Sources panel\n\n在 source 面板，使用 breakpoints，stepping-into, stepping-over 等方式，你可以很好地掌控程序的执行状态，来发现代码问题。接下里我不会介绍大家都知道的基础内容，而是一些我经常使用的建议和技巧。\n\n**13. 开启 auto-pretty print**\n\n在金丝雀版本的实验模式下，你可以开启自动美化代码模式。\n\n{% asset_img autopre.png autopre %}\n\n**14. 使用条件断点在生产环境中注入 console logs**\n\n断点是一个很棒的功能。但还有一个更棒的：条件断点。只有当设定的条件满足的时候，中断才会执行。也就是说 DevTools 并不会每次都中断程序的执行，而只是在你想要它中断的时候才中断。想了解更多：查看[这里](https://developers.google.com/web/updates/2015/07/set-a-breakpoint-based-on-a-certain-condition).\n\n在生产环境下，因为不能修改源代码，我喜欢使用条件断点来注入 console.log。如果我的断点仅仅是一个 console.log，DevTools 不会中断，因为 console.log 返回 undefined,，是一个 false 的值。但是它会执行我注入的表达式，可以看到输出结果。\n\n[![img](【转载】20个ChromeDevTools调试技巧/insertlog.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/insertlog.gif)\n{% asset_img insertlog.gif insertlog %}\n\n为什么不直接使用普通的断点，并且查看变量呢？有时候我并不想这样做。比如，当我在分析那些频繁执行的操作，例如触摸或则滑动。我并不想每一次都导致 Debugger 触发程序中断，但是我想看到程序输出的结果。\n\n**15. 暂停 UI 在 Hover 状态下的展示结果**\n\n我们很难去检查一个只有在 Hover 状态下展示的元素。比如，如何去检查一个 tooltip？如果你右键并选择检查，元素已经消失了。那么有办法吗？\n\n我是这么操作的：\n\n1. 打开 sources 面板\n2. 显示 tooltip\n3. 使用快捷键来暂停脚本执行(将鼠标停留在暂停的图标上查看快捷键)\n4. 回到 Elements 面板，然后像通常一样去检查元素\n\n[![img](【转载】20个ChromeDevTools调试技巧/tooltips.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/tooltips.gif)\n{% asset_img tooltips.gif tooltips %}\n\n**16. XHR breakpoints**\n\n如果想要理解一个请求是如何执行的，可以使用 sources 面板的 XHR breakpoints。\n\n**17. 使用 DevTools 作为 IDE**\n\nDevTools 的 source 面板可以说相当强大。你可以快速查找，跳转到某一行，某个函数，执行一段代码，使用多行光标等等。这些功能在[这篇 medium 文章中有详细描述](https://medium.com/google-developers/devtools-tips-for-sublime-text-users-cdd559ee80f8)。\n\n既然如此，为啥不把整个开发都搬到这里呢。这样就不需要浪费时间切换 IDE 和浏览器了。\n\n如果你有一个使用[create-react-app](https://github.com/facebook/create-react-app)或则[vue-cli](https://github.com/vuejs/vue-cli)构建的项目，你可以直接把整个文件夹拖到 Sources 面板下。DevTools 会自动对所有文件做映射。所以，你可以在 DevTools 下修改文件并立即查看。这样，整个开发效率，特别是 Debugging 效率绝对提高了。\n\n{% asset_img ide.gif ide %}\n\n**18. 使用 network overrides 来简单调试生产代码**\n\n如果你正在 Debugging 一个生产环境下面的 bug，你可以使用`network overrides`来调试，而不用在本地搭建整个配置。\n\n你可以很容易将任何远程的资源下载一份本地的版本，然后可以在 DevTools 下编辑，并且 DevTools 会更新展示你编辑后的文件。\n\n{% asset_img networkoverrides.gif networkoverrides %}\n\n在生产环境下，也可以很容易 Debugging，并且做一些性能上的测试也变得容易。\n\n### **19. Nodejs debugging**\n\n如果你想使用 DevTools 的 Debugger 来 debug Node.js 应用，你可以使用`--inspect-brk` flag 来开启：\n\n```shell\nnode --inspect-brk script.js\n```\n\n跳转到`chrome://inspect`页面，在`Remote Target`选项，可以看到 Node 程序。\n\n并且，在 DevTools 中你会看到一个绿色的 Node 图标，点击图标会打开针对 Node 的 Chrome Debugger。\n\n[![img](【转载】20个ChromeDevTools调试技巧/node-debuger.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/node-debuger.gif)\n{% asset_img node-debuger.gif node-debuger %}\n\n如果你想要用 DevTools Debugger 来 debug 你的单元测试，你需要这样调用：\n\n```\ncopynode --inspect-brk ./node_modules/.bin/jest\n```\n\n不过这样做其实很麻烦，我们需要自己找到相应的路径。 GoogleChromeLabs 最近发布了一个新的工具非常好用，叫做：[ndb](https://github.com/GoogleChromeLabs/ndb)。使用 ndb，你只需要：\n\n```js\nndb npx jest\n```\n\n如果你有一个自定义的脚本，你可以这样调用：\n\n```js\nndb npm run unit\n```\n\n更妙的是，如果你在一个有配置`package.json`的项目下调用`ndb`，他甚至会自动分析 package.json 中的脚本，方便你直接使用 DevTools。\n\n**20. 使用 Snippets 来辅助 Debugging**\n\nDevTools 提供了一个可以创建和保存小段代码的工具，我很喜欢用它们来加速我的工作。比如 lodashify —  可以快速给任何应用添加 lodash。\n\n```js\n(function () {\n  'use strict';\n\n  var element = document.createElement('script');\n  element.src =\n    'https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.15.0/lodash.min.js';\n  element.type = 'text/javascript';\n  document.head.appendChild(element);\n})();\n```\n\n另一个小的工具函数式用来增强对象的属性，每次被访问或则修改，它都会提供给我充分的信息，比如谁访问了，谁更改了它。在 Debugging 的时候，非常有用。\n\n```js\nconst traceProperty = (object, property) => {\n  let value = object[property];\n  Object.defineProperty(object, property, {\n    get() {\n      console.trace(`${property} requested`);\n      return value;\n    },\n    set(newValue) {\n      console.trace(`setting ${property} to `, newValue);\n      value = newValue;\n    }\n  });\n};\n```\n\n[![img](【转载】20个ChromeDevTools调试技巧/methodtools.gif)](https://gitee.com/evestorm/various_resources/raw/master/tools/methodtools.gif)\n{% asset_img methodtools.gif methodtools %}\n\n还有很多非常有用的[devtools 代码片段](http://bgrins.github.io/devtools-snippets/)，你可以直接拿去使用。\n\n### 关于 Fundebug\n\n[Fundebug](https://www.fundebug.com/)专注于 JavaScript、微信小程序、微信小游戏、支付宝小程序、React Native、Node.js 和 Java 实时 BUG 监控。 自从 2016 年双十一正式上线，Fundebug 累计处理了 6 亿+错误事件，得到了 Google、360、金山软件等众多知名用户的认可。欢迎免费试用！\n\n版权声明:\n转载时请注明作者 Fundebug 以及本文地址：\nhttps://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/\n","slug":"【转载】20个ChromeDevTools调试技巧","published":1,"updated":"2020-12-02T02:29:16.226Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfg0031khsr70irfoif","content":"<p><strong>译者按：</strong> Chrome DevTools 很强大，甚至可以替代 IDE 了！</p>\n<ul>\n<li>原文: <a href=\"https://medium.com/frontmen/art-of-debugging-with-chrome-devtools-ab7b5fd8e0b4\">Art of debugging with Chrome DevTools</a></li>\n<li>译者: <a href=\"https://www.fundebug.com/\">Fundebug</a></li>\n</ul>\n<p><strong>为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。</strong></p>\n<p><strong>小编推荐：<a href=\"https://www.fundebug.com/\">Fundebug</a>专注于 JavaScript、微信小程序、微信小游戏，Node.js 和 Java 线上 bug 实时监控。真的是一个很好用的 bug 监控服务，众多大佬公司都在使用。</strong></p>\n<p>谷歌开发者工具提供了一系列的功能来帮助开发者高效 Debug 网页应用，让他们可以更快地查找和修复 bug。在谷歌的开发者工具中，有非常多有用的小工具，但是很多开发者并不知道。通过这篇文章，我把我常用的那些高效 Debug 的 Chrome 开发者工具的功能分享给大家。</p>\n<p>_简洁起见，接下来我会使用<code>开发者工具</code>来指代<code>谷歌开发者工具</code>_。</p>\n<p>在我们开始之前，你需要做一些准备工作。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"使用金丝雀版\"><a href=\"#使用金丝雀版\" class=\"headerlink\" title=\"使用金丝雀版\"></a><strong>使用金丝雀版</strong></h3><p>如果你想使用谷歌最新的版本和开发者工具，你可以下载<a href=\"https://www.google.com/chrome/canary/\">金丝雀版本</a>，甚至把它设置为开发默认打开的浏览器。金丝雀版本旨在为早期接受者提供最新的更新。它可能不稳定，但是大多数时候是没问题的。你要习惯去使用最新最强的谷歌浏览器。</p>\n<p><strong>1. 开启开发者工具的实验性功能</strong></p>\n<p>你可以到<code>chrome://flags</code>页面，然后开启<code>Developer Tools experiments</code>选项。</p>\n<p>当开启后，在开发者工具的设置页面，可以发现多了一个<code>Experiments</code>选项。如果我使用的一些功能你没有看到，那么请到<code>Experiments</code>窗口打开。</p>\n<p><strong>2.超级实验性功能</strong></p>\n<p>如果我使用到的功能在<code>Experiments</code>列表没有，那么它可能是一个 WIP 功能(WIP 指 working in progress)。你可以这样开启：页面处在<code>Experiments</code>界面，连续敲击<code>shift</code>键 6 次来开启 WIP 功能。</p>\n<img src=\"/posts/709/Experiments.gif\" class=\"\" title=\"Experiments\">\n\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a><strong>Console</strong></h3><p>当 Debug 的时候，我们绝大部分时间是在和 Console 打交道。我们往往在代码中插入很多 Console logs，通过打印变量值来 debug。鉴于 Console 对于我们这么重要，很有必要了解所有开发者工具提供的相关的 APIs 和快捷键。</p>\n<p><strong>3. 总是打印对象</strong></p>\n<p>我的第一个建议其实和开发者工具没有关系，而是我一直使用的一个技巧。在使用<code>console.log();</code>的时候，不仅仅打印变量，而是要打印对象，用大括号(<code>&#123;&#125;</code>)将变量包围起来。这样的优点是不仅会把变量的值打印，同时还会将变量名打印出来。</p>\n<img src=\"/posts/709/log.png\" class=\"\" title=\"log\">\n<img src=\"/posts/709/superlog.png\" class=\"\" title=\"superlog\">\n\n<p><strong>4. 使用 console.table 来打印多条目数据</strong></p>\n<p>如果你要打印的变量是一个数组，每一个元素都是一个对象。我建议你使用<code>console.table</code>来打印，其表格化的呈现更加美观易读。</p>\n<img src=\"/posts/709/logtable.png\" class=\"\" title=\"logtable\">\n\n<p><strong>5. 给 log 加点颜色</strong></p>\n<p>log 有时候变得非常多，包含你自己的、一些第三方扩展或者浏览器的 logs。除了使用过滤器(filter)以外，你还可以使用颜色来更好地区分。</p>\n<img src=\"/posts/709/logcolor.png\" class=\"\" title=\"logcolor\">\n\n<p><strong>6. $ 和 $$</strong></p>\n<p>如果你在 console 下没有任何库使用<code>$</code>和<code>$$</code>，那么你可以使用它们分别作为<code>document.querySelector()</code> 和 <code>document.querySelectorAll()</code>的快捷键。</p>\n<p>除了提供了一个更加快捷的方式外，还有一个好处，<code>$$</code>返回一个数组，而不是<a href=\"http://2ality.com/2013/05/quirk-array-like-objects.html\">array-like</a>的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\">NodeList</a>. 所以你可以直接使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">reduce</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> 函数。</p>\n<p>你可以使用<code>$$</code>检查页面中的无效链接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">  $$(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">link</span> =&gt;</span> link.href)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">href</span> =&gt;</span> fetch(href))</span><br><span class=\"line\">)</span><br><span class=\"line\">  .then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;All links working&#x27;</span>))</span><br><span class=\"line\">  .catch(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">&#x27;Some links are broken&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>7. $0</strong></p>\n<p>如果你想引用某个 DOM 元素，使用<code>$0</code>。<code>$0</code>指向你当前在 Element 中选中的元素。如果指定了<code>$0</code>，<code>$1</code>指向之前选中的元素。以此类推，直到<code>$4</code>都可以使用。</p>\n<p><strong>8. $_</strong></p>\n<p><code>$_</code>记录了最后一次在 Console 计算的表达式。</p>\n<p><strong>9. getEventListeners()</strong></p>\n<p><code>getEventListeners(domElement)</code> 返回在 DOM 元素上注册的所有的事件。请看下面的例子：</p>\n<img src=\"/posts/709/getEventListeners.gif\" class=\"\" title=\"getEventListeners\">\n\n<p>你也许注意到了，当我在 console 里输入表达式的时候，其结果立即被计算出来了。你可以看到我并没有敲击 Enter 键，而结果已经显示出来。这个是金丝雀版本的一个新功能，叫做”Eager Evaluation”。</p>\n<img src=\"/posts/709/EagerEvaluation.png\" class=\"\" title=\"EagerEvaluation\">\n\n<p><strong>10. debug(fn)</strong></p>\n<p>在上面的例子中，如果你想在点击按钮后的执行过程中暂停，你可以使用<code>debug</code>函数。<code>debug(fn)</code>接收一个函数作为参数，当每次该函数被调用时，Debugger 就会在该函数的第一行中断执行。</p>\n<p>想象一下你要 debug 一个按钮的问题，但是你不知道这个按钮对应的事件函数在代码中什么位置。除了去大量的源代码中慢慢寻找之外，还有一个巧妙的方法。使用<code>getEventListeners</code>函数，然后将<code>debug</code>方法注入进去。这样，当你点击按钮的时候，就会在该函数的第一行停下来。</p>\n<p><strong>11. copy(obj)</strong></p>\n<p><code>copy(anything)</code> 是一个很有用的工具函数方便你将任何东西拷贝到系统的粘贴板暂存。</p>\n<p>给<code>copy</code>函数传入一个没有格式的 JSON，会返回格式化的结果：</p>\n<img src=\"/posts/709/copy.gif\" class=\"\" title=\"copy\">\n\n<p><strong>12. Top-level await</strong></p>\n<p><code>async/await</code> 使得异步操作变得更加容易和可读。唯一的问题在于<code>await</code>需要在 async 函数中使用。如果我们要在 DevTools 的控制台使用，需要一些特殊的处理，使用<strong>I</strong>mmediately <strong>I</strong>nvoked <strong>A</strong>sync <strong>F</strong>unction <strong>E</strong>xpression (IIAFE). 一点都不方便。好在 DevTools 已经支持直接使用 await 了。</p>\n<img src=\"/posts/709/await.png\" class=\"\" title=\"await\">\n\n<h3 id=\"Debugging-in-the-Sources-panel\"><a href=\"#Debugging-in-the-Sources-panel\" class=\"headerlink\" title=\"Debugging in the Sources panel\"></a>Debugging in the Sources panel</h3><p>在 source 面板，使用 breakpoints，stepping-into, stepping-over 等方式，你可以很好地掌控程序的执行状态，来发现代码问题。接下里我不会介绍大家都知道的基础内容，而是一些我经常使用的建议和技巧。</p>\n<p><strong>13. 开启 auto-pretty print</strong></p>\n<p>在金丝雀版本的实验模式下，你可以开启自动美化代码模式。</p>\n<img src=\"/posts/709/autopre.png\" class=\"\" title=\"autopre\">\n\n<p><strong>14. 使用条件断点在生产环境中注入 console logs</strong></p>\n<p>断点是一个很棒的功能。但还有一个更棒的：条件断点。只有当设定的条件满足的时候，中断才会执行。也就是说 DevTools 并不会每次都中断程序的执行，而只是在你想要它中断的时候才中断。想了解更多：查看<a href=\"https://developers.google.com/web/updates/2015/07/set-a-breakpoint-based-on-a-certain-condition\">这里</a>.</p>\n<p>在生产环境下，因为不能修改源代码，我喜欢使用条件断点来注入 console.log。如果我的断点仅仅是一个 console.log，DevTools 不会中断，因为 console.log 返回 undefined,，是一个 false 的值。但是它会执行我注入的表达式，可以看到输出结果。</p>\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/insertlog.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/insertlog.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/insertlog.gif\" class=\"\" title=\"insertlog\">\n\n<p>为什么不直接使用普通的断点，并且查看变量呢？有时候我并不想这样做。比如，当我在分析那些频繁执行的操作，例如触摸或则滑动。我并不想每一次都导致 Debugger 触发程序中断，但是我想看到程序输出的结果。</p>\n<p><strong>15. 暂停 UI 在 Hover 状态下的展示结果</strong></p>\n<p>我们很难去检查一个只有在 Hover 状态下展示的元素。比如，如何去检查一个 tooltip？如果你右键并选择检查，元素已经消失了。那么有办法吗？</p>\n<p>我是这么操作的：</p>\n<ol>\n<li>打开 sources 面板</li>\n<li>显示 tooltip</li>\n<li>使用快捷键来暂停脚本执行(将鼠标停留在暂停的图标上查看快捷键)</li>\n<li>回到 Elements 面板，然后像通常一样去检查元素</li>\n</ol>\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/tooltips.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/tooltips.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/tooltips.gif\" class=\"\" title=\"tooltips\">\n\n<p><strong>16. XHR breakpoints</strong></p>\n<p>如果想要理解一个请求是如何执行的，可以使用 sources 面板的 XHR breakpoints。</p>\n<p><strong>17. 使用 DevTools 作为 IDE</strong></p>\n<p>DevTools 的 source 面板可以说相当强大。你可以快速查找，跳转到某一行，某个函数，执行一段代码，使用多行光标等等。这些功能在<a href=\"https://medium.com/google-developers/devtools-tips-for-sublime-text-users-cdd559ee80f8\">这篇 medium 文章中有详细描述</a>。</p>\n<p>既然如此，为啥不把整个开发都搬到这里呢。这样就不需要浪费时间切换 IDE 和浏览器了。</p>\n<p>如果你有一个使用<a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>或则<a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a>构建的项目，你可以直接把整个文件夹拖到 Sources 面板下。DevTools 会自动对所有文件做映射。所以，你可以在 DevTools 下修改文件并立即查看。这样，整个开发效率，特别是 Debugging 效率绝对提高了。</p>\n<img src=\"/posts/709/ide.gif\" class=\"\" title=\"ide\">\n\n<p><strong>18. 使用 network overrides 来简单调试生产代码</strong></p>\n<p>如果你正在 Debugging 一个生产环境下面的 bug，你可以使用<code>network overrides</code>来调试，而不用在本地搭建整个配置。</p>\n<p>你可以很容易将任何远程的资源下载一份本地的版本，然后可以在 DevTools 下编辑，并且 DevTools 会更新展示你编辑后的文件。</p>\n<img src=\"/posts/709/networkoverrides.gif\" class=\"\" title=\"networkoverrides\">\n\n<p>在生产环境下，也可以很容易 Debugging，并且做一些性能上的测试也变得容易。</p>\n<h3 id=\"19-Nodejs-debugging\"><a href=\"#19-Nodejs-debugging\" class=\"headerlink\" title=\"19. Nodejs debugging\"></a><strong>19. Nodejs debugging</strong></h3><p>如果你想使用 DevTools 的 Debugger 来 debug Node.js 应用，你可以使用<code>--inspect-brk</code> flag 来开启：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect-brk script.js</span><br></pre></td></tr></table></figure>\n\n<p>跳转到<code>chrome://inspect</code>页面，在<code>Remote Target</code>选项，可以看到 Node 程序。</p>\n<p>并且，在 DevTools 中你会看到一个绿色的 Node 图标，点击图标会打开针对 Node 的 Chrome Debugger。</p>\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/node-debuger.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/node-debuger.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/node-debuger.gif\" class=\"\" title=\"node-debuger\">\n\n<p>如果你想要用 DevTools Debugger 来 debug 你的单元测试，你需要这样调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copynode --inspect-brk .&#x2F;node_modules&#x2F;.bin&#x2F;jest</span><br></pre></td></tr></table></figure>\n\n<p>不过这样做其实很麻烦，我们需要自己找到相应的路径。 GoogleChromeLabs 最近发布了一个新的工具非常好用，叫做：<a href=\"https://github.com/GoogleChromeLabs/ndb\">ndb</a>。使用 ndb，你只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndb npx jest</span><br></pre></td></tr></table></figure>\n\n<p>如果你有一个自定义的脚本，你可以这样调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndb npm run unit</span><br></pre></td></tr></table></figure>\n\n<p>更妙的是，如果你在一个有配置<code>package.json</code>的项目下调用<code>ndb</code>，他甚至会自动分析 package.json 中的脚本，方便你直接使用 DevTools。</p>\n<p><strong>20. 使用 Snippets 来辅助 Debugging</strong></p>\n<p>DevTools 提供了一个可以创建和保存小段代码的工具，我很喜欢用它们来加速我的工作。比如 lodashify —  可以快速给任何应用添加 lodash。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  &#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">  element.src =</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.15.0/lodash.min.js&#x27;</span>;</span><br><span class=\"line\">  element.type = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.appendChild(element);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>另一个小的工具函数式用来增强对象的属性，每次被访问或则修改，它都会提供给我充分的信息，比如谁访问了，谁更改了它。在 Debugging 的时候，非常有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traceProperty = <span class=\"function\">(<span class=\"params\">object, property</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = object[property];</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(object, property, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.trace(<span class=\"string\">`<span class=\"subst\">$&#123;property&#125;</span> requested`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.trace(<span class=\"string\">`setting <span class=\"subst\">$&#123;property&#125;</span> to `</span>, newValue);</span><br><span class=\"line\">      value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/methodtools.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/methodtools.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/methodtools.gif\" class=\"\" title=\"methodtools\">\n\n<p>还有很多非常有用的<a href=\"http://bgrins.github.io/devtools-snippets/\">devtools 代码片段</a>，你可以直接拿去使用。</p>\n<h3 id=\"关于-Fundebug\"><a href=\"#关于-Fundebug\" class=\"headerlink\" title=\"关于 Fundebug\"></a>关于 Fundebug</h3><p><a href=\"https://www.fundebug.com/\">Fundebug</a>专注于 JavaScript、微信小程序、微信小游戏、支付宝小程序、React Native、Node.js 和 Java 实时 BUG 监控。 自从 2016 年双十一正式上线，Fundebug 累计处理了 6 亿+错误事件，得到了 Google、360、金山软件等众多知名用户的认可。欢迎免费试用！</p>\n<p>版权声明:<br>转载时请注明作者 Fundebug 以及本文地址：<br><a href=\"https://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/\">https://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/</a></p>\n","site":{"data":{}},"excerpt":"<p><strong>译者按：</strong> Chrome DevTools 很强大，甚至可以替代 IDE 了！</p>\n<ul>\n<li>原文: <a href=\"https://medium.com/frontmen/art-of-debugging-with-chrome-devtools-ab7b5fd8e0b4\">Art of debugging with Chrome DevTools</a></li>\n<li>译者: <a href=\"https://www.fundebug.com/\">Fundebug</a></li>\n</ul>\n<p><strong>为了保证可读性，本文采用意译而非直译。另外，本文版权归原作者所有，翻译仅用于学习。</strong></p>\n<p><strong>小编推荐：<a href=\"https://www.fundebug.com/\">Fundebug</a>专注于 JavaScript、微信小程序、微信小游戏，Node.js 和 Java 线上 bug 实时监控。真的是一个很好用的 bug 监控服务，众多大佬公司都在使用。</strong></p>\n<p>谷歌开发者工具提供了一系列的功能来帮助开发者高效 Debug 网页应用，让他们可以更快地查找和修复 bug。在谷歌的开发者工具中，有非常多有用的小工具，但是很多开发者并不知道。通过这篇文章，我把我常用的那些高效 Debug 的 Chrome 开发者工具的功能分享给大家。</p>\n<p>_简洁起见，接下来我会使用<code>开发者工具</code>来指代<code>谷歌开发者工具</code>_。</p>\n<p>在我们开始之前，你需要做一些准备工作。</p>","more":"<h3 id=\"使用金丝雀版\"><a href=\"#使用金丝雀版\" class=\"headerlink\" title=\"使用金丝雀版\"></a><strong>使用金丝雀版</strong></h3><p>如果你想使用谷歌最新的版本和开发者工具，你可以下载<a href=\"https://www.google.com/chrome/canary/\">金丝雀版本</a>，甚至把它设置为开发默认打开的浏览器。金丝雀版本旨在为早期接受者提供最新的更新。它可能不稳定，但是大多数时候是没问题的。你要习惯去使用最新最强的谷歌浏览器。</p>\n<p><strong>1. 开启开发者工具的实验性功能</strong></p>\n<p>你可以到<code>chrome://flags</code>页面，然后开启<code>Developer Tools experiments</code>选项。</p>\n<p>当开启后，在开发者工具的设置页面，可以发现多了一个<code>Experiments</code>选项。如果我使用的一些功能你没有看到，那么请到<code>Experiments</code>窗口打开。</p>\n<p><strong>2.超级实验性功能</strong></p>\n<p>如果我使用到的功能在<code>Experiments</code>列表没有，那么它可能是一个 WIP 功能(WIP 指 working in progress)。你可以这样开启：页面处在<code>Experiments</code>界面，连续敲击<code>shift</code>键 6 次来开启 WIP 功能。</p>\n<img src=\"/posts/709/Experiments.gif\" class=\"\" title=\"Experiments\">\n\n<h3 id=\"Console\"><a href=\"#Console\" class=\"headerlink\" title=\"Console\"></a><strong>Console</strong></h3><p>当 Debug 的时候，我们绝大部分时间是在和 Console 打交道。我们往往在代码中插入很多 Console logs，通过打印变量值来 debug。鉴于 Console 对于我们这么重要，很有必要了解所有开发者工具提供的相关的 APIs 和快捷键。</p>\n<p><strong>3. 总是打印对象</strong></p>\n<p>我的第一个建议其实和开发者工具没有关系，而是我一直使用的一个技巧。在使用<code>console.log();</code>的时候，不仅仅打印变量，而是要打印对象，用大括号(<code>&#123;&#125;</code>)将变量包围起来。这样的优点是不仅会把变量的值打印，同时还会将变量名打印出来。</p>\n<img src=\"/posts/709/log.png\" class=\"\" title=\"log\">\n<img src=\"/posts/709/superlog.png\" class=\"\" title=\"superlog\">\n\n<p><strong>4. 使用 console.table 来打印多条目数据</strong></p>\n<p>如果你要打印的变量是一个数组，每一个元素都是一个对象。我建议你使用<code>console.table</code>来打印，其表格化的呈现更加美观易读。</p>\n<img src=\"/posts/709/logtable.png\" class=\"\" title=\"logtable\">\n\n<p><strong>5. 给 log 加点颜色</strong></p>\n<p>log 有时候变得非常多，包含你自己的、一些第三方扩展或者浏览器的 logs。除了使用过滤器(filter)以外，你还可以使用颜色来更好地区分。</p>\n<img src=\"/posts/709/logcolor.png\" class=\"\" title=\"logcolor\">\n\n<p><strong>6. $ 和 $$</strong></p>\n<p>如果你在 console 下没有任何库使用<code>$</code>和<code>$$</code>，那么你可以使用它们分别作为<code>document.querySelector()</code> 和 <code>document.querySelectorAll()</code>的快捷键。</p>\n<p>除了提供了一个更加快捷的方式外，还有一个好处，<code>$$</code>返回一个数组，而不是<a href=\"http://2ality.com/2013/05/quirk-array-like-objects.html\">array-like</a>的<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/NodeList\">NodeList</a>. 所以你可以直接使用<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map\">map</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce\">reduce</a>和<a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter\">filter</a> 函数。</p>\n<p>你可以使用<code>$$</code>检查页面中的无效链接：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">Promise</span>.all(</span><br><span class=\"line\">  $$(<span class=\"string\">&#x27;a&#x27;</span>)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">link</span> =&gt;</span> link.href)</span><br><span class=\"line\">    .map(<span class=\"function\"><span class=\"params\">href</span> =&gt;</span> fetch(href))</span><br><span class=\"line\">)</span><br><span class=\"line\">  .then(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;All links working&#x27;</span>))</span><br><span class=\"line\">  .catch(<span class=\"function\">() =&gt;</span> <span class=\"built_in\">console</span>.error(<span class=\"string\">&#x27;Some links are broken&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<p><strong>7. $0</strong></p>\n<p>如果你想引用某个 DOM 元素，使用<code>$0</code>。<code>$0</code>指向你当前在 Element 中选中的元素。如果指定了<code>$0</code>，<code>$1</code>指向之前选中的元素。以此类推，直到<code>$4</code>都可以使用。</p>\n<p><strong>8. $_</strong></p>\n<p><code>$_</code>记录了最后一次在 Console 计算的表达式。</p>\n<p><strong>9. getEventListeners()</strong></p>\n<p><code>getEventListeners(domElement)</code> 返回在 DOM 元素上注册的所有的事件。请看下面的例子：</p>\n<img src=\"/posts/709/getEventListeners.gif\" class=\"\" title=\"getEventListeners\">\n\n<p>你也许注意到了，当我在 console 里输入表达式的时候，其结果立即被计算出来了。你可以看到我并没有敲击 Enter 键，而结果已经显示出来。这个是金丝雀版本的一个新功能，叫做”Eager Evaluation”。</p>\n<img src=\"/posts/709/EagerEvaluation.png\" class=\"\" title=\"EagerEvaluation\">\n\n<p><strong>10. debug(fn)</strong></p>\n<p>在上面的例子中，如果你想在点击按钮后的执行过程中暂停，你可以使用<code>debug</code>函数。<code>debug(fn)</code>接收一个函数作为参数，当每次该函数被调用时，Debugger 就会在该函数的第一行中断执行。</p>\n<p>想象一下你要 debug 一个按钮的问题，但是你不知道这个按钮对应的事件函数在代码中什么位置。除了去大量的源代码中慢慢寻找之外，还有一个巧妙的方法。使用<code>getEventListeners</code>函数，然后将<code>debug</code>方法注入进去。这样，当你点击按钮的时候，就会在该函数的第一行停下来。</p>\n<p><strong>11. copy(obj)</strong></p>\n<p><code>copy(anything)</code> 是一个很有用的工具函数方便你将任何东西拷贝到系统的粘贴板暂存。</p>\n<p>给<code>copy</code>函数传入一个没有格式的 JSON，会返回格式化的结果：</p>\n<img src=\"/posts/709/copy.gif\" class=\"\" title=\"copy\">\n\n<p><strong>12. Top-level await</strong></p>\n<p><code>async/await</code> 使得异步操作变得更加容易和可读。唯一的问题在于<code>await</code>需要在 async 函数中使用。如果我们要在 DevTools 的控制台使用，需要一些特殊的处理，使用<strong>I</strong>mmediately <strong>I</strong>nvoked <strong>A</strong>sync <strong>F</strong>unction <strong>E</strong>xpression (IIAFE). 一点都不方便。好在 DevTools 已经支持直接使用 await 了。</p>\n<img src=\"/posts/709/await.png\" class=\"\" title=\"await\">\n\n<h3 id=\"Debugging-in-the-Sources-panel\"><a href=\"#Debugging-in-the-Sources-panel\" class=\"headerlink\" title=\"Debugging in the Sources panel\"></a>Debugging in the Sources panel</h3><p>在 source 面板，使用 breakpoints，stepping-into, stepping-over 等方式，你可以很好地掌控程序的执行状态，来发现代码问题。接下里我不会介绍大家都知道的基础内容，而是一些我经常使用的建议和技巧。</p>\n<p><strong>13. 开启 auto-pretty print</strong></p>\n<p>在金丝雀版本的实验模式下，你可以开启自动美化代码模式。</p>\n<img src=\"/posts/709/autopre.png\" class=\"\" title=\"autopre\">\n\n<p><strong>14. 使用条件断点在生产环境中注入 console logs</strong></p>\n<p>断点是一个很棒的功能。但还有一个更棒的：条件断点。只有当设定的条件满足的时候，中断才会执行。也就是说 DevTools 并不会每次都中断程序的执行，而只是在你想要它中断的时候才中断。想了解更多：查看<a href=\"https://developers.google.com/web/updates/2015/07/set-a-breakpoint-based-on-a-certain-condition\">这里</a>.</p>\n<p>在生产环境下，因为不能修改源代码，我喜欢使用条件断点来注入 console.log。如果我的断点仅仅是一个 console.log，DevTools 不会中断，因为 console.log 返回 undefined,，是一个 false 的值。但是它会执行我注入的表达式，可以看到输出结果。</p>\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/insertlog.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/insertlog.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/insertlog.gif\" class=\"\" title=\"insertlog\">\n\n<p>为什么不直接使用普通的断点，并且查看变量呢？有时候我并不想这样做。比如，当我在分析那些频繁执行的操作，例如触摸或则滑动。我并不想每一次都导致 Debugger 触发程序中断，但是我想看到程序输出的结果。</p>\n<p><strong>15. 暂停 UI 在 Hover 状态下的展示结果</strong></p>\n<p>我们很难去检查一个只有在 Hover 状态下展示的元素。比如，如何去检查一个 tooltip？如果你右键并选择检查，元素已经消失了。那么有办法吗？</p>\n<p>我是这么操作的：</p>\n<ol>\n<li>打开 sources 面板</li>\n<li>显示 tooltip</li>\n<li>使用快捷键来暂停脚本执行(将鼠标停留在暂停的图标上查看快捷键)</li>\n<li>回到 Elements 面板，然后像通常一样去检查元素</li>\n</ol>\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/tooltips.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/tooltips.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/tooltips.gif\" class=\"\" title=\"tooltips\">\n\n<p><strong>16. XHR breakpoints</strong></p>\n<p>如果想要理解一个请求是如何执行的，可以使用 sources 面板的 XHR breakpoints。</p>\n<p><strong>17. 使用 DevTools 作为 IDE</strong></p>\n<p>DevTools 的 source 面板可以说相当强大。你可以快速查找，跳转到某一行，某个函数，执行一段代码，使用多行光标等等。这些功能在<a href=\"https://medium.com/google-developers/devtools-tips-for-sublime-text-users-cdd559ee80f8\">这篇 medium 文章中有详细描述</a>。</p>\n<p>既然如此，为啥不把整个开发都搬到这里呢。这样就不需要浪费时间切换 IDE 和浏览器了。</p>\n<p>如果你有一个使用<a href=\"https://github.com/facebook/create-react-app\">create-react-app</a>或则<a href=\"https://github.com/vuejs/vue-cli\">vue-cli</a>构建的项目，你可以直接把整个文件夹拖到 Sources 面板下。DevTools 会自动对所有文件做映射。所以，你可以在 DevTools 下修改文件并立即查看。这样，整个开发效率，特别是 Debugging 效率绝对提高了。</p>\n<img src=\"/posts/709/ide.gif\" class=\"\" title=\"ide\">\n\n<p><strong>18. 使用 network overrides 来简单调试生产代码</strong></p>\n<p>如果你正在 Debugging 一个生产环境下面的 bug，你可以使用<code>network overrides</code>来调试，而不用在本地搭建整个配置。</p>\n<p>你可以很容易将任何远程的资源下载一份本地的版本，然后可以在 DevTools 下编辑，并且 DevTools 会更新展示你编辑后的文件。</p>\n<img src=\"/posts/709/networkoverrides.gif\" class=\"\" title=\"networkoverrides\">\n\n<p>在生产环境下，也可以很容易 Debugging，并且做一些性能上的测试也变得容易。</p>\n<h3 id=\"19-Nodejs-debugging\"><a href=\"#19-Nodejs-debugging\" class=\"headerlink\" title=\"19. Nodejs debugging\"></a><strong>19. Nodejs debugging</strong></h3><p>如果你想使用 DevTools 的 Debugger 来 debug Node.js 应用，你可以使用<code>--inspect-brk</code> flag 来开启：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node --inspect-brk script.js</span><br></pre></td></tr></table></figure>\n\n<p>跳转到<code>chrome://inspect</code>页面，在<code>Remote Target</code>选项，可以看到 Node 程序。</p>\n<p>并且，在 DevTools 中你会看到一个绿色的 Node 图标，点击图标会打开针对 Node 的 Chrome Debugger。</p>\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/node-debuger.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/node-debuger.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/node-debuger.gif\" class=\"\" title=\"node-debuger\">\n\n<p>如果你想要用 DevTools Debugger 来 debug 你的单元测试，你需要这样调用：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">copynode --inspect-brk .&#x2F;node_modules&#x2F;.bin&#x2F;jest</span><br></pre></td></tr></table></figure>\n\n<p>不过这样做其实很麻烦，我们需要自己找到相应的路径。 GoogleChromeLabs 最近发布了一个新的工具非常好用，叫做：<a href=\"https://github.com/GoogleChromeLabs/ndb\">ndb</a>。使用 ndb，你只需要：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndb npx jest</span><br></pre></td></tr></table></figure>\n\n<p>如果你有一个自定义的脚本，你可以这样调用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ndb npm run unit</span><br></pre></td></tr></table></figure>\n\n<p>更妙的是，如果你在一个有配置<code>package.json</code>的项目下调用<code>ndb</code>，他甚至会自动分析 package.json 中的脚本，方便你直接使用 DevTools。</p>\n<p><strong>20. 使用 Snippets 来辅助 Debugging</strong></p>\n<p>DevTools 提供了一个可以创建和保存小段代码的工具，我很喜欢用它们来加速我的工作。比如 lodashify —  可以快速给任何应用添加 lodash。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\"><span class=\"meta\">  &#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"keyword\">var</span> element = <span class=\"built_in\">document</span>.createElement(<span class=\"string\">&#x27;script&#x27;</span>);</span><br><span class=\"line\">  element.src =</span><br><span class=\"line\">    <span class=\"string\">&#x27;https://cdnjs.cloudflare.com/ajax/libs/lodash.js/4.15.0/lodash.min.js&#x27;</span>;</span><br><span class=\"line\">  element.type = <span class=\"string\">&#x27;text/javascript&#x27;</span>;</span><br><span class=\"line\">  <span class=\"built_in\">document</span>.head.appendChild(element);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<p>另一个小的工具函数式用来增强对象的属性，每次被访问或则修改，它都会提供给我充分的信息，比如谁访问了，谁更改了它。在 Debugging 的时候，非常有用。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> traceProperty = <span class=\"function\">(<span class=\"params\">object, property</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> value = object[property];</span><br><span class=\"line\">  <span class=\"built_in\">Object</span>.defineProperty(object, property, &#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">get</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.trace(<span class=\"string\">`<span class=\"subst\">$&#123;property&#125;</span> requested`</span>);</span><br><span class=\"line\">      <span class=\"keyword\">return</span> value;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"function\"><span class=\"title\">set</span>(<span class=\"params\">newValue</span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.trace(<span class=\"string\">`setting <span class=\"subst\">$&#123;property&#125;</span> to `</span>, newValue);</span><br><span class=\"line\">      value = newValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p><a href=\"https://gitee.com/evestorm/various_resources/raw/master/tools/methodtools.gif\"><img src=\"%E3%80%90%E8%BD%AC%E8%BD%BD%E3%80%9120%E4%B8%AAChromeDevTools%E8%B0%83%E8%AF%95%E6%8A%80%E5%B7%A7/methodtools.gif\" alt=\"img\"></a></p>\n<img src=\"/posts/709/methodtools.gif\" class=\"\" title=\"methodtools\">\n\n<p>还有很多非常有用的<a href=\"http://bgrins.github.io/devtools-snippets/\">devtools 代码片段</a>，你可以直接拿去使用。</p>\n<h3 id=\"关于-Fundebug\"><a href=\"#关于-Fundebug\" class=\"headerlink\" title=\"关于 Fundebug\"></a>关于 Fundebug</h3><p><a href=\"https://www.fundebug.com/\">Fundebug</a>专注于 JavaScript、微信小程序、微信小游戏、支付宝小程序、React Native、Node.js 和 Java 实时 BUG 监控。 自从 2016 年双十一正式上线，Fundebug 累计处理了 6 亿+错误事件，得到了 Google、360、金山软件等众多知名用户的认可。欢迎免费试用！</p>\n<p>版权声明:<br>转载时请注明作者 Fundebug 以及本文地址：<br><a href=\"https://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/\">https://blog.fundebug.com/2018/08/22/art-of-debugging-with-chrome-devtools/</a></p>"},{"title":"【转载】git配置ssh服务","abbrlink":1071,"date":"2020-03-01T06:22:35.000Z","_content":"\n原文：https://juejin.cn/post/6844904066032599054\n\n# 前言\n\n在管理 Git 项目上，很多时候都是直接使用`https url`克隆到本地，当然也有有些人使用`SSH url`克隆到本地。\n\n这两种方式的主要区别在于：\n\n- 使用`https url`克隆对初学者来说会比较方便，复制`https url`然后到 git Bash 里面直接用 clone 命令克隆到本地就好了，但是每次 fetch 和 push 代码都需要输入账号和密码，这也是 https 方式的麻烦之处。\n- 而使用`SSH url`克隆却需要在克隆之前先配置和添加好`SSH key`，因此，如果你想要使用`SSH url`克隆的话，你必须是这个项目的拥有者。否则你是无法添加`SSH key`的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行 fetch 和 push 也可以另外进行设置。\n\n下面主要是讲述如何配置使用 ssh 方式来提交和克隆代码。\n\n<!-- more -->\n\n# 正文\n\n## 配置本机 ssh\n\n### 一、确定的是你的电脑上是安装过 Git\n\n打开`cmd`，查看 git 版本：\n\n```shell\n输入：git --version\n显示：git version 2.20.1.windows.1\n复制代码\n```\n\n如果显示类似`git version 2.20.1.windows.1`的 Git 版本，说明你的电脑是安装过 Git 的；否则请左转[打开 Git 的正确姿势](https://juejin.im/post/6844903749631098893#heading-4)，把 Git 安装完了再来，不送。\n\n### 二、查看是否配置了 git 用户名和邮箱\n\n```shell\n输入：git config user.name\n显示：用户名\n输入：git config user.email\n显示用户邮箱\n复制代码\n```\n\n如果没有配置，那么需要配置用户名和邮箱：\n\n```shell\n输入：git config --global user.name \"xxx\"\n\n输入：git config --global user.email \"xxx\"\n复制代码\n```\n\n### 三、查看是否配置过 SSH Key(密钥)\n\n```shell\n输入：cd ~/.ssh\n输入：ls，\n复制代码\n```\n\n查看该文件下的文件，看是否存在 `id_isa` 和 `id_isa.pub` 文件（也可以是别的文件名，只要 `yourName` 和 `yourName.pub` 成对存在就可以），如果存在的话，证明已经存在 ssh key 了，可以直接跳过`4、生成SSH Key`这一步骤，\n\n### 四、生成 SSH Key(密钥)\n\n```shell\n输入: ssh-keygen -t rsa -C \"你的邮箱\"\n复制代码\n```\n\n此处会提示`Enter file in which to save the key (/Users/shutong/.ssh/id_rsa):`这样一段内容,让我们输入文件名，如果第 3 步的文件存在的话最好在这里修改一下文件名以防覆盖之前的内容；如果第 3 步的文件不存在的话则直接按`enter`键就好了。\n\n之后会有提示你是否需要设置密码，如果设置了每次使用 Git 都会用到密码，一般都是直接不写为空，直接`enter`就好了。\n\n上述操作执行完毕后，在`~/.ssh/`目录会生成`XXX-rsa`(私钥)和`XXX-rsa.pub`(公钥)，它们默认的存储路径是：\n\n> C:\\Users\\Administrator.ssh\n\n**注意**\n\n> 个人建议生成的 rsa 最好单独命名不要使用默认名称，因为有可能 sshkey 可能会用在多个地方，一不小心就可能被覆盖然后导致 git 功能异常\n\n### 五、添加公钥到你的远程仓库（github）\n\n#### 1 、查看你生成的公钥：\n\n```shell\n输入：cat ~/.ssh/id_rsa.pub\n复制代码\n```\n\n这里会把公钥显示出来，我们把这段内容复制出来。\n\n#### 2、添加公钥到远程仓库:\n\n登陆你的 github 帐户 -> 点击你的头像，然后点击 `Settings` -> 左栏点击 `SSH and GPG keys` -> 点击 `New SSH key`\n\n然后将复制的公钥内容，粘贴进`Key`文本域内。 `title`域，自己随便起个名字。\n\n点击 `Add SSH key`。\n\n#### 2、查看 ssh 文件是否配置成功\n\n```shell\n输入： ssh -T git@github.com\n输出： Hi danygitgit! You've successfully authenticated, but GitHub does not provide shell access.\n复制代码\n```\n\n恭喜你，你的设置已经成功了。\n\n### 六、修改 git 的 remote url\n\n如果之前添加的是`HTTPS`协议的 github 仓库地址，那么每次 push 或者 pull 仍然需要密码，所以，我们需要将其修改为`ssh`协议的，这样，就不需要这么麻烦了。\n\n那么我们应该怎么办呢？\n\n#### 1、查看当前的 remote url\n\n首先进入本地仓库，右键 -> `Git Bash Here`\n\n```shell\n输入： git remote -v\n输出： origin https://github.com/danygitgit/document-library.git (fetch)\n输出： origin https://github.com/danygitgit/document-library.git (push)\n复制代码\n```\n\n如果是以上的结果那么说明此项目是使用`https`协议进行访问的（如果地址是 git 开头则表示是`git`协议）\n\n#### 2、复制远程仓库的 ssh 链接\n\n登陆你的远程仓库，在上面可以看到你的 ssh 协议相应的 url，类似：\n\n> git@github.com:danygitgit/document-library.git\n\n复制此 ssh 链接。\n\n#### 2、修改 git 的 remote url\n\n方法有三种：\n\n1. 修改命令\n\n> git remote origin set-url [url]\n\n1. 先删后加\n\n> git remote rm origin git remote add origin [url]\n\n1. 直接修改`config`文件\n\n找到仓库下 `.git` 文件夹下的`config`文件，打开，可以看到以下内容\n\n> [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote \"origin\"] url =https://github.com/danygitgit/document-library.git fetch = +refs/heads/_:refs/remotes/origin/_[branch \"master\"] remote = origin merge = refs/heads/master\n\n将文件中的 `url =https://github.com/danygitgit/document-library.git`更改为 `url = git@github.com:danygitgit/document-library.git` 即可。\n\n修改后的文件如下\n\n> [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote \"origin\"] url = git@github.com:danygitgit/document-library.git fetch = +refs/heads/_:refs/remotes/origin/_[branch \"master\"] remote = origin merge = refs/heads/master\n\n以后，不管是 push 还是 pull，你都不需要再提交密码了。\n\n### 七、Sourcetree 配置 ssh 密钥\n\n`SourceTree`是一款 git 管理可视化工具，就不需要繁琐的敲打命令行了。个人比较推荐，无论在 windows 环境还是 mac 的 os 环境。[官网链接](https://www.sourcetreeapp.com/)\n\n关于`SourceTree`的安装及配置就不赘述了，具体请参考\n\n- [Git SourceTree 免登陆安装及配置 生成 ssh](https://blog.csdn.net/wangjiangrong/article/details/80287041)\n- [SOURCETREE 3.1.3 版本跳过 BITBUCKET 注册方法（亲测好用） | 淡忘&天涯](https://www.cnblogs.com/liuxin-673855200/p/11151835.html)\n- [Sourcetree 配置 ssh 密钥](https://jingyan.baidu.com/article/9faa7231cdec65473d28cb11.html)\n\n# 总结\n\n磨刀不误砍柴工。勇于尝试，善于总结。开启你的 Git 踩坑之旅吧！\n\n路漫漫其修远兮，希望 Git 可以帮我们记录每一个脚印，每一步成长。与诸君共勉。\n\n祝大家 2020 更上一层楼！\n","source":"_posts/【转载】git配置ssh服务.md","raw":"---\ntitle: 【转载】git配置ssh服务\ntags:\n  - git\ncategories:\n  - 工具\n  - 版本控制\nabbrlink: 1071\ndate: 2020-03-01 14:22:35\n---\n\n原文：https://juejin.cn/post/6844904066032599054\n\n# 前言\n\n在管理 Git 项目上，很多时候都是直接使用`https url`克隆到本地，当然也有有些人使用`SSH url`克隆到本地。\n\n这两种方式的主要区别在于：\n\n- 使用`https url`克隆对初学者来说会比较方便，复制`https url`然后到 git Bash 里面直接用 clone 命令克隆到本地就好了，但是每次 fetch 和 push 代码都需要输入账号和密码，这也是 https 方式的麻烦之处。\n- 而使用`SSH url`克隆却需要在克隆之前先配置和添加好`SSH key`，因此，如果你想要使用`SSH url`克隆的话，你必须是这个项目的拥有者。否则你是无法添加`SSH key`的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行 fetch 和 push 也可以另外进行设置。\n\n下面主要是讲述如何配置使用 ssh 方式来提交和克隆代码。\n\n<!-- more -->\n\n# 正文\n\n## 配置本机 ssh\n\n### 一、确定的是你的电脑上是安装过 Git\n\n打开`cmd`，查看 git 版本：\n\n```shell\n输入：git --version\n显示：git version 2.20.1.windows.1\n复制代码\n```\n\n如果显示类似`git version 2.20.1.windows.1`的 Git 版本，说明你的电脑是安装过 Git 的；否则请左转[打开 Git 的正确姿势](https://juejin.im/post/6844903749631098893#heading-4)，把 Git 安装完了再来，不送。\n\n### 二、查看是否配置了 git 用户名和邮箱\n\n```shell\n输入：git config user.name\n显示：用户名\n输入：git config user.email\n显示用户邮箱\n复制代码\n```\n\n如果没有配置，那么需要配置用户名和邮箱：\n\n```shell\n输入：git config --global user.name \"xxx\"\n\n输入：git config --global user.email \"xxx\"\n复制代码\n```\n\n### 三、查看是否配置过 SSH Key(密钥)\n\n```shell\n输入：cd ~/.ssh\n输入：ls，\n复制代码\n```\n\n查看该文件下的文件，看是否存在 `id_isa` 和 `id_isa.pub` 文件（也可以是别的文件名，只要 `yourName` 和 `yourName.pub` 成对存在就可以），如果存在的话，证明已经存在 ssh key 了，可以直接跳过`4、生成SSH Key`这一步骤，\n\n### 四、生成 SSH Key(密钥)\n\n```shell\n输入: ssh-keygen -t rsa -C \"你的邮箱\"\n复制代码\n```\n\n此处会提示`Enter file in which to save the key (/Users/shutong/.ssh/id_rsa):`这样一段内容,让我们输入文件名，如果第 3 步的文件存在的话最好在这里修改一下文件名以防覆盖之前的内容；如果第 3 步的文件不存在的话则直接按`enter`键就好了。\n\n之后会有提示你是否需要设置密码，如果设置了每次使用 Git 都会用到密码，一般都是直接不写为空，直接`enter`就好了。\n\n上述操作执行完毕后，在`~/.ssh/`目录会生成`XXX-rsa`(私钥)和`XXX-rsa.pub`(公钥)，它们默认的存储路径是：\n\n> C:\\Users\\Administrator.ssh\n\n**注意**\n\n> 个人建议生成的 rsa 最好单独命名不要使用默认名称，因为有可能 sshkey 可能会用在多个地方，一不小心就可能被覆盖然后导致 git 功能异常\n\n### 五、添加公钥到你的远程仓库（github）\n\n#### 1 、查看你生成的公钥：\n\n```shell\n输入：cat ~/.ssh/id_rsa.pub\n复制代码\n```\n\n这里会把公钥显示出来，我们把这段内容复制出来。\n\n#### 2、添加公钥到远程仓库:\n\n登陆你的 github 帐户 -> 点击你的头像，然后点击 `Settings` -> 左栏点击 `SSH and GPG keys` -> 点击 `New SSH key`\n\n然后将复制的公钥内容，粘贴进`Key`文本域内。 `title`域，自己随便起个名字。\n\n点击 `Add SSH key`。\n\n#### 2、查看 ssh 文件是否配置成功\n\n```shell\n输入： ssh -T git@github.com\n输出： Hi danygitgit! You've successfully authenticated, but GitHub does not provide shell access.\n复制代码\n```\n\n恭喜你，你的设置已经成功了。\n\n### 六、修改 git 的 remote url\n\n如果之前添加的是`HTTPS`协议的 github 仓库地址，那么每次 push 或者 pull 仍然需要密码，所以，我们需要将其修改为`ssh`协议的，这样，就不需要这么麻烦了。\n\n那么我们应该怎么办呢？\n\n#### 1、查看当前的 remote url\n\n首先进入本地仓库，右键 -> `Git Bash Here`\n\n```shell\n输入： git remote -v\n输出： origin https://github.com/danygitgit/document-library.git (fetch)\n输出： origin https://github.com/danygitgit/document-library.git (push)\n复制代码\n```\n\n如果是以上的结果那么说明此项目是使用`https`协议进行访问的（如果地址是 git 开头则表示是`git`协议）\n\n#### 2、复制远程仓库的 ssh 链接\n\n登陆你的远程仓库，在上面可以看到你的 ssh 协议相应的 url，类似：\n\n> git@github.com:danygitgit/document-library.git\n\n复制此 ssh 链接。\n\n#### 2、修改 git 的 remote url\n\n方法有三种：\n\n1. 修改命令\n\n> git remote origin set-url [url]\n\n1. 先删后加\n\n> git remote rm origin git remote add origin [url]\n\n1. 直接修改`config`文件\n\n找到仓库下 `.git` 文件夹下的`config`文件，打开，可以看到以下内容\n\n> [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote \"origin\"] url =https://github.com/danygitgit/document-library.git fetch = +refs/heads/_:refs/remotes/origin/_[branch \"master\"] remote = origin merge = refs/heads/master\n\n将文件中的 `url =https://github.com/danygitgit/document-library.git`更改为 `url = git@github.com:danygitgit/document-library.git` 即可。\n\n修改后的文件如下\n\n> [core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote \"origin\"] url = git@github.com:danygitgit/document-library.git fetch = +refs/heads/_:refs/remotes/origin/_[branch \"master\"] remote = origin merge = refs/heads/master\n\n以后，不管是 push 还是 pull，你都不需要再提交密码了。\n\n### 七、Sourcetree 配置 ssh 密钥\n\n`SourceTree`是一款 git 管理可视化工具，就不需要繁琐的敲打命令行了。个人比较推荐，无论在 windows 环境还是 mac 的 os 环境。[官网链接](https://www.sourcetreeapp.com/)\n\n关于`SourceTree`的安装及配置就不赘述了，具体请参考\n\n- [Git SourceTree 免登陆安装及配置 生成 ssh](https://blog.csdn.net/wangjiangrong/article/details/80287041)\n- [SOURCETREE 3.1.3 版本跳过 BITBUCKET 注册方法（亲测好用） | 淡忘&天涯](https://www.cnblogs.com/liuxin-673855200/p/11151835.html)\n- [Sourcetree 配置 ssh 密钥](https://jingyan.baidu.com/article/9faa7231cdec65473d28cb11.html)\n\n# 总结\n\n磨刀不误砍柴工。勇于尝试，善于总结。开启你的 Git 踩坑之旅吧！\n\n路漫漫其修远兮，希望 Git 可以帮我们记录每一个脚印，每一步成长。与诸君共勉。\n\n祝大家 2020 更上一层楼！\n","slug":"【转载】git配置ssh服务","published":1,"updated":"2020-12-01T09:00:00.124Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfh0034khsrgk7e8wkz","content":"<p>原文：<a href=\"https://juejin.cn/post/6844904066032599054\">https://juejin.cn/post/6844904066032599054</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在管理 Git 项目上，很多时候都是直接使用<code>https url</code>克隆到本地，当然也有有些人使用<code>SSH url</code>克隆到本地。</p>\n<p>这两种方式的主要区别在于：</p>\n<ul>\n<li>使用<code>https url</code>克隆对初学者来说会比较方便，复制<code>https url</code>然后到 git Bash 里面直接用 clone 命令克隆到本地就好了，但是每次 fetch 和 push 代码都需要输入账号和密码，这也是 https 方式的麻烦之处。</li>\n<li>而使用<code>SSH url</code>克隆却需要在克隆之前先配置和添加好<code>SSH key</code>，因此，如果你想要使用<code>SSH url</code>克隆的话，你必须是这个项目的拥有者。否则你是无法添加<code>SSH key</code>的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行 fetch 和 push 也可以另外进行设置。</li>\n</ul>\n<p>下面主要是讲述如何配置使用 ssh 方式来提交和克隆代码。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"配置本机-ssh\"><a href=\"#配置本机-ssh\" class=\"headerlink\" title=\"配置本机 ssh\"></a>配置本机 ssh</h2><h3 id=\"一、确定的是你的电脑上是安装过-Git\"><a href=\"#一、确定的是你的电脑上是安装过-Git\" class=\"headerlink\" title=\"一、确定的是你的电脑上是安装过 Git\"></a>一、确定的是你的电脑上是安装过 Git</h3><p>打开<code>cmd</code>，查看 git 版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git --version</span><br><span class=\"line\">显示：git version 2.20.1.windows.1</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果显示类似<code>git version 2.20.1.windows.1</code>的 Git 版本，说明你的电脑是安装过 Git 的；否则请左转<a href=\"https://juejin.im/post/6844903749631098893#heading-4\">打开 Git 的正确姿势</a>，把 Git 安装完了再来，不送。</p>\n<h3 id=\"二、查看是否配置了-git-用户名和邮箱\"><a href=\"#二、查看是否配置了-git-用户名和邮箱\" class=\"headerlink\" title=\"二、查看是否配置了 git 用户名和邮箱\"></a>二、查看是否配置了 git 用户名和邮箱</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git config user.name</span><br><span class=\"line\">显示：用户名</span><br><span class=\"line\">输入：git config user.email</span><br><span class=\"line\">显示用户邮箱</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果没有配置，那么需要配置用户名和邮箱：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git config --global user.name &quot;xxx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输入：git config --global user.email &quot;xxx&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、查看是否配置过-SSH-Key-密钥\"><a href=\"#三、查看是否配置过-SSH-Key-密钥\" class=\"headerlink\" title=\"三、查看是否配置过 SSH Key(密钥)\"></a>三、查看是否配置过 SSH Key(密钥)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：cd ~/.ssh</span><br><span class=\"line\">输入：ls，</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>查看该文件下的文件，看是否存在 <code>id_isa</code> 和 <code>id_isa.pub</code> 文件（也可以是别的文件名，只要 <code>yourName</code> 和 <code>yourName.pub</code> 成对存在就可以），如果存在的话，证明已经存在 ssh key 了，可以直接跳过<code>4、生成SSH Key</code>这一步骤，</p>\n<h3 id=\"四、生成-SSH-Key-密钥\"><a href=\"#四、生成-SSH-Key-密钥\" class=\"headerlink\" title=\"四、生成 SSH Key(密钥)\"></a>四、生成 SSH Key(密钥)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>此处会提示<code>Enter file in which to save the key (/Users/shutong/.ssh/id_rsa):</code>这样一段内容,让我们输入文件名，如果第 3 步的文件存在的话最好在这里修改一下文件名以防覆盖之前的内容；如果第 3 步的文件不存在的话则直接按<code>enter</code>键就好了。</p>\n<p>之后会有提示你是否需要设置密码，如果设置了每次使用 Git 都会用到密码，一般都是直接不写为空，直接<code>enter</code>就好了。</p>\n<p>上述操作执行完毕后，在<code>~/.ssh/</code>目录会生成<code>XXX-rsa</code>(私钥)和<code>XXX-rsa.pub</code>(公钥)，它们默认的存储路径是：</p>\n<blockquote>\n<p>C:\\Users\\Administrator.ssh</p>\n</blockquote>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>个人建议生成的 rsa 最好单独命名不要使用默认名称，因为有可能 sshkey 可能会用在多个地方，一不小心就可能被覆盖然后导致 git 功能异常</p>\n</blockquote>\n<h3 id=\"五、添加公钥到你的远程仓库（github）\"><a href=\"#五、添加公钥到你的远程仓库（github）\" class=\"headerlink\" title=\"五、添加公钥到你的远程仓库（github）\"></a>五、添加公钥到你的远程仓库（github）</h3><h4 id=\"1-、查看你生成的公钥：\"><a href=\"#1-、查看你生成的公钥：\" class=\"headerlink\" title=\"1 、查看你生成的公钥：\"></a>1 、查看你生成的公钥：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这里会把公钥显示出来，我们把这段内容复制出来。</p>\n<h4 id=\"2、添加公钥到远程仓库\"><a href=\"#2、添加公钥到远程仓库\" class=\"headerlink\" title=\"2、添加公钥到远程仓库:\"></a>2、添加公钥到远程仓库:</h4><p>登陆你的 github 帐户 -&gt; 点击你的头像，然后点击 <code>Settings</code> -&gt; 左栏点击 <code>SSH and GPG keys</code> -&gt; 点击 <code>New SSH key</code></p>\n<p>然后将复制的公钥内容，粘贴进<code>Key</code>文本域内。 <code>title</code>域，自己随便起个名字。</p>\n<p>点击 <code>Add SSH key</code>。</p>\n<h4 id=\"2、查看-ssh-文件是否配置成功\"><a href=\"#2、查看-ssh-文件是否配置成功\" class=\"headerlink\" title=\"2、查看 ssh 文件是否配置成功\"></a>2、查看 ssh 文件是否配置成功</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： ssh -T git@github.com</span><br><span class=\"line\">输出： Hi danygitgit! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>恭喜你，你的设置已经成功了。</p>\n<h3 id=\"六、修改-git-的-remote-url\"><a href=\"#六、修改-git-的-remote-url\" class=\"headerlink\" title=\"六、修改 git 的 remote url\"></a>六、修改 git 的 remote url</h3><p>如果之前添加的是<code>HTTPS</code>协议的 github 仓库地址，那么每次 push 或者 pull 仍然需要密码，所以，我们需要将其修改为<code>ssh</code>协议的，这样，就不需要这么麻烦了。</p>\n<p>那么我们应该怎么办呢？</p>\n<h4 id=\"1、查看当前的-remote-url\"><a href=\"#1、查看当前的-remote-url\" class=\"headerlink\" title=\"1、查看当前的 remote url\"></a>1、查看当前的 remote url</h4><p>首先进入本地仓库，右键 -&gt; <code>Git Bash Here</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： git remote -v</span><br><span class=\"line\">输出： origin https://github.com/danygitgit/document-library.git (fetch)</span><br><span class=\"line\">输出： origin https://github.com/danygitgit/document-library.git (push)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果是以上的结果那么说明此项目是使用<code>https</code>协议进行访问的（如果地址是 git 开头则表示是<code>git</code>协议）</p>\n<h4 id=\"2、复制远程仓库的-ssh-链接\"><a href=\"#2、复制远程仓库的-ssh-链接\" class=\"headerlink\" title=\"2、复制远程仓库的 ssh 链接\"></a>2、复制远程仓库的 ssh 链接</h4><p>登陆你的远程仓库，在上面可以看到你的 ssh 协议相应的 url，类似：</p>\n<blockquote>\n<p><a href=\"mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;\">&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:danygitgit/document-library.git</p>\n</blockquote>\n<p>复制此 ssh 链接。</p>\n<h4 id=\"2、修改-git-的-remote-url\"><a href=\"#2、修改-git-的-remote-url\" class=\"headerlink\" title=\"2、修改 git 的 remote url\"></a>2、修改 git 的 remote url</h4><p>方法有三种：</p>\n<ol>\n<li>修改命令</li>\n</ol>\n<blockquote>\n<p>git remote origin set-url [url]</p>\n</blockquote>\n<ol>\n<li>先删后加</li>\n</ol>\n<blockquote>\n<p>git remote rm origin git remote add origin [url]</p>\n</blockquote>\n<ol>\n<li>直接修改<code>config</code>文件</li>\n</ol>\n<p>找到仓库下 <code>.git</code> 文件夹下的<code>config</code>文件，打开，可以看到以下内容</p>\n<blockquote>\n<p>[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote “origin”] url =<a href=\"https://github.com/danygitgit/document-library.git\">https://github.com/danygitgit/document-library.git</a> fetch = +refs/heads/<em>:refs/remotes/origin/</em>[branch “master”] remote = origin merge = refs/heads/master</p>\n</blockquote>\n<p>将文件中的 <code>url =https://github.com/danygitgit/document-library.git</code>更改为 <code>url = git@github.com:danygitgit/document-library.git</code> 即可。</p>\n<p>修改后的文件如下</p>\n<blockquote>\n<p>[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote “origin”] url = <a href=\"mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;\">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>:danygitgit/document-library.git fetch = +refs/heads/<em>:refs/remotes/origin/</em>[branch “master”] remote = origin merge = refs/heads/master</p>\n</blockquote>\n<p>以后，不管是 push 还是 pull，你都不需要再提交密码了。</p>\n<h3 id=\"七、Sourcetree-配置-ssh-密钥\"><a href=\"#七、Sourcetree-配置-ssh-密钥\" class=\"headerlink\" title=\"七、Sourcetree 配置 ssh 密钥\"></a>七、Sourcetree 配置 ssh 密钥</h3><p><code>SourceTree</code>是一款 git 管理可视化工具，就不需要繁琐的敲打命令行了。个人比较推荐，无论在 windows 环境还是 mac 的 os 环境。<a href=\"https://www.sourcetreeapp.com/\">官网链接</a></p>\n<p>关于<code>SourceTree</code>的安装及配置就不赘述了，具体请参考</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/wangjiangrong/article/details/80287041\">Git SourceTree 免登陆安装及配置 生成 ssh</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxin-673855200/p/11151835.html\">SOURCETREE 3.1.3 版本跳过 BITBUCKET 注册方法（亲测好用） | 淡忘&amp;天涯</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/9faa7231cdec65473d28cb11.html\">Sourcetree 配置 ssh 密钥</a></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>磨刀不误砍柴工。勇于尝试，善于总结。开启你的 Git 踩坑之旅吧！</p>\n<p>路漫漫其修远兮，希望 Git 可以帮我们记录每一个脚印，每一步成长。与诸君共勉。</p>\n<p>祝大家 2020 更上一层楼！</p>\n","site":{"data":{}},"excerpt":"<p>原文：<a href=\"https://juejin.cn/post/6844904066032599054\">https://juejin.cn/post/6844904066032599054</a></p>\n<h1 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h1><p>在管理 Git 项目上，很多时候都是直接使用<code>https url</code>克隆到本地，当然也有有些人使用<code>SSH url</code>克隆到本地。</p>\n<p>这两种方式的主要区别在于：</p>\n<ul>\n<li>使用<code>https url</code>克隆对初学者来说会比较方便，复制<code>https url</code>然后到 git Bash 里面直接用 clone 命令克隆到本地就好了，但是每次 fetch 和 push 代码都需要输入账号和密码，这也是 https 方式的麻烦之处。</li>\n<li>而使用<code>SSH url</code>克隆却需要在克隆之前先配置和添加好<code>SSH key</code>，因此，如果你想要使用<code>SSH url</code>克隆的话，你必须是这个项目的拥有者。否则你是无法添加<code>SSH key</code>的，另外 ssh 默认是每次 fetch 和 push 代码都不需要输入账号和密码，如果你想要每次都输入账号密码才能进行 fetch 和 push 也可以另外进行设置。</li>\n</ul>\n<p>下面主要是讲述如何配置使用 ssh 方式来提交和克隆代码。</p>","more":"<h1 id=\"正文\"><a href=\"#正文\" class=\"headerlink\" title=\"正文\"></a>正文</h1><h2 id=\"配置本机-ssh\"><a href=\"#配置本机-ssh\" class=\"headerlink\" title=\"配置本机 ssh\"></a>配置本机 ssh</h2><h3 id=\"一、确定的是你的电脑上是安装过-Git\"><a href=\"#一、确定的是你的电脑上是安装过-Git\" class=\"headerlink\" title=\"一、确定的是你的电脑上是安装过 Git\"></a>一、确定的是你的电脑上是安装过 Git</h3><p>打开<code>cmd</code>，查看 git 版本：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git --version</span><br><span class=\"line\">显示：git version 2.20.1.windows.1</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果显示类似<code>git version 2.20.1.windows.1</code>的 Git 版本，说明你的电脑是安装过 Git 的；否则请左转<a href=\"https://juejin.im/post/6844903749631098893#heading-4\">打开 Git 的正确姿势</a>，把 Git 安装完了再来，不送。</p>\n<h3 id=\"二、查看是否配置了-git-用户名和邮箱\"><a href=\"#二、查看是否配置了-git-用户名和邮箱\" class=\"headerlink\" title=\"二、查看是否配置了 git 用户名和邮箱\"></a>二、查看是否配置了 git 用户名和邮箱</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git config user.name</span><br><span class=\"line\">显示：用户名</span><br><span class=\"line\">输入：git config user.email</span><br><span class=\"line\">显示用户邮箱</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果没有配置，那么需要配置用户名和邮箱：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：git config --global user.name &quot;xxx&quot;</span><br><span class=\"line\"></span><br><span class=\"line\">输入：git config --global user.email &quot;xxx&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"三、查看是否配置过-SSH-Key-密钥\"><a href=\"#三、查看是否配置过-SSH-Key-密钥\" class=\"headerlink\" title=\"三、查看是否配置过 SSH Key(密钥)\"></a>三、查看是否配置过 SSH Key(密钥)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：cd ~/.ssh</span><br><span class=\"line\">输入：ls，</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>查看该文件下的文件，看是否存在 <code>id_isa</code> 和 <code>id_isa.pub</code> 文件（也可以是别的文件名，只要 <code>yourName</code> 和 <code>yourName.pub</code> 成对存在就可以），如果存在的话，证明已经存在 ssh key 了，可以直接跳过<code>4、生成SSH Key</code>这一步骤，</p>\n<h3 id=\"四、生成-SSH-Key-密钥\"><a href=\"#四、生成-SSH-Key-密钥\" class=\"headerlink\" title=\"四、生成 SSH Key(密钥)\"></a>四、生成 SSH Key(密钥)</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入: ssh-keygen -t rsa -C &quot;你的邮箱&quot;</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>此处会提示<code>Enter file in which to save the key (/Users/shutong/.ssh/id_rsa):</code>这样一段内容,让我们输入文件名，如果第 3 步的文件存在的话最好在这里修改一下文件名以防覆盖之前的内容；如果第 3 步的文件不存在的话则直接按<code>enter</code>键就好了。</p>\n<p>之后会有提示你是否需要设置密码，如果设置了每次使用 Git 都会用到密码，一般都是直接不写为空，直接<code>enter</code>就好了。</p>\n<p>上述操作执行完毕后，在<code>~/.ssh/</code>目录会生成<code>XXX-rsa</code>(私钥)和<code>XXX-rsa.pub</code>(公钥)，它们默认的存储路径是：</p>\n<blockquote>\n<p>C:\\Users\\Administrator.ssh</p>\n</blockquote>\n<p><strong>注意</strong></p>\n<blockquote>\n<p>个人建议生成的 rsa 最好单独命名不要使用默认名称，因为有可能 sshkey 可能会用在多个地方，一不小心就可能被覆盖然后导致 git 功能异常</p>\n</blockquote>\n<h3 id=\"五、添加公钥到你的远程仓库（github）\"><a href=\"#五、添加公钥到你的远程仓库（github）\" class=\"headerlink\" title=\"五、添加公钥到你的远程仓库（github）\"></a>五、添加公钥到你的远程仓库（github）</h3><h4 id=\"1-、查看你生成的公钥：\"><a href=\"#1-、查看你生成的公钥：\" class=\"headerlink\" title=\"1 、查看你生成的公钥：\"></a>1 、查看你生成的公钥：</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入：cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>这里会把公钥显示出来，我们把这段内容复制出来。</p>\n<h4 id=\"2、添加公钥到远程仓库\"><a href=\"#2、添加公钥到远程仓库\" class=\"headerlink\" title=\"2、添加公钥到远程仓库:\"></a>2、添加公钥到远程仓库:</h4><p>登陆你的 github 帐户 -&gt; 点击你的头像，然后点击 <code>Settings</code> -&gt; 左栏点击 <code>SSH and GPG keys</code> -&gt; 点击 <code>New SSH key</code></p>\n<p>然后将复制的公钥内容，粘贴进<code>Key</code>文本域内。 <code>title</code>域，自己随便起个名字。</p>\n<p>点击 <code>Add SSH key</code>。</p>\n<h4 id=\"2、查看-ssh-文件是否配置成功\"><a href=\"#2、查看-ssh-文件是否配置成功\" class=\"headerlink\" title=\"2、查看 ssh 文件是否配置成功\"></a>2、查看 ssh 文件是否配置成功</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： ssh -T git@github.com</span><br><span class=\"line\">输出： Hi danygitgit! You&#x27;ve successfully authenticated, but GitHub does not provide shell access.</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>恭喜你，你的设置已经成功了。</p>\n<h3 id=\"六、修改-git-的-remote-url\"><a href=\"#六、修改-git-的-remote-url\" class=\"headerlink\" title=\"六、修改 git 的 remote url\"></a>六、修改 git 的 remote url</h3><p>如果之前添加的是<code>HTTPS</code>协议的 github 仓库地址，那么每次 push 或者 pull 仍然需要密码，所以，我们需要将其修改为<code>ssh</code>协议的，这样，就不需要这么麻烦了。</p>\n<p>那么我们应该怎么办呢？</p>\n<h4 id=\"1、查看当前的-remote-url\"><a href=\"#1、查看当前的-remote-url\" class=\"headerlink\" title=\"1、查看当前的 remote url\"></a>1、查看当前的 remote url</h4><p>首先进入本地仓库，右键 -&gt; <code>Git Bash Here</code></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">输入： git remote -v</span><br><span class=\"line\">输出： origin https://github.com/danygitgit/document-library.git (fetch)</span><br><span class=\"line\">输出： origin https://github.com/danygitgit/document-library.git (push)</span><br><span class=\"line\">复制代码</span><br></pre></td></tr></table></figure>\n\n<p>如果是以上的结果那么说明此项目是使用<code>https</code>协议进行访问的（如果地址是 git 开头则表示是<code>git</code>协议）</p>\n<h4 id=\"2、复制远程仓库的-ssh-链接\"><a href=\"#2、复制远程仓库的-ssh-链接\" class=\"headerlink\" title=\"2、复制远程仓库的 ssh 链接\"></a>2、复制远程仓库的 ssh 链接</h4><p>登陆你的远程仓库，在上面可以看到你的 ssh 协议相应的 url，类似：</p>\n<blockquote>\n<p><a href=\"mailto:&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;\">&#x67;&#105;&#116;&#64;&#103;&#105;&#x74;&#104;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a>:danygitgit/document-library.git</p>\n</blockquote>\n<p>复制此 ssh 链接。</p>\n<h4 id=\"2、修改-git-的-remote-url\"><a href=\"#2、修改-git-的-remote-url\" class=\"headerlink\" title=\"2、修改 git 的 remote url\"></a>2、修改 git 的 remote url</h4><p>方法有三种：</p>\n<ol>\n<li>修改命令</li>\n</ol>\n<blockquote>\n<p>git remote origin set-url [url]</p>\n</blockquote>\n<ol>\n<li>先删后加</li>\n</ol>\n<blockquote>\n<p>git remote rm origin git remote add origin [url]</p>\n</blockquote>\n<ol>\n<li>直接修改<code>config</code>文件</li>\n</ol>\n<p>找到仓库下 <code>.git</code> 文件夹下的<code>config</code>文件，打开，可以看到以下内容</p>\n<blockquote>\n<p>[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote “origin”] url =<a href=\"https://github.com/danygitgit/document-library.git\">https://github.com/danygitgit/document-library.git</a> fetch = +refs/heads/<em>:refs/remotes/origin/</em>[branch “master”] remote = origin merge = refs/heads/master</p>\n</blockquote>\n<p>将文件中的 <code>url =https://github.com/danygitgit/document-library.git</code>更改为 <code>url = git@github.com:danygitgit/document-library.git</code> 即可。</p>\n<p>修改后的文件如下</p>\n<blockquote>\n<p>[core] repositoryformatversion = 0 filemode = false bare = false logallrefupdates = true symlinks = false ignorecase = true[remote “origin”] url = <a href=\"mailto:&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;\">&#103;&#105;&#116;&#x40;&#x67;&#105;&#116;&#104;&#117;&#98;&#46;&#99;&#111;&#x6d;</a>:danygitgit/document-library.git fetch = +refs/heads/<em>:refs/remotes/origin/</em>[branch “master”] remote = origin merge = refs/heads/master</p>\n</blockquote>\n<p>以后，不管是 push 还是 pull，你都不需要再提交密码了。</p>\n<h3 id=\"七、Sourcetree-配置-ssh-密钥\"><a href=\"#七、Sourcetree-配置-ssh-密钥\" class=\"headerlink\" title=\"七、Sourcetree 配置 ssh 密钥\"></a>七、Sourcetree 配置 ssh 密钥</h3><p><code>SourceTree</code>是一款 git 管理可视化工具，就不需要繁琐的敲打命令行了。个人比较推荐，无论在 windows 环境还是 mac 的 os 环境。<a href=\"https://www.sourcetreeapp.com/\">官网链接</a></p>\n<p>关于<code>SourceTree</code>的安装及配置就不赘述了，具体请参考</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/wangjiangrong/article/details/80287041\">Git SourceTree 免登陆安装及配置 生成 ssh</a></li>\n<li><a href=\"https://www.cnblogs.com/liuxin-673855200/p/11151835.html\">SOURCETREE 3.1.3 版本跳过 BITBUCKET 注册方法（亲测好用） | 淡忘&amp;天涯</a></li>\n<li><a href=\"https://jingyan.baidu.com/article/9faa7231cdec65473d28cb11.html\">Sourcetree 配置 ssh 密钥</a></li>\n</ul>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>磨刀不误砍柴工。勇于尝试，善于总结。开启你的 Git 踩坑之旅吧！</p>\n<p>路漫漫其修远兮，希望 Git 可以帮我们记录每一个脚印，每一步成长。与诸君共勉。</p>\n<p>祝大家 2020 更上一层楼！</p>"},{"title":"【转载】使用Object键值替换Switch","abbrlink":10849,"date":"2020-09-21T07:07:47.000Z","_content":"\n转载地址：https://www.cnblogs.com/ZerlinM/p/13595810.html\n原文地址：https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals\n\n在许多编程语言中，switch 语句存在 - 但是它应该更长吗？如果你是一个 JavaScript 程序员，你经常跳进和跳出对象，创建，实例化和操作它们。对象非常灵活，它们是 JavaScript 中几乎所有内容的核心，使用它们代替 switch 语句是我最近一直在做的事情。\n\n<!-- more -->\n\n## 什么是 switch 语句?\n\n如果您以前没有使用 switch 过或者有点不确定它是做什么的，那么让我们来看看吧。什么 switch 是输入并提供输出，例如正在运行的代码。\n让我们来看一个通常的 switch 陈述：\n\n```js\nvar type = 'coke';\nvar drink;\nswitch (type) {\n  case 'coke':\n    drink = 'Coke';\n    break;\n  case 'pepsi':\n    drink = 'Pepsi';\n    break;\n  default:\n    drink = 'Unknown drink!';\n}\nconsole.log(drink); // 'Coke'\n```\n\n它类似于 if 和 else 语句，但它应该评估单个值 - 在 switch 我们使用 a case 来评估每个值。\n当你开始看到很多 else if 陈述时，某些东西可能是错误的，通常你会使用类似于 switch 它更适合目的和意图的东西。这是一些 else if 滥用：\n\n```js\nfunction getDrink(type) {\n  if (type === 'coke') {\n    type = 'Coke';\n  } else if (type === 'pepsi') {\n    type = 'Pepsi';\n  } else if (type === 'mountain dew') {\n    type = 'Mountain Dew';\n  } else if (type === 'lemonade') {\n    type = 'Lemonade';\n  } else if (type === 'fanta') {\n    type = 'Fanta';\n  } else {\n    // acts as our \"default\"\n    type = 'Unknown drink!';\n  }\n  return \"You've picked a \" + type;\n}\n```\n\n这个实现太松散了，有错误的余地，加上它是一个非常冗长的语法，可以不断重复自己。还有一个黑客攻击的空间，因为你可以评估每个内部的多个表达式 else if，例如 else if (type === ‘coke’ && somethingElse ！== ‘apples’)。这 switch 是该工作的最佳工具，尽管您需要不断添加 break;语句以防止案件失败，这是其众多问题之一。\n\n## 开关问题\n\nswitch 从程序控制流程到其处理代码块的非标准方式存在多个问题，其余的 JavaScript 使用花括号而交换机则不然。从语法上讲，它不是 JavaScript 的最佳选择，也不是它的设计。我们被迫 break;在每个语句中手动添加语句 case，这可能导致难以调试和嵌套错误，如果我们忘记了！道格拉斯·克罗克福德（Douglas Crockford）曾多次撰写和谈论过这个问题，他的建议是谨慎对待。\n\n我们经常在 JavaScript 中使用 Object 查找，通常用于我们永远不会考虑使用的东西 switch- 那么为什么不使用 Object 键值替换 switch？对象更灵活，具有更好的可读性和可维护性，我们不需要手动 break;每个“案例”。他们对新的 JavaScript 开发人员也很友好，因为他们是标准对象。\n\n随着“案例”数量的增加，对象（哈希表）的性能优于交换机的平均成本（案例的顺序很重要）。对象方法是哈希表查找，并且交换机必须评估每个案例，直到它遇到匹配和中断。\n\n## 对象文本查找\n\n我们一直使用对象，无论是构造函数还是文字。通常，我们将它们用于对象查找目的，以从 Object 属性中获取值。\n让我们设置一个 String 仅返回值的简单 Object 键值。\n\n```js\nfunction getDrink(type) {\n  var drinks = {\n    coke: 'Coke',\n    pepsi: 'Pepsi',\n    lemonade: 'Lemonade',\n    default: 'Default item'\n  };\n  return 'The drink I chose was ' + (drinks[type] || drinks['default']);\n}\n\nvar drink = getDrink('coke');\n// The drink I chose was Coke\nconsole.log(drink);\n```\n\n我们从交换机中保存了几行代码，对我而言，数据在演示中更加清晰。我们甚至可以进一步简化它，没有默认情况：\n\n```js\nfunction getDrink(type) {\n  return (\n    'The drink I chose was ' +\n    {\n      coke: 'Coke',\n      pepsi: 'Pepsi',\n      lemonade: 'Lemonade'\n    }[type]\n  );\n}\n```\n\n但是，我们可能需要比 a 更复杂的代码 String，这可能会挂在函数内部。为了简洁和易于理解的示例，我将从新创建的函数返回上述字符串：\n\n```js\nvar type = 'coke';\n\nvar drinks = {\n  coke: function () {\n    return 'Coke';\n  },\n  pepsi: function () {\n    return 'Pepsi';\n  },\n  lemonade: function () {\n    return 'Lemonade';\n  }\n};\n```\n\n区别在于我们需要调用 Object 文字的函数：\n\n```js\ndrinks[type]();\n```\n\n更具可维护性和可读性。我们也不必担心 break;陈述和案例会失败-这只是一个普通的对象。\n通常，我们会 switch 在函数内部放入一个 return 值，因此在这里做同样的事情，然后将对象文字查找转换为可用的函数：\n\n```js\nfunction getDrink(type) {\n  var drinks = {\n    coke: function () {\n      return 'Coke';\n    },\n    pepsi: function () {\n      return 'Pepsi';\n    },\n    lemonade: function () {\n      return 'Lemonade';\n    }\n  };\n  return drinks[type]();\n}\n\n// let's call it\nvar drink = getDrink('coke');\nconsole.log(drink); // 'Coke'\n```\n\n不错，很容易，但这并不能满足“ default”的要求 case，因此我们可以轻松创建它：\n\n```js\nfunction getDrink(type) {\n  var fn;\n  var drinks = {\n    coke: function () {\n      return 'Coke';\n    },\n    pepsi: function () {\n      return 'Pepsi';\n    },\n    lemonade: function () {\n      return 'Lemonade';\n    },\n    default: function () {\n      return 'Default item';\n    }\n  };\n  // if the drinks Object contains the type\n  // passed in, let's use it\n  if (drinks[type]) {\n    fn = drinks[type];\n  } else {\n    // otherwise we'll assign the default\n    // also the same as drinks.default\n    // it's just a little more consistent using square\n    // bracket notation everywhere\n    fn = drinks['default'];\n  }\n  return fn();\n}\n\n// called with \"dr pepper\"\nvar drink = getDrink('dr pepper');\nconsole.log(drink); // 'Default item'\n```\n\n我们可以简化上面的内容，if 并在表达式中 else 使用 or ||运算符：\n\n```js\nfunction getDrink(type) {\n  var drinks = {\n    coke: function () {\n      return 'Coke';\n    },\n    pepsi: function () {\n      return 'Pepsi';\n    },\n    lemonade: function () {\n      return 'Lemonade';\n    },\n    default: function () {\n      return 'Default item';\n    }\n  };\n  return (drinks[type] || drinks['default'])();\n}\n```\n\n这会将两个对象查找包装在括号内( )，将它们视为表达式。然后调用表达式的结果。如果 drinks[type]在查找中未找到，则默认为 drinks[‘default’]，简单！\n我们不具备总是 return 里面的函数或者，我们可以改变引用任何变量然后返回它：\n\n```js\nfunction getDrink(type) {\n  var drink;\n  var drinks = {\n    coke: function () {\n      drink = 'Coke';\n    },\n    pepsi: function () {\n      drink = 'Pepsi';\n    },\n    lemonade: function () {\n      drink = 'Lemonade';\n    },\n    default: function () {\n      drink = 'Default item';\n    }\n  };\n\n  // invoke it\n  (drinks[type] || drinks['default'])();\n\n  // return a String with chosen drink\n  return 'The drink I chose was ' + drink;\n}\n\nvar drink = getDrink('coke');\n// The drink I chose was Coke\nconsole.log(drink);\n```\n\n这些是非常基本的解决方案，而 Object 字面量包含一个 function 返回 a 的值 String，在您只需要 a 的情况下 String，可以将 a String 用作键的值-在某些情况下，该函数将包含逻辑，该逻辑将从该函数返回。如果您要混合使用函数和字符串，则始终可以使用函数来保存查找 type 和调用（如果是函数）会更容易-我们不想尝试调用 String。\n\n## 对象字面量“告吹”\n\n对于 switch 案例，我们可以让它们失败（这意味着一个以上的案例可以应用于特定的代码段）：\n\n```js\nvar type = 'coke';\nvar snack;\nswitch (type) {\n  case 'coke':\n  case 'pepsi':\n    snack = 'Drink';\n    break;\n  case 'cookies':\n  case 'crisps':\n    snack = 'Food';\n    break;\n  default:\n    drink = 'Unknown type!';\n}\nconsole.log(snack); // 'Drink'\n```\n\n让我们 coke 和 pepsi“贯穿”以不添加 break 语句。为 Object Literals 执行此操作非常简单且更具说明性 - 并且不易出错。我们的代码突然变得更加结构化，可读性和可重用性：\n\n```js\nfunction getSnack(type) {\n  var snack;\n  function isDrink() {\n    return (snack = 'Drink');\n  }\n  function isFood() {\n    return (snack = 'Food');\n  }\n  var snacks = {\n    coke: isDrink,\n    pepsi: isDrink,\n    cookies: isFood,\n    crisps: isFood\n  };\n  return snacks[type]();\n}\n\nvar snack = getSnack('coke');\nconsole.log(snack); // 'Drink'\n```\n\n## 总结\n\nObject 键值是 JavaScript 中流动的一种更自然的控制，switch 有点陈旧和笨重，并且容易出现调试错误。对象更具可扩展性，可维护性，我们可以更好地测试它们。它们也是设计模式的一部分，在日常的其他编程任务中非常常用。对象键值可以包含函数以及任何其他对象类型，这使它们非常灵活！键值中的每个函数也都有函数作用域，因此我们可以从我们调用的父函数 getDrink 返回闭包（在这种情况下返回闭包）。\n","source":"_posts/【转载】使用Object键值替换Switch.md","raw":"---\ntitle: 【转载】使用Object键值替换Switch\ntags:\n  - 技巧\n  - 转载\ncategories:\n  - 前端\n  - JS\nabbrlink: 10849\ndate: 2020-09-21 15:07:47\n---\n\n转载地址：https://www.cnblogs.com/ZerlinM/p/13595810.html\n原文地址：https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals\n\n在许多编程语言中，switch 语句存在 - 但是它应该更长吗？如果你是一个 JavaScript 程序员，你经常跳进和跳出对象，创建，实例化和操作它们。对象非常灵活，它们是 JavaScript 中几乎所有内容的核心，使用它们代替 switch 语句是我最近一直在做的事情。\n\n<!-- more -->\n\n## 什么是 switch 语句?\n\n如果您以前没有使用 switch 过或者有点不确定它是做什么的，那么让我们来看看吧。什么 switch 是输入并提供输出，例如正在运行的代码。\n让我们来看一个通常的 switch 陈述：\n\n```js\nvar type = 'coke';\nvar drink;\nswitch (type) {\n  case 'coke':\n    drink = 'Coke';\n    break;\n  case 'pepsi':\n    drink = 'Pepsi';\n    break;\n  default:\n    drink = 'Unknown drink!';\n}\nconsole.log(drink); // 'Coke'\n```\n\n它类似于 if 和 else 语句，但它应该评估单个值 - 在 switch 我们使用 a case 来评估每个值。\n当你开始看到很多 else if 陈述时，某些东西可能是错误的，通常你会使用类似于 switch 它更适合目的和意图的东西。这是一些 else if 滥用：\n\n```js\nfunction getDrink(type) {\n  if (type === 'coke') {\n    type = 'Coke';\n  } else if (type === 'pepsi') {\n    type = 'Pepsi';\n  } else if (type === 'mountain dew') {\n    type = 'Mountain Dew';\n  } else if (type === 'lemonade') {\n    type = 'Lemonade';\n  } else if (type === 'fanta') {\n    type = 'Fanta';\n  } else {\n    // acts as our \"default\"\n    type = 'Unknown drink!';\n  }\n  return \"You've picked a \" + type;\n}\n```\n\n这个实现太松散了，有错误的余地，加上它是一个非常冗长的语法，可以不断重复自己。还有一个黑客攻击的空间，因为你可以评估每个内部的多个表达式 else if，例如 else if (type === ‘coke’ && somethingElse ！== ‘apples’)。这 switch 是该工作的最佳工具，尽管您需要不断添加 break;语句以防止案件失败，这是其众多问题之一。\n\n## 开关问题\n\nswitch 从程序控制流程到其处理代码块的非标准方式存在多个问题，其余的 JavaScript 使用花括号而交换机则不然。从语法上讲，它不是 JavaScript 的最佳选择，也不是它的设计。我们被迫 break;在每个语句中手动添加语句 case，这可能导致难以调试和嵌套错误，如果我们忘记了！道格拉斯·克罗克福德（Douglas Crockford）曾多次撰写和谈论过这个问题，他的建议是谨慎对待。\n\n我们经常在 JavaScript 中使用 Object 查找，通常用于我们永远不会考虑使用的东西 switch- 那么为什么不使用 Object 键值替换 switch？对象更灵活，具有更好的可读性和可维护性，我们不需要手动 break;每个“案例”。他们对新的 JavaScript 开发人员也很友好，因为他们是标准对象。\n\n随着“案例”数量的增加，对象（哈希表）的性能优于交换机的平均成本（案例的顺序很重要）。对象方法是哈希表查找，并且交换机必须评估每个案例，直到它遇到匹配和中断。\n\n## 对象文本查找\n\n我们一直使用对象，无论是构造函数还是文字。通常，我们将它们用于对象查找目的，以从 Object 属性中获取值。\n让我们设置一个 String 仅返回值的简单 Object 键值。\n\n```js\nfunction getDrink(type) {\n  var drinks = {\n    coke: 'Coke',\n    pepsi: 'Pepsi',\n    lemonade: 'Lemonade',\n    default: 'Default item'\n  };\n  return 'The drink I chose was ' + (drinks[type] || drinks['default']);\n}\n\nvar drink = getDrink('coke');\n// The drink I chose was Coke\nconsole.log(drink);\n```\n\n我们从交换机中保存了几行代码，对我而言，数据在演示中更加清晰。我们甚至可以进一步简化它，没有默认情况：\n\n```js\nfunction getDrink(type) {\n  return (\n    'The drink I chose was ' +\n    {\n      coke: 'Coke',\n      pepsi: 'Pepsi',\n      lemonade: 'Lemonade'\n    }[type]\n  );\n}\n```\n\n但是，我们可能需要比 a 更复杂的代码 String，这可能会挂在函数内部。为了简洁和易于理解的示例，我将从新创建的函数返回上述字符串：\n\n```js\nvar type = 'coke';\n\nvar drinks = {\n  coke: function () {\n    return 'Coke';\n  },\n  pepsi: function () {\n    return 'Pepsi';\n  },\n  lemonade: function () {\n    return 'Lemonade';\n  }\n};\n```\n\n区别在于我们需要调用 Object 文字的函数：\n\n```js\ndrinks[type]();\n```\n\n更具可维护性和可读性。我们也不必担心 break;陈述和案例会失败-这只是一个普通的对象。\n通常，我们会 switch 在函数内部放入一个 return 值，因此在这里做同样的事情，然后将对象文字查找转换为可用的函数：\n\n```js\nfunction getDrink(type) {\n  var drinks = {\n    coke: function () {\n      return 'Coke';\n    },\n    pepsi: function () {\n      return 'Pepsi';\n    },\n    lemonade: function () {\n      return 'Lemonade';\n    }\n  };\n  return drinks[type]();\n}\n\n// let's call it\nvar drink = getDrink('coke');\nconsole.log(drink); // 'Coke'\n```\n\n不错，很容易，但这并不能满足“ default”的要求 case，因此我们可以轻松创建它：\n\n```js\nfunction getDrink(type) {\n  var fn;\n  var drinks = {\n    coke: function () {\n      return 'Coke';\n    },\n    pepsi: function () {\n      return 'Pepsi';\n    },\n    lemonade: function () {\n      return 'Lemonade';\n    },\n    default: function () {\n      return 'Default item';\n    }\n  };\n  // if the drinks Object contains the type\n  // passed in, let's use it\n  if (drinks[type]) {\n    fn = drinks[type];\n  } else {\n    // otherwise we'll assign the default\n    // also the same as drinks.default\n    // it's just a little more consistent using square\n    // bracket notation everywhere\n    fn = drinks['default'];\n  }\n  return fn();\n}\n\n// called with \"dr pepper\"\nvar drink = getDrink('dr pepper');\nconsole.log(drink); // 'Default item'\n```\n\n我们可以简化上面的内容，if 并在表达式中 else 使用 or ||运算符：\n\n```js\nfunction getDrink(type) {\n  var drinks = {\n    coke: function () {\n      return 'Coke';\n    },\n    pepsi: function () {\n      return 'Pepsi';\n    },\n    lemonade: function () {\n      return 'Lemonade';\n    },\n    default: function () {\n      return 'Default item';\n    }\n  };\n  return (drinks[type] || drinks['default'])();\n}\n```\n\n这会将两个对象查找包装在括号内( )，将它们视为表达式。然后调用表达式的结果。如果 drinks[type]在查找中未找到，则默认为 drinks[‘default’]，简单！\n我们不具备总是 return 里面的函数或者，我们可以改变引用任何变量然后返回它：\n\n```js\nfunction getDrink(type) {\n  var drink;\n  var drinks = {\n    coke: function () {\n      drink = 'Coke';\n    },\n    pepsi: function () {\n      drink = 'Pepsi';\n    },\n    lemonade: function () {\n      drink = 'Lemonade';\n    },\n    default: function () {\n      drink = 'Default item';\n    }\n  };\n\n  // invoke it\n  (drinks[type] || drinks['default'])();\n\n  // return a String with chosen drink\n  return 'The drink I chose was ' + drink;\n}\n\nvar drink = getDrink('coke');\n// The drink I chose was Coke\nconsole.log(drink);\n```\n\n这些是非常基本的解决方案，而 Object 字面量包含一个 function 返回 a 的值 String，在您只需要 a 的情况下 String，可以将 a String 用作键的值-在某些情况下，该函数将包含逻辑，该逻辑将从该函数返回。如果您要混合使用函数和字符串，则始终可以使用函数来保存查找 type 和调用（如果是函数）会更容易-我们不想尝试调用 String。\n\n## 对象字面量“告吹”\n\n对于 switch 案例，我们可以让它们失败（这意味着一个以上的案例可以应用于特定的代码段）：\n\n```js\nvar type = 'coke';\nvar snack;\nswitch (type) {\n  case 'coke':\n  case 'pepsi':\n    snack = 'Drink';\n    break;\n  case 'cookies':\n  case 'crisps':\n    snack = 'Food';\n    break;\n  default:\n    drink = 'Unknown type!';\n}\nconsole.log(snack); // 'Drink'\n```\n\n让我们 coke 和 pepsi“贯穿”以不添加 break 语句。为 Object Literals 执行此操作非常简单且更具说明性 - 并且不易出错。我们的代码突然变得更加结构化，可读性和可重用性：\n\n```js\nfunction getSnack(type) {\n  var snack;\n  function isDrink() {\n    return (snack = 'Drink');\n  }\n  function isFood() {\n    return (snack = 'Food');\n  }\n  var snacks = {\n    coke: isDrink,\n    pepsi: isDrink,\n    cookies: isFood,\n    crisps: isFood\n  };\n  return snacks[type]();\n}\n\nvar snack = getSnack('coke');\nconsole.log(snack); // 'Drink'\n```\n\n## 总结\n\nObject 键值是 JavaScript 中流动的一种更自然的控制，switch 有点陈旧和笨重，并且容易出现调试错误。对象更具可扩展性，可维护性，我们可以更好地测试它们。它们也是设计模式的一部分，在日常的其他编程任务中非常常用。对象键值可以包含函数以及任何其他对象类型，这使它们非常灵活！键值中的每个函数也都有函数作用域，因此我们可以从我们调用的父函数 getDrink 返回闭包（在这种情况下返回闭包）。\n","slug":"【转载】使用Object键值替换Switch","published":1,"updated":"2020-12-02T02:29:46.352Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfj0039khsr9lbl1ceu","content":"<p>转载地址：<a href=\"https://www.cnblogs.com/ZerlinM/p/13595810.html\">https://www.cnblogs.com/ZerlinM/p/13595810.html</a><br>原文地址：<a href=\"https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals\">https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals</a></p>\n<p>在许多编程语言中，switch 语句存在 - 但是它应该更长吗？如果你是一个 JavaScript 程序员，你经常跳进和跳出对象，创建，实例化和操作它们。对象非常灵活，它们是 JavaScript 中几乎所有内容的核心，使用它们代替 switch 语句是我最近一直在做的事情。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是-switch-语句\"><a href=\"#什么是-switch-语句\" class=\"headerlink\" title=\"什么是 switch 语句?\"></a>什么是 switch 语句?</h2><p>如果您以前没有使用 switch 过或者有点不确定它是做什么的，那么让我们来看看吧。什么 switch 是输入并提供输出，例如正在运行的代码。<br>让我们来看一个通常的 switch 陈述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> drink;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;coke&#x27;</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;pepsi&#x27;</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Unknown drink!&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink); <span class=\"comment\">// &#x27;Coke&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>它类似于 if 和 else 语句，但它应该评估单个值 - 在 switch 我们使用 a case 来评估每个值。<br>当你开始看到很多 else if 陈述时，某些东西可能是错误的，通常你会使用类似于 switch 它更适合目的和意图的东西。这是一些 else if 滥用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;coke&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;pepsi&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;mountain dew&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Mountain Dew&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;lemonade&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;fanta&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Fanta&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// acts as our &quot;default&quot;</span></span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Unknown drink!&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;You&#x27;ve picked a &quot;</span> + type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个实现太松散了，有错误的余地，加上它是一个非常冗长的语法，可以不断重复自己。还有一个黑客攻击的空间，因为你可以评估每个内部的多个表达式 else if，例如 else if (type === ‘coke’ &amp;&amp; somethingElse ！== ‘apples’)。这 switch 是该工作的最佳工具，尽管您需要不断添加 break;语句以防止案件失败，这是其众多问题之一。</p>\n<h2 id=\"开关问题\"><a href=\"#开关问题\" class=\"headerlink\" title=\"开关问题\"></a>开关问题</h2><p>switch 从程序控制流程到其处理代码块的非标准方式存在多个问题，其余的 JavaScript 使用花括号而交换机则不然。从语法上讲，它不是 JavaScript 的最佳选择，也不是它的设计。我们被迫 break;在每个语句中手动添加语句 case，这可能导致难以调试和嵌套错误，如果我们忘记了！道格拉斯·克罗克福德（Douglas Crockford）曾多次撰写和谈论过这个问题，他的建议是谨慎对待。</p>\n<p>我们经常在 JavaScript 中使用 Object 查找，通常用于我们永远不会考虑使用的东西 switch- 那么为什么不使用 Object 键值替换 switch？对象更灵活，具有更好的可读性和可维护性，我们不需要手动 break;每个“案例”。他们对新的 JavaScript 开发人员也很友好，因为他们是标准对象。</p>\n<p>随着“案例”数量的增加，对象（哈希表）的性能优于交换机的平均成本（案例的顺序很重要）。对象方法是哈希表查找，并且交换机必须评估每个案例，直到它遇到匹配和中断。</p>\n<h2 id=\"对象文本查找\"><a href=\"#对象文本查找\" class=\"headerlink\" title=\"对象文本查找\"></a>对象文本查找</h2><p>我们一直使用对象，无论是构造函数还是文字。通常，我们将它们用于对象查找目的，以从 Object 属性中获取值。<br>让我们设置一个 String 仅返回值的简单 Object 键值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">    pepsi: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">    lemonade: <span class=\"string\">&#x27;Lemonade&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;Default item&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// The drink I chose was Coke</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink);</span><br></pre></td></tr></table></figure>\n\n<p>我们从交换机中保存了几行代码，对我而言，数据在演示中更加清晰。我们甚至可以进一步简化它，没有默认情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;The drink I chose was &#x27;</span> +</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      coke: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">      pepsi: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">      lemonade: <span class=\"string\">&#x27;Lemonade&#x27;</span></span><br><span class=\"line\">    &#125;[type]</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，我们可能需要比 a 更复杂的代码 String，这可能会挂在函数内部。为了简洁和易于理解的示例，我将从新创建的函数返回上述字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">  coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>区别在于我们需要调用 Object 文字的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drinks[type]();</span><br></pre></td></tr></table></figure>\n\n<p>更具可维护性和可读性。我们也不必担心 break;陈述和案例会失败-这只是一个普通的对象。<br>通常，我们会 switch 在函数内部放入一个 return 值，因此在这里做同样的事情，然后将对象文字查找转换为可用的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> drinks[type]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let&#x27;s call it</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink); <span class=\"comment\">// &#x27;Coke&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>不错，很容易，但这并不能满足“ default”的要求 case，因此我们可以轻松创建它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// if the drinks Object contains the type</span></span><br><span class=\"line\">  <span class=\"comment\">// passed in, let&#x27;s use it</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (drinks[type]) &#123;</span><br><span class=\"line\">    fn = drinks[type];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// otherwise we&#x27;ll assign the default</span></span><br><span class=\"line\">    <span class=\"comment\">// also the same as drinks.default</span></span><br><span class=\"line\">    <span class=\"comment\">// it&#x27;s just a little more consistent using square</span></span><br><span class=\"line\">    <span class=\"comment\">// bracket notation everywhere</span></span><br><span class=\"line\">    fn = drinks[<span class=\"string\">&#x27;default&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// called with &quot;dr pepper&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;dr pepper&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink); <span class=\"comment\">// &#x27;Default item&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以简化上面的内容，if 并在表达式中 else 使用 or ||运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>])();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这会将两个对象查找包装在括号内( )，将它们视为表达式。然后调用表达式的结果。如果 drinks[type]在查找中未找到，则默认为 drinks[‘default’]，简单！<br>我们不具备总是 return 里面的函数或者，我们可以改变引用任何变量然后返回它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drink;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// invoke it</span></span><br><span class=\"line\">  (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// return a String with chosen drink</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + drink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// The drink I chose was Coke</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink);</span><br></pre></td></tr></table></figure>\n\n<p>这些是非常基本的解决方案，而 Object 字面量包含一个 function 返回 a 的值 String，在您只需要 a 的情况下 String，可以将 a String 用作键的值-在某些情况下，该函数将包含逻辑，该逻辑将从该函数返回。如果您要混合使用函数和字符串，则始终可以使用函数来保存查找 type 和调用（如果是函数）会更容易-我们不想尝试调用 String。</p>\n<h2 id=\"对象字面量“告吹”\"><a href=\"#对象字面量“告吹”\" class=\"headerlink\" title=\"对象字面量“告吹”\"></a>对象字面量“告吹”</h2><p>对于 switch 案例，我们可以让它们失败（这意味着一个以上的案例可以应用于特定的代码段）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> snack;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;coke&#x27;</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;pepsi&#x27;</span>:</span><br><span class=\"line\">    snack = <span class=\"string\">&#x27;Drink&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;cookies&#x27;</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;crisps&#x27;</span>:</span><br><span class=\"line\">    snack = <span class=\"string\">&#x27;Food&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Unknown type!&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(snack); <span class=\"comment\">// &#x27;Drink&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>让我们 coke 和 pepsi“贯穿”以不添加 break 语句。为 Object Literals 执行此操作非常简单且更具说明性 - 并且不易出错。我们的代码突然变得更加结构化，可读性和可重用性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSnack</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> snack;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDrink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (snack = <span class=\"string\">&#x27;Drink&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFood</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (snack = <span class=\"string\">&#x27;Food&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> snacks = &#123;</span><br><span class=\"line\">    coke: isDrink,</span><br><span class=\"line\">    pepsi: isDrink,</span><br><span class=\"line\">    cookies: isFood,</span><br><span class=\"line\">    crisps: isFood</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> snacks[type]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> snack = getSnack(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(snack); <span class=\"comment\">// &#x27;Drink&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Object 键值是 JavaScript 中流动的一种更自然的控制，switch 有点陈旧和笨重，并且容易出现调试错误。对象更具可扩展性，可维护性，我们可以更好地测试它们。它们也是设计模式的一部分，在日常的其他编程任务中非常常用。对象键值可以包含函数以及任何其他对象类型，这使它们非常灵活！键值中的每个函数也都有函数作用域，因此我们可以从我们调用的父函数 getDrink 返回闭包（在这种情况下返回闭包）。</p>\n","site":{"data":{}},"excerpt":"<p>转载地址：<a href=\"https://www.cnblogs.com/ZerlinM/p/13595810.html\">https://www.cnblogs.com/ZerlinM/p/13595810.html</a><br>原文地址：<a href=\"https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals\">https://ultimatecourses.com/blog/deprecating-the-switch-statement-for-object-literals</a></p>\n<p>在许多编程语言中，switch 语句存在 - 但是它应该更长吗？如果你是一个 JavaScript 程序员，你经常跳进和跳出对象，创建，实例化和操作它们。对象非常灵活，它们是 JavaScript 中几乎所有内容的核心，使用它们代替 switch 语句是我最近一直在做的事情。</p>","more":"<h2 id=\"什么是-switch-语句\"><a href=\"#什么是-switch-语句\" class=\"headerlink\" title=\"什么是 switch 语句?\"></a>什么是 switch 语句?</h2><p>如果您以前没有使用 switch 过或者有点不确定它是做什么的，那么让我们来看看吧。什么 switch 是输入并提供输出，例如正在运行的代码。<br>让我们来看一个通常的 switch 陈述：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> drink;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;coke&#x27;</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;pepsi&#x27;</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Unknown drink!&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink); <span class=\"comment\">// &#x27;Coke&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>它类似于 if 和 else 语句，但它应该评估单个值 - 在 switch 我们使用 a case 来评估每个值。<br>当你开始看到很多 else if 陈述时，某些东西可能是错误的，通常你会使用类似于 switch 它更适合目的和意图的东西。这是一些 else if 滥用：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;coke&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;pepsi&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;mountain dew&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Mountain Dew&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;lemonade&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (type === <span class=\"string\">&#x27;fanta&#x27;</span>) &#123;</span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Fanta&#x27;</span>;</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// acts as our &quot;default&quot;</span></span><br><span class=\"line\">    type = <span class=\"string\">&#x27;Unknown drink!&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&quot;You&#x27;ve picked a &quot;</span> + type;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这个实现太松散了，有错误的余地，加上它是一个非常冗长的语法，可以不断重复自己。还有一个黑客攻击的空间，因为你可以评估每个内部的多个表达式 else if，例如 else if (type === ‘coke’ &amp;&amp; somethingElse ！== ‘apples’)。这 switch 是该工作的最佳工具，尽管您需要不断添加 break;语句以防止案件失败，这是其众多问题之一。</p>\n<h2 id=\"开关问题\"><a href=\"#开关问题\" class=\"headerlink\" title=\"开关问题\"></a>开关问题</h2><p>switch 从程序控制流程到其处理代码块的非标准方式存在多个问题，其余的 JavaScript 使用花括号而交换机则不然。从语法上讲，它不是 JavaScript 的最佳选择，也不是它的设计。我们被迫 break;在每个语句中手动添加语句 case，这可能导致难以调试和嵌套错误，如果我们忘记了！道格拉斯·克罗克福德（Douglas Crockford）曾多次撰写和谈论过这个问题，他的建议是谨慎对待。</p>\n<p>我们经常在 JavaScript 中使用 Object 查找，通常用于我们永远不会考虑使用的东西 switch- 那么为什么不使用 Object 键值替换 switch？对象更灵活，具有更好的可读性和可维护性，我们不需要手动 break;每个“案例”。他们对新的 JavaScript 开发人员也很友好，因为他们是标准对象。</p>\n<p>随着“案例”数量的增加，对象（哈希表）的性能优于交换机的平均成本（案例的顺序很重要）。对象方法是哈希表查找，并且交换机必须评估每个案例，直到它遇到匹配和中断。</p>\n<h2 id=\"对象文本查找\"><a href=\"#对象文本查找\" class=\"headerlink\" title=\"对象文本查找\"></a>对象文本查找</h2><p>我们一直使用对象，无论是构造函数还是文字。通常，我们将它们用于对象查找目的，以从 Object 属性中获取值。<br>让我们设置一个 String 仅返回值的简单 Object 键值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">    pepsi: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">    lemonade: <span class=\"string\">&#x27;Lemonade&#x27;</span>,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"string\">&#x27;Default item&#x27;</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// The drink I chose was Coke</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink);</span><br></pre></td></tr></table></figure>\n\n<p>我们从交换机中保存了几行代码，对我而言，数据在演示中更加清晰。我们甚至可以进一步简化它，没有默认情况：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (</span><br><span class=\"line\">    <span class=\"string\">&#x27;The drink I chose was &#x27;</span> +</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      coke: <span class=\"string\">&#x27;Coke&#x27;</span>,</span><br><span class=\"line\">      pepsi: <span class=\"string\">&#x27;Pepsi&#x27;</span>,</span><br><span class=\"line\">      lemonade: <span class=\"string\">&#x27;Lemonade&#x27;</span></span><br><span class=\"line\">    &#125;[type]</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>但是，我们可能需要比 a 更复杂的代码 String，这可能会挂在函数内部。为了简洁和易于理解的示例，我将从新创建的函数返回上述字符串：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">  coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>区别在于我们需要调用 Object 文字的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">drinks[type]();</span><br></pre></td></tr></table></figure>\n\n<p>更具可维护性和可读性。我们也不必担心 break;陈述和案例会失败-这只是一个普通的对象。<br>通常，我们会 switch 在函数内部放入一个 return 值，因此在这里做同样的事情，然后将对象文字查找转换为可用的函数：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> drinks[type]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// let&#x27;s call it</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink); <span class=\"comment\">// &#x27;Coke&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>不错，很容易，但这并不能满足“ default”的要求 case，因此我们可以轻松创建它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> fn;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"comment\">// if the drinks Object contains the type</span></span><br><span class=\"line\">  <span class=\"comment\">// passed in, let&#x27;s use it</span></span><br><span class=\"line\">  <span class=\"keyword\">if</span> (drinks[type]) &#123;</span><br><span class=\"line\">    fn = drinks[type];</span><br><span class=\"line\">  &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// otherwise we&#x27;ll assign the default</span></span><br><span class=\"line\">    <span class=\"comment\">// also the same as drinks.default</span></span><br><span class=\"line\">    <span class=\"comment\">// it&#x27;s just a little more consistent using square</span></span><br><span class=\"line\">    <span class=\"comment\">// bracket notation everywhere</span></span><br><span class=\"line\">    fn = drinks[<span class=\"string\">&#x27;default&#x27;</span>];</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// called with &quot;dr pepper&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;dr pepper&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink); <span class=\"comment\">// &#x27;Default item&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>我们可以简化上面的内容，if 并在表达式中 else 使用 or ||运算符：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>])();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这会将两个对象查找包装在括号内( )，将它们视为表达式。然后调用表达式的结果。如果 drinks[type]在查找中未找到，则默认为 drinks[‘default’]，简单！<br>我们不具备总是 return 里面的函数或者，我们可以改变引用任何变量然后返回它：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getDrink</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drink;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> drinks = &#123;</span><br><span class=\"line\">    coke: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Coke&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    pepsi: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Pepsi&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    lemonade: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Lemonade&#x27;</span>;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    <span class=\"keyword\">default</span>: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">      drink = <span class=\"string\">&#x27;Default item&#x27;</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// invoke it</span></span><br><span class=\"line\">  (drinks[type] || drinks[<span class=\"string\">&#x27;default&#x27;</span>])();</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// return a String with chosen drink</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"string\">&#x27;The drink I chose was &#x27;</span> + drink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> drink = getDrink(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"comment\">// The drink I chose was Coke</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(drink);</span><br></pre></td></tr></table></figure>\n\n<p>这些是非常基本的解决方案，而 Object 字面量包含一个 function 返回 a 的值 String，在您只需要 a 的情况下 String，可以将 a String 用作键的值-在某些情况下，该函数将包含逻辑，该逻辑将从该函数返回。如果您要混合使用函数和字符串，则始终可以使用函数来保存查找 type 和调用（如果是函数）会更容易-我们不想尝试调用 String。</p>\n<h2 id=\"对象字面量“告吹”\"><a href=\"#对象字面量“告吹”\" class=\"headerlink\" title=\"对象字面量“告吹”\"></a>对象字面量“告吹”</h2><p>对于 switch 案例，我们可以让它们失败（这意味着一个以上的案例可以应用于特定的代码段）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> type = <span class=\"string\">&#x27;coke&#x27;</span>;</span><br><span class=\"line\"><span class=\"keyword\">var</span> snack;</span><br><span class=\"line\"><span class=\"keyword\">switch</span> (type) &#123;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;coke&#x27;</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;pepsi&#x27;</span>:</span><br><span class=\"line\">    snack = <span class=\"string\">&#x27;Drink&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;cookies&#x27;</span>:</span><br><span class=\"line\">  <span class=\"keyword\">case</span> <span class=\"string\">&#x27;crisps&#x27;</span>:</span><br><span class=\"line\">    snack = <span class=\"string\">&#x27;Food&#x27;</span>;</span><br><span class=\"line\">    <span class=\"keyword\">break</span>;</span><br><span class=\"line\">  <span class=\"keyword\">default</span>:</span><br><span class=\"line\">    drink = <span class=\"string\">&#x27;Unknown type!&#x27;</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(snack); <span class=\"comment\">// &#x27;Drink&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<p>让我们 coke 和 pepsi“贯穿”以不添加 break 语句。为 Object Literals 执行此操作非常简单且更具说明性 - 并且不易出错。我们的代码突然变得更加结构化，可读性和可重用性：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">getSnack</span>(<span class=\"params\">type</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> snack;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isDrink</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (snack = <span class=\"string\">&#x27;Drink&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">isFood</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> (snack = <span class=\"string\">&#x27;Food&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> snacks = &#123;</span><br><span class=\"line\">    coke: isDrink,</span><br><span class=\"line\">    pepsi: isDrink,</span><br><span class=\"line\">    cookies: isFood,</span><br><span class=\"line\">    crisps: isFood</span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> snacks[type]();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> snack = getSnack(<span class=\"string\">&#x27;coke&#x27;</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(snack); <span class=\"comment\">// &#x27;Drink&#x27;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>Object 键值是 JavaScript 中流动的一种更自然的控制，switch 有点陈旧和笨重，并且容易出现调试错误。对象更具可扩展性，可维护性，我们可以更好地测试它们。它们也是设计模式的一部分，在日常的其他编程任务中非常常用。对象键值可以包含函数以及任何其他对象类型，这使它们非常灵活！键值中的每个函数也都有函数作用域，因此我们可以从我们调用的父函数 getDrink 返回闭包（在这种情况下返回闭包）。</p>"},{"title":"【转载】滚动视差-CSS不在话下","abbrlink":56953,"date":"2019-12-29T07:34:56.000Z","_content":"\n掘金链接：https://juejin.im/post/5b6d0756e51d4562b31ad23c\n\ngithub 链接：https://github.com/chokcoco/iCSS/issues/37\n","source":"_posts/【转载】滚动视差-CSS不在话下.md","raw":"---\ntitle: 【转载】滚动视差-CSS不在话下\ntags:\n  - 转载\ncategories:\n  - 前端\n  - CSS\nabbrlink: 56953\ndate: 2019-12-29 15:34:56\n---\n\n掘金链接：https://juejin.im/post/5b6d0756e51d4562b31ad23c\n\ngithub 链接：https://github.com/chokcoco/iCSS/issues/37\n","slug":"【转载】滚动视差-CSS不在话下","published":1,"updated":"2020-11-30T07:45:30.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfj003ckhsr288ndctf","content":"<p>掘金链接：<a href=\"https://juejin.im/post/5b6d0756e51d4562b31ad23c\">https://juejin.im/post/5b6d0756e51d4562b31ad23c</a></p>\n<p>github 链接：<a href=\"https://github.com/chokcoco/iCSS/issues/37\">https://github.com/chokcoco/iCSS/issues/37</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>掘金链接：<a href=\"https://juejin.im/post/5b6d0756e51d4562b31ad23c\">https://juejin.im/post/5b6d0756e51d4562b31ad23c</a></p>\n<p>github 链接：<a href=\"https://github.com/chokcoco/iCSS/issues/37\">https://github.com/chokcoco/iCSS/issues/37</a></p>\n"},{"title":"【转载】彻底理解cookie-session-token","abbrlink":44111,"date":"2019-03-16T02:52:48.000Z","_content":"\n## 发展史\n\n1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮\n\n2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了\n\n3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！ 如果访问服务器多了， 就得由成千上万，甚至几十万个。\n\n这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？ 机器B可没有小F的 session id啊。\n\n有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。\n\n那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。\n\n<!-- more -->\n\n{% asset_img 负载均衡1.png 负载均衡1 %}\n\n后来有个叫Memcached的支了招： 把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。\n\n{% asset_img 负载均衡2.png 负载均衡2 %}\n\n也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担\n\n4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？\n\n可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。\n\n嗯，对了，关键点就是验证 ！\n\n比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。\n\n不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。\n\n那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。\n\n{% asset_img token算法.png token算法 %}\n\n这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者： 对不起，没有认证。\n\n{% asset_img token验证.png token验证 %}\n\nToken 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。\n\n当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。\n\n这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！\n\n解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！\n\n## Cookie\n\ncookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。\n\ncookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。\n\n## Session\n\nsession 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。\n\nsession 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。\n\n服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。\n\n## Token\n\n在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。\n\n以下几点特性会让你在程序中使用基于Token的身份验证\n\n1. 无状态、可扩展\n2. 支持移动设备\n3. 跨程序调用\n4. 安全\n\n那些使用基于Token的身份验证的大佬们\n\n大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。\n\n### Token的起源\n\n在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。\n\n#### 基于服务器的验证\n\n我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。\n\n在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。\n\n下图展示了基于服务器验证的原理\n\n{% asset_img session.png session %}\n\n随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。\n\n#### 基于服务器验证方式暴露的一些问题\n\n1. Session：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。\n2. 可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。\n3. CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。\n4. CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。\n\n在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。\n\n#### 基于Token的验证原理\n\n基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。\n\n这种概念解决了在服务端存储信息时的许多问题\n\nNoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。\n\n基于Token的身份验证的过程如下:\n\n1. 用户通过用户名和密码发送请求。\n2. 程序验证。\n3. 程序返回一个签名的token 给客户端。\n4. 客户端储存token,并且每次用于每次发送请求。\n5. 服务端验证token并返回数据。\n\n每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin: *，让服务器能接受到来自所有域的请求。需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。\n\n实现思路：\n\n{% asset_img token流程.png token流程 %}\n\n1. 用户登录校验，校验成功后就返回Token给客户端。\n2. 客户端收到数据后保存在客户端\n3. 客户端每次访问API是携带Token到服务器端。\n4. 服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码\n\n当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。\n\n我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）\n\n#### Tokens的优势\n\n**无状态、可扩展**\n\n在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。\n\n如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。\n\n但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。\n\n**安全性**\n\n请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。\n\ntoken是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。\n\n**可扩展性**\n\nTokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。\n\n使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。\n\n**多平台跨域**\n\n我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。\n\nHaving our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.\n\n只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。\n\n```js\nAccess-Control-Allow-Origin: *\n```\n\n## 来源\n\nhttps://zhuanlan.zhihu.com/p/63061864\n","source":"_posts/【转载】彻底理解cookie-session-token.md","raw":"---\ntitle: 【转载】彻底理解cookie-session-token\ntags:\n  - 缓存\ncategories:\n  - 前端\n  - JS\nabbrlink: 44111\ndate: 2019-03-16 10:52:48\n---\n\n## 发展史\n\n1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮\n\n2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了\n\n3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！ 如果访问服务器多了， 就得由成千上万，甚至几十万个。\n\n这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？ 机器B可没有小F的 session id啊。\n\n有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。\n\n那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。\n\n<!-- more -->\n\n{% asset_img 负载均衡1.png 负载均衡1 %}\n\n后来有个叫Memcached的支了招： 把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。\n\n{% asset_img 负载均衡2.png 负载均衡2 %}\n\n也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担\n\n4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？\n\n可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。\n\n嗯，对了，关键点就是验证 ！\n\n比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。\n\n不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。\n\n那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。\n\n{% asset_img token算法.png token算法 %}\n\n这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者： 对不起，没有认证。\n\n{% asset_img token验证.png token验证 %}\n\nToken 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。\n\n当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。\n\n这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！\n\n解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！\n\n## Cookie\n\ncookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。\n\ncookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。\n\n## Session\n\nsession 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。\n\nsession 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。\n\n服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。\n\n## Token\n\n在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。\n\n以下几点特性会让你在程序中使用基于Token的身份验证\n\n1. 无状态、可扩展\n2. 支持移动设备\n3. 跨程序调用\n4. 安全\n\n那些使用基于Token的身份验证的大佬们\n\n大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。\n\n### Token的起源\n\n在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。\n\n#### 基于服务器的验证\n\n我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。\n\n在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。\n\n下图展示了基于服务器验证的原理\n\n{% asset_img session.png session %}\n\n随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。\n\n#### 基于服务器验证方式暴露的一些问题\n\n1. Session：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。\n2. 可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。\n3. CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。\n4. CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。\n\n在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。\n\n#### 基于Token的验证原理\n\n基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。\n\n这种概念解决了在服务端存储信息时的许多问题\n\nNoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。\n\n基于Token的身份验证的过程如下:\n\n1. 用户通过用户名和密码发送请求。\n2. 程序验证。\n3. 程序返回一个签名的token 给客户端。\n4. 客户端储存token,并且每次用于每次发送请求。\n5. 服务端验证token并返回数据。\n\n每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin: *，让服务器能接受到来自所有域的请求。需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。\n\n实现思路：\n\n{% asset_img token流程.png token流程 %}\n\n1. 用户登录校验，校验成功后就返回Token给客户端。\n2. 客户端收到数据后保存在客户端\n3. 客户端每次访问API是携带Token到服务器端。\n4. 服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码\n\n当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。\n\n我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）\n\n#### Tokens的优势\n\n**无状态、可扩展**\n\n在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。\n\n如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。\n\n但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。\n\n**安全性**\n\n请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。\n\ntoken是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。\n\n**可扩展性**\n\nTokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。\n\n使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。\n\n**多平台跨域**\n\n我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。\n\nHaving our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.\n\n只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。\n\n```js\nAccess-Control-Allow-Origin: *\n```\n\n## 来源\n\nhttps://zhuanlan.zhihu.com/p/63061864\n","slug":"【转载】彻底理解cookie-session-token","published":1,"updated":"2020-11-22T02:57:13.972Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfl003hkhsr7l2kb7eu","content":"<h2 id=\"发展史\"><a href=\"#发展史\" class=\"headerlink\" title=\"发展史\"></a>发展史</h2><p>1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮</p>\n<p>2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了</p>\n<p>3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！ 如果访问服务器多了， 就得由成千上万，甚至几十万个。</p>\n<p>这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？ 机器B可没有小F的 session id啊。</p>\n<p>有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。</p>\n<p>那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。</p>\n<a id=\"more\"></a>\n\n<img src=\"/posts/44111/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A11.png\" class=\"\" title=\"负载均衡1\">\n\n<p>后来有个叫Memcached的支了招： 把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。</p>\n<img src=\"/posts/44111/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A12.png\" class=\"\" title=\"负载均衡2\">\n\n<p>也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担</p>\n<p>4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？</p>\n<p>可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。</p>\n<p>嗯，对了，关键点就是验证 ！</p>\n<p>比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。</p>\n<p>不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。</p>\n<p>那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。</p>\n<img src=\"/posts/44111/token%E7%AE%97%E6%B3%95.png\" class=\"\" title=\"token算法\">\n\n<p>这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者： 对不起，没有认证。</p>\n<img src=\"/posts/44111/token%E9%AA%8C%E8%AF%81.png\" class=\"\" title=\"token验证\">\n\n<p>Token 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。</p>\n<p>当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p>\n<p>这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！</p>\n<p>解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！</p>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p>\n<p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p>\n<p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p>\n<p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p>\n<h2 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h2><p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p>\n<p>以下几点特性会让你在程序中使用基于Token的身份验证</p>\n<ol>\n<li>无状态、可扩展</li>\n<li>支持移动设备</li>\n<li>跨程序调用</li>\n<li>安全</li>\n</ol>\n<p>那些使用基于Token的身份验证的大佬们</p>\n<p>大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。</p>\n<h3 id=\"Token的起源\"><a href=\"#Token的起源\" class=\"headerlink\" title=\"Token的起源\"></a>Token的起源</h3><p>在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。</p>\n<h4 id=\"基于服务器的验证\"><a href=\"#基于服务器的验证\" class=\"headerlink\" title=\"基于服务器的验证\"></a>基于服务器的验证</h4><p>我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。</p>\n<p>在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。</p>\n<p>下图展示了基于服务器验证的原理</p>\n<img src=\"/posts/44111/session.png\" class=\"\" title=\"session\">\n\n<p>随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。</p>\n<h4 id=\"基于服务器验证方式暴露的一些问题\"><a href=\"#基于服务器验证方式暴露的一些问题\" class=\"headerlink\" title=\"基于服务器验证方式暴露的一些问题\"></a>基于服务器验证方式暴露的一些问题</h4><ol>\n<li>Session：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。</li>\n<li>可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。</li>\n<li>CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。</li>\n<li>CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。</li>\n</ol>\n<p>在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。</p>\n<h4 id=\"基于Token的验证原理\"><a href=\"#基于Token的验证原理\" class=\"headerlink\" title=\"基于Token的验证原理\"></a>基于Token的验证原理</h4><p>基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。</p>\n<p>这种概念解决了在服务端存储信息时的许多问题</p>\n<p>NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。</p>\n<p>基于Token的身份验证的过程如下:</p>\n<ol>\n<li>用户通过用户名和密码发送请求。</li>\n<li>程序验证。</li>\n<li>程序返回一个签名的token 给客户端。</li>\n<li>客户端储存token,并且每次用于每次发送请求。</li>\n<li>服务端验证token并返回数据。</li>\n</ol>\n<p>每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin: *，让服务器能接受到来自所有域的请求。需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。</p>\n<p>实现思路：</p>\n<img src=\"/posts/44111/token%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"token流程\">\n\n<ol>\n<li>用户登录校验，校验成功后就返回Token给客户端。</li>\n<li>客户端收到数据后保存在客户端</li>\n<li>客户端每次访问API是携带Token到服务器端。</li>\n<li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li>\n</ol>\n<p>当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。</p>\n<p>我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）</p>\n<h4 id=\"Tokens的优势\"><a href=\"#Tokens的优势\" class=\"headerlink\" title=\"Tokens的优势\"></a>Tokens的优势</h4><p><strong>无状态、可扩展</strong></p>\n<p>在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。</p>\n<p>如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。</p>\n<p>但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。</p>\n<p><strong>安全性</strong></p>\n<p>请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。</p>\n<p>token是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。</p>\n<p><strong>可扩展性</strong></p>\n<p>Tokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。</p>\n<p>使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。</p>\n<p><strong>多平台跨域</strong></p>\n<p>我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。</p>\n<p>Having our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.</p>\n<p>只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p><a href=\"https://zhuanlan.zhihu.com/p/63061864\">https://zhuanlan.zhihu.com/p/63061864</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"发展史\"><a href=\"#发展史\" class=\"headerlink\" title=\"发展史\"></a>发展史</h2><p>1、很久很久以前，Web 基本上就是文档的浏览而已， 既然是浏览，作为服务器， 不需要记录谁在某一段时间里都浏览了什么文档，每次请求都是一个新的HTTP协议， 就是请求加响应， 尤其是我不用记住是谁刚刚发了HTTP请求， 每个请求对我来说都是全新的。这段时间很嗨皮</p>\n<p>2、但是随着交互式Web应用的兴起，像在线购物网站，需要登录的网站等等，马上就面临一个问题，那就是要管理会话，必须记住哪些人登录系统， 哪些人往自己的购物车中放商品， 也就是说我必须把每个人区分开，这就是一个不小的挑战，因为HTTP请求是无状态的，所以想出的办法就是给大家发一个会话标识(session id), 说白了就是一个随机的字串，每个人收到的都不一样， 每次大家向我发起HTTP请求的时候，把这个字符串给一并捎过来， 这样我就能区分开谁是谁了</p>\n<p>3、这样大家很嗨皮了，可是服务器就不嗨皮了，每个人只需要保存自己的session id，而服务器要保存所有人的session id ！ 如果访问服务器多了， 就得由成千上万，甚至几十万个。</p>\n<p>这对服务器说是一个巨大的开销 ， 严重的限制了服务器扩展能力， 比如说我用两个机器组成了一个集群， 小F通过机器A登录了系统， 那session id会保存在机器A上， 假设小F的下一次请求被转发到机器B怎么办？ 机器B可没有小F的 session id啊。</p>\n<p>有时候会采用一点小伎俩： session sticky ， 就是让小F的请求一直粘连在机器A上， 但是这也不管用， 要是机器A挂掉了， 还得转到机器B去。</p>\n<p>那只好做session 的复制了， 把session id 在两个机器之间搬来搬去， 快累死了。</p>","more":"<img src=\"/posts/44111/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A11.png\" class=\"\" title=\"负载均衡1\">\n\n<p>后来有个叫Memcached的支了招： 把session id 集中存储到一个地方， 所有的机器都来访问这个地方的数据， 这样一来，就不用复制了， 但是增加了单点失败的可能性， 要是那个负责session 的机器挂了， 所有人都得重新登录一遍， 估计得被人骂死。</p>\n<img src=\"/posts/44111/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A12.png\" class=\"\" title=\"负载均衡2\">\n\n<p>也尝试把这个单点的机器也搞出集群，增加可靠性， 但不管如何， 这小小的session 对我来说是一个沉重的负担</p>\n<p>4、于是有人就一直在思考， 我为什么要保存这可恶的session呢， 只让每个客户端去保存该多好？</p>\n<p>可是如果不保存这些session id , 怎么验证客户端发给我的session id 的确是我生成的呢？ 如果不去验证，我们都不知道他们是不是合法登录的用户， 那些不怀好意的家伙们就可以伪造session id , 为所欲为了。</p>\n<p>嗯，对了，关键点就是验证 ！</p>\n<p>比如说， 小F已经登录了系统， 我给他发一个令牌(token)， 里边包含了小F的 user id， 下一次小F 再次通过Http 请求访问我的时候， 把这个token 通过Http header 带过来不就可以了。</p>\n<p>不过这和session id没有本质区别啊， 任何人都可以可以伪造， 所以我得想点儿办法， 让别人伪造不了。</p>\n<p>那就对数据做一个签名吧， 比如说我用HMAC-SHA256 算法，加上一个只有我才知道的密钥， 对数据做一个签名， 把这个签名和数据一起作为token ， 由于密钥别人不知道， 就无法伪造token了。</p>\n<img src=\"/posts/44111/token%E7%AE%97%E6%B3%95.png\" class=\"\" title=\"token算法\">\n\n<p>这个token 我不保存， 当小F把这个token 给我发过来的时候，我再用同样的HMAC-SHA256 算法和同样的密钥，对数据再计算一次签名， 和token 中的签名做个比较， 如果相同， 我就知道小F已经登录过了，并且可以直接取到小F的user id , 如果不相同， 数据部分肯定被人篡改过， 我就告诉发送者： 对不起，没有认证。</p>\n<img src=\"/posts/44111/token%E9%AA%8C%E8%AF%81.png\" class=\"\" title=\"token验证\">\n\n<p>Token 中的数据是明文保存的（虽然我会用Base64做下编码， 但那不是加密）， 还是可以被别人看到的， 所以我不能在其中保存像密码这样的敏感信息。</p>\n<p>当然， 如果一个人的token 被别人偷走了， 那我也没办法， 我也会认为小偷就是合法用户， 这其实和一个人的session id 被别人偷走是一样的。</p>\n<p>这样一来， 我就不保存session id 了， 我只是生成token , 然后验证token ， 我用我的CPU计算时间获取了我的session 存储空间 ！</p>\n<p>解除了session id这个负担， 可以说是无事一身轻， 我的机器集群现在可以轻松地做水平扩展， 用户访问量增大， 直接加机器就行。 这种无状态的感觉实在是太好了！</p>\n<h2 id=\"Cookie\"><a href=\"#Cookie\" class=\"headerlink\" title=\"Cookie\"></a>Cookie</h2><p>cookie 是一个非常具体的东西，指的就是浏览器里面能永久存储的一种数据，仅仅是浏览器实现的一种数据存储功能。</p>\n<p>cookie由服务器生成，发送给浏览器，浏览器把cookie以kv形式保存到某个目录下的文本文件内，下一次请求同一网站时会把该cookie发送给服务器。由于cookie是存在客户端上的，所以浏览器加入了一些限制确保cookie不会被恶意使用，同时不会占据太多磁盘空间，所以每个域的cookie数量是有限的。</p>\n<h2 id=\"Session\"><a href=\"#Session\" class=\"headerlink\" title=\"Session\"></a>Session</h2><p>session 从字面上讲，就是会话。这个就类似于你和一个人交谈，你怎么知道当前和你交谈的是张三而不是李四呢？对方肯定有某种特征（长相等）表明他就是张三。</p>\n<p>session 也是类似的道理，服务器要知道当前发请求给自己的是谁。为了做这种区分，服务器就要给每个客户端分配不同的“身份标识”，然后客户端每次向服务器发请求的时候，都带上这个“身份标识”，服务器就知道这个请求来自于谁了。至于客户端怎么保存这个“身份标识”，可以有很多种方式，对于浏览器客户端，大家都默认采用 cookie 的方式。</p>\n<p>服务器使用session把用户的信息临时保存在了服务器上，用户离开网站后session会被销毁。这种用户信息存储方式相对cookie来说更安全，可是session有一个缺陷：如果web服务器做了负载均衡，那么下一个操作请求到了另一台服务器的时候session会丢失。</p>\n<h2 id=\"Token\"><a href=\"#Token\" class=\"headerlink\" title=\"Token\"></a>Token</h2><p>在Web领域基于Token的身份验证随处可见。在大多数使用Web API的互联网公司中，tokens 是多用户下处理认证的最佳方式。</p>\n<p>以下几点特性会让你在程序中使用基于Token的身份验证</p>\n<ol>\n<li>无状态、可扩展</li>\n<li>支持移动设备</li>\n<li>跨程序调用</li>\n<li>安全</li>\n</ol>\n<p>那些使用基于Token的身份验证的大佬们</p>\n<p>大部分你见到过的API和Web应用都使用tokens。例如Facebook, Twitter, Google+, GitHub等。</p>\n<h3 id=\"Token的起源\"><a href=\"#Token的起源\" class=\"headerlink\" title=\"Token的起源\"></a>Token的起源</h3><p>在介绍基于Token的身份验证的原理与优势之前，不妨先看看之前的认证都是怎么做的。</p>\n<h4 id=\"基于服务器的验证\"><a href=\"#基于服务器的验证\" class=\"headerlink\" title=\"基于服务器的验证\"></a>基于服务器的验证</h4><p>我们都是知道HTTP协议是无状态的，这种无状态意味着程序需要验证每一次请求，从而辨别客户端的身份。</p>\n<p>在这之前，程序都是通过在服务端存储的登录信息来辨别请求的。这种方式一般都是通过存储Session来完成。</p>\n<p>下图展示了基于服务器验证的原理</p>\n<img src=\"/posts/44111/session.png\" class=\"\" title=\"session\">\n\n<p>随着Web，应用程序，已经移动端的兴起，这种验证的方式逐渐暴露出了问题。尤其是在可扩展性方面。</p>\n<h4 id=\"基于服务器验证方式暴露的一些问题\"><a href=\"#基于服务器验证方式暴露的一些问题\" class=\"headerlink\" title=\"基于服务器验证方式暴露的一些问题\"></a>基于服务器验证方式暴露的一些问题</h4><ol>\n<li>Session：每次认证用户发起请求时，服务器需要去创建一个记录来存储信息。当越来越多的用户发请求时，内存的开销也会不断增加。</li>\n<li>可扩展性：在服务端的内存中使用Seesion存储登录信息，伴随而来的是可扩展性问题。</li>\n<li>CORS(跨域资源共享)：当我们需要让数据跨多台移动设备上使用时，跨域资源的共享会是一个让人头疼的问题。在使用Ajax抓取另一个域的资源，就可以会出现禁止请求的情况。</li>\n<li>CSRF(跨站请求伪造)：用户在访问银行网站时，他们很容易受到跨站请求伪造的攻击，并且能够被利用其访问其他的网站。</li>\n</ol>\n<p>在这些问题中，可扩展行是最突出的。因此我们有必要去寻求一种更有行之有效的方法。</p>\n<h4 id=\"基于Token的验证原理\"><a href=\"#基于Token的验证原理\" class=\"headerlink\" title=\"基于Token的验证原理\"></a>基于Token的验证原理</h4><p>基于Token的身份验证是无状态的，我们不将用户信息存在服务器或Session中。</p>\n<p>这种概念解决了在服务端存储信息时的许多问题</p>\n<p>NoSession意味着你的程序可以根据需要去增减机器，而不用去担心用户是否登录。</p>\n<p>基于Token的身份验证的过程如下:</p>\n<ol>\n<li>用户通过用户名和密码发送请求。</li>\n<li>程序验证。</li>\n<li>程序返回一个签名的token 给客户端。</li>\n<li>客户端储存token,并且每次用于每次发送请求。</li>\n<li>服务端验证token并返回数据。</li>\n</ol>\n<p>每一次请求都需要token。token应该在HTTP的头部发送从而保证了Http请求无状态。我们同样通过设置服务器属性Access-Control-Allow-Origin: *，让服务器能接受到来自所有域的请求。需要主要的是，在ACAO头部标明(designating)*时，不得带有像HTTP认证，客户端SSL证书和cookies的证书。</p>\n<p>实现思路：</p>\n<img src=\"/posts/44111/token%E6%B5%81%E7%A8%8B.png\" class=\"\" title=\"token流程\">\n\n<ol>\n<li>用户登录校验，校验成功后就返回Token给客户端。</li>\n<li>客户端收到数据后保存在客户端</li>\n<li>客户端每次访问API是携带Token到服务器端。</li>\n<li>服务器端采用filter过滤器校验。校验成功则返回请求数据，校验失败则返回错误码</li>\n</ol>\n<p>当我们在程序中认证了信息并取得token之后，我们便能通过这个Token做许多的事情。</p>\n<p>我们甚至能基于创建一个基于权限的token传给第三方应用程序，这些第三方程序能够获取到我们的数据（当然只有在我们允许的特定的token）</p>\n<h4 id=\"Tokens的优势\"><a href=\"#Tokens的优势\" class=\"headerlink\" title=\"Tokens的优势\"></a>Tokens的优势</h4><p><strong>无状态、可扩展</strong></p>\n<p>在客户端存储的Tokens是无状态的，并且能够被扩展。基于这种无状态和不存储Session信息，负载负载均衡器能够将用户信息从一个服务传到其他服务器上。</p>\n<p>如果我们将已验证的用户的信息保存在Session中，则每次请求都需要用户向已验证的服务器发送验证信息(称为Session亲和性)。用户量大时，可能会造成一些拥堵。</p>\n<p>但是不要着急。使用tokens之后这些问题都迎刃而解，因为tokens自己hold住了用户的验证信息。</p>\n<p><strong>安全性</strong></p>\n<p>请求中发送token而不再是发送cookie能够防止CSRF(跨站请求伪造)。即使在客户端使用cookie存储token，cookie也仅仅是一个存储机制而不是用于认证。不将信息存储在Session中，让我们少了对session操作。</p>\n<p>token是有时效的，一段时间之后用户需要重新验证。我们也不一定需要等到token自动失效，token有撤回的操作，通过token revocataion可以使一个特定的token或是一组有相同认证的token无效。</p>\n<p><strong>可扩展性</strong></p>\n<p>Tokens能够创建与其它程序共享权限的程序。例如，能将一个随便的社交帐号和自己的大号(Fackbook或是Twitter)联系起来。当通过服务登录Twitter(我们将这个过程Buffer)时，我们可以将这些Buffer附到Twitter的数据流上(we are allowing Buffer to post to our Twitter stream)。</p>\n<p>使用tokens时，可以提供可选的权限给第三方应用程序。当用户想让另一个应用程序访问它们的数据，我们可以通过建立自己的API，得出特殊权限的tokens。</p>\n<p><strong>多平台跨域</strong></p>\n<p>我们提前先来谈论一下CORS(跨域资源共享)，对应用程序和服务进行扩展的时候，需要介入各种各种的设备和应用程序。</p>\n<p>Having our API just serve data, we can also make the design choice to serve assets from a CDN. This eliminates the issues that CORS brings up after we set a quick header configuration for our application.</p>\n<p>只要用户有一个通过了验证的token，数据和资源就能够在任何域上被请求到。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Access-Control-Allow-Origin: *</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p><a href=\"https://zhuanlan.zhihu.com/p/63061864\">https://zhuanlan.zhihu.com/p/63061864</a></p>"},{"title":"【转载】高性能前端架构解决方案","abbrlink":10518,"date":"2020-03-22T07:20:35.000Z","_content":"\n来源：[高性能前端架构解决方案](https://mp.weixin.qq.com/s/C4izhX-vMnw_dpUZ1uDM0A)\n\n这篇文章介绍了一些使前端应用程序加载更快并提供良好用户体验的技术。\n\n我们将研究前端的总体架构，如何首先加载必需的资源，并最大化资源缓存的概率。\n\n无论你的页面是否需要成为客户端应用程序，还是如何优化应用程序的渲染时间，我都不会说太多后端如何传递资源。\n\n<!-- more -->\n\n## 总览\n\n我将把应用程序加载分为三个不同的阶段：\n\n- 初始渲染 – 用户看到任何东西之前需要多长时间？\n- 应用程序加载 – 用户可以使用该应用程序需要多长时间？\n- 下一页 – 导航到下一页需要多长时间？\n\n{% asset_img 640-20200322202223114.png 640-20200322202223114 %}\n\n## 初始渲染\n\n在浏览器的初始渲染之前，用户看不到任何东西。渲染页面至少需要加载 `HTML` 文件，但是大多数时候需要加载其他资源，例如 `CSS` 和 `JavaScript` 文件。一旦这些都加载完毕，浏览器就可以开始在屏幕上渲染。\n\n在本文中，我将使用 `WebPageTest` 瀑布图。你网站的请求瀑布可能看起来像这样。\n\n{% asset_img 640-20200322202223159.png 640-20200322202223159 %}\n\n`HTML` 文档将加载一堆其他文件，并在这些文件加载后渲染页面。请注意， `CSS` 文件是并行加载的，因此每个其他请求不会增加明显的延迟。\n\n（备注：`gov.uk` 启用了 `HTTP/2`，因此资产域可以重新使用与 `www.gov.uk` 的现有连接！我将在下面详细讨论服务器连接。）\n\n### 减少渲染阻塞的请求\n\n`css` 和（默认情况下） `script` 文件会阻止其下方的任何内容渲染。\n\n你可以通过以下几种方法来解决此问题：\n\n- 将脚本标签放在 `body` 标签的底部\n- 使用 `async` 异步加载 `script`\n- 内联使用小型的 `JS` 或 `CSS` 代码段（如果需要同步加载）\n\n### 避免顺序渲染阻塞请求链\n\n让你的网站变慢的不一定是阻止渲染的请求数量。更重要的是每种资源的下载大小，以及浏览器发现需要加载资源的时间。\n\n如果浏览器仅在另一个请求完成后才发现需要加载文件，则可以获取同步请求链。发生这种情况可能有多种原因：\n\n- `CSS` 中的 `@import` 规则\n- `CSS` 文件中引用的 `Webfonts`\n- `JavaScript` 注入链接或脚本标签\n\n看一下这个例子：\n\n{% asset_img 640-20200322202223158.png 640-20200322202223158 %}\n\n这个网站在它的某个 `CSS` 文件中使用 `@import` 加载 `Google Fonts`。这意味着浏览器需要一个接一个地发出这些请求：\n\n- 文件 `HTML`\n- 应用程序的 `CSS`\n- `Google` 字体 `CSS`\n- `Google Font Woff`文件（在瀑布图中未显示）\n\n要解决这个问题，首先需要将 `Google Fonts` 的 `CSS` 请求从 `@import` 移动到 `HTML` 中的 `link` 标记，这就切断了请求链条上的一个环节。\n\n为了进一步加快速度，建议直接在 `HTML` 或 `CSS` 文件中内联 `Google Fonts CSS` 文件。\n\n(记住，来自 `Google Fonts` 的 `CSS` 响应取决于用户代理。如果你用 `IE8` 发出请求，CSS 会引用一个 `EOT` 文件，`IE11` 会得到一个 `woff` 文件，而现在的浏览器会得到一个 `woff2` 文件。但是如果你不介意旧的浏览器使用系统字体，那么你可以复制粘贴 `CSS` 文件的内容。)\n\n即使页面开始呈现后，用户仍可能无法对该页面执行任何操作，因为在加载字体之前，不会显示任何文本。可以通过 `font-display swap` 来避免这种情况，现在 `Google Fonts` 默认情况下已经开始支持。\n\n有时，消除请求链是不可行的。在这些情况下，可以考虑使用 `preload` 或 `preconnect` 标记。例如，在实际的 `CSS` 请求发出之前，上面的网站可以连接到 `fonts.googleapis.com`。\n\n### 重复使用服务器连接以加快请求\n\n建立新的服务器连接通常需要在服务器的浏览器之间进行 3 次往返：\n\n- `DNS` 查询\n- 建立 `TCP` 连接\n- 建立 `SSL` 连接\n\n连接就绪后，至少需要再进行一次往返来发送请求并下载响应。\n\n下面的瀑布显示连接已启动到四个不同的服务器：`hostgator.com，optimize.com，googletagmanager.com 和 googelapis.com`。\n\n但是，对同一服务器的后续请求可以重新使用现有连接。因此，加载 `base.css`或 `index1.css` 的速度很快，因为它们也托管在 `hostgator.com` 上。\n\n{% asset_img 640-20200322202223164.png 640-20200322202223164 %}\n\n### 减小文件大小并使用 CDN\n\n除了文件大小之外，还有两个其他因素会影响请求时间，这些因素都在你的控制范围内：资源大小和服务器位置。\n\n向用户发送尽可能少的数据，并确保将其压缩（例如，使用 `brotli` 或 `gzip` ）。\n\n内容交付网络在大量位置提供服务器，因此其中之一可能位于你的用户附近。用户可以连接到与其附近的 `CDN` 服务器，而不必连接到中央应用程序服务器。这意味着服务器的往返时间将大大缩短。这对于诸如 `CSS`，`JavaScript`和 `Image` 之类的静态资产特别方便，因为它们易于分发。\n\n### 使用 service workers 跳过网络\n\n`service workers` 允许你在请求进入网络之前拦截它们。这意味着你可以实现瞬时首屏渲染!\n\n当然，这只在你不需要网络发送响应时才有效。你需要已经缓存了响应，所以用户只有在第二次加载你的应用时才会受益。\n\n下面的 `service workers` 缓存呈现页面所需的 HTML 和 CSS。当再次加载应用程序时，它会尝试为缓存的资源提供服务，如果资源不可用，则会返回到网络。\n\n```js\nself.addEventListener('install', async e => {\n  caches.open('v1').then(function (cache) {\n    return cache.addAll(['/app', '/app.css']);\n  });\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      return cachedResponse || fetch(event.request);\n    })\n  );\n});\n```\n\n## 应用加载\n\n好的，现在用户已经可以看到一些东西，然后他们在可以使用你的应用程序之前还需要什么？\n\n- 加载应用程序代码（JS 和 CSS）\n- 加载页面的基本数据\n- 加载其他数据和图像\n\n{% asset_img 640-20200322202223220.png 640-20200322202223220 %}\n\n请注意，不仅仅是延迟从网络加载数据会延迟渲染。加载代码后，浏览器将需要解析，编译和执行它。\n\n### Bundle split：仅加载必要的代码，并最大化缓存命中率\n\n`Bundle split` 允许只加载当前页面所需的代码，而不是加载整个应用程序。`Bundle split` 还意味着可以缓存其中的一部分，即使其他部分已经更改，需要重新加载。\n\n通常，代码被分成三种不同类型的文件:\n\n- 网页本身专用代码\n- 共享应用程序代码\n- 很少更改的第三方模块（非常适合缓存！）\n\n`Webpack` 可以使用 `optimization.splitChunks` 自动拆分共享代码以减少总下载量。确保启用运行时块，以使 `chunk` 哈希稳定，并从长期缓存中受益。\n\n分离页面特定的代码不能自动完成，你需要识别可以单独加载的位。通常这是一个特定的路径或一组页面。使用动态导入来延迟加载代码。\n\n`Bundle split` 会导致更多的请求被发送来加载你的应用程序。但是只要请求是并行发送的，这就不是什么大问题，特别是当你的站点开启了 `HTTP/2` 服务的时候。你可以看到在这个瀑布的前三个请求:\n\n{% asset_img 640-20200322202223167.png 640-20200322202223167 %}\n\n然而，这个瀑布图还显示了两个按顺序发出的请求。这些块只在这个页面中需要，并通过 `import()` 调用动态加载。\n\n如果你知道需要这些块，你可以通过插入预加载链接标记来解决这个问题。\n\n{% asset_img 640-20200322203628249.png 640-20200322203628249 %}\n\n但是，你会看到，与总页面加载时间相比，这样做的好处可能很小。\n\n另外，使用预加载有时会适得其反，因为加载其他更重要的文件时可能会延迟。\n\n### 加载页面数据\n\n你的应用程序可能是用来显示一些数据的。下面是一些提示，你可以使用这些提示尽早加载数据并避免呈现延迟。\n\n#### 在开始加载数据之前不要等待包\n\n这是一个顺序请求链的特殊情况:你加载应用程序包，然后代码请求页面数据。\n\n有两种方法可以避免这种情况：\n\n- 将页面数据嵌入 HTML 文档中\n- 通过文档中的内联脚本启动数据请求\n\n将数据嵌入 HTML 可以确保你的应用程序不必等待数据加载。这也降低了应用程序的复杂性，因为你不必处理加载状态。\n\n但是，如果获取数据会大大延迟你的文档响应，那将不是一个好主意，因为这会延迟你的初始渲染。\n\n在这种情况下，或者如果你通过服务工作者提供缓存的 HTML 文档，则可以将内联脚本嵌入到 HTML 中以加载此数据。你可以将其作为全局 `promise` 提供，如下所示：\n\n```js\nwindow.userDataPromise = fetch('/me');\n```\n\n然后，如果数据准备就绪，你的应用程序可以立即开始渲染，或者等到准备就绪。\n\n对于这两种技术，你都需要知道在应用开始呈现之前页面必须加载哪些数据。对于与用户相关的数据（用户名，通知 …），这往往很容易，但是对于特定于页面的内容，则比较棘手。考虑确定最重要的页面并为这些页面编写自定义逻辑。\n\n#### 等待非必需数据时不要阻塞渲染\n\n有时生成页面数据需要缓慢的复杂后端逻辑。在这些情况下，如果足以使你的应用程序具有功能性和交互性，则可以首先加载较简单的数据版本。\n\n例如，分析工具可以在加载图表数据之前首先加载所有图表的列表。这使用户可以立即查找他们感兴趣的图表，还可以帮助将后端请求分散到不同的服务器上。\n\n{% asset_img 640-20200322202223217.png 640-20200322202223217 %}\n\n#### 避免顺序数据请求链\n\n这可能与我先前关于在第二个请求中加载非必需数据的观点相冲突，但是如果每个完成的请求都不会导致向用户显示更多信息，则避免顺序请求链。\n\n与其先发出关于用户登录身份的请求，然后再请求其所属团队的列表，不如在用户信息旁边返回团队列表。你可以使用 `GraphQL` ，但自定义用户呢? `includeTeams=true endpoint` 也很有用。\n\n与其首先请求用户登录为谁，然后请求他们所属的团队列表，\n\n### 服务端端渲染\n\n服务端端渲染意味着在服务器上预渲染你的应用程序，并使用整页 HTML 响应文档请求。这意味着客户端可以看到完全呈现的页面，而不必等待加载其他代码或数据！\n\n由于服务器只是将静态 HTML 发送给客户端，因此你的应用尚无法进行交互。需要加载应用程序，它需要重新运行呈现逻辑，然后将必要的事件侦听器附加到 DOM。\n\n如果看到非交互式内容很有价值，请使用服务器呈现。如果你能够将呈现的 HTML 缓存在服务器上并将其提供给所有用户而又不会延迟初始文档请求，那么它也将有所帮助。例如，如果你使用 `React` 来渲染博客文章，则服务器渲染非常合适。\n\n## 下一页\n\n在某个时候，用户将与你的应用进行交互并转到下一页。打开初始页面后，你可以控制浏览器中发生的事情，因此你可以准备进行下一次交互。\n\n### 预取资源\n\n如果你预加载了下一页所需的代码，则可以消除用户启动导航时的延迟。使用 `prefetch` 标记，或 `webpackPrefetch` 用于动态导入：\n\n```js\nimport(/* webpackPrefetch: true, webpackChunkName: \"todo-list\" */ './TodoList');\n```\n\n注意你使用了多少用户数据和带宽，特别是当他们使用移动连接时。如果他们使用的是你网站的移动版本，或者他们启用了保存数据模式，你可以减少预加载。\n\n对于用户最可能需要的应用程序部分，要有策略。\n\n### 重用已经加载的数据\n\n在应用程序中本地缓存 `Ajax` 数据，并使用它来避免未来的请求。如果用户从团队列表导航到“编辑团队”页面，你可以通过重用已经获取的数据来立即进行转换。\n\n请注意，如果你的实体经常被其他用户编辑，并且你下载的数据可能已经过期，那么这种方法将不起作用。在这些情况下，在获取最新数据时，请首先考虑以只读方式显示现有数据。\n\n## 结论\n\n本文介绍了许多因素，这些因素可能会在加载过程的不同时刻使你的页面速度减慢。使用 `Chrome DevTools`，`WebPageTest`和`Lighthouse`之类的工具来确定其中哪些适用于你的应用程序。\n\n实际上，你几乎不可能在所有方面进行优化。找出对用户有最大影响的因素，并专注于此。\n\n我在写这篇文章时意识到的一件事是，我根深蒂固地相信，发出许多单独的请求对性能不利。过去，当每个请求都需要一个单独的连接时，Thas 就是这样，而浏览器每个域只允许几个连接。但是，使用 `HTTP/2` 和现代浏览器已不再是这种情况。\n\n并且有强烈的理由支持拆分请求。它允许仅加载必要的资源，并可以更好地利用缓存的内容，因为仅需要重新加载已更改的文件。\n","source":"_posts/【转载】高性能前端架构解决方案.md","raw":"---\ntitle: 【转载】高性能前端架构解决方案\ntags:\n  - 转载\ncategories:\n  - 前端\n  - 性能优化\nabbrlink: 10518\ndate: 2020-03-22 15:20:35\n---\n\n来源：[高性能前端架构解决方案](https://mp.weixin.qq.com/s/C4izhX-vMnw_dpUZ1uDM0A)\n\n这篇文章介绍了一些使前端应用程序加载更快并提供良好用户体验的技术。\n\n我们将研究前端的总体架构，如何首先加载必需的资源，并最大化资源缓存的概率。\n\n无论你的页面是否需要成为客户端应用程序，还是如何优化应用程序的渲染时间，我都不会说太多后端如何传递资源。\n\n<!-- more -->\n\n## 总览\n\n我将把应用程序加载分为三个不同的阶段：\n\n- 初始渲染 – 用户看到任何东西之前需要多长时间？\n- 应用程序加载 – 用户可以使用该应用程序需要多长时间？\n- 下一页 – 导航到下一页需要多长时间？\n\n{% asset_img 640-20200322202223114.png 640-20200322202223114 %}\n\n## 初始渲染\n\n在浏览器的初始渲染之前，用户看不到任何东西。渲染页面至少需要加载 `HTML` 文件，但是大多数时候需要加载其他资源，例如 `CSS` 和 `JavaScript` 文件。一旦这些都加载完毕，浏览器就可以开始在屏幕上渲染。\n\n在本文中，我将使用 `WebPageTest` 瀑布图。你网站的请求瀑布可能看起来像这样。\n\n{% asset_img 640-20200322202223159.png 640-20200322202223159 %}\n\n`HTML` 文档将加载一堆其他文件，并在这些文件加载后渲染页面。请注意， `CSS` 文件是并行加载的，因此每个其他请求不会增加明显的延迟。\n\n（备注：`gov.uk` 启用了 `HTTP/2`，因此资产域可以重新使用与 `www.gov.uk` 的现有连接！我将在下面详细讨论服务器连接。）\n\n### 减少渲染阻塞的请求\n\n`css` 和（默认情况下） `script` 文件会阻止其下方的任何内容渲染。\n\n你可以通过以下几种方法来解决此问题：\n\n- 将脚本标签放在 `body` 标签的底部\n- 使用 `async` 异步加载 `script`\n- 内联使用小型的 `JS` 或 `CSS` 代码段（如果需要同步加载）\n\n### 避免顺序渲染阻塞请求链\n\n让你的网站变慢的不一定是阻止渲染的请求数量。更重要的是每种资源的下载大小，以及浏览器发现需要加载资源的时间。\n\n如果浏览器仅在另一个请求完成后才发现需要加载文件，则可以获取同步请求链。发生这种情况可能有多种原因：\n\n- `CSS` 中的 `@import` 规则\n- `CSS` 文件中引用的 `Webfonts`\n- `JavaScript` 注入链接或脚本标签\n\n看一下这个例子：\n\n{% asset_img 640-20200322202223158.png 640-20200322202223158 %}\n\n这个网站在它的某个 `CSS` 文件中使用 `@import` 加载 `Google Fonts`。这意味着浏览器需要一个接一个地发出这些请求：\n\n- 文件 `HTML`\n- 应用程序的 `CSS`\n- `Google` 字体 `CSS`\n- `Google Font Woff`文件（在瀑布图中未显示）\n\n要解决这个问题，首先需要将 `Google Fonts` 的 `CSS` 请求从 `@import` 移动到 `HTML` 中的 `link` 标记，这就切断了请求链条上的一个环节。\n\n为了进一步加快速度，建议直接在 `HTML` 或 `CSS` 文件中内联 `Google Fonts CSS` 文件。\n\n(记住，来自 `Google Fonts` 的 `CSS` 响应取决于用户代理。如果你用 `IE8` 发出请求，CSS 会引用一个 `EOT` 文件，`IE11` 会得到一个 `woff` 文件，而现在的浏览器会得到一个 `woff2` 文件。但是如果你不介意旧的浏览器使用系统字体，那么你可以复制粘贴 `CSS` 文件的内容。)\n\n即使页面开始呈现后，用户仍可能无法对该页面执行任何操作，因为在加载字体之前，不会显示任何文本。可以通过 `font-display swap` 来避免这种情况，现在 `Google Fonts` 默认情况下已经开始支持。\n\n有时，消除请求链是不可行的。在这些情况下，可以考虑使用 `preload` 或 `preconnect` 标记。例如，在实际的 `CSS` 请求发出之前，上面的网站可以连接到 `fonts.googleapis.com`。\n\n### 重复使用服务器连接以加快请求\n\n建立新的服务器连接通常需要在服务器的浏览器之间进行 3 次往返：\n\n- `DNS` 查询\n- 建立 `TCP` 连接\n- 建立 `SSL` 连接\n\n连接就绪后，至少需要再进行一次往返来发送请求并下载响应。\n\n下面的瀑布显示连接已启动到四个不同的服务器：`hostgator.com，optimize.com，googletagmanager.com 和 googelapis.com`。\n\n但是，对同一服务器的后续请求可以重新使用现有连接。因此，加载 `base.css`或 `index1.css` 的速度很快，因为它们也托管在 `hostgator.com` 上。\n\n{% asset_img 640-20200322202223164.png 640-20200322202223164 %}\n\n### 减小文件大小并使用 CDN\n\n除了文件大小之外，还有两个其他因素会影响请求时间，这些因素都在你的控制范围内：资源大小和服务器位置。\n\n向用户发送尽可能少的数据，并确保将其压缩（例如，使用 `brotli` 或 `gzip` ）。\n\n内容交付网络在大量位置提供服务器，因此其中之一可能位于你的用户附近。用户可以连接到与其附近的 `CDN` 服务器，而不必连接到中央应用程序服务器。这意味着服务器的往返时间将大大缩短。这对于诸如 `CSS`，`JavaScript`和 `Image` 之类的静态资产特别方便，因为它们易于分发。\n\n### 使用 service workers 跳过网络\n\n`service workers` 允许你在请求进入网络之前拦截它们。这意味着你可以实现瞬时首屏渲染!\n\n当然，这只在你不需要网络发送响应时才有效。你需要已经缓存了响应，所以用户只有在第二次加载你的应用时才会受益。\n\n下面的 `service workers` 缓存呈现页面所需的 HTML 和 CSS。当再次加载应用程序时，它会尝试为缓存的资源提供服务，如果资源不可用，则会返回到网络。\n\n```js\nself.addEventListener('install', async e => {\n  caches.open('v1').then(function (cache) {\n    return cache.addAll(['/app', '/app.css']);\n  });\n});\n\nself.addEventListener('fetch', event => {\n  event.respondWith(\n    caches.match(event.request).then(cachedResponse => {\n      return cachedResponse || fetch(event.request);\n    })\n  );\n});\n```\n\n## 应用加载\n\n好的，现在用户已经可以看到一些东西，然后他们在可以使用你的应用程序之前还需要什么？\n\n- 加载应用程序代码（JS 和 CSS）\n- 加载页面的基本数据\n- 加载其他数据和图像\n\n{% asset_img 640-20200322202223220.png 640-20200322202223220 %}\n\n请注意，不仅仅是延迟从网络加载数据会延迟渲染。加载代码后，浏览器将需要解析，编译和执行它。\n\n### Bundle split：仅加载必要的代码，并最大化缓存命中率\n\n`Bundle split` 允许只加载当前页面所需的代码，而不是加载整个应用程序。`Bundle split` 还意味着可以缓存其中的一部分，即使其他部分已经更改，需要重新加载。\n\n通常，代码被分成三种不同类型的文件:\n\n- 网页本身专用代码\n- 共享应用程序代码\n- 很少更改的第三方模块（非常适合缓存！）\n\n`Webpack` 可以使用 `optimization.splitChunks` 自动拆分共享代码以减少总下载量。确保启用运行时块，以使 `chunk` 哈希稳定，并从长期缓存中受益。\n\n分离页面特定的代码不能自动完成，你需要识别可以单独加载的位。通常这是一个特定的路径或一组页面。使用动态导入来延迟加载代码。\n\n`Bundle split` 会导致更多的请求被发送来加载你的应用程序。但是只要请求是并行发送的，这就不是什么大问题，特别是当你的站点开启了 `HTTP/2` 服务的时候。你可以看到在这个瀑布的前三个请求:\n\n{% asset_img 640-20200322202223167.png 640-20200322202223167 %}\n\n然而，这个瀑布图还显示了两个按顺序发出的请求。这些块只在这个页面中需要，并通过 `import()` 调用动态加载。\n\n如果你知道需要这些块，你可以通过插入预加载链接标记来解决这个问题。\n\n{% asset_img 640-20200322203628249.png 640-20200322203628249 %}\n\n但是，你会看到，与总页面加载时间相比，这样做的好处可能很小。\n\n另外，使用预加载有时会适得其反，因为加载其他更重要的文件时可能会延迟。\n\n### 加载页面数据\n\n你的应用程序可能是用来显示一些数据的。下面是一些提示，你可以使用这些提示尽早加载数据并避免呈现延迟。\n\n#### 在开始加载数据之前不要等待包\n\n这是一个顺序请求链的特殊情况:你加载应用程序包，然后代码请求页面数据。\n\n有两种方法可以避免这种情况：\n\n- 将页面数据嵌入 HTML 文档中\n- 通过文档中的内联脚本启动数据请求\n\n将数据嵌入 HTML 可以确保你的应用程序不必等待数据加载。这也降低了应用程序的复杂性，因为你不必处理加载状态。\n\n但是，如果获取数据会大大延迟你的文档响应，那将不是一个好主意，因为这会延迟你的初始渲染。\n\n在这种情况下，或者如果你通过服务工作者提供缓存的 HTML 文档，则可以将内联脚本嵌入到 HTML 中以加载此数据。你可以将其作为全局 `promise` 提供，如下所示：\n\n```js\nwindow.userDataPromise = fetch('/me');\n```\n\n然后，如果数据准备就绪，你的应用程序可以立即开始渲染，或者等到准备就绪。\n\n对于这两种技术，你都需要知道在应用开始呈现之前页面必须加载哪些数据。对于与用户相关的数据（用户名，通知 …），这往往很容易，但是对于特定于页面的内容，则比较棘手。考虑确定最重要的页面并为这些页面编写自定义逻辑。\n\n#### 等待非必需数据时不要阻塞渲染\n\n有时生成页面数据需要缓慢的复杂后端逻辑。在这些情况下，如果足以使你的应用程序具有功能性和交互性，则可以首先加载较简单的数据版本。\n\n例如，分析工具可以在加载图表数据之前首先加载所有图表的列表。这使用户可以立即查找他们感兴趣的图表，还可以帮助将后端请求分散到不同的服务器上。\n\n{% asset_img 640-20200322202223217.png 640-20200322202223217 %}\n\n#### 避免顺序数据请求链\n\n这可能与我先前关于在第二个请求中加载非必需数据的观点相冲突，但是如果每个完成的请求都不会导致向用户显示更多信息，则避免顺序请求链。\n\n与其先发出关于用户登录身份的请求，然后再请求其所属团队的列表，不如在用户信息旁边返回团队列表。你可以使用 `GraphQL` ，但自定义用户呢? `includeTeams=true endpoint` 也很有用。\n\n与其首先请求用户登录为谁，然后请求他们所属的团队列表，\n\n### 服务端端渲染\n\n服务端端渲染意味着在服务器上预渲染你的应用程序，并使用整页 HTML 响应文档请求。这意味着客户端可以看到完全呈现的页面，而不必等待加载其他代码或数据！\n\n由于服务器只是将静态 HTML 发送给客户端，因此你的应用尚无法进行交互。需要加载应用程序，它需要重新运行呈现逻辑，然后将必要的事件侦听器附加到 DOM。\n\n如果看到非交互式内容很有价值，请使用服务器呈现。如果你能够将呈现的 HTML 缓存在服务器上并将其提供给所有用户而又不会延迟初始文档请求，那么它也将有所帮助。例如，如果你使用 `React` 来渲染博客文章，则服务器渲染非常合适。\n\n## 下一页\n\n在某个时候，用户将与你的应用进行交互并转到下一页。打开初始页面后，你可以控制浏览器中发生的事情，因此你可以准备进行下一次交互。\n\n### 预取资源\n\n如果你预加载了下一页所需的代码，则可以消除用户启动导航时的延迟。使用 `prefetch` 标记，或 `webpackPrefetch` 用于动态导入：\n\n```js\nimport(/* webpackPrefetch: true, webpackChunkName: \"todo-list\" */ './TodoList');\n```\n\n注意你使用了多少用户数据和带宽，特别是当他们使用移动连接时。如果他们使用的是你网站的移动版本，或者他们启用了保存数据模式，你可以减少预加载。\n\n对于用户最可能需要的应用程序部分，要有策略。\n\n### 重用已经加载的数据\n\n在应用程序中本地缓存 `Ajax` 数据，并使用它来避免未来的请求。如果用户从团队列表导航到“编辑团队”页面，你可以通过重用已经获取的数据来立即进行转换。\n\n请注意，如果你的实体经常被其他用户编辑，并且你下载的数据可能已经过期，那么这种方法将不起作用。在这些情况下，在获取最新数据时，请首先考虑以只读方式显示现有数据。\n\n## 结论\n\n本文介绍了许多因素，这些因素可能会在加载过程的不同时刻使你的页面速度减慢。使用 `Chrome DevTools`，`WebPageTest`和`Lighthouse`之类的工具来确定其中哪些适用于你的应用程序。\n\n实际上，你几乎不可能在所有方面进行优化。找出对用户有最大影响的因素，并专注于此。\n\n我在写这篇文章时意识到的一件事是，我根深蒂固地相信，发出许多单独的请求对性能不利。过去，当每个请求都需要一个单独的连接时，Thas 就是这样，而浏览器每个域只允许几个连接。但是，使用 `HTTP/2` 和现代浏览器已不再是这种情况。\n\n并且有强烈的理由支持拆分请求。它允许仅加载必要的资源，并可以更好地利用缓存的内容，因为仅需要重新加载已更改的文件。\n","slug":"【转载】高性能前端架构解决方案","published":1,"updated":"2020-12-02T02:29:30.848Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfm003kkhsr0gq3h3zj","content":"<p>来源：<a href=\"https://mp.weixin.qq.com/s/C4izhX-vMnw_dpUZ1uDM0A\">高性能前端架构解决方案</a></p>\n<p>这篇文章介绍了一些使前端应用程序加载更快并提供良好用户体验的技术。</p>\n<p>我们将研究前端的总体架构，如何首先加载必需的资源，并最大化资源缓存的概率。</p>\n<p>无论你的页面是否需要成为客户端应用程序，还是如何优化应用程序的渲染时间，我都不会说太多后端如何传递资源。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>我将把应用程序加载分为三个不同的阶段：</p>\n<ul>\n<li>初始渲染 – 用户看到任何东西之前需要多长时间？</li>\n<li>应用程序加载 – 用户可以使用该应用程序需要多长时间？</li>\n<li>下一页 – 导航到下一页需要多长时间？</li>\n</ul>\n<img src=\"/posts/10518/640-20200322202223114.png\" class=\"\" title=\"640-20200322202223114\">\n\n<h2 id=\"初始渲染\"><a href=\"#初始渲染\" class=\"headerlink\" title=\"初始渲染\"></a>初始渲染</h2><p>在浏览器的初始渲染之前，用户看不到任何东西。渲染页面至少需要加载 <code>HTML</code> 文件，但是大多数时候需要加载其他资源，例如 <code>CSS</code> 和 <code>JavaScript</code> 文件。一旦这些都加载完毕，浏览器就可以开始在屏幕上渲染。</p>\n<p>在本文中，我将使用 <code>WebPageTest</code> 瀑布图。你网站的请求瀑布可能看起来像这样。</p>\n<img src=\"/posts/10518/640-20200322202223159.png\" class=\"\" title=\"640-20200322202223159\">\n\n<p><code>HTML</code> 文档将加载一堆其他文件，并在这些文件加载后渲染页面。请注意， <code>CSS</code> 文件是并行加载的，因此每个其他请求不会增加明显的延迟。</p>\n<p>（备注：<code>gov.uk</code> 启用了 <code>HTTP/2</code>，因此资产域可以重新使用与 <code>www.gov.uk</code> 的现有连接！我将在下面详细讨论服务器连接。）</p>\n<h3 id=\"减少渲染阻塞的请求\"><a href=\"#减少渲染阻塞的请求\" class=\"headerlink\" title=\"减少渲染阻塞的请求\"></a>减少渲染阻塞的请求</h3><p><code>css</code> 和（默认情况下） <code>script</code> 文件会阻止其下方的任何内容渲染。</p>\n<p>你可以通过以下几种方法来解决此问题：</p>\n<ul>\n<li>将脚本标签放在 <code>body</code> 标签的底部</li>\n<li>使用 <code>async</code> 异步加载 <code>script</code></li>\n<li>内联使用小型的 <code>JS</code> 或 <code>CSS</code> 代码段（如果需要同步加载）</li>\n</ul>\n<h3 id=\"避免顺序渲染阻塞请求链\"><a href=\"#避免顺序渲染阻塞请求链\" class=\"headerlink\" title=\"避免顺序渲染阻塞请求链\"></a>避免顺序渲染阻塞请求链</h3><p>让你的网站变慢的不一定是阻止渲染的请求数量。更重要的是每种资源的下载大小，以及浏览器发现需要加载资源的时间。</p>\n<p>如果浏览器仅在另一个请求完成后才发现需要加载文件，则可以获取同步请求链。发生这种情况可能有多种原因：</p>\n<ul>\n<li><code>CSS</code> 中的 <code>@import</code> 规则</li>\n<li><code>CSS</code> 文件中引用的 <code>Webfonts</code></li>\n<li><code>JavaScript</code> 注入链接或脚本标签</li>\n</ul>\n<p>看一下这个例子：</p>\n<img src=\"/posts/10518/640-20200322202223158.png\" class=\"\" title=\"640-20200322202223158\">\n\n<p>这个网站在它的某个 <code>CSS</code> 文件中使用 <code>@import</code> 加载 <code>Google Fonts</code>。这意味着浏览器需要一个接一个地发出这些请求：</p>\n<ul>\n<li>文件 <code>HTML</code></li>\n<li>应用程序的 <code>CSS</code></li>\n<li><code>Google</code> 字体 <code>CSS</code></li>\n<li><code>Google Font Woff</code>文件（在瀑布图中未显示）</li>\n</ul>\n<p>要解决这个问题，首先需要将 <code>Google Fonts</code> 的 <code>CSS</code> 请求从 <code>@import</code> 移动到 <code>HTML</code> 中的 <code>link</code> 标记，这就切断了请求链条上的一个环节。</p>\n<p>为了进一步加快速度，建议直接在 <code>HTML</code> 或 <code>CSS</code> 文件中内联 <code>Google Fonts CSS</code> 文件。</p>\n<p>(记住，来自 <code>Google Fonts</code> 的 <code>CSS</code> 响应取决于用户代理。如果你用 <code>IE8</code> 发出请求，CSS 会引用一个 <code>EOT</code> 文件，<code>IE11</code> 会得到一个 <code>woff</code> 文件，而现在的浏览器会得到一个 <code>woff2</code> 文件。但是如果你不介意旧的浏览器使用系统字体，那么你可以复制粘贴 <code>CSS</code> 文件的内容。)</p>\n<p>即使页面开始呈现后，用户仍可能无法对该页面执行任何操作，因为在加载字体之前，不会显示任何文本。可以通过 <code>font-display swap</code> 来避免这种情况，现在 <code>Google Fonts</code> 默认情况下已经开始支持。</p>\n<p>有时，消除请求链是不可行的。在这些情况下，可以考虑使用 <code>preload</code> 或 <code>preconnect</code> 标记。例如，在实际的 <code>CSS</code> 请求发出之前，上面的网站可以连接到 <code>fonts.googleapis.com</code>。</p>\n<h3 id=\"重复使用服务器连接以加快请求\"><a href=\"#重复使用服务器连接以加快请求\" class=\"headerlink\" title=\"重复使用服务器连接以加快请求\"></a>重复使用服务器连接以加快请求</h3><p>建立新的服务器连接通常需要在服务器的浏览器之间进行 3 次往返：</p>\n<ul>\n<li><code>DNS</code> 查询</li>\n<li>建立 <code>TCP</code> 连接</li>\n<li>建立 <code>SSL</code> 连接</li>\n</ul>\n<p>连接就绪后，至少需要再进行一次往返来发送请求并下载响应。</p>\n<p>下面的瀑布显示连接已启动到四个不同的服务器：<code>hostgator.com，optimize.com，googletagmanager.com 和 googelapis.com</code>。</p>\n<p>但是，对同一服务器的后续请求可以重新使用现有连接。因此，加载 <code>base.css</code>或 <code>index1.css</code> 的速度很快，因为它们也托管在 <code>hostgator.com</code> 上。</p>\n<img src=\"/posts/10518/640-20200322202223164.png\" class=\"\" title=\"640-20200322202223164\">\n\n<h3 id=\"减小文件大小并使用-CDN\"><a href=\"#减小文件大小并使用-CDN\" class=\"headerlink\" title=\"减小文件大小并使用 CDN\"></a>减小文件大小并使用 CDN</h3><p>除了文件大小之外，还有两个其他因素会影响请求时间，这些因素都在你的控制范围内：资源大小和服务器位置。</p>\n<p>向用户发送尽可能少的数据，并确保将其压缩（例如，使用 <code>brotli</code> 或 <code>gzip</code> ）。</p>\n<p>内容交付网络在大量位置提供服务器，因此其中之一可能位于你的用户附近。用户可以连接到与其附近的 <code>CDN</code> 服务器，而不必连接到中央应用程序服务器。这意味着服务器的往返时间将大大缩短。这对于诸如 <code>CSS</code>，<code>JavaScript</code>和 <code>Image</code> 之类的静态资产特别方便，因为它们易于分发。</p>\n<h3 id=\"使用-service-workers-跳过网络\"><a href=\"#使用-service-workers-跳过网络\" class=\"headerlink\" title=\"使用 service workers 跳过网络\"></a>使用 service workers 跳过网络</h3><p><code>service workers</code> 允许你在请求进入网络之前拦截它们。这意味着你可以实现瞬时首屏渲染!</p>\n<p>当然，这只在你不需要网络发送响应时才有效。你需要已经缓存了响应，所以用户只有在第二次加载你的应用时才会受益。</p>\n<p>下面的 <code>service workers</code> 缓存呈现页面所需的 HTML 和 CSS。当再次加载应用程序时，它会尝试为缓存的资源提供服务，如果资源不可用，则会返回到网络。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">  caches.open(<span class=\"string\">&#x27;v1&#x27;</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache.addAll([<span class=\"string\">&#x27;/app&#x27;</span>, <span class=\"string\">&#x27;/app.css&#x27;</span>]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    caches.match(event.request).then(<span class=\"function\"><span class=\"params\">cachedResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cachedResponse || fetch(event.request);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用加载\"><a href=\"#应用加载\" class=\"headerlink\" title=\"应用加载\"></a>应用加载</h2><p>好的，现在用户已经可以看到一些东西，然后他们在可以使用你的应用程序之前还需要什么？</p>\n<ul>\n<li>加载应用程序代码（JS 和 CSS）</li>\n<li>加载页面的基本数据</li>\n<li>加载其他数据和图像</li>\n</ul>\n<img src=\"/posts/10518/640-20200322202223220.png\" class=\"\" title=\"640-20200322202223220\">\n\n<p>请注意，不仅仅是延迟从网络加载数据会延迟渲染。加载代码后，浏览器将需要解析，编译和执行它。</p>\n<h3 id=\"Bundle-split：仅加载必要的代码，并最大化缓存命中率\"><a href=\"#Bundle-split：仅加载必要的代码，并最大化缓存命中率\" class=\"headerlink\" title=\"Bundle split：仅加载必要的代码，并最大化缓存命中率\"></a>Bundle split：仅加载必要的代码，并最大化缓存命中率</h3><p><code>Bundle split</code> 允许只加载当前页面所需的代码，而不是加载整个应用程序。<code>Bundle split</code> 还意味着可以缓存其中的一部分，即使其他部分已经更改，需要重新加载。</p>\n<p>通常，代码被分成三种不同类型的文件:</p>\n<ul>\n<li>网页本身专用代码</li>\n<li>共享应用程序代码</li>\n<li>很少更改的第三方模块（非常适合缓存！）</li>\n</ul>\n<p><code>Webpack</code> 可以使用 <code>optimization.splitChunks</code> 自动拆分共享代码以减少总下载量。确保启用运行时块，以使 <code>chunk</code> 哈希稳定，并从长期缓存中受益。</p>\n<p>分离页面特定的代码不能自动完成，你需要识别可以单独加载的位。通常这是一个特定的路径或一组页面。使用动态导入来延迟加载代码。</p>\n<p><code>Bundle split</code> 会导致更多的请求被发送来加载你的应用程序。但是只要请求是并行发送的，这就不是什么大问题，特别是当你的站点开启了 <code>HTTP/2</code> 服务的时候。你可以看到在这个瀑布的前三个请求:</p>\n<img src=\"/posts/10518/640-20200322202223167.png\" class=\"\" title=\"640-20200322202223167\">\n\n<p>然而，这个瀑布图还显示了两个按顺序发出的请求。这些块只在这个页面中需要，并通过 <code>import()</code> 调用动态加载。</p>\n<p>如果你知道需要这些块，你可以通过插入预加载链接标记来解决这个问题。</p>\n<img src=\"/posts/10518/640-20200322203628249.png\" class=\"\" title=\"640-20200322203628249\">\n\n<p>但是，你会看到，与总页面加载时间相比，这样做的好处可能很小。</p>\n<p>另外，使用预加载有时会适得其反，因为加载其他更重要的文件时可能会延迟。</p>\n<h3 id=\"加载页面数据\"><a href=\"#加载页面数据\" class=\"headerlink\" title=\"加载页面数据\"></a>加载页面数据</h3><p>你的应用程序可能是用来显示一些数据的。下面是一些提示，你可以使用这些提示尽早加载数据并避免呈现延迟。</p>\n<h4 id=\"在开始加载数据之前不要等待包\"><a href=\"#在开始加载数据之前不要等待包\" class=\"headerlink\" title=\"在开始加载数据之前不要等待包\"></a>在开始加载数据之前不要等待包</h4><p>这是一个顺序请求链的特殊情况:你加载应用程序包，然后代码请求页面数据。</p>\n<p>有两种方法可以避免这种情况：</p>\n<ul>\n<li>将页面数据嵌入 HTML 文档中</li>\n<li>通过文档中的内联脚本启动数据请求</li>\n</ul>\n<p>将数据嵌入 HTML 可以确保你的应用程序不必等待数据加载。这也降低了应用程序的复杂性，因为你不必处理加载状态。</p>\n<p>但是，如果获取数据会大大延迟你的文档响应，那将不是一个好主意，因为这会延迟你的初始渲染。</p>\n<p>在这种情况下，或者如果你通过服务工作者提供缓存的 HTML 文档，则可以将内联脚本嵌入到 HTML 中以加载此数据。你可以将其作为全局 <code>promise</code> 提供，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.userDataPromise = fetch(<span class=\"string\">&#x27;/me&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后，如果数据准备就绪，你的应用程序可以立即开始渲染，或者等到准备就绪。</p>\n<p>对于这两种技术，你都需要知道在应用开始呈现之前页面必须加载哪些数据。对于与用户相关的数据（用户名，通知 …），这往往很容易，但是对于特定于页面的内容，则比较棘手。考虑确定最重要的页面并为这些页面编写自定义逻辑。</p>\n<h4 id=\"等待非必需数据时不要阻塞渲染\"><a href=\"#等待非必需数据时不要阻塞渲染\" class=\"headerlink\" title=\"等待非必需数据时不要阻塞渲染\"></a>等待非必需数据时不要阻塞渲染</h4><p>有时生成页面数据需要缓慢的复杂后端逻辑。在这些情况下，如果足以使你的应用程序具有功能性和交互性，则可以首先加载较简单的数据版本。</p>\n<p>例如，分析工具可以在加载图表数据之前首先加载所有图表的列表。这使用户可以立即查找他们感兴趣的图表，还可以帮助将后端请求分散到不同的服务器上。</p>\n<img src=\"/posts/10518/640-20200322202223217.png\" class=\"\" title=\"640-20200322202223217\">\n\n<h4 id=\"避免顺序数据请求链\"><a href=\"#避免顺序数据请求链\" class=\"headerlink\" title=\"避免顺序数据请求链\"></a>避免顺序数据请求链</h4><p>这可能与我先前关于在第二个请求中加载非必需数据的观点相冲突，但是如果每个完成的请求都不会导致向用户显示更多信息，则避免顺序请求链。</p>\n<p>与其先发出关于用户登录身份的请求，然后再请求其所属团队的列表，不如在用户信息旁边返回团队列表。你可以使用 <code>GraphQL</code> ，但自定义用户呢? <code>includeTeams=true endpoint</code> 也很有用。</p>\n<p>与其首先请求用户登录为谁，然后请求他们所属的团队列表，</p>\n<h3 id=\"服务端端渲染\"><a href=\"#服务端端渲染\" class=\"headerlink\" title=\"服务端端渲染\"></a>服务端端渲染</h3><p>服务端端渲染意味着在服务器上预渲染你的应用程序，并使用整页 HTML 响应文档请求。这意味着客户端可以看到完全呈现的页面，而不必等待加载其他代码或数据！</p>\n<p>由于服务器只是将静态 HTML 发送给客户端，因此你的应用尚无法进行交互。需要加载应用程序，它需要重新运行呈现逻辑，然后将必要的事件侦听器附加到 DOM。</p>\n<p>如果看到非交互式内容很有价值，请使用服务器呈现。如果你能够将呈现的 HTML 缓存在服务器上并将其提供给所有用户而又不会延迟初始文档请求，那么它也将有所帮助。例如，如果你使用 <code>React</code> 来渲染博客文章，则服务器渲染非常合适。</p>\n<h2 id=\"下一页\"><a href=\"#下一页\" class=\"headerlink\" title=\"下一页\"></a>下一页</h2><p>在某个时候，用户将与你的应用进行交互并转到下一页。打开初始页面后，你可以控制浏览器中发生的事情，因此你可以准备进行下一次交互。</p>\n<h3 id=\"预取资源\"><a href=\"#预取资源\" class=\"headerlink\" title=\"预取资源\"></a>预取资源</h3><p>如果你预加载了下一页所需的代码，则可以消除用户启动导航时的延迟。使用 <code>prefetch</code> 标记，或 <code>webpackPrefetch</code> 用于动态导入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackPrefetch: true, webpackChunkName: &quot;todo-list&quot; */</span> <span class=\"string\">&#x27;./TodoList&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意你使用了多少用户数据和带宽，特别是当他们使用移动连接时。如果他们使用的是你网站的移动版本，或者他们启用了保存数据模式，你可以减少预加载。</p>\n<p>对于用户最可能需要的应用程序部分，要有策略。</p>\n<h3 id=\"重用已经加载的数据\"><a href=\"#重用已经加载的数据\" class=\"headerlink\" title=\"重用已经加载的数据\"></a>重用已经加载的数据</h3><p>在应用程序中本地缓存 <code>Ajax</code> 数据，并使用它来避免未来的请求。如果用户从团队列表导航到“编辑团队”页面，你可以通过重用已经获取的数据来立即进行转换。</p>\n<p>请注意，如果你的实体经常被其他用户编辑，并且你下载的数据可能已经过期，那么这种方法将不起作用。在这些情况下，在获取最新数据时，请首先考虑以只读方式显示现有数据。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>本文介绍了许多因素，这些因素可能会在加载过程的不同时刻使你的页面速度减慢。使用 <code>Chrome DevTools</code>，<code>WebPageTest</code>和<code>Lighthouse</code>之类的工具来确定其中哪些适用于你的应用程序。</p>\n<p>实际上，你几乎不可能在所有方面进行优化。找出对用户有最大影响的因素，并专注于此。</p>\n<p>我在写这篇文章时意识到的一件事是，我根深蒂固地相信，发出许多单独的请求对性能不利。过去，当每个请求都需要一个单独的连接时，Thas 就是这样，而浏览器每个域只允许几个连接。但是，使用 <code>HTTP/2</code> 和现代浏览器已不再是这种情况。</p>\n<p>并且有强烈的理由支持拆分请求。它允许仅加载必要的资源，并可以更好地利用缓存的内容，因为仅需要重新加载已更改的文件。</p>\n","site":{"data":{}},"excerpt":"<p>来源：<a href=\"https://mp.weixin.qq.com/s/C4izhX-vMnw_dpUZ1uDM0A\">高性能前端架构解决方案</a></p>\n<p>这篇文章介绍了一些使前端应用程序加载更快并提供良好用户体验的技术。</p>\n<p>我们将研究前端的总体架构，如何首先加载必需的资源，并最大化资源缓存的概率。</p>\n<p>无论你的页面是否需要成为客户端应用程序，还是如何优化应用程序的渲染时间，我都不会说太多后端如何传递资源。</p>","more":"<h2 id=\"总览\"><a href=\"#总览\" class=\"headerlink\" title=\"总览\"></a>总览</h2><p>我将把应用程序加载分为三个不同的阶段：</p>\n<ul>\n<li>初始渲染 – 用户看到任何东西之前需要多长时间？</li>\n<li>应用程序加载 – 用户可以使用该应用程序需要多长时间？</li>\n<li>下一页 – 导航到下一页需要多长时间？</li>\n</ul>\n<img src=\"/posts/10518/640-20200322202223114.png\" class=\"\" title=\"640-20200322202223114\">\n\n<h2 id=\"初始渲染\"><a href=\"#初始渲染\" class=\"headerlink\" title=\"初始渲染\"></a>初始渲染</h2><p>在浏览器的初始渲染之前，用户看不到任何东西。渲染页面至少需要加载 <code>HTML</code> 文件，但是大多数时候需要加载其他资源，例如 <code>CSS</code> 和 <code>JavaScript</code> 文件。一旦这些都加载完毕，浏览器就可以开始在屏幕上渲染。</p>\n<p>在本文中，我将使用 <code>WebPageTest</code> 瀑布图。你网站的请求瀑布可能看起来像这样。</p>\n<img src=\"/posts/10518/640-20200322202223159.png\" class=\"\" title=\"640-20200322202223159\">\n\n<p><code>HTML</code> 文档将加载一堆其他文件，并在这些文件加载后渲染页面。请注意， <code>CSS</code> 文件是并行加载的，因此每个其他请求不会增加明显的延迟。</p>\n<p>（备注：<code>gov.uk</code> 启用了 <code>HTTP/2</code>，因此资产域可以重新使用与 <code>www.gov.uk</code> 的现有连接！我将在下面详细讨论服务器连接。）</p>\n<h3 id=\"减少渲染阻塞的请求\"><a href=\"#减少渲染阻塞的请求\" class=\"headerlink\" title=\"减少渲染阻塞的请求\"></a>减少渲染阻塞的请求</h3><p><code>css</code> 和（默认情况下） <code>script</code> 文件会阻止其下方的任何内容渲染。</p>\n<p>你可以通过以下几种方法来解决此问题：</p>\n<ul>\n<li>将脚本标签放在 <code>body</code> 标签的底部</li>\n<li>使用 <code>async</code> 异步加载 <code>script</code></li>\n<li>内联使用小型的 <code>JS</code> 或 <code>CSS</code> 代码段（如果需要同步加载）</li>\n</ul>\n<h3 id=\"避免顺序渲染阻塞请求链\"><a href=\"#避免顺序渲染阻塞请求链\" class=\"headerlink\" title=\"避免顺序渲染阻塞请求链\"></a>避免顺序渲染阻塞请求链</h3><p>让你的网站变慢的不一定是阻止渲染的请求数量。更重要的是每种资源的下载大小，以及浏览器发现需要加载资源的时间。</p>\n<p>如果浏览器仅在另一个请求完成后才发现需要加载文件，则可以获取同步请求链。发生这种情况可能有多种原因：</p>\n<ul>\n<li><code>CSS</code> 中的 <code>@import</code> 规则</li>\n<li><code>CSS</code> 文件中引用的 <code>Webfonts</code></li>\n<li><code>JavaScript</code> 注入链接或脚本标签</li>\n</ul>\n<p>看一下这个例子：</p>\n<img src=\"/posts/10518/640-20200322202223158.png\" class=\"\" title=\"640-20200322202223158\">\n\n<p>这个网站在它的某个 <code>CSS</code> 文件中使用 <code>@import</code> 加载 <code>Google Fonts</code>。这意味着浏览器需要一个接一个地发出这些请求：</p>\n<ul>\n<li>文件 <code>HTML</code></li>\n<li>应用程序的 <code>CSS</code></li>\n<li><code>Google</code> 字体 <code>CSS</code></li>\n<li><code>Google Font Woff</code>文件（在瀑布图中未显示）</li>\n</ul>\n<p>要解决这个问题，首先需要将 <code>Google Fonts</code> 的 <code>CSS</code> 请求从 <code>@import</code> 移动到 <code>HTML</code> 中的 <code>link</code> 标记，这就切断了请求链条上的一个环节。</p>\n<p>为了进一步加快速度，建议直接在 <code>HTML</code> 或 <code>CSS</code> 文件中内联 <code>Google Fonts CSS</code> 文件。</p>\n<p>(记住，来自 <code>Google Fonts</code> 的 <code>CSS</code> 响应取决于用户代理。如果你用 <code>IE8</code> 发出请求，CSS 会引用一个 <code>EOT</code> 文件，<code>IE11</code> 会得到一个 <code>woff</code> 文件，而现在的浏览器会得到一个 <code>woff2</code> 文件。但是如果你不介意旧的浏览器使用系统字体，那么你可以复制粘贴 <code>CSS</code> 文件的内容。)</p>\n<p>即使页面开始呈现后，用户仍可能无法对该页面执行任何操作，因为在加载字体之前，不会显示任何文本。可以通过 <code>font-display swap</code> 来避免这种情况，现在 <code>Google Fonts</code> 默认情况下已经开始支持。</p>\n<p>有时，消除请求链是不可行的。在这些情况下，可以考虑使用 <code>preload</code> 或 <code>preconnect</code> 标记。例如，在实际的 <code>CSS</code> 请求发出之前，上面的网站可以连接到 <code>fonts.googleapis.com</code>。</p>\n<h3 id=\"重复使用服务器连接以加快请求\"><a href=\"#重复使用服务器连接以加快请求\" class=\"headerlink\" title=\"重复使用服务器连接以加快请求\"></a>重复使用服务器连接以加快请求</h3><p>建立新的服务器连接通常需要在服务器的浏览器之间进行 3 次往返：</p>\n<ul>\n<li><code>DNS</code> 查询</li>\n<li>建立 <code>TCP</code> 连接</li>\n<li>建立 <code>SSL</code> 连接</li>\n</ul>\n<p>连接就绪后，至少需要再进行一次往返来发送请求并下载响应。</p>\n<p>下面的瀑布显示连接已启动到四个不同的服务器：<code>hostgator.com，optimize.com，googletagmanager.com 和 googelapis.com</code>。</p>\n<p>但是，对同一服务器的后续请求可以重新使用现有连接。因此，加载 <code>base.css</code>或 <code>index1.css</code> 的速度很快，因为它们也托管在 <code>hostgator.com</code> 上。</p>\n<img src=\"/posts/10518/640-20200322202223164.png\" class=\"\" title=\"640-20200322202223164\">\n\n<h3 id=\"减小文件大小并使用-CDN\"><a href=\"#减小文件大小并使用-CDN\" class=\"headerlink\" title=\"减小文件大小并使用 CDN\"></a>减小文件大小并使用 CDN</h3><p>除了文件大小之外，还有两个其他因素会影响请求时间，这些因素都在你的控制范围内：资源大小和服务器位置。</p>\n<p>向用户发送尽可能少的数据，并确保将其压缩（例如，使用 <code>brotli</code> 或 <code>gzip</code> ）。</p>\n<p>内容交付网络在大量位置提供服务器，因此其中之一可能位于你的用户附近。用户可以连接到与其附近的 <code>CDN</code> 服务器，而不必连接到中央应用程序服务器。这意味着服务器的往返时间将大大缩短。这对于诸如 <code>CSS</code>，<code>JavaScript</code>和 <code>Image</code> 之类的静态资产特别方便，因为它们易于分发。</p>\n<h3 id=\"使用-service-workers-跳过网络\"><a href=\"#使用-service-workers-跳过网络\" class=\"headerlink\" title=\"使用 service workers 跳过网络\"></a>使用 service workers 跳过网络</h3><p><code>service workers</code> 允许你在请求进入网络之前拦截它们。这意味着你可以实现瞬时首屏渲染!</p>\n<p>当然，这只在你不需要网络发送响应时才有效。你需要已经缓存了响应，所以用户只有在第二次加载你的应用时才会受益。</p>\n<p>下面的 <code>service workers</code> 缓存呈现页面所需的 HTML 和 CSS。当再次加载应用程序时，它会尝试为缓存的资源提供服务，如果资源不可用，则会返回到网络。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;install&#x27;</span>, <span class=\"keyword\">async</span> e =&gt; &#123;</span><br><span class=\"line\">  caches.open(<span class=\"string\">&#x27;v1&#x27;</span>).then(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">cache</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cache.addAll([<span class=\"string\">&#x27;/app&#x27;</span>, <span class=\"string\">&#x27;/app.css&#x27;</span>]);</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">self.addEventListener(<span class=\"string\">&#x27;fetch&#x27;</span>, <span class=\"function\"><span class=\"params\">event</span> =&gt;</span> &#123;</span><br><span class=\"line\">  event.respondWith(</span><br><span class=\"line\">    caches.match(event.request).then(<span class=\"function\"><span class=\"params\">cachedResponse</span> =&gt;</span> &#123;</span><br><span class=\"line\">      <span class=\"keyword\">return</span> cachedResponse || fetch(event.request);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">  );</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用加载\"><a href=\"#应用加载\" class=\"headerlink\" title=\"应用加载\"></a>应用加载</h2><p>好的，现在用户已经可以看到一些东西，然后他们在可以使用你的应用程序之前还需要什么？</p>\n<ul>\n<li>加载应用程序代码（JS 和 CSS）</li>\n<li>加载页面的基本数据</li>\n<li>加载其他数据和图像</li>\n</ul>\n<img src=\"/posts/10518/640-20200322202223220.png\" class=\"\" title=\"640-20200322202223220\">\n\n<p>请注意，不仅仅是延迟从网络加载数据会延迟渲染。加载代码后，浏览器将需要解析，编译和执行它。</p>\n<h3 id=\"Bundle-split：仅加载必要的代码，并最大化缓存命中率\"><a href=\"#Bundle-split：仅加载必要的代码，并最大化缓存命中率\" class=\"headerlink\" title=\"Bundle split：仅加载必要的代码，并最大化缓存命中率\"></a>Bundle split：仅加载必要的代码，并最大化缓存命中率</h3><p><code>Bundle split</code> 允许只加载当前页面所需的代码，而不是加载整个应用程序。<code>Bundle split</code> 还意味着可以缓存其中的一部分，即使其他部分已经更改，需要重新加载。</p>\n<p>通常，代码被分成三种不同类型的文件:</p>\n<ul>\n<li>网页本身专用代码</li>\n<li>共享应用程序代码</li>\n<li>很少更改的第三方模块（非常适合缓存！）</li>\n</ul>\n<p><code>Webpack</code> 可以使用 <code>optimization.splitChunks</code> 自动拆分共享代码以减少总下载量。确保启用运行时块，以使 <code>chunk</code> 哈希稳定，并从长期缓存中受益。</p>\n<p>分离页面特定的代码不能自动完成，你需要识别可以单独加载的位。通常这是一个特定的路径或一组页面。使用动态导入来延迟加载代码。</p>\n<p><code>Bundle split</code> 会导致更多的请求被发送来加载你的应用程序。但是只要请求是并行发送的，这就不是什么大问题，特别是当你的站点开启了 <code>HTTP/2</code> 服务的时候。你可以看到在这个瀑布的前三个请求:</p>\n<img src=\"/posts/10518/640-20200322202223167.png\" class=\"\" title=\"640-20200322202223167\">\n\n<p>然而，这个瀑布图还显示了两个按顺序发出的请求。这些块只在这个页面中需要，并通过 <code>import()</code> 调用动态加载。</p>\n<p>如果你知道需要这些块，你可以通过插入预加载链接标记来解决这个问题。</p>\n<img src=\"/posts/10518/640-20200322203628249.png\" class=\"\" title=\"640-20200322203628249\">\n\n<p>但是，你会看到，与总页面加载时间相比，这样做的好处可能很小。</p>\n<p>另外，使用预加载有时会适得其反，因为加载其他更重要的文件时可能会延迟。</p>\n<h3 id=\"加载页面数据\"><a href=\"#加载页面数据\" class=\"headerlink\" title=\"加载页面数据\"></a>加载页面数据</h3><p>你的应用程序可能是用来显示一些数据的。下面是一些提示，你可以使用这些提示尽早加载数据并避免呈现延迟。</p>\n<h4 id=\"在开始加载数据之前不要等待包\"><a href=\"#在开始加载数据之前不要等待包\" class=\"headerlink\" title=\"在开始加载数据之前不要等待包\"></a>在开始加载数据之前不要等待包</h4><p>这是一个顺序请求链的特殊情况:你加载应用程序包，然后代码请求页面数据。</p>\n<p>有两种方法可以避免这种情况：</p>\n<ul>\n<li>将页面数据嵌入 HTML 文档中</li>\n<li>通过文档中的内联脚本启动数据请求</li>\n</ul>\n<p>将数据嵌入 HTML 可以确保你的应用程序不必等待数据加载。这也降低了应用程序的复杂性，因为你不必处理加载状态。</p>\n<p>但是，如果获取数据会大大延迟你的文档响应，那将不是一个好主意，因为这会延迟你的初始渲染。</p>\n<p>在这种情况下，或者如果你通过服务工作者提供缓存的 HTML 文档，则可以将内联脚本嵌入到 HTML 中以加载此数据。你可以将其作为全局 <code>promise</code> 提供，如下所示：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.userDataPromise = fetch(<span class=\"string\">&#x27;/me&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>然后，如果数据准备就绪，你的应用程序可以立即开始渲染，或者等到准备就绪。</p>\n<p>对于这两种技术，你都需要知道在应用开始呈现之前页面必须加载哪些数据。对于与用户相关的数据（用户名，通知 …），这往往很容易，但是对于特定于页面的内容，则比较棘手。考虑确定最重要的页面并为这些页面编写自定义逻辑。</p>\n<h4 id=\"等待非必需数据时不要阻塞渲染\"><a href=\"#等待非必需数据时不要阻塞渲染\" class=\"headerlink\" title=\"等待非必需数据时不要阻塞渲染\"></a>等待非必需数据时不要阻塞渲染</h4><p>有时生成页面数据需要缓慢的复杂后端逻辑。在这些情况下，如果足以使你的应用程序具有功能性和交互性，则可以首先加载较简单的数据版本。</p>\n<p>例如，分析工具可以在加载图表数据之前首先加载所有图表的列表。这使用户可以立即查找他们感兴趣的图表，还可以帮助将后端请求分散到不同的服务器上。</p>\n<img src=\"/posts/10518/640-20200322202223217.png\" class=\"\" title=\"640-20200322202223217\">\n\n<h4 id=\"避免顺序数据请求链\"><a href=\"#避免顺序数据请求链\" class=\"headerlink\" title=\"避免顺序数据请求链\"></a>避免顺序数据请求链</h4><p>这可能与我先前关于在第二个请求中加载非必需数据的观点相冲突，但是如果每个完成的请求都不会导致向用户显示更多信息，则避免顺序请求链。</p>\n<p>与其先发出关于用户登录身份的请求，然后再请求其所属团队的列表，不如在用户信息旁边返回团队列表。你可以使用 <code>GraphQL</code> ，但自定义用户呢? <code>includeTeams=true endpoint</code> 也很有用。</p>\n<p>与其首先请求用户登录为谁，然后请求他们所属的团队列表，</p>\n<h3 id=\"服务端端渲染\"><a href=\"#服务端端渲染\" class=\"headerlink\" title=\"服务端端渲染\"></a>服务端端渲染</h3><p>服务端端渲染意味着在服务器上预渲染你的应用程序，并使用整页 HTML 响应文档请求。这意味着客户端可以看到完全呈现的页面，而不必等待加载其他代码或数据！</p>\n<p>由于服务器只是将静态 HTML 发送给客户端，因此你的应用尚无法进行交互。需要加载应用程序，它需要重新运行呈现逻辑，然后将必要的事件侦听器附加到 DOM。</p>\n<p>如果看到非交互式内容很有价值，请使用服务器呈现。如果你能够将呈现的 HTML 缓存在服务器上并将其提供给所有用户而又不会延迟初始文档请求，那么它也将有所帮助。例如，如果你使用 <code>React</code> 来渲染博客文章，则服务器渲染非常合适。</p>\n<h2 id=\"下一页\"><a href=\"#下一页\" class=\"headerlink\" title=\"下一页\"></a>下一页</h2><p>在某个时候，用户将与你的应用进行交互并转到下一页。打开初始页面后，你可以控制浏览器中发生的事情，因此你可以准备进行下一次交互。</p>\n<h3 id=\"预取资源\"><a href=\"#预取资源\" class=\"headerlink\" title=\"预取资源\"></a>预取资源</h3><p>如果你预加载了下一页所需的代码，则可以消除用户启动导航时的延迟。使用 <code>prefetch</code> 标记，或 <code>webpackPrefetch</code> 用于动态导入：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span>(<span class=\"comment\">/* webpackPrefetch: true, webpackChunkName: &quot;todo-list&quot; */</span> <span class=\"string\">&#x27;./TodoList&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<p>注意你使用了多少用户数据和带宽，特别是当他们使用移动连接时。如果他们使用的是你网站的移动版本，或者他们启用了保存数据模式，你可以减少预加载。</p>\n<p>对于用户最可能需要的应用程序部分，要有策略。</p>\n<h3 id=\"重用已经加载的数据\"><a href=\"#重用已经加载的数据\" class=\"headerlink\" title=\"重用已经加载的数据\"></a>重用已经加载的数据</h3><p>在应用程序中本地缓存 <code>Ajax</code> 数据，并使用它来避免未来的请求。如果用户从团队列表导航到“编辑团队”页面，你可以通过重用已经获取的数据来立即进行转换。</p>\n<p>请注意，如果你的实体经常被其他用户编辑，并且你下载的数据可能已经过期，那么这种方法将不起作用。在这些情况下，在获取最新数据时，请首先考虑以只读方式显示现有数据。</p>\n<h2 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h2><p>本文介绍了许多因素，这些因素可能会在加载过程的不同时刻使你的页面速度减慢。使用 <code>Chrome DevTools</code>，<code>WebPageTest</code>和<code>Lighthouse</code>之类的工具来确定其中哪些适用于你的应用程序。</p>\n<p>实际上，你几乎不可能在所有方面进行优化。找出对用户有最大影响的因素，并专注于此。</p>\n<p>我在写这篇文章时意识到的一件事是，我根深蒂固地相信，发出许多单独的请求对性能不利。过去，当每个请求都需要一个单独的连接时，Thas 就是这样，而浏览器每个域只允许几个连接。但是，使用 <code>HTTP/2</code> 和现代浏览器已不再是这种情况。</p>\n<p>并且有强烈的理由支持拆分请求。它允许仅加载必要的资源，并可以更好地利用缓存的内容，因为仅需要重新加载已更改的文件。</p>"},{"title":"一些有用的npm包","date":"2020-12-02T01:19:02.000Z","_content":"\n## runjs\n\n> 已改名为 tasksfile ，`npm install tasksfile` 代替\n\n### 介绍\n\n一个小型构件工具\n\n### 安装\n\n```shell\nnpm install runjs -D\n```\n\n<!-- more -->\n\n### 使用\n\n在根项目目录中创建 `runfile.js`\n\n```js\nconst { run } = require('runjs');\n\nfunction hello(name = 'Mysterious') {\n  console.log(`Hello ${name}!`);\n}\n\nfunction makedir() {\n  run('mkdir somedir');\n}\n\nmodule.exports = {\n  hello,\n  makedir\n};\n```\n\n在你的终端中执行：\n\n```shell\n$ npx run hello Tommy\nHello Tommy!\n$ npx run makedir\nmkdir somedir\n```\n\n## chalk\n\n### 介绍\n\n给 `终端` 字符串设置样式\n\n### 安装\n\n```shell\nnpm install chalk\n```\n\n### 使用\n\n```js\nconst chalk = require('chalk');\n\nconsole.log(chalk.blue('Hello world!'));\n```\n\n## connect\n\n### 介绍\n\nConnect 是一个可扩展的 HTTP 服务器框架，用于 node，使用称为中间件的“插件”。\n\n### 安装\n\n```shell\nnpm install connect\n```\n\n### 使用\n\n```shell\nvar connect = require('connect');\nvar http = require('http');\n\nvar app = connect();\n\n// gzip/deflate outgoing responses\nvar compression = require('compression');\napp.use(compression());\n\n// store session state in browser cookie\nvar cookieSession = require('cookie-session');\napp.use(cookieSession({\n    keys: ['secret1', 'secret2']\n}));\n\n// parse urlencoded request bodies into req.body\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({extended: false}));\n\n// respond to all requests\napp.use(function(req, res){\n  res.end('Hello from Connect!\\n');\n});\n\n//create node.js http server and listen on port\nhttp.createServer(app).listen(3000);\n```\n\n## serve-static\n\n### 介绍\n\n一款静态资源管理器\n\n### 安装\n\n```shell\nnpm install serve-static\n```\n\n### 使用\n\n```js\nvar http = require('http'),\n  url = require('url'),\n  fs = require('fs');\nvar serveStatic = require('serve-static'),\n  //finalhandler 是 serveStatic 的依赖，不需要特意安装。\n  finalhandler = require('finalhandler');\n\n//配置静态资源服务 (\"要静态化的文件路径\",{默认主页的配置});\nvar serve = serveStatic('public', { index: ['index.html', 'index.htm'] });\nhttp\n  .createServer(function (req, res) {\n    //路由清单\n    if (req.url == '/music') {\n      //也让其显示 根目录public 下的主页\n      fs.readFile('./public/index.html', function (err, data) {\n        if (err) {\n          res.end('没有此文件!');\n          return;\n        }\n        console.log(data.toString());\n        res.end(data.toString());\n      });\n      //读取并呈递完毕之后,在路由中加上return,\n      //否则下面的静态资源服务里面会一直寻找这个路由，\n      //这个路由是虚拟出来的，因此不会呈递上面我们去读的文件\n      return;\n    }\n\n    //使用静态资源服务，一般放在中间件最下方，不至于遮蔽中间件的路由\n    serve(req, res, finalhandler(req, res));\n  })\n  .listen(8888);\nconsole.log('ok');\n```\n\n## mockjs\n\n### 介绍\n\n生成随机数据，拦截 Ajax 请求\n\n### 安装\n\n```shell\nnpm install mockjs\n```\n\n### 使用\n\n```js\n// 使用 Mock\nvar Mock = require('mockjs');\nvar data = Mock.mock({\n  // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n  'list|1-10': [\n    {\n      // 属性 id 是一个自增数，起始值为 1，每次增 1\n      'id|+1': 1\n    }\n  ]\n});\n// 输出结果\nconsole.log(JSON.stringify(data, null, 4));\n```\n","source":"_posts/一些有用的npm包.md","raw":"---\ntitle: 一些有用的npm包\ndate: 2020-12-02 09:19:02\ntags:\n  - 笔记\ncategories:\n  - 前端\n  - 构建工具\n  - npm\n---\n\n## runjs\n\n> 已改名为 tasksfile ，`npm install tasksfile` 代替\n\n### 介绍\n\n一个小型构件工具\n\n### 安装\n\n```shell\nnpm install runjs -D\n```\n\n<!-- more -->\n\n### 使用\n\n在根项目目录中创建 `runfile.js`\n\n```js\nconst { run } = require('runjs');\n\nfunction hello(name = 'Mysterious') {\n  console.log(`Hello ${name}!`);\n}\n\nfunction makedir() {\n  run('mkdir somedir');\n}\n\nmodule.exports = {\n  hello,\n  makedir\n};\n```\n\n在你的终端中执行：\n\n```shell\n$ npx run hello Tommy\nHello Tommy!\n$ npx run makedir\nmkdir somedir\n```\n\n## chalk\n\n### 介绍\n\n给 `终端` 字符串设置样式\n\n### 安装\n\n```shell\nnpm install chalk\n```\n\n### 使用\n\n```js\nconst chalk = require('chalk');\n\nconsole.log(chalk.blue('Hello world!'));\n```\n\n## connect\n\n### 介绍\n\nConnect 是一个可扩展的 HTTP 服务器框架，用于 node，使用称为中间件的“插件”。\n\n### 安装\n\n```shell\nnpm install connect\n```\n\n### 使用\n\n```shell\nvar connect = require('connect');\nvar http = require('http');\n\nvar app = connect();\n\n// gzip/deflate outgoing responses\nvar compression = require('compression');\napp.use(compression());\n\n// store session state in browser cookie\nvar cookieSession = require('cookie-session');\napp.use(cookieSession({\n    keys: ['secret1', 'secret2']\n}));\n\n// parse urlencoded request bodies into req.body\nvar bodyParser = require('body-parser');\napp.use(bodyParser.urlencoded({extended: false}));\n\n// respond to all requests\napp.use(function(req, res){\n  res.end('Hello from Connect!\\n');\n});\n\n//create node.js http server and listen on port\nhttp.createServer(app).listen(3000);\n```\n\n## serve-static\n\n### 介绍\n\n一款静态资源管理器\n\n### 安装\n\n```shell\nnpm install serve-static\n```\n\n### 使用\n\n```js\nvar http = require('http'),\n  url = require('url'),\n  fs = require('fs');\nvar serveStatic = require('serve-static'),\n  //finalhandler 是 serveStatic 的依赖，不需要特意安装。\n  finalhandler = require('finalhandler');\n\n//配置静态资源服务 (\"要静态化的文件路径\",{默认主页的配置});\nvar serve = serveStatic('public', { index: ['index.html', 'index.htm'] });\nhttp\n  .createServer(function (req, res) {\n    //路由清单\n    if (req.url == '/music') {\n      //也让其显示 根目录public 下的主页\n      fs.readFile('./public/index.html', function (err, data) {\n        if (err) {\n          res.end('没有此文件!');\n          return;\n        }\n        console.log(data.toString());\n        res.end(data.toString());\n      });\n      //读取并呈递完毕之后,在路由中加上return,\n      //否则下面的静态资源服务里面会一直寻找这个路由，\n      //这个路由是虚拟出来的，因此不会呈递上面我们去读的文件\n      return;\n    }\n\n    //使用静态资源服务，一般放在中间件最下方，不至于遮蔽中间件的路由\n    serve(req, res, finalhandler(req, res));\n  })\n  .listen(8888);\nconsole.log('ok');\n```\n\n## mockjs\n\n### 介绍\n\n生成随机数据，拦截 Ajax 请求\n\n### 安装\n\n```shell\nnpm install mockjs\n```\n\n### 使用\n\n```js\n// 使用 Mock\nvar Mock = require('mockjs');\nvar data = Mock.mock({\n  // 属性 list 的值是一个数组，其中含有 1 到 10 个元素\n  'list|1-10': [\n    {\n      // 属性 id 是一个自增数，起始值为 1，每次增 1\n      'id|+1': 1\n    }\n  ]\n});\n// 输出结果\nconsole.log(JSON.stringify(data, null, 4));\n```\n","slug":"一些有用的npm包","published":1,"updated":"2020-12-02T02:31:09.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfo003pkhsram398qjj","content":"<h2 id=\"runjs\"><a href=\"#runjs\" class=\"headerlink\" title=\"runjs\"></a>runjs</h2><blockquote>\n<p>已改名为 tasksfile ，<code>npm install tasksfile</code> 代替</p>\n</blockquote>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>一个小型构件工具</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install runjs -D</span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在根项目目录中创建 <code>runfile.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; run &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;runjs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name = <span class=\"string\">&#x27;Mysterious&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makedir</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  run(<span class=\"string\">&#x27;mkdir somedir&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  hello,</span><br><span class=\"line\">  makedir</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在你的终端中执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npx run hello Tommy</span></span><br><span class=\"line\">Hello Tommy!</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npx run makedir</span></span><br><span class=\"line\">mkdir somedir</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"chalk\"><a href=\"#chalk\" class=\"headerlink\" title=\"chalk\"></a>chalk</h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>给 <code>终端</code> 字符串设置样式</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install chalk</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chalk.blue(<span class=\"string\">&#x27;Hello world!&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h2><h3 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Connect 是一个可扩展的 HTTP 服务器框架，用于 node，使用称为中间件的“插件”。</p>\n<h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install connect</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var connect = require(&#x27;connect&#x27;);</span><br><span class=\"line\">var http = require(&#x27;http&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = connect();</span><br><span class=\"line\"></span><br><span class=\"line\">// gzip/deflate outgoing responses</span><br><span class=\"line\">var compression = require(&#x27;compression&#x27;);</span><br><span class=\"line\">app.use(compression());</span><br><span class=\"line\"></span><br><span class=\"line\">// store session state in browser cookie</span><br><span class=\"line\">var cookieSession = require(&#x27;cookie-session&#x27;);</span><br><span class=\"line\">app.use(cookieSession(&#123;</span><br><span class=\"line\">    keys: [&#x27;secret1&#x27;, &#x27;secret2&#x27;]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// parse urlencoded request bodies into req.body</span><br><span class=\"line\">var bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended: false&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// respond to all requests</span><br><span class=\"line\">app.use(function(req, res)&#123;</span><br><span class=\"line\">  res.end(&#x27;Hello from Connect!\\n&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//create node.js http server and listen on port</span><br><span class=\"line\">http.createServer(app).listen(3000);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"serve-static\"><a href=\"#serve-static\" class=\"headerlink\" title=\"serve-static\"></a>serve-static</h2><h3 id=\"介绍-3\"><a href=\"#介绍-3\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>一款静态资源管理器</p>\n<h3 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install serve-static</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-3\"><a href=\"#使用-3\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>),</span><br><span class=\"line\">  url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>),</span><br><span class=\"line\">  fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> serveStatic = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;serve-static&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">//finalhandler 是 serveStatic 的依赖，不需要特意安装。</span></span><br><span class=\"line\">  finalhandler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;finalhandler&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置静态资源服务 (&quot;要静态化的文件路径&quot;,&#123;默认主页的配置&#125;);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serve = serveStatic(<span class=\"string\">&#x27;public&#x27;</span>, &#123; <span class=\"attr\">index</span>: [<span class=\"string\">&#x27;index.html&#x27;</span>, <span class=\"string\">&#x27;index.htm&#x27;</span>] &#125;);</span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//路由清单</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.url == <span class=\"string\">&#x27;/music&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//也让其显示 根目录public 下的主页</span></span><br><span class=\"line\">      fs.readFile(<span class=\"string\">&#x27;./public/index.html&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          res.end(<span class=\"string\">&#x27;没有此文件!&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">        res.end(data.toString());</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//读取并呈递完毕之后,在路由中加上return,</span></span><br><span class=\"line\">      <span class=\"comment\">//否则下面的静态资源服务里面会一直寻找这个路由，</span></span><br><span class=\"line\">      <span class=\"comment\">//这个路由是虚拟出来的，因此不会呈递上面我们去读的文件</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用静态资源服务，一般放在中间件最下方，不至于遮蔽中间件的路由</span></span><br><span class=\"line\">    serve(req, res, finalhandler(req, res));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mockjs\"><a href=\"#mockjs\" class=\"headerlink\" title=\"mockjs\"></a>mockjs</h2><h3 id=\"介绍-4\"><a href=\"#介绍-4\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>生成随机数据，拦截 Ajax 请求</p>\n<h3 id=\"安装-4\"><a href=\"#安装-4\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mockjs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-4\"><a href=\"#使用-4\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Mock</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mockjs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = Mock.mock(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;list|1-10&#x27;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;id|+1&#x27;</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"abbrlink":44396,"excerpt":"<h2 id=\"runjs\"><a href=\"#runjs\" class=\"headerlink\" title=\"runjs\"></a>runjs</h2><blockquote>\n<p>已改名为 tasksfile ，<code>npm install tasksfile</code> 代替</p>\n</blockquote>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>一个小型构件工具</p>\n<h3 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install runjs -D</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h3><p>在根项目目录中创建 <code>runfile.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> &#123; run &#125; = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;runjs&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">hello</span>(<span class=\"params\">name = <span class=\"string\">&#x27;Mysterious&#x27;</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(<span class=\"string\">`Hello <span class=\"subst\">$&#123;name&#125;</span>!`</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makedir</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  run(<span class=\"string\">&#x27;mkdir somedir&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  hello,</span><br><span class=\"line\">  makedir</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>在你的终端中执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npx run hello Tommy</span></span><br><span class=\"line\">Hello Tommy!</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> npx run makedir</span></span><br><span class=\"line\">mkdir somedir</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"chalk\"><a href=\"#chalk\" class=\"headerlink\" title=\"chalk\"></a>chalk</h2><h3 id=\"介绍-1\"><a href=\"#介绍-1\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>给 <code>终端</code> 字符串设置样式</p>\n<h3 id=\"安装-1\"><a href=\"#安装-1\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install chalk</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-1\"><a href=\"#使用-1\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> chalk = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;chalk&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(chalk.blue(<span class=\"string\">&#x27;Hello world!&#x27;</span>));</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"connect\"><a href=\"#connect\" class=\"headerlink\" title=\"connect\"></a>connect</h2><h3 id=\"介绍-2\"><a href=\"#介绍-2\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>Connect 是一个可扩展的 HTTP 服务器框架，用于 node，使用称为中间件的“插件”。</p>\n<h3 id=\"安装-2\"><a href=\"#安装-2\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install connect</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-2\"><a href=\"#使用-2\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var connect = require(&#x27;connect&#x27;);</span><br><span class=\"line\">var http = require(&#x27;http&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">var app = connect();</span><br><span class=\"line\"></span><br><span class=\"line\">// gzip/deflate outgoing responses</span><br><span class=\"line\">var compression = require(&#x27;compression&#x27;);</span><br><span class=\"line\">app.use(compression());</span><br><span class=\"line\"></span><br><span class=\"line\">// store session state in browser cookie</span><br><span class=\"line\">var cookieSession = require(&#x27;cookie-session&#x27;);</span><br><span class=\"line\">app.use(cookieSession(&#123;</span><br><span class=\"line\">    keys: [&#x27;secret1&#x27;, &#x27;secret2&#x27;]</span><br><span class=\"line\">&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// parse urlencoded request bodies into req.body</span><br><span class=\"line\">var bodyParser = require(&#x27;body-parser&#x27;);</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123;extended: false&#125;));</span><br><span class=\"line\"></span><br><span class=\"line\">// respond to all requests</span><br><span class=\"line\">app.use(function(req, res)&#123;</span><br><span class=\"line\">  res.end(&#x27;Hello from Connect!\\n&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//create node.js http server and listen on port</span><br><span class=\"line\">http.createServer(app).listen(3000);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"serve-static\"><a href=\"#serve-static\" class=\"headerlink\" title=\"serve-static\"></a>serve-static</h2><h3 id=\"介绍-3\"><a href=\"#介绍-3\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>一款静态资源管理器</p>\n<h3 id=\"安装-3\"><a href=\"#安装-3\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install serve-static</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-3\"><a href=\"#使用-3\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> http = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;http&#x27;</span>),</span><br><span class=\"line\">  url = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;url&#x27;</span>),</span><br><span class=\"line\">  fs = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;fs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> serveStatic = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;serve-static&#x27;</span>),</span><br><span class=\"line\">  <span class=\"comment\">//finalhandler 是 serveStatic 的依赖，不需要特意安装。</span></span><br><span class=\"line\">  finalhandler = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;finalhandler&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//配置静态资源服务 (&quot;要静态化的文件路径&quot;,&#123;默认主页的配置&#125;);</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> serve = serveStatic(<span class=\"string\">&#x27;public&#x27;</span>, &#123; <span class=\"attr\">index</span>: [<span class=\"string\">&#x27;index.html&#x27;</span>, <span class=\"string\">&#x27;index.htm&#x27;</span>] &#125;);</span><br><span class=\"line\">http</span><br><span class=\"line\">  .createServer(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">req, res</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//路由清单</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (req.url == <span class=\"string\">&#x27;/music&#x27;</span>) &#123;</span><br><span class=\"line\">      <span class=\"comment\">//也让其显示 根目录public 下的主页</span></span><br><span class=\"line\">      fs.readFile(<span class=\"string\">&#x27;./public/index.html&#x27;</span>, <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">err, data</span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (err) &#123;</span><br><span class=\"line\">          res.end(<span class=\"string\">&#x27;没有此文件!&#x27;</span>);</span><br><span class=\"line\">          <span class=\"keyword\">return</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data.toString());</span><br><span class=\"line\">        res.end(data.toString());</span><br><span class=\"line\">      &#125;);</span><br><span class=\"line\">      <span class=\"comment\">//读取并呈递完毕之后,在路由中加上return,</span></span><br><span class=\"line\">      <span class=\"comment\">//否则下面的静态资源服务里面会一直寻找这个路由，</span></span><br><span class=\"line\">      <span class=\"comment\">//这个路由是虚拟出来的，因此不会呈递上面我们去读的文件</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//使用静态资源服务，一般放在中间件最下方，不至于遮蔽中间件的路由</span></span><br><span class=\"line\">    serve(req, res, finalhandler(req, res));</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  .listen(<span class=\"number\">8888</span>);</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;ok&#x27;</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"mockjs\"><a href=\"#mockjs\" class=\"headerlink\" title=\"mockjs\"></a>mockjs</h2><h3 id=\"介绍-4\"><a href=\"#介绍-4\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>生成随机数据，拦截 Ajax 请求</p>\n<h3 id=\"安装-4\"><a href=\"#安装-4\" class=\"headerlink\" title=\"安装\"></a>安装</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mockjs</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-4\"><a href=\"#使用-4\" class=\"headerlink\" title=\"使用\"></a>使用</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 使用 Mock</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Mock = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;mockjs&#x27;</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> data = Mock.mock(&#123;</span><br><span class=\"line\">  <span class=\"comment\">// 属性 list 的值是一个数组，其中含有 1 到 10 个元素</span></span><br><span class=\"line\">  <span class=\"string\">&#x27;list|1-10&#x27;</span>: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 属性 id 是一个自增数，起始值为 1，每次增 1</span></span><br><span class=\"line\">      <span class=\"string\">&#x27;id|+1&#x27;</span>: <span class=\"number\">1</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  ]</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"><span class=\"comment\">// 输出结果</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(<span class=\"built_in\">JSON</span>.stringify(data, <span class=\"literal\">null</span>, <span class=\"number\">4</span>));</span><br></pre></td></tr></table></figure>"},{"title":"三栏布局方案(圣杯_双飞翼)","abbrlink":10370,"date":"2018-11-29T15:20:26.000Z","_content":"\n## 圣杯布局\n\n### 步骤一 - HTML框架搭建 & 初始化CSS\n\n首先把基本框架搭起来（注意中间部分放最前面）：\n\n```html\n<div class=\"container\">\n    <div class=\"center\">我是中间</div>\n    <div class=\"left\">我是左边</div>\n    <div class=\"right\">我是右边</div>\n</div>\n```\n\n<!-- more -->\n\n接下来是初始化样式。left, right宽度分别设置为100px和200px；然后设置container的 `padding-left: 100px` + `padding-right: 200px` 来占据两侧填充；center宽度设为100%，这样能够自适应剩下的宽度。再让所有子元素左浮动。代码如下：\n\n```css\n.container {\n    padding: 0 200px 0 100px; /* 左边100， 右边200*/\n    background-color: #e1e1e1;\n    height: 300px; /* 为了看效果，给个300px把高度撑起来 */\n}\n\n.left, .center, .right {\n    float: left;\n    height: 100%;\n}\n\n.center {\n    width: 100%; /* 占据父元素剩下的宽度*/\n    background-color: lightblue;\n}\n\n.left {\n    width: 100px;\n    background-color: pink;\n}\n\n.right {\n    width: 200px;\n    background-color: yellow;\n}\n```\n\n此时的页面效果：\n\n{% asset_img 圣杯step1.png 圣杯step1 %}\n\n### 步骤二 - 让left占据最左列\n\n为了让left能越过center，我们先给它设置一个 -100% 的左边距。这个100%是在container中的宽度，也就是center的宽度：\n\n```css\n.left {\n    margin-left: -100%;\n    width: 100px;\n    /*为了看left和center的重叠效果，暂时bgc设为半透明*/\n    background-color: rgba(255,204,204,.6);\n}\n```\n\n页面效果：\n\n{% asset_img 圣杯step2.png 圣杯step2 %}\n\n此时，我们已经让left从“第二行”升到了“第一行”，为了让它靠到最左侧，不与center重叠，可以给它设置相对定位，然后给个 `left: -100px` ，让它定位到container最左侧：\n\n```css\n.left {\n    /* 设置相对定位 */ \n    position: relative;\n    /* 靠到最左侧 */\n    left: -100px;\n    margin-left: -100%;\n    width: 100px;\n    background-color: pink;\n}\n```\n\n页面效果：\n\n{% asset_img 圣杯step3.png 圣杯step3 %}\n\n### 步骤三 - 让right占据最右列\n\n定位好了left，也是时候让right呆在最右边来填充位置了，我们继续使用负margin：\n\n```css\n.right {\n    width: 200px;\n    margin-right: -200px;\n    background-color: yellow;\n}\n```\n\n页面效果：\n\n{% asset_img 圣杯step4.png 圣杯step4 %}\n\n### 步骤四 - 给container设置min-width\n\n看起来已经实现了不是吗？但我们还差最后一步，给container设置一个 `min-width: 100px` （就是左列的宽度），否则当浏览器缩小到一定程度时，这个布局可能会被破坏。原因简单来讲就是：“由于设置了相对定位，所以当left原来的位置和right的位置产生重叠时，由于浮动的原因一行放不下就会换行”。所以布局就被打乱了。\n\n```css\n.container {\n    min-width: 100px;\n    background-color: #e1e1e1;\n    padding: 0 200px 0 100px;\n    height: 300px;\n}\n```\n\n### 完整代码 + 最终效果\n\n这样，我们就实现了圣杯布局，完整代码和效果见下：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 圣杯布局\" src=\"https://codepen.io/JingW/embed/VRXYmz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 双飞翼布局\n\n如果上面圣杯布局你已经理解并自己实践了一遍，那么这里的双飞翼布局你也应该不再话下。跟着我一起撸一遍代码吧。\n\n### 步骤一 - HTML框架搭建 & 初始化CSS\n\n首先搭建html，仔细观察下方代码你会发现，双飞翼布局在html上面有一点和圣杯布局有差别，那就是双飞翼在center里又套了一个div。到后面你就会知道这样设置的目的。\n\n```html\n<div class=\"container\">\n    <div class=\"center\"><div>我是中间</div></div>\n    <div class=\"left\">我是左边</div>\n    <div class=\"right\">我是右边</div>\n</div>\n```\n\n然后编写初始样式。left定宽100；right定宽200；left, right, center全部设置左浮动。其他例如设置颜色高度等等直接看下方代码：\n\n```css\n.container {\n    background-color: #e1e1e1;\n    height: 300px;\n}\n\n.center {\n    background-color: lightblue;\n}\n\n.left {\n    width: 100px;\n    background-color: pink;\n}\n\n.right {\n    width: 200px;\n    background-color: yellow;\n}\n\n.left, .center, .right {\n    float: left;\n    height: 100%;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step1.png 双飞翼step1 %}\n\n### 步骤二 - 设置center为100%宽\n\n将center的宽度设为100%，这样会把left，right“挤”到第二行：\n\n```css\n.center {\n    width: 100%;\n    background-color: lightblue;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step2.png 双飞翼step2 %}\n\n### 步骤三 - 分别让left,right回到最左边和最右边\n\n接着，给left设置 `margin-left: -100%` 回到最左边，给right设置 `margin-left: -200px` 回到最右边。此时center和left,right都有重叠区域，为了看效果，设置了半透明背景颜色。\n\n```css\n.left {\n    width: 100px;\n    margin-left: -100%;\n    background-color: pink;\n}\n\n.right {\n    width: 200px;\n    margin-left: -200px;\n    background-color: yellow;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step3.png 双飞翼step3 %}\n\n### 步骤四 - 给center的子div设置左右margin\n\n其实上面的效果图已经实现了三栏布局中间自适应。但有个问题是center左右部分区域会被遮挡，这个时候在步骤一提到的center子div的作用就体现出来了，我们可以给它设置一个左右的margin值，分别等于left的宽和right的宽，消除掉重叠的副作用。\n\n```css\n.center div {\n    /* 左margin100，右margin200 */\n    margin: 0 200px 0 100px;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step4.png 双飞翼step4 %}\n\n### 步骤五 - 给container设置min-width\n\n最后，给container设置一个min-width，让container最小宽度不小于left宽+right宽\n\n```css\n.container {\n    min-width: 300px;\n    background-color: #e1e1e1;\n    height: 300px;\n}\n```\n\n大功告成~\n\n### 完整代码 + 最终效果\n\n<iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 双飞翼布局\" src=\"https://codepen.io/JingW/embed/wOmBoY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","source":"_posts/三栏布局方案-圣杯-双飞翼.md","raw":"---\ntitle: 三栏布局方案(圣杯_双飞翼)\ntags:\n  - 布局\n  - 技巧\ncategories:\n  - 前端\n  - CSS\nabbrlink: 10370\ndate: 2018-11-29 23:20:26\n---\n\n## 圣杯布局\n\n### 步骤一 - HTML框架搭建 & 初始化CSS\n\n首先把基本框架搭起来（注意中间部分放最前面）：\n\n```html\n<div class=\"container\">\n    <div class=\"center\">我是中间</div>\n    <div class=\"left\">我是左边</div>\n    <div class=\"right\">我是右边</div>\n</div>\n```\n\n<!-- more -->\n\n接下来是初始化样式。left, right宽度分别设置为100px和200px；然后设置container的 `padding-left: 100px` + `padding-right: 200px` 来占据两侧填充；center宽度设为100%，这样能够自适应剩下的宽度。再让所有子元素左浮动。代码如下：\n\n```css\n.container {\n    padding: 0 200px 0 100px; /* 左边100， 右边200*/\n    background-color: #e1e1e1;\n    height: 300px; /* 为了看效果，给个300px把高度撑起来 */\n}\n\n.left, .center, .right {\n    float: left;\n    height: 100%;\n}\n\n.center {\n    width: 100%; /* 占据父元素剩下的宽度*/\n    background-color: lightblue;\n}\n\n.left {\n    width: 100px;\n    background-color: pink;\n}\n\n.right {\n    width: 200px;\n    background-color: yellow;\n}\n```\n\n此时的页面效果：\n\n{% asset_img 圣杯step1.png 圣杯step1 %}\n\n### 步骤二 - 让left占据最左列\n\n为了让left能越过center，我们先给它设置一个 -100% 的左边距。这个100%是在container中的宽度，也就是center的宽度：\n\n```css\n.left {\n    margin-left: -100%;\n    width: 100px;\n    /*为了看left和center的重叠效果，暂时bgc设为半透明*/\n    background-color: rgba(255,204,204,.6);\n}\n```\n\n页面效果：\n\n{% asset_img 圣杯step2.png 圣杯step2 %}\n\n此时，我们已经让left从“第二行”升到了“第一行”，为了让它靠到最左侧，不与center重叠，可以给它设置相对定位，然后给个 `left: -100px` ，让它定位到container最左侧：\n\n```css\n.left {\n    /* 设置相对定位 */ \n    position: relative;\n    /* 靠到最左侧 */\n    left: -100px;\n    margin-left: -100%;\n    width: 100px;\n    background-color: pink;\n}\n```\n\n页面效果：\n\n{% asset_img 圣杯step3.png 圣杯step3 %}\n\n### 步骤三 - 让right占据最右列\n\n定位好了left，也是时候让right呆在最右边来填充位置了，我们继续使用负margin：\n\n```css\n.right {\n    width: 200px;\n    margin-right: -200px;\n    background-color: yellow;\n}\n```\n\n页面效果：\n\n{% asset_img 圣杯step4.png 圣杯step4 %}\n\n### 步骤四 - 给container设置min-width\n\n看起来已经实现了不是吗？但我们还差最后一步，给container设置一个 `min-width: 100px` （就是左列的宽度），否则当浏览器缩小到一定程度时，这个布局可能会被破坏。原因简单来讲就是：“由于设置了相对定位，所以当left原来的位置和right的位置产生重叠时，由于浮动的原因一行放不下就会换行”。所以布局就被打乱了。\n\n```css\n.container {\n    min-width: 100px;\n    background-color: #e1e1e1;\n    padding: 0 200px 0 100px;\n    height: 300px;\n}\n```\n\n### 完整代码 + 最终效果\n\n这样，我们就实现了圣杯布局，完整代码和效果见下：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 圣杯布局\" src=\"https://codepen.io/JingW/embed/VRXYmz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 双飞翼布局\n\n如果上面圣杯布局你已经理解并自己实践了一遍，那么这里的双飞翼布局你也应该不再话下。跟着我一起撸一遍代码吧。\n\n### 步骤一 - HTML框架搭建 & 初始化CSS\n\n首先搭建html，仔细观察下方代码你会发现，双飞翼布局在html上面有一点和圣杯布局有差别，那就是双飞翼在center里又套了一个div。到后面你就会知道这样设置的目的。\n\n```html\n<div class=\"container\">\n    <div class=\"center\"><div>我是中间</div></div>\n    <div class=\"left\">我是左边</div>\n    <div class=\"right\">我是右边</div>\n</div>\n```\n\n然后编写初始样式。left定宽100；right定宽200；left, right, center全部设置左浮动。其他例如设置颜色高度等等直接看下方代码：\n\n```css\n.container {\n    background-color: #e1e1e1;\n    height: 300px;\n}\n\n.center {\n    background-color: lightblue;\n}\n\n.left {\n    width: 100px;\n    background-color: pink;\n}\n\n.right {\n    width: 200px;\n    background-color: yellow;\n}\n\n.left, .center, .right {\n    float: left;\n    height: 100%;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step1.png 双飞翼step1 %}\n\n### 步骤二 - 设置center为100%宽\n\n将center的宽度设为100%，这样会把left，right“挤”到第二行：\n\n```css\n.center {\n    width: 100%;\n    background-color: lightblue;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step2.png 双飞翼step2 %}\n\n### 步骤三 - 分别让left,right回到最左边和最右边\n\n接着，给left设置 `margin-left: -100%` 回到最左边，给right设置 `margin-left: -200px` 回到最右边。此时center和left,right都有重叠区域，为了看效果，设置了半透明背景颜色。\n\n```css\n.left {\n    width: 100px;\n    margin-left: -100%;\n    background-color: pink;\n}\n\n.right {\n    width: 200px;\n    margin-left: -200px;\n    background-color: yellow;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step3.png 双飞翼step3 %}\n\n### 步骤四 - 给center的子div设置左右margin\n\n其实上面的效果图已经实现了三栏布局中间自适应。但有个问题是center左右部分区域会被遮挡，这个时候在步骤一提到的center子div的作用就体现出来了，我们可以给它设置一个左右的margin值，分别等于left的宽和right的宽，消除掉重叠的副作用。\n\n```css\n.center div {\n    /* 左margin100，右margin200 */\n    margin: 0 200px 0 100px;\n}\n```\n\n效果如下：\n\n{% asset_img 双飞翼step4.png 双飞翼step4 %}\n\n### 步骤五 - 给container设置min-width\n\n最后，给container设置一个min-width，让container最小宽度不小于left宽+right宽\n\n```css\n.container {\n    min-width: 300px;\n    background-color: #e1e1e1;\n    height: 300px;\n}\n```\n\n大功告成~\n\n### 完整代码 + 最终效果\n\n<iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 双飞翼布局\" src=\"https://codepen.io/JingW/embed/wOmBoY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","slug":"三栏布局方案-圣杯-双飞翼","published":1,"updated":"2020-11-21T15:27:37.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfp003skhsrb2es5d21","content":"<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><h3 id=\"步骤一-HTML框架搭建-amp-初始化CSS\"><a href=\"#步骤一-HTML框架搭建-amp-初始化CSS\" class=\"headerlink\" title=\"步骤一 - HTML框架搭建 &amp; 初始化CSS\"></a>步骤一 - HTML框架搭建 &amp; 初始化CSS</h3><p>首先把基本框架搭起来（注意中间部分放最前面）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>我是中间<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>我是左边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>我是右边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>接下来是初始化样式。left, right宽度分别设置为100px和200px；然后设置container的 <code>padding-left: 100px</code> + <code>padding-right: 200px</code> 来占据两侧填充；center宽度设为100%，这样能够自适应剩下的宽度。再让所有子元素左浮动。代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">100px</span>; <span class=\"comment\">/* 左边100， 右边200*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>; <span class=\"comment\">/* 为了看效果，给个300px把高度撑起来 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.center</span>, <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/* 占据父元素剩下的宽度*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时的页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep1.png\" class=\"\" title=\"圣杯step1\">\n\n<h3 id=\"步骤二-让left占据最左列\"><a href=\"#步骤二-让left占据最左列\" class=\"headerlink\" title=\"步骤二 - 让left占据最左列\"></a>步骤二 - 让left占据最左列</h3><p>为了让left能越过center，我们先给它设置一个 -100% 的左边距。这个100%是在container中的宽度，也就是center的宽度：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*为了看left和center的重叠效果，暂时bgc设为半透明*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">204</span>,<span class=\"number\">204</span>,.<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep2.png\" class=\"\" title=\"圣杯step2\">\n\n<p>此时，我们已经让left从“第二行”升到了“第一行”，为了让它靠到最左侧，不与center重叠，可以给它设置相对定位，然后给个 <code>left: -100px</code> ，让它定位到container最左侧：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 设置相对定位 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"comment\">/* 靠到最左侧 */</span></span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep3.png\" class=\"\" title=\"圣杯step3\">\n\n<h3 id=\"步骤三-让right占据最右列\"><a href=\"#步骤三-让right占据最右列\" class=\"headerlink\" title=\"步骤三 - 让right占据最右列\"></a>步骤三 - 让right占据最右列</h3><p>定位好了left，也是时候让right呆在最右边来填充位置了，我们继续使用负margin：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep4.png\" class=\"\" title=\"圣杯step4\">\n\n<h3 id=\"步骤四-给container设置min-width\"><a href=\"#步骤四-给container设置min-width\" class=\"headerlink\" title=\"步骤四 - 给container设置min-width\"></a>步骤四 - 给container设置min-width</h3><p>看起来已经实现了不是吗？但我们还差最后一步，给container设置一个 <code>min-width: 100px</code> （就是左列的宽度），否则当浏览器缩小到一定程度时，这个布局可能会被破坏。原因简单来讲就是：“由于设置了相对定位，所以当left原来的位置和right的位置产生重叠时，由于浮动的原因一行放不下就会换行”。所以布局就被打乱了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完整代码-最终效果\"><a href=\"#完整代码-最终效果\" class=\"headerlink\" title=\"完整代码 + 最终效果\"></a>完整代码 + 最终效果</h3><p>这样，我们就实现了圣杯布局，完整代码和效果见下：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 圣杯布局\" src=\"https://codepen.io/JingW/embed/VRXYmz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>如果上面圣杯布局你已经理解并自己实践了一遍，那么这里的双飞翼布局你也应该不再话下。跟着我一起撸一遍代码吧。</p>\n<h3 id=\"步骤一-HTML框架搭建-amp-初始化CSS-1\"><a href=\"#步骤一-HTML框架搭建-amp-初始化CSS-1\" class=\"headerlink\" title=\"步骤一 - HTML框架搭建 &amp; 初始化CSS\"></a>步骤一 - HTML框架搭建 &amp; 初始化CSS</h3><p>首先搭建html，仔细观察下方代码你会发现，双飞翼布局在html上面有一点和圣杯布局有差别，那就是双飞翼在center里又套了一个div。到后面你就会知道这样设置的目的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是中间<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>我是左边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>我是右边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后编写初始样式。left定宽100；right定宽200；left, right, center全部设置左浮动。其他例如设置颜色高度等等直接看下方代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.center</span>, <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep1.png\" class=\"\" title=\"双飞翼step1\">\n\n<h3 id=\"步骤二-设置center为100-宽\"><a href=\"#步骤二-设置center为100-宽\" class=\"headerlink\" title=\"步骤二 - 设置center为100%宽\"></a>步骤二 - 设置center为100%宽</h3><p>将center的宽度设为100%，这样会把left，right“挤”到第二行：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep2.png\" class=\"\" title=\"双飞翼step2\">\n\n<h3 id=\"步骤三-分别让left-right回到最左边和最右边\"><a href=\"#步骤三-分别让left-right回到最左边和最右边\" class=\"headerlink\" title=\"步骤三 - 分别让left,right回到最左边和最右边\"></a>步骤三 - 分别让left,right回到最左边和最右边</h3><p>接着，给left设置 <code>margin-left: -100%</code> 回到最左边，给right设置 <code>margin-left: -200px</code> 回到最右边。此时center和left,right都有重叠区域，为了看效果，设置了半透明背景颜色。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep3.png\" class=\"\" title=\"双飞翼step3\">\n\n<h3 id=\"步骤四-给center的子div设置左右margin\"><a href=\"#步骤四-给center的子div设置左右margin\" class=\"headerlink\" title=\"步骤四 - 给center的子div设置左右margin\"></a>步骤四 - 给center的子div设置左右margin</h3><p>其实上面的效果图已经实现了三栏布局中间自适应。但有个问题是center左右部分区域会被遮挡，这个时候在步骤一提到的center子div的作用就体现出来了，我们可以给它设置一个左右的margin值，分别等于left的宽和right的宽，消除掉重叠的副作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 左margin100，右margin200 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep4.png\" class=\"\" title=\"双飞翼step4\">\n\n<h3 id=\"步骤五-给container设置min-width\"><a href=\"#步骤五-给container设置min-width\" class=\"headerlink\" title=\"步骤五 - 给container设置min-width\"></a>步骤五 - 给container设置min-width</h3><p>最后，给container设置一个min-width，让container最小宽度不小于left宽+right宽</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大功告成~</p>\n<h3 id=\"完整代码-最终效果-1\"><a href=\"#完整代码-最终效果-1\" class=\"headerlink\" title=\"完整代码 + 最终效果\"></a>完整代码 + 最终效果</h3><iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 双飞翼布局\" src=\"https://codepen.io/JingW/embed/wOmBoY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","site":{"data":{}},"excerpt":"<h2 id=\"圣杯布局\"><a href=\"#圣杯布局\" class=\"headerlink\" title=\"圣杯布局\"></a>圣杯布局</h2><h3 id=\"步骤一-HTML框架搭建-amp-初始化CSS\"><a href=\"#步骤一-HTML框架搭建-amp-初始化CSS\" class=\"headerlink\" title=\"步骤一 - HTML框架搭建 &amp; 初始化CSS\"></a>步骤一 - HTML框架搭建 &amp; 初始化CSS</h3><p>首先把基本框架搭起来（注意中间部分放最前面）：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span>我是中间<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>我是左边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>我是右边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>","more":"<p>接下来是初始化样式。left, right宽度分别设置为100px和200px；然后设置container的 <code>padding-left: 100px</code> + <code>padding-right: 200px</code> 来占据两侧填充；center宽度设为100%，这样能够自适应剩下的宽度。再让所有子元素左浮动。代码如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">100px</span>; <span class=\"comment\">/* 左边100， 右边200*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>; <span class=\"comment\">/* 为了看效果，给个300px把高度撑起来 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.center</span>, <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>; <span class=\"comment\">/* 占据父元素剩下的宽度*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时的页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep1.png\" class=\"\" title=\"圣杯step1\">\n\n<h3 id=\"步骤二-让left占据最左列\"><a href=\"#步骤二-让left占据最左列\" class=\"headerlink\" title=\"步骤二 - 让left占据最左列\"></a>步骤二 - 让left占据最左列</h3><p>为了让left能越过center，我们先给它设置一个 -100% 的左边距。这个100%是在container中的宽度，也就是center的宽度：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"comment\">/*为了看left和center的重叠效果，暂时bgc设为半透明*/</span></span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"built_in\">rgba</span>(<span class=\"number\">255</span>,<span class=\"number\">204</span>,<span class=\"number\">204</span>,.<span class=\"number\">6</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep2.png\" class=\"\" title=\"圣杯step2\">\n\n<p>此时，我们已经让left从“第二行”升到了“第一行”，为了让它靠到最左侧，不与center重叠，可以给它设置相对定位，然后给个 <code>left: -100px</code> ，让它定位到container最左侧：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 设置相对定位 */</span> </span><br><span class=\"line\">    <span class=\"attribute\">position</span>: relative;</span><br><span class=\"line\">    <span class=\"comment\">/* 靠到最左侧 */</span></span><br><span class=\"line\">    <span class=\"attribute\">left</span>: -<span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep3.png\" class=\"\" title=\"圣杯step3\">\n\n<h3 id=\"步骤三-让right占据最右列\"><a href=\"#步骤三-让right占据最右列\" class=\"headerlink\" title=\"步骤三 - 让right占据最右列\"></a>步骤三 - 让right占据最右列</h3><p>定位好了left，也是时候让right呆在最右边来填充位置了，我们继续使用负margin：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-right</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>页面效果：</p>\n<img src=\"/posts/10370/%E5%9C%A3%E6%9D%AFstep4.png\" class=\"\" title=\"圣杯step4\">\n\n<h3 id=\"步骤四-给container设置min-width\"><a href=\"#步骤四-给container设置min-width\" class=\"headerlink\" title=\"步骤四 - 给container设置min-width\"></a>步骤四 - 给container设置min-width</h3><p>看起来已经实现了不是吗？但我们还差最后一步，给container设置一个 <code>min-width: 100px</code> （就是左列的宽度），否则当浏览器缩小到一定程度时，这个布局可能会被破坏。原因简单来讲就是：“由于设置了相对定位，所以当left原来的位置和right的位置产生重叠时，由于浮动的原因一行放不下就会换行”。所以布局就被打乱了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">padding</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"完整代码-最终效果\"><a href=\"#完整代码-最终效果\" class=\"headerlink\" title=\"完整代码 + 最终效果\"></a>完整代码 + 最终效果</h3><p>这样，我们就实现了圣杯布局，完整代码和效果见下：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 圣杯布局\" src=\"https://codepen.io/JingW/embed/VRXYmz/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"双飞翼布局\"><a href=\"#双飞翼布局\" class=\"headerlink\" title=\"双飞翼布局\"></a>双飞翼布局</h2><p>如果上面圣杯布局你已经理解并自己实践了一遍，那么这里的双飞翼布局你也应该不再话下。跟着我一起撸一遍代码吧。</p>\n<h3 id=\"步骤一-HTML框架搭建-amp-初始化CSS-1\"><a href=\"#步骤一-HTML框架搭建-amp-初始化CSS-1\" class=\"headerlink\" title=\"步骤一 - HTML框架搭建 &amp; 初始化CSS\"></a>步骤一 - HTML框架搭建 &amp; 初始化CSS</h3><p>首先搭建html，仔细观察下方代码你会发现，双飞翼布局在html上面有一点和圣杯布局有差别，那就是双飞翼在center里又套了一个div。到后面你就会知道这样设置的目的。</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;container&quot;</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;center&quot;</span>&gt;</span><span class=\"tag\">&lt;<span class=\"name\">div</span>&gt;</span>我是中间<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;left&quot;</span>&gt;</span>我是左边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">class</span>=<span class=\"string\">&quot;right&quot;</span>&gt;</span>我是右边<span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后编写初始样式。left定宽100；right定宽200；left, right, center全部设置左浮动。其他例如设置颜色高度等等直接看下方代码：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.left</span>, <span class=\"selector-class\">.center</span>, <span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">float</span>: left;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep1.png\" class=\"\" title=\"双飞翼step1\">\n\n<h3 id=\"步骤二-设置center为100-宽\"><a href=\"#步骤二-设置center为100-宽\" class=\"headerlink\" title=\"步骤二 - 设置center为100%宽\"></a>步骤二 - 设置center为100%宽</h3><p>将center的宽度设为100%，这样会把left，right“挤”到第二行：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: lightblue;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep2.png\" class=\"\" title=\"双飞翼step2\">\n\n<h3 id=\"步骤三-分别让left-right回到最左边和最右边\"><a href=\"#步骤三-分别让left-right回到最左边和最右边\" class=\"headerlink\" title=\"步骤三 - 分别让left,right回到最左边和最右边\"></a>步骤三 - 分别让left,right回到最左边和最右边</h3><p>接着，给left设置 <code>margin-left: -100%</code> 回到最左边，给right设置 <code>margin-left: -200px</code> 回到最右边。此时center和left,right都有重叠区域，为了看效果，设置了半透明背景颜色。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.left</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">100px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">100%</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: pink;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.right</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">width</span>: <span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">margin-left</span>: -<span class=\"number\">200px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: yellow;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep3.png\" class=\"\" title=\"双飞翼step3\">\n\n<h3 id=\"步骤四-给center的子div设置左右margin\"><a href=\"#步骤四-给center的子div设置左右margin\" class=\"headerlink\" title=\"步骤四 - 给center的子div设置左右margin\"></a>步骤四 - 给center的子div设置左右margin</h3><p>其实上面的效果图已经实现了三栏布局中间自适应。但有个问题是center左右部分区域会被遮挡，这个时候在步骤一提到的center子div的作用就体现出来了，我们可以给它设置一个左右的margin值，分别等于left的宽和right的宽，消除掉重叠的副作用。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.center</span> <span class=\"selector-tag\">div</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/* 左margin100，右margin200 */</span></span><br><span class=\"line\">    <span class=\"attribute\">margin</span>: <span class=\"number\">0</span> <span class=\"number\">200px</span> <span class=\"number\">0</span> <span class=\"number\">100px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>效果如下：</p>\n<img src=\"/posts/10370/%E5%8F%8C%E9%A3%9E%E7%BF%BCstep4.png\" class=\"\" title=\"双飞翼step4\">\n\n<h3 id=\"步骤五-给container设置min-width\"><a href=\"#步骤五-给container设置min-width\" class=\"headerlink\" title=\"步骤五 - 给container设置min-width\"></a>步骤五 - 给container设置min-width</h3><p>最后，给container设置一个min-width，让container最小宽度不小于left宽+right宽</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.container</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">min-width</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">    <span class=\"attribute\">background-color</span>: <span class=\"number\">#e1e1e1</span>;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>大功告成~</p>\n<h3 id=\"完整代码-最终效果-1\"><a href=\"#完整代码-最终效果-1\" class=\"headerlink\" title=\"完整代码 + 最终效果\"></a>完整代码 + 最终效果</h3><iframe height=\"265\" scrolling=\"no\" title=\"三栏布局 - 双飞翼布局\" src=\"https://codepen.io/JingW/embed/wOmBoY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>"},{"title":"两栏布局方案汇总","abbrlink":44541,"date":"2018-11-26T15:18:16.000Z","_content":"\n记录下常见的两栏布局方式。\n\n## 左边定宽，右边自适应\n\n### 模拟table\n\n父元素 `display: table` ，子元素左右 `table-cell` ，左边定宽。\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）模拟table\" src=\"https://codepen.io/JingW/embed/zbWYMO/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<!-- more -->\n\n### 左浮 + 右Margin\n\n子元素的左边浮动脱标，右边设置 `margin-left: 左边元素宽度`\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子元素绝对定位\" src=\"https://codepen.io/JingW/embed/bZvGRY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 左浮 + 右BFC\n\n子元素左边设置浮动+定宽，右边子元素设置 `overflow: hidden` 触发自身BFC\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）左浮 + 右BFC\" src=\"https://codepen.io/JingW/embed/rRdNYR/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相\n\n子绝父相，左边 `top, left: 0`，右边 `top, right: 0`，left等于左边宽度。\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子绝父相\" src=\"https://codepen.io/JingW/embed/gEeONo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### flex布局\n\n父元素 `display: flex` ，左边定宽，右边 `flex: 1`。\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）flex\" src=\"https://codepen.io/JingW/embed/bZvNGx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","source":"_posts/两栏布局方案汇总.md","raw":"---\ntitle: 两栏布局方案汇总\ntags:\n  - 布局\n  - 技巧\ncategories:\n  - 前端\n  - CSS\nabbrlink: 44541\ndate: 2018-11-26 23:18:16\n---\n\n记录下常见的两栏布局方式。\n\n## 左边定宽，右边自适应\n\n### 模拟table\n\n父元素 `display: table` ，子元素左右 `table-cell` ，左边定宽。\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）模拟table\" src=\"https://codepen.io/JingW/embed/zbWYMO/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<!-- more -->\n\n### 左浮 + 右Margin\n\n子元素的左边浮动脱标，右边设置 `margin-left: 左边元素宽度`\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子元素绝对定位\" src=\"https://codepen.io/JingW/embed/bZvGRY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 左浮 + 右BFC\n\n子元素左边设置浮动+定宽，右边子元素设置 `overflow: hidden` 触发自身BFC\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）左浮 + 右BFC\" src=\"https://codepen.io/JingW/embed/rRdNYR/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相\n\n子绝父相，左边 `top, left: 0`，右边 `top, right: 0`，left等于左边宽度。\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子绝父相\" src=\"https://codepen.io/JingW/embed/gEeONo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### flex布局\n\n父元素 `display: flex` ，左边定宽，右边 `flex: 1`。\n\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）flex\" src=\"https://codepen.io/JingW/embed/bZvNGx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","slug":"两栏布局方案汇总","published":1,"updated":"2020-11-21T15:25:43.534Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfq003wkhsr043ee6nl","content":"<p>记录下常见的两栏布局方式。</p>\n<h2 id=\"左边定宽，右边自适应\"><a href=\"#左边定宽，右边自适应\" class=\"headerlink\" title=\"左边定宽，右边自适应\"></a>左边定宽，右边自适应</h2><h3 id=\"模拟table\"><a href=\"#模拟table\" class=\"headerlink\" title=\"模拟table\"></a>模拟table</h3><p>父元素 <code>display: table</code> ，子元素左右 <code>table-cell</code> ，左边定宽。</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）模拟table\" src=\"https://codepen.io/JingW/embed/zbWYMO/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<a id=\"more\"></a>\n\n<h3 id=\"左浮-右Margin\"><a href=\"#左浮-右Margin\" class=\"headerlink\" title=\"左浮 + 右Margin\"></a>左浮 + 右Margin</h3><p>子元素的左边浮动脱标，右边设置 <code>margin-left: 左边元素宽度</code></p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子元素绝对定位\" src=\"https://codepen.io/JingW/embed/bZvGRY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"左浮-右BFC\"><a href=\"#左浮-右BFC\" class=\"headerlink\" title=\"左浮 + 右BFC\"></a>左浮 + 右BFC</h3><p>子元素左边设置浮动+定宽，右边子元素设置 <code>overflow: hidden</code> 触发自身BFC</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）左浮 + 右BFC\" src=\"https://codepen.io/JingW/embed/rRdNYR/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相\"><a href=\"#子绝父相\" class=\"headerlink\" title=\"子绝父相\"></a>子绝父相</h3><p>子绝父相，左边 <code>top, left: 0</code>，右边 <code>top, right: 0</code>，left等于左边宽度。</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子绝父相\" src=\"https://codepen.io/JingW/embed/gEeONo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p>父元素 <code>display: flex</code> ，左边定宽，右边 <code>flex: 1</code>。</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）flex\" src=\"https://codepen.io/JingW/embed/bZvNGx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","site":{"data":{}},"excerpt":"<p>记录下常见的两栏布局方式。</p>\n<h2 id=\"左边定宽，右边自适应\"><a href=\"#左边定宽，右边自适应\" class=\"headerlink\" title=\"左边定宽，右边自适应\"></a>左边定宽，右边自适应</h2><h3 id=\"模拟table\"><a href=\"#模拟table\" class=\"headerlink\" title=\"模拟table\"></a>模拟table</h3><p>父元素 <code>display: table</code> ，子元素左右 <code>table-cell</code> ，左边定宽。</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）模拟table\" src=\"https://codepen.io/JingW/embed/zbWYMO/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>","more":"<h3 id=\"左浮-右Margin\"><a href=\"#左浮-右Margin\" class=\"headerlink\" title=\"左浮 + 右Margin\"></a>左浮 + 右Margin</h3><p>子元素的左边浮动脱标，右边设置 <code>margin-left: 左边元素宽度</code></p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子元素绝对定位\" src=\"https://codepen.io/JingW/embed/bZvGRY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"左浮-右BFC\"><a href=\"#左浮-右BFC\" class=\"headerlink\" title=\"左浮 + 右BFC\"></a>左浮 + 右BFC</h3><p>子元素左边设置浮动+定宽，右边子元素设置 <code>overflow: hidden</code> 触发自身BFC</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）左浮 + 右BFC\" src=\"https://codepen.io/JingW/embed/rRdNYR/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相\"><a href=\"#子绝父相\" class=\"headerlink\" title=\"子绝父相\"></a>子绝父相</h3><p>子绝父相，左边 <code>top, left: 0</code>，右边 <code>top, right: 0</code>，left等于左边宽度。</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）子绝父相\" src=\"https://codepen.io/JingW/embed/gEeONo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"flex布局\"><a href=\"#flex布局\" class=\"headerlink\" title=\"flex布局\"></a>flex布局</h3><p>父元素 <code>display: flex</code> ，左边定宽，右边 <code>flex: 1</code>。</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"两栏布局（左定右自适应）flex\" src=\"https://codepen.io/JingW/embed/bZvNGx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>"},{"title":"使用Jekyll搭建GitHubPages博客","abbrlink":63074,"date":"2020-11-16T15:06:43.000Z","_content":"\n## 安装 Jekyll\n\n来源：https://jekyllrb.com/docs/installation/\n\n### macOS\n\n终端运行：\n\n```shell\nxcode-select --install\n```\n\n安装 Ruby：\n\nJekyll 依赖 Ruby v2.5.0+，如果你的 macOS 版本为 Catalina 10.15 或以上，则不需要再手动安装，因为系统自带 Ruby 2.6.3 。\n\n<!-- more -->\n\n> 查看本地 Ruby 版本：`ruby -v`\n>\n> 如果你的版本低于 10.15 则需要下载或更新你的 Ruby\n>\n> 具体下载or更新方案可查看：https://jekyllrb.com/docs/installation/macos/#install-ruby\n\n安装 Jekyll：\n\n```shell\ngem install --user-install bundler jekyll\n```\n\n选择你要安装博客的目录下运行：\n\n```shell\njekyll new 你博客名(随意，反正最后要全部移动到你的githubpages repo下)\n```\n\n### Windows\n\nwindows安装不再赘述，可查看官网文档安装：https://jekyllrb.com/docs/installation/windows/\n\n## 安装 minimal-mistakes-jekyll 主题\n\ngithub 链接：https://github.com/mmistakes/minimal-mistakes\n\n### 编辑 Gemfile\n\n替换你的 `Gemfile` 文件：\n\n```json\nsource \"https://rubygems.org\"\n\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\n\n# gem \"github-pages\", group: :jekyll_plugins\n\n# To upgrade, run `bundle update`.\n\ngem \"github-pages\", group: :jekyll_plugins\ngem \"minimal-mistakes-jekyll\", :github => \"mmistakes/minimal-mistakes\"\n\n# The following plugins are automatically loaded by the theme-gem:\n#   gem \"jekyll-paginate\"\n#   gem \"jekyll-sitemap\"\n#   gem \"jekyll-gist\"\n#   gem \"jekyll-feed\"\n#   gem \"jekyll-include-cache\"\n#\n# If you have any other plugins, put them here!\ngroup :jekyll_plugins do\nend\n```\n\n运行 `bundle install` 安装依赖。\n\n### 配置 _config.yml\n\n找到 `_config.yml` 文件并替换：\n\n```shell\n# Welcome to Jekyll!\n#\n# This config file is meant for settings that affect your whole blog, values\n# which you are expected to set up once and rarely edit after that. If you find\n# yourself editing this file very often, consider using Jekyll's data files\n# feature for the data you need to update frequently.\n#\n# For technical reasons, this file is *NOT* reloaded automatically when you use\n# 'bundle exec jekyll serve'. If you change this file, please restart the server process.\n#\n# If you need help with YAML syntax, here are some quick references for you: \n# https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml\n# https://learnxinyminutes.com/docs/yaml/\n#\n# Site settings\n# These are used to personalize your new site. If you look in the HTML files,\n# you will see them accessed via {{ site.title }}, {{ site.email }}, and so on.\n# You can create any custom variable you would like, and they will be accessible\n# in the templates via {{ site.myvariable }}.\n\ntitle: Your awesome title\nemail: your-email@example.com\ndescription: >- # this means to ignore newlines until \"baseurl:\"\n  Write an awesome description for your new site here. You can edit this\n  line in _config.yml. It will appear in your document head meta (for\n  Google search results) and in your feed.xml site description.\nbaseurl: \"\" # the subpath of your site, e.g. /blog\nurl: \"https://evestorm.github.io\" # the base hostname & protocol for your site, e.g. http://example.com\nrepository: \"{github_username}/{github_username}.github.io\" # 把 {github_username} 替换成你github的username\ntwitter_username: jekyllrb\ngithub_username:  lance # 你的username，随便填\n\n# Build settings\ntheme: minimal-mistakes-jekyll\nplugins:\n  - jekyll-feed\n\n# Exclude from processing.\n# The following items will not be processed, by default.\n# Any item listed under the `exclude:` key here will be automatically added to\n# the internal \"default list\".\n#\n# Excluded items can be processed by explicitly listing the directories or\n# their entries' file path in the `include:` list.\n#\n# exclude:\n#   - .sass-cache/\n#   - .jekyll-cache/\n#   - gemfiles/\n#   - Gemfile\n#   - Gemfile.lock\n#   - node_modules/\n#   - vendor/bundle/\n#   - vendor/cache/\n#   - vendor/gems/\n#   - vendor/ruby/\n\n```\n\n然后执行 `bundle update`。\n\n### 替换和更改\n\n- 替换根目录下 `index.markdown` 为 `index.html`  ：\n\n  ```html\n  ---\n  layout: home\n  author_profile: true\n  ---\n  ```\n\n- 找到 `_posts/0000-00-00-welcome-to-jekyll.md` 并替换 `layout: single`\n\n- 删除 `about.md` 文件\n\n最后执行： `bundle exec jekyll serve` 本地运行博客。\n\n\n","source":"_posts/使用Jekyll搭建GitHubPages博客.md","raw":"---\ntitle: 使用Jekyll搭建GitHubPages博客\ntags: Jekyll\ncategories:\n  - 教程\n  - 博客\nabbrlink: 63074\ndate: 2020-11-16 23:06:43\n---\n\n## 安装 Jekyll\n\n来源：https://jekyllrb.com/docs/installation/\n\n### macOS\n\n终端运行：\n\n```shell\nxcode-select --install\n```\n\n安装 Ruby：\n\nJekyll 依赖 Ruby v2.5.0+，如果你的 macOS 版本为 Catalina 10.15 或以上，则不需要再手动安装，因为系统自带 Ruby 2.6.3 。\n\n<!-- more -->\n\n> 查看本地 Ruby 版本：`ruby -v`\n>\n> 如果你的版本低于 10.15 则需要下载或更新你的 Ruby\n>\n> 具体下载or更新方案可查看：https://jekyllrb.com/docs/installation/macos/#install-ruby\n\n安装 Jekyll：\n\n```shell\ngem install --user-install bundler jekyll\n```\n\n选择你要安装博客的目录下运行：\n\n```shell\njekyll new 你博客名(随意，反正最后要全部移动到你的githubpages repo下)\n```\n\n### Windows\n\nwindows安装不再赘述，可查看官网文档安装：https://jekyllrb.com/docs/installation/windows/\n\n## 安装 minimal-mistakes-jekyll 主题\n\ngithub 链接：https://github.com/mmistakes/minimal-mistakes\n\n### 编辑 Gemfile\n\n替换你的 `Gemfile` 文件：\n\n```json\nsource \"https://rubygems.org\"\n\n# Hello! This is where you manage which Jekyll version is used to run.\n# When you want to use a different version, change it below, save the\n# file and run `bundle install`. Run Jekyll with `bundle exec`, like so:\n#\n#     bundle exec jekyll serve\n#\n# This will help ensure the proper Jekyll version is running.\n# Happy Jekylling!\n\n# gem \"github-pages\", group: :jekyll_plugins\n\n# To upgrade, run `bundle update`.\n\ngem \"github-pages\", group: :jekyll_plugins\ngem \"minimal-mistakes-jekyll\", :github => \"mmistakes/minimal-mistakes\"\n\n# The following plugins are automatically loaded by the theme-gem:\n#   gem \"jekyll-paginate\"\n#   gem \"jekyll-sitemap\"\n#   gem \"jekyll-gist\"\n#   gem \"jekyll-feed\"\n#   gem \"jekyll-include-cache\"\n#\n# If you have any other plugins, put them here!\ngroup :jekyll_plugins do\nend\n```\n\n运行 `bundle install` 安装依赖。\n\n### 配置 _config.yml\n\n找到 `_config.yml` 文件并替换：\n\n```shell\n# Welcome to Jekyll!\n#\n# This config file is meant for settings that affect your whole blog, values\n# which you are expected to set up once and rarely edit after that. If you find\n# yourself editing this file very often, consider using Jekyll's data files\n# feature for the data you need to update frequently.\n#\n# For technical reasons, this file is *NOT* reloaded automatically when you use\n# 'bundle exec jekyll serve'. If you change this file, please restart the server process.\n#\n# If you need help with YAML syntax, here are some quick references for you: \n# https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/#yaml\n# https://learnxinyminutes.com/docs/yaml/\n#\n# Site settings\n# These are used to personalize your new site. If you look in the HTML files,\n# you will see them accessed via {{ site.title }}, {{ site.email }}, and so on.\n# You can create any custom variable you would like, and they will be accessible\n# in the templates via {{ site.myvariable }}.\n\ntitle: Your awesome title\nemail: your-email@example.com\ndescription: >- # this means to ignore newlines until \"baseurl:\"\n  Write an awesome description for your new site here. You can edit this\n  line in _config.yml. It will appear in your document head meta (for\n  Google search results) and in your feed.xml site description.\nbaseurl: \"\" # the subpath of your site, e.g. /blog\nurl: \"https://evestorm.github.io\" # the base hostname & protocol for your site, e.g. http://example.com\nrepository: \"{github_username}/{github_username}.github.io\" # 把 {github_username} 替换成你github的username\ntwitter_username: jekyllrb\ngithub_username:  lance # 你的username，随便填\n\n# Build settings\ntheme: minimal-mistakes-jekyll\nplugins:\n  - jekyll-feed\n\n# Exclude from processing.\n# The following items will not be processed, by default.\n# Any item listed under the `exclude:` key here will be automatically added to\n# the internal \"default list\".\n#\n# Excluded items can be processed by explicitly listing the directories or\n# their entries' file path in the `include:` list.\n#\n# exclude:\n#   - .sass-cache/\n#   - .jekyll-cache/\n#   - gemfiles/\n#   - Gemfile\n#   - Gemfile.lock\n#   - node_modules/\n#   - vendor/bundle/\n#   - vendor/cache/\n#   - vendor/gems/\n#   - vendor/ruby/\n\n```\n\n然后执行 `bundle update`。\n\n### 替换和更改\n\n- 替换根目录下 `index.markdown` 为 `index.html`  ：\n\n  ```html\n  ---\n  layout: home\n  author_profile: true\n  ---\n  ```\n\n- 找到 `_posts/0000-00-00-welcome-to-jekyll.md` 并替换 `layout: single`\n\n- 删除 `about.md` 文件\n\n最后执行： `bundle exec jekyll serve` 本地运行博客。\n\n\n","slug":"使用Jekyll搭建GitHubPages博客","published":1,"updated":"2020-11-21T15:11:14.811Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfr003zkhsr6bxme58p","content":"<h2 id=\"安装-Jekyll\"><a href=\"#安装-Jekyll\" class=\"headerlink\" title=\"安装 Jekyll\"></a>安装 Jekyll</h2><p>来源：<a href=\"https://jekyllrb.com/docs/installation/\">https://jekyllrb.com/docs/installation/</a></p>\n<h3 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h3><p>终端运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>安装 Ruby：</p>\n<p>Jekyll 依赖 Ruby v2.5.0+，如果你的 macOS 版本为 Catalina 10.15 或以上，则不需要再手动安装，因为系统自带 Ruby 2.6.3 。</p>\n<a id=\"more\"></a>\n\n<blockquote>\n<p>查看本地 Ruby 版本：<code>ruby -v</code></p>\n<p>如果你的版本低于 10.15 则需要下载或更新你的 Ruby</p>\n<p>具体下载or更新方案可查看：<a href=\"https://jekyllrb.com/docs/installation/macos/#install-ruby\">https://jekyllrb.com/docs/installation/macos/#install-ruby</a></p>\n</blockquote>\n<p>安装 Jekyll：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install --user-install bundler jekyll</span><br></pre></td></tr></table></figure>\n\n<p>选择你要安装博客的目录下运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new 你博客名(随意，反正最后要全部移动到你的githubpages repo下)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>windows安装不再赘述，可查看官网文档安装：<a href=\"https://jekyllrb.com/docs/installation/windows/\">https://jekyllrb.com/docs/installation/windows/</a></p>\n<h2 id=\"安装-minimal-mistakes-jekyll-主题\"><a href=\"#安装-minimal-mistakes-jekyll-主题\" class=\"headerlink\" title=\"安装 minimal-mistakes-jekyll 主题\"></a>安装 minimal-mistakes-jekyll 主题</h2><p>github 链接：<a href=\"https://github.com/mmistakes/minimal-mistakes\">https://github.com/mmistakes/minimal-mistakes</a></p>\n<h3 id=\"编辑-Gemfile\"><a href=\"#编辑-Gemfile\" class=\"headerlink\" title=\"编辑 Gemfile\"></a>编辑 Gemfile</h3><p>替换你的 <code>Gemfile</code> 文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &quot;https://rubygems.org&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Hello! This is where you manage which Jekyll version is used to run.</span><br><span class=\"line\"># When you want to use a different version, change it below, save the</span><br><span class=\"line\"># file and run `bundle install`. Run Jekyll with `bundle exec`, like so:</span><br><span class=\"line\">#</span><br><span class=\"line\">#     bundle exec jekyll serve</span><br><span class=\"line\">#</span><br><span class=\"line\"># This will help ensure the proper Jekyll version is running.</span><br><span class=\"line\"># Happy Jekylling!</span><br><span class=\"line\"></span><br><span class=\"line\"># gem &quot;github-pages&quot;, group: :jekyll_plugins</span><br><span class=\"line\"></span><br><span class=\"line\"># To upgrade, run `bundle update`.</span><br><span class=\"line\"></span><br><span class=\"line\">gem &quot;github-pages&quot;, group: :jekyll_plugins</span><br><span class=\"line\">gem &quot;minimal-mistakes-jekyll&quot;, :github =&gt; &quot;mmistakes/minimal-mistakes&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># The following plugins are automatically loaded by the theme-gem:</span><br><span class=\"line\">#   gem &quot;jekyll-paginate&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-sitemap&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-gist&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-feed&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-include-cache&quot;</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you have any other plugins, put them here!</span><br><span class=\"line\">group :jekyll_plugins do</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>bundle install</code> 安装依赖。</p>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>找到 <code>_config.yml</code> 文件并替换：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Welcome to Jekyll!</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># This config file is meant for settings that affect your whole blog, values</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">which</span> you are expected to <span class=\"built_in\">set</span> up once and rarely edit after that. If you find</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yourself editing this file very often, consider using Jekyll<span class=\"string\">&#x27;s data files</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> feature <span class=\"keyword\">for</span> the data you need to update frequently.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># For technical reasons, this file is *NOT* reloaded automatically when you use</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"string\">&#x27;bundle exec jekyll serve&#x27;</span>. If you change this file, please restart the server process.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># If you need help with YAML syntax, here are some quick references for you:</span></span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/<span class=\"comment\">#yaml</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://learnxinyminutes.com/docs/yaml/</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Site settings</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> These are used to personalize your new site. If you look <span class=\"keyword\">in</span> the HTML files,</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you will see them accessed via &#123;&#123; site.title &#125;&#125;, &#123;&#123; site.email &#125;&#125;, and so on.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> You can create any custom variable you would like, and they will be accessible</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">in</span> the templates via &#123;&#123; site.myvariable &#125;&#125;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">title: Your awesome title</span><br><span class=\"line\">email: your-email@example.com</span><br><span class=\"line\">description: &gt;- # this means to ignore newlines until &quot;baseurl:&quot;</span><br><span class=\"line\">  Write an awesome description for your new site here. You can edit this</span><br><span class=\"line\">  line in _config.yml. It will appear in your document head meta (for</span><br><span class=\"line\">  Google search results) and in your feed.xml site description.</span><br><span class=\"line\">baseurl: &quot;&quot; # the subpath of your site, e.g. /blog</span><br><span class=\"line\">url: &quot;https://evestorm.github.io&quot; # the base hostname &amp; protocol for your site, e.g. http://example.com</span><br><span class=\"line\">repository: &quot;&#123;github_username&#125;/&#123;github_username&#125;.github.io&quot; # 把 &#123;github_username&#125; 替换成你github的username</span><br><span class=\"line\">twitter_username: jekyllrb</span><br><span class=\"line\">github_username:  lance # 你的username，随便填</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Build settings</span></span><br><span class=\"line\">theme: minimal-mistakes-jekyll</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">  - jekyll-feed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Exclude from processing.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> The following items will not be processed, by default.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Any item listed under the `exclude:` key here will be automatically added to</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> the internal <span class=\"string\">&quot;default list&quot;</span>.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Excluded items can be processed by explicitly listing the directories or</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> their entries<span class=\"string\">&#x27; file path in the `include:` list.</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># exclude:</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - .sass-cache/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - .jekyll-cache/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - gemfiles/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - Gemfile</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - Gemfile.lock</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - node_modules/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/bundle/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/cache/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/gems/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/ruby/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>bundle update</code>。</p>\n<h3 id=\"替换和更改\"><a href=\"#替换和更改\" class=\"headerlink\" title=\"替换和更改\"></a>替换和更改</h3><ul>\n<li><p>替换根目录下 <code>index.markdown</code> 为 <code>index.html</code>  ：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: home</span><br><span class=\"line\">author_profile: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到 <code>_posts/0000-00-00-welcome-to-jekyll.md</code> 并替换 <code>layout: single</code></p>\n</li>\n<li><p>删除 <code>about.md</code> 文件</p>\n</li>\n</ul>\n<p>最后执行： <code>bundle exec jekyll serve</code> 本地运行博客。</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"安装-Jekyll\"><a href=\"#安装-Jekyll\" class=\"headerlink\" title=\"安装 Jekyll\"></a>安装 Jekyll</h2><p>来源：<a href=\"https://jekyllrb.com/docs/installation/\">https://jekyllrb.com/docs/installation/</a></p>\n<h3 id=\"macOS\"><a href=\"#macOS\" class=\"headerlink\" title=\"macOS\"></a>macOS</h3><p>终端运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xcode-select --install</span><br></pre></td></tr></table></figure>\n\n<p>安装 Ruby：</p>\n<p>Jekyll 依赖 Ruby v2.5.0+，如果你的 macOS 版本为 Catalina 10.15 或以上，则不需要再手动安装，因为系统自带 Ruby 2.6.3 。</p>","more":"<blockquote>\n<p>查看本地 Ruby 版本：<code>ruby -v</code></p>\n<p>如果你的版本低于 10.15 则需要下载或更新你的 Ruby</p>\n<p>具体下载or更新方案可查看：<a href=\"https://jekyllrb.com/docs/installation/macos/#install-ruby\">https://jekyllrb.com/docs/installation/macos/#install-ruby</a></p>\n</blockquote>\n<p>安装 Jekyll：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">gem install --user-install bundler jekyll</span><br></pre></td></tr></table></figure>\n\n<p>选择你要安装博客的目录下运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">jekyll new 你博客名(随意，反正最后要全部移动到你的githubpages repo下)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"Windows\"><a href=\"#Windows\" class=\"headerlink\" title=\"Windows\"></a>Windows</h3><p>windows安装不再赘述，可查看官网文档安装：<a href=\"https://jekyllrb.com/docs/installation/windows/\">https://jekyllrb.com/docs/installation/windows/</a></p>\n<h2 id=\"安装-minimal-mistakes-jekyll-主题\"><a href=\"#安装-minimal-mistakes-jekyll-主题\" class=\"headerlink\" title=\"安装 minimal-mistakes-jekyll 主题\"></a>安装 minimal-mistakes-jekyll 主题</h2><p>github 链接：<a href=\"https://github.com/mmistakes/minimal-mistakes\">https://github.com/mmistakes/minimal-mistakes</a></p>\n<h3 id=\"编辑-Gemfile\"><a href=\"#编辑-Gemfile\" class=\"headerlink\" title=\"编辑 Gemfile\"></a>编辑 Gemfile</h3><p>替换你的 <code>Gemfile</code> 文件：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">source &quot;https://rubygems.org&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># Hello! This is where you manage which Jekyll version is used to run.</span><br><span class=\"line\"># When you want to use a different version, change it below, save the</span><br><span class=\"line\"># file and run `bundle install`. Run Jekyll with `bundle exec`, like so:</span><br><span class=\"line\">#</span><br><span class=\"line\">#     bundle exec jekyll serve</span><br><span class=\"line\">#</span><br><span class=\"line\"># This will help ensure the proper Jekyll version is running.</span><br><span class=\"line\"># Happy Jekylling!</span><br><span class=\"line\"></span><br><span class=\"line\"># gem &quot;github-pages&quot;, group: :jekyll_plugins</span><br><span class=\"line\"></span><br><span class=\"line\"># To upgrade, run `bundle update`.</span><br><span class=\"line\"></span><br><span class=\"line\">gem &quot;github-pages&quot;, group: :jekyll_plugins</span><br><span class=\"line\">gem &quot;minimal-mistakes-jekyll&quot;, :github =&gt; &quot;mmistakes/minimal-mistakes&quot;</span><br><span class=\"line\"></span><br><span class=\"line\"># The following plugins are automatically loaded by the theme-gem:</span><br><span class=\"line\">#   gem &quot;jekyll-paginate&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-sitemap&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-gist&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-feed&quot;</span><br><span class=\"line\">#   gem &quot;jekyll-include-cache&quot;</span><br><span class=\"line\">#</span><br><span class=\"line\"># If you have any other plugins, put them here!</span><br><span class=\"line\">group :jekyll_plugins do</span><br><span class=\"line\">end</span><br></pre></td></tr></table></figure>\n\n<p>运行 <code>bundle install</code> 安装依赖。</p>\n<h3 id=\"配置-config-yml\"><a href=\"#配置-config-yml\" class=\"headerlink\" title=\"配置 _config.yml\"></a>配置 _config.yml</h3><p>找到 <code>_config.yml</code> 文件并替换：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Welcome to Jekyll!</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># This config file is meant for settings that affect your whole blog, values</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"built_in\">which</span> you are expected to <span class=\"built_in\">set</span> up once and rarely edit after that. If you find</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> yourself editing this file very often, consider using Jekyll<span class=\"string\">&#x27;s data files</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> feature <span class=\"keyword\">for</span> the data you need to update frequently.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># For technical reasons, this file is *NOT* reloaded automatically when you use</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"string\">&#x27;bundle exec jekyll serve&#x27;</span>. If you change this file, please restart the server process.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># If you need help with YAML syntax, here are some quick references for you:</span></span> </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://learn-the-web.algonquindesign.ca/topics/markdown-yaml-cheat-sheet/<span class=\"comment\">#yaml</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> https://learnxinyminutes.com/docs/yaml/</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Site settings</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> These are used to personalize your new site. If you look <span class=\"keyword\">in</span> the HTML files,</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> you will see them accessed via &#123;&#123; site.title &#125;&#125;, &#123;&#123; site.email &#125;&#125;, and so on.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> You can create any custom variable you would like, and they will be accessible</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> <span class=\"keyword\">in</span> the templates via &#123;&#123; site.myvariable &#125;&#125;.</span></span><br><span class=\"line\"></span><br><span class=\"line\">title: Your awesome title</span><br><span class=\"line\">email: your-email@example.com</span><br><span class=\"line\">description: &gt;- # this means to ignore newlines until &quot;baseurl:&quot;</span><br><span class=\"line\">  Write an awesome description for your new site here. You can edit this</span><br><span class=\"line\">  line in _config.yml. It will appear in your document head meta (for</span><br><span class=\"line\">  Google search results) and in your feed.xml site description.</span><br><span class=\"line\">baseurl: &quot;&quot; # the subpath of your site, e.g. /blog</span><br><span class=\"line\">url: &quot;https://evestorm.github.io&quot; # the base hostname &amp; protocol for your site, e.g. http://example.com</span><br><span class=\"line\">repository: &quot;&#123;github_username&#125;/&#123;github_username&#125;.github.io&quot; # 把 &#123;github_username&#125; 替换成你github的username</span><br><span class=\"line\">twitter_username: jekyllrb</span><br><span class=\"line\">github_username:  lance # 你的username，随便填</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Build settings</span></span><br><span class=\"line\">theme: minimal-mistakes-jekyll</span><br><span class=\"line\">plugins:</span><br><span class=\"line\">  - jekyll-feed</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Exclude from processing.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> The following items will not be processed, by default.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Any item listed under the `exclude:` key here will be automatically added to</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> the internal <span class=\"string\">&quot;default list&quot;</span>.</span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Excluded items can be processed by explicitly listing the directories or</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> their entries<span class=\"string\">&#x27; file path in the `include:` list.</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># exclude:</span></span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - .sass-cache/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - .jekyll-cache/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - gemfiles/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - Gemfile</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - Gemfile.lock</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - node_modules/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/bundle/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/cache/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/gems/</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">   - vendor/ruby/</span></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>然后执行 <code>bundle update</code>。</p>\n<h3 id=\"替换和更改\"><a href=\"#替换和更改\" class=\"headerlink\" title=\"替换和更改\"></a>替换和更改</h3><ul>\n<li><p>替换根目录下 <code>index.markdown</code> 为 <code>index.html</code>  ：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">layout: home</span><br><span class=\"line\">author_profile: true</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>找到 <code>_posts/0000-00-00-welcome-to-jekyll.md</code> 并替换 <code>layout: single</code></p>\n</li>\n<li><p>删除 <code>about.md</code> 文件</p>\n</li>\n</ul>\n<p>最后执行： <code>bundle exec jekyll serve</code> 本地运行博客。</p>"},{"title":"使用hexo搭建个人博客","abbrlink":43303,"date":"2018-03-13T06:10:09.000Z","_content":"\n## 介绍\n\n利用 [Hexo](https://hexo.io/zh-cn/) 在 [GitHub](https://baike.baidu.com/item/github/10145341?fr=aladdin) 上搭建个人博客。\n\n## 准备工作\n\n你的电脑需要安装下面两个应用程序：\n\n- NodeJS [如何安装](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n- Git [如何安装](http://www.runoob.com/git/git-install-setup.html)\n\n或者直接查看hexo的[官方文档](https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90)查看安装教程。\n\n<!-- more -->\n\n## 安装Hexo\n\n> [安装文档](https://hexo.io/zh-cn/docs/)\n\n终端全局安装：\n\n```\nnpm install -g hexo-cli\n```\n\n### 建站\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n\n```shell\nhexo init 你的站点文件夹\ncd 你的站点文件夹\nnpm install\n```\n\n### 命令执行\n\n下方是三个常见命令，可以先执行前俩看看效果，最后一个部署命令待会再执行。\n\n- `hexo server -p 5000` 本地启动服务器，5000端口\n- `hexo new '你想要创建的文章名称'` 创建文章\n- `hexo clean && hexo deploy` 部署网站\n\n### 使用第三方主题\n\n- [Next](https://github.com/iissnan/hexo-theme-next) 【推荐】\n- [Yilia](https://github.com/litten/hexo-theme-yilia)\n\n#### 安装Next主题\n\n```shell\ncd 你的站点目录\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n\n## 配置\n\n### 创建分类和标签\n\n#### 分类\n\n运行：\n\n```shell\nhexo new page \"categories\"\n```\n\np.s. 命名为 `categories` 原因是 `categories` 在next主题中是一个关键词对应着分类。\n\n在主站根目录下,也就是你hexo的目录下找到 `/source/categories/index.md`，打开后的效果类似下方代码：\n\n```markdown\n---\ntitle: categories  #本页标题\ndate: 2018-03-13 23:02:50  #创建日期\ntype: \"categories\" \t#分类属于\ncomments: false  #如果有启用多说 或者 Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false\n---\n```\n\n接着在 themes 主题文件夹下找到 next 文件夹，修改 _config.yml 文件：\n\n```yaml\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n```\n\n然后在命令行输入添加文章命令：\n\n```\nhexo new '你想要创建的文章名称'\n```\n\n根目录(主站目录下)/source/_posts/<刚创建的文章名称>.md，双击打开：\n\n```markdown\n---\ntitle: 文章标题\ndate: 2018-03-13 23:13:23\ntags: html    #属于哪个标签\ncategories: interview   #属于哪个分类\n---\n```\n\n#### 标签\n\n打开命令行，进入博客所在文件夹。执行命令：\n\n```shell\nhexo new page tags\n```\n\n成功后会有一个路径提示\n\n```shell\nINFO Created: ~/Documents/blog/source/tags/index.md\n```\n\n找到对应的文件打开\n\n```markdown\n---\ntitle: tags\ndate: 2018-03-14 00:02:05\n---\n```\n\n添加type: “tags”到内容中，添加后是这样的：\n\n```markdown\n---\ntitle: 标签\ndate: 2018-03-14 00:03:52\ntype: 'tags'\ncomments: false\n---\n```\n\n打开你的文章页面：\n\n```markdown\n---\ntitle: jQuery对表单的操作及更多应用\ndate: 2019-03-14 00:03:55\ncategories: 前端\ntags: jQuery  #如果想要多个标签可以 tags: [jQuery, 表格, 表单验证] or\n- jQuery\n- 表格\n- 表单验证\n---\n```\n\np.s. 如果想要实现父子分类，也和标签一样的格式：\n\n```markd\ncategories:\n- IDE\n- VSCode\n```\n\n参考：[分类和标签](https://hexo.io/zh-cn/docs/front-matter.html#分类和标签)\n\n### 头像设置\n\n把头像放在站点根目录的 `source/uploads/` 下，然后在 `theme/next/_config.yml` 下修改配置：\n\n```yaml\navatar:\n  url: /uploads/avatar.png\n```\n\n### 侧边栏\n\n#### 菜单\n\n在 `theme/next/_config.yml` 下配置：\n\n```yaml\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  #tags: /tags/ || fa fa-tags\n  #categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n #### 社交\n\n```yaml\nsocial:\n  GitHub: https://github.com/yourname || fab fa-github\n  E-Mail: mailto:yourname@gmail.com || fa fa-envelope\n  Weibo: https://weibo.com/yourname || fab fa-weibo\n  Google: https://plus.google.com/yourname || fab fa-google\n  Twitter: https://twitter.com/yourname || fab fa-twitter\n  FB Page: https://www.facebook.com/yourname || fab fa-facebook\n  StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow\n  YouTube: https://youtube.com/yourname || fab fa-youtube\n  Instagram: https://instagram.com/yourname || fab fa-instagram\n  Skype: skype:yourname?call|chat || fab fa-skype\n```\n\n### 阅读更多\n\n在文章想要截断的地方添加 `<!-- more -->` ，这样在文章列表中就会只展示到截断位置为止。\n\n## 第三方插件\n\n### 永久URL生成：hexo-abbrlink\n\n- 用来生成每篇博客永久URL链接的\n- Repo: https://github.com/rozbo/hexo-abbrlink\n- 执行： `npm install hexo-abbrlink --save`\n\n### 部署到GitHub：hexo-deployer-git\n\n- 将本地博客部署到GitHub\n- Repo: https://hexo.io/zh-cn/docs/one-command-deployment)\n- 执行： `npm install hexo-deployer-git --save`\n\n**如何部署**\n\n在 `_config.yml` 下配置：\n\n```yaml\ndeploy:\n  type: git\n  repo: \"https://github.com/evestorm/evestorm.github.io\"\n  branch: \"gh-pages\"\n```\n\n然后在你的githubpages的repo下新建 `gh-pages` 分支，最后执行：`hexo clean && hexo deploy` 即可部署。\n\n### 本地热更新：hexo-server\n\n- 服务器模块。在启动期间，Hexo 会监视文件变动并自动更新\n- Repo: https://github.com/hexojs/hexo-server)\n- 执行： `npm install hexo-server –save`\n\n### 关键词搜索：LocalSearch\n\n- 本地搜索\n- Repo: https://github.com/theme-next/hexo-generator-searchdb\n- 执行：`npm install hexo-generator-searchdb --save`\n\n**配置博客**\n\n安装完成，编辑博客配置文件：`hexo/_config.yml`\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n**配置主题**\n\nNext 主题自带搜索设置，编辑主题配置文件：`_config.yml`\n\n找到文件中 Local search 的相关配置，设为 `true`\n\n```yaml\n# Local search\n# Dependencies: https://github.com/next-theme/hexo-generator-searchdb\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n最后记得 hexo 重新部署。\n\n### 统计分析：busuanzi_count\n\nNexT 主题集成了不蒜子（busuanzi_count）统计功能，在 NexT 配置文件中找到关键词 `busuanzi_count:` ，把 enable 设置为 true\n\np.s. 除此之外，如果设置为true后仍然无效，且打开控制台显示js报错。有可能是不蒜子链接失效的原因，需要在Next主题配置文件位置：\n\n```\nthemes\\next\\layout\\_third-party\\analytics\\busuanzi-counter.swig\n```\n\n修改script链接为：\n\n```html\n<script async src=\"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n```\n\n### 评论功能：ChangYan\n\n文档地址：https://theme-next.js.org/docs/third-party-services/comments.html#Changyan-China\n\n- 注册登录：https://changyan.kuaizhan.com/\n\n- 获取 APP ID 和 APP KEY\n\n- 设置 changyan enable: true:\n\n  ```yaml\n  # changyan\n  changyan:\n    enable: true\n    appid:\n    appkey:\n  ```\n\n  \n\n### 常用配置\n\n[Hexo瞎折腾系列(4) - 站点首页不显示文章全文](https://blog.csdn.net/lewky_liu/article/details/81277337)\n\n### 常用命令\n\n```shell\n// npm全局安装Hexo\nnpm install -g hexo-cli\n\n// 新建Hexo项目\nhexo init <folder>\ncd <folder>\nnpm install\n\n// 新建文章\nhexo new '文章名'\n\n// 启动服务器\nhexo server -p 5000\n\n// 生成静态文件\nhexo generate --watch\n\n// 部署\nhexo clean && hexo deploy\n```\n\n## 相关配置及资源\n\n- [Hexo+NexT 打造一个炫酷博客](https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-42)\n- [这应该是最全的hexo博客搭建以及next美化教程](https://me.idealli.com/post/e8d13fc.html)\n- [LeanCloud](https://leancloud.cn/)\n- [Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)](https://eirunye.github.io/2018/09/15/Hexo搭建GitHub博客—打造炫酷的NexT主题—高级—四/)\n- [Hexo NexT主题代码块添加复制功能](http://www.missfli.com/2018/06/19/github-hexo-next-08.html)\n- [修改hexo博客next主题文章页面宽度](https://ihaoming.top/archives/9a935f57.html)\n- [在Hexo中使用资源文件夹添加图片](https://hexo.io/zh-cn/docs/asset-folders.html)","source":"_posts/使用hexo搭建个人博客.md","raw":"---\ntitle: 使用hexo搭建个人博客\ntags: hexo\ncategories:\n  - 教程\n  - 博客\nabbrlink: 43303\ndate: 2018-03-13 14:10:09\n---\n\n## 介绍\n\n利用 [Hexo](https://hexo.io/zh-cn/) 在 [GitHub](https://baike.baidu.com/item/github/10145341?fr=aladdin) 上搭建个人博客。\n\n## 准备工作\n\n你的电脑需要安装下面两个应用程序：\n\n- NodeJS [如何安装](http://www.runoob.com/nodejs/nodejs-install-setup.html)\n- Git [如何安装](http://www.runoob.com/git/git-install-setup.html)\n\n或者直接查看hexo的[官方文档](https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90)查看安装教程。\n\n<!-- more -->\n\n## 安装Hexo\n\n> [安装文档](https://hexo.io/zh-cn/docs/)\n\n终端全局安装：\n\n```\nnpm install -g hexo-cli\n```\n\n### 建站\n\n安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：\n\n```shell\nhexo init 你的站点文件夹\ncd 你的站点文件夹\nnpm install\n```\n\n### 命令执行\n\n下方是三个常见命令，可以先执行前俩看看效果，最后一个部署命令待会再执行。\n\n- `hexo server -p 5000` 本地启动服务器，5000端口\n- `hexo new '你想要创建的文章名称'` 创建文章\n- `hexo clean && hexo deploy` 部署网站\n\n### 使用第三方主题\n\n- [Next](https://github.com/iissnan/hexo-theme-next) 【推荐】\n- [Yilia](https://github.com/litten/hexo-theme-yilia)\n\n#### 安装Next主题\n\n```shell\ncd 你的站点目录\ngit clone https://github.com/next-theme/hexo-theme-next themes/next\n```\n\n## 配置\n\n### 创建分类和标签\n\n#### 分类\n\n运行：\n\n```shell\nhexo new page \"categories\"\n```\n\np.s. 命名为 `categories` 原因是 `categories` 在next主题中是一个关键词对应着分类。\n\n在主站根目录下,也就是你hexo的目录下找到 `/source/categories/index.md`，打开后的效果类似下方代码：\n\n```markdown\n---\ntitle: categories  #本页标题\ndate: 2018-03-13 23:02:50  #创建日期\ntype: \"categories\" \t#分类属于\ncomments: false  #如果有启用多说 或者 Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false\n---\n```\n\n接着在 themes 主题文件夹下找到 next 文件夹，修改 _config.yml 文件：\n\n```yaml\nmenu:\n  home: / || fa fa-home\n  about: /about/ || fa fa-user\n  tags: /tags/ || fa fa-tags\n  categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n```\n\n然后在命令行输入添加文章命令：\n\n```\nhexo new '你想要创建的文章名称'\n```\n\n根目录(主站目录下)/source/_posts/<刚创建的文章名称>.md，双击打开：\n\n```markdown\n---\ntitle: 文章标题\ndate: 2018-03-13 23:13:23\ntags: html    #属于哪个标签\ncategories: interview   #属于哪个分类\n---\n```\n\n#### 标签\n\n打开命令行，进入博客所在文件夹。执行命令：\n\n```shell\nhexo new page tags\n```\n\n成功后会有一个路径提示\n\n```shell\nINFO Created: ~/Documents/blog/source/tags/index.md\n```\n\n找到对应的文件打开\n\n```markdown\n---\ntitle: tags\ndate: 2018-03-14 00:02:05\n---\n```\n\n添加type: “tags”到内容中，添加后是这样的：\n\n```markdown\n---\ntitle: 标签\ndate: 2018-03-14 00:03:52\ntype: 'tags'\ncomments: false\n---\n```\n\n打开你的文章页面：\n\n```markdown\n---\ntitle: jQuery对表单的操作及更多应用\ndate: 2019-03-14 00:03:55\ncategories: 前端\ntags: jQuery  #如果想要多个标签可以 tags: [jQuery, 表格, 表单验证] or\n- jQuery\n- 表格\n- 表单验证\n---\n```\n\np.s. 如果想要实现父子分类，也和标签一样的格式：\n\n```markd\ncategories:\n- IDE\n- VSCode\n```\n\n参考：[分类和标签](https://hexo.io/zh-cn/docs/front-matter.html#分类和标签)\n\n### 头像设置\n\n把头像放在站点根目录的 `source/uploads/` 下，然后在 `theme/next/_config.yml` 下修改配置：\n\n```yaml\navatar:\n  url: /uploads/avatar.png\n```\n\n### 侧边栏\n\n#### 菜单\n\n在 `theme/next/_config.yml` 下配置：\n\n```yaml\nmenu:\n  home: / || fa fa-home\n  #about: /about/ || fa fa-user\n  #tags: /tags/ || fa fa-tags\n  #categories: /categories/ || fa fa-th\n  archives: /archives/ || fa fa-archive\n  #schedule: /schedule/ || fa fa-calendar\n  #sitemap: /sitemap.xml || fa fa-sitemap\n  #commonweal: /404/ || fa fa-heartbeat\n```\n\n #### 社交\n\n```yaml\nsocial:\n  GitHub: https://github.com/yourname || fab fa-github\n  E-Mail: mailto:yourname@gmail.com || fa fa-envelope\n  Weibo: https://weibo.com/yourname || fab fa-weibo\n  Google: https://plus.google.com/yourname || fab fa-google\n  Twitter: https://twitter.com/yourname || fab fa-twitter\n  FB Page: https://www.facebook.com/yourname || fab fa-facebook\n  StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow\n  YouTube: https://youtube.com/yourname || fab fa-youtube\n  Instagram: https://instagram.com/yourname || fab fa-instagram\n  Skype: skype:yourname?call|chat || fab fa-skype\n```\n\n### 阅读更多\n\n在文章想要截断的地方添加 `<!-- more -->` ，这样在文章列表中就会只展示到截断位置为止。\n\n## 第三方插件\n\n### 永久URL生成：hexo-abbrlink\n\n- 用来生成每篇博客永久URL链接的\n- Repo: https://github.com/rozbo/hexo-abbrlink\n- 执行： `npm install hexo-abbrlink --save`\n\n### 部署到GitHub：hexo-deployer-git\n\n- 将本地博客部署到GitHub\n- Repo: https://hexo.io/zh-cn/docs/one-command-deployment)\n- 执行： `npm install hexo-deployer-git --save`\n\n**如何部署**\n\n在 `_config.yml` 下配置：\n\n```yaml\ndeploy:\n  type: git\n  repo: \"https://github.com/evestorm/evestorm.github.io\"\n  branch: \"gh-pages\"\n```\n\n然后在你的githubpages的repo下新建 `gh-pages` 分支，最后执行：`hexo clean && hexo deploy` 即可部署。\n\n### 本地热更新：hexo-server\n\n- 服务器模块。在启动期间，Hexo 会监视文件变动并自动更新\n- Repo: https://github.com/hexojs/hexo-server)\n- 执行： `npm install hexo-server –save`\n\n### 关键词搜索：LocalSearch\n\n- 本地搜索\n- Repo: https://github.com/theme-next/hexo-generator-searchdb\n- 执行：`npm install hexo-generator-searchdb --save`\n\n**配置博客**\n\n安装完成，编辑博客配置文件：`hexo/_config.yml`\n\n```yaml\nsearch:\n  path: search.xml\n  field: post\n  content: true\n  format: html\n```\n\n**配置主题**\n\nNext 主题自带搜索设置，编辑主题配置文件：`_config.yml`\n\n找到文件中 Local search 的相关配置，设为 `true`\n\n```yaml\n# Local search\n# Dependencies: https://github.com/next-theme/hexo-generator-searchdb\nlocal_search:\n  enable: true\n  # If auto, trigger search by changing input.\n  # If manual, trigger search by pressing enter key or search button.\n  trigger: auto\n  # Show top n results per article, show all results by setting to -1\n  top_n_per_article: 1\n  # Unescape html strings to the readable one.\n  unescape: false\n  # Preload the search data when the page loads.\n  preload: false\n```\n\n最后记得 hexo 重新部署。\n\n### 统计分析：busuanzi_count\n\nNexT 主题集成了不蒜子（busuanzi_count）统计功能，在 NexT 配置文件中找到关键词 `busuanzi_count:` ，把 enable 设置为 true\n\np.s. 除此之外，如果设置为true后仍然无效，且打开控制台显示js报错。有可能是不蒜子链接失效的原因，需要在Next主题配置文件位置：\n\n```\nthemes\\next\\layout\\_third-party\\analytics\\busuanzi-counter.swig\n```\n\n修改script链接为：\n\n```html\n<script async src=\"https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js\"></script>\n```\n\n### 评论功能：ChangYan\n\n文档地址：https://theme-next.js.org/docs/third-party-services/comments.html#Changyan-China\n\n- 注册登录：https://changyan.kuaizhan.com/\n\n- 获取 APP ID 和 APP KEY\n\n- 设置 changyan enable: true:\n\n  ```yaml\n  # changyan\n  changyan:\n    enable: true\n    appid:\n    appkey:\n  ```\n\n  \n\n### 常用配置\n\n[Hexo瞎折腾系列(4) - 站点首页不显示文章全文](https://blog.csdn.net/lewky_liu/article/details/81277337)\n\n### 常用命令\n\n```shell\n// npm全局安装Hexo\nnpm install -g hexo-cli\n\n// 新建Hexo项目\nhexo init <folder>\ncd <folder>\nnpm install\n\n// 新建文章\nhexo new '文章名'\n\n// 启动服务器\nhexo server -p 5000\n\n// 生成静态文件\nhexo generate --watch\n\n// 部署\nhexo clean && hexo deploy\n```\n\n## 相关配置及资源\n\n- [Hexo+NexT 打造一个炫酷博客](https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-42)\n- [这应该是最全的hexo博客搭建以及next美化教程](https://me.idealli.com/post/e8d13fc.html)\n- [LeanCloud](https://leancloud.cn/)\n- [Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)](https://eirunye.github.io/2018/09/15/Hexo搭建GitHub博客—打造炫酷的NexT主题—高级—四/)\n- [Hexo NexT主题代码块添加复制功能](http://www.missfli.com/2018/06/19/github-hexo-next-08.html)\n- [修改hexo博客next主题文章页面宽度](https://ihaoming.top/archives/9a935f57.html)\n- [在Hexo中使用资源文件夹添加图片](https://hexo.io/zh-cn/docs/asset-folders.html)","slug":"使用hexo搭建个人博客","published":1,"updated":"2020-11-21T15:30:04.897Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfs0042khsr3j5edjr0","content":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>利用 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 在 <a href=\"https://baike.baidu.com/item/github/10145341?fr=aladdin\">GitHub</a> 上搭建个人博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>你的电脑需要安装下面两个应用程序：</p>\n<ul>\n<li>NodeJS <a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">如何安装</a></li>\n<li>Git <a href=\"http://www.runoob.com/git/git-install-setup.html\">如何安装</a></li>\n</ul>\n<p>或者直接查看hexo的<a href=\"https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90\">官方文档</a>查看安装教程。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><blockquote>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">安装文档</a></p>\n</blockquote>\n<p>终端全局安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init 你的站点文件夹</span><br><span class=\"line\">cd 你的站点文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h3><p>下方是三个常见命令，可以先执行前俩看看效果，最后一个部署命令待会再执行。</p>\n<ul>\n<li><code>hexo server -p 5000</code> 本地启动服务器，5000端口</li>\n<li><code>hexo new &#39;你想要创建的文章名称&#39;</code> 创建文章</li>\n<li><code>hexo clean &amp;&amp; hexo deploy</code> 部署网站</li>\n</ul>\n<h3 id=\"使用第三方主题\"><a href=\"#使用第三方主题\" class=\"headerlink\" title=\"使用第三方主题\"></a>使用第三方主题</h3><ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">Next</a> 【推荐】</li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\">Yilia</a></li>\n</ul>\n<h4 id=\"安装Next主题\"><a href=\"#安装Next主题\" class=\"headerlink\" title=\"安装Next主题\"></a>安装Next主题</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 你的站点目录</span><br><span class=\"line\">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"创建分类和标签\"><a href=\"#创建分类和标签\" class=\"headerlink\" title=\"创建分类和标签\"></a>创建分类和标签</h3><h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><p>运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 命名为 <code>categories</code> 原因是 <code>categories</code> 在next主题中是一个关键词对应着分类。</p>\n<p>在主站根目录下,也就是你hexo的目录下找到 <code>/source/categories/index.md</code>，打开后的效果类似下方代码：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories  #本页标题</span><br><span class=\"line\">date: 2018-03-13 23:02:50  #创建日期</span><br><span class=\"line\">type: &quot;categories&quot; \t#分类属于</span><br><span class=\"line\">comments: false  #如果有启用多说 或者 Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>接着在 themes 主题文件夹下找到 next 文件夹，修改 _config.yml 文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在命令行输入添加文章命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &#39;你想要创建的文章名称&#39;</span><br></pre></td></tr></table></figure>\n\n<p>根目录(主站目录下)/source/_posts/&lt;刚创建的文章名称&gt;.md，双击打开：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章标题</span><br><span class=\"line\">date: 2018-03-13 23:13:23</span><br><span class=\"line\">tags: html    #属于哪个标签</span><br><span class=\"line\">categories: interview   #属于哪个分类</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>打开命令行，进入博客所在文件夹。执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>成功后会有一个路径提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure>\n\n<p>找到对应的文件打开</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-03-14 00:02:05</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加type: “tags”到内容中，添加后是这样的：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-03-14 00:03:52</span><br><span class=\"line\">type: &#x27;tags&#x27;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>打开你的文章页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: jQuery对表单的操作及更多应用</span><br><span class=\"line\">date: 2019-03-14 00:03:55</span><br><span class=\"line\">categories: 前端</span><br><span class=\"line\">tags: jQuery  #如果想要多个标签可以 tags: [jQuery, 表格, 表单验证] or</span><br><span class=\"line\"><span class=\"bullet\">-</span> jQuery</span><br><span class=\"line\"><span class=\"bullet\">-</span> 表格</span><br><span class=\"line\"><span class=\"bullet\">-</span> 表单验证</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 如果想要实现父子分类，也和标签一样的格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- IDE</span><br><span class=\"line\">- VSCode</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE\">分类和标签</a></p>\n<h3 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h3><p>把头像放在站点根目录的 <code>source/uploads/</code> 下，然后在 <code>theme/next/_config.yml</code> 下修改配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/uploads/avatar.png</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h3><h4 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h4><p>在 <code>theme/next/_config.yml</code> 下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"comment\">#tags: /tags/ || fa fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"社交\"><a href=\"#社交\" class=\"headerlink\" title=\"社交\"></a>社交</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">  <span class=\"attr\">E-Mail:</span> <span class=\"string\">mailto:yourname@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-envelope</span></span><br><span class=\"line\">  <span class=\"attr\">Weibo:</span> <span class=\"string\">https://weibo.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-weibo</span></span><br><span class=\"line\">  <span class=\"attr\">Google:</span> <span class=\"string\">https://plus.google.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-google</span></span><br><span class=\"line\">  <span class=\"attr\">Twitter:</span> <span class=\"string\">https://twitter.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-twitter</span></span><br><span class=\"line\">  <span class=\"attr\">FB Page:</span> <span class=\"string\">https://www.facebook.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-facebook</span></span><br><span class=\"line\">  <span class=\"attr\">StackOverflow:</span> <span class=\"string\">https://stackoverflow.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-stack-overflow</span></span><br><span class=\"line\">  <span class=\"attr\">YouTube:</span> <span class=\"string\">https://youtube.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-youtube</span></span><br><span class=\"line\">  <span class=\"attr\">Instagram:</span> <span class=\"string\">https://instagram.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-instagram</span></span><br><span class=\"line\">  <span class=\"attr\">Skype:</span> <span class=\"string\">skype:yourname?call|chat</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-skype</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阅读更多\"><a href=\"#阅读更多\" class=\"headerlink\" title=\"阅读更多\"></a>阅读更多</h3><p>在文章想要截断的地方添加 <code>&lt;!-- more --&gt;</code> ，这样在文章列表中就会只展示到截断位置为止。</p>\n<h2 id=\"第三方插件\"><a href=\"#第三方插件\" class=\"headerlink\" title=\"第三方插件\"></a>第三方插件</h2><h3 id=\"永久URL生成：hexo-abbrlink\"><a href=\"#永久URL生成：hexo-abbrlink\" class=\"headerlink\" title=\"永久URL生成：hexo-abbrlink\"></a>永久URL生成：hexo-abbrlink</h3><ul>\n<li>用来生成每篇博客永久URL链接的</li>\n<li>Repo: <a href=\"https://github.com/rozbo/hexo-abbrlink\">https://github.com/rozbo/hexo-abbrlink</a></li>\n<li>执行： <code>npm install hexo-abbrlink --save</code></li>\n</ul>\n<h3 id=\"部署到GitHub：hexo-deployer-git\"><a href=\"#部署到GitHub：hexo-deployer-git\" class=\"headerlink\" title=\"部署到GitHub：hexo-deployer-git\"></a>部署到GitHub：hexo-deployer-git</h3><ul>\n<li>将本地博客部署到GitHub</li>\n<li>Repo: <a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">https://hexo.io/zh-cn/docs/one-command-deployment</a>)</li>\n<li>执行： <code>npm install hexo-deployer-git --save</code></li>\n</ul>\n<p><strong>如何部署</strong></p>\n<p>在 <code>_config.yml</code> 下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&quot;https://github.com/evestorm/evestorm.github.io&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&quot;gh-pages&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在你的githubpages的repo下新建 <code>gh-pages</code> 分支，最后执行：<code>hexo clean &amp;&amp; hexo deploy</code> 即可部署。</p>\n<h3 id=\"本地热更新：hexo-server\"><a href=\"#本地热更新：hexo-server\" class=\"headerlink\" title=\"本地热更新：hexo-server\"></a>本地热更新：hexo-server</h3><ul>\n<li>服务器模块。在启动期间，Hexo 会监视文件变动并自动更新</li>\n<li>Repo: <a href=\"https://github.com/hexojs/hexo-server\">https://github.com/hexojs/hexo-server</a>)</li>\n<li>执行： <code>npm install hexo-server –save</code></li>\n</ul>\n<h3 id=\"关键词搜索：LocalSearch\"><a href=\"#关键词搜索：LocalSearch\" class=\"headerlink\" title=\"关键词搜索：LocalSearch\"></a>关键词搜索：LocalSearch</h3><ul>\n<li>本地搜索</li>\n<li>Repo: <a href=\"https://github.com/theme-next/hexo-generator-searchdb\">https://github.com/theme-next/hexo-generator-searchdb</a></li>\n<li>执行：<code>npm install hexo-generator-searchdb --save</code></li>\n</ul>\n<p><strong>配置博客</strong></p>\n<p>安装完成，编辑博客配置文件：<code>hexo/_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置主题</strong></p>\n<p>Next 主题自带搜索设置，编辑主题配置文件：<code>_config.yml</code></p>\n<p>找到文件中 Local search 的相关配置，设为 <code>true</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>最后记得 hexo 重新部署。</p>\n<h3 id=\"统计分析：busuanzi-count\"><a href=\"#统计分析：busuanzi-count\" class=\"headerlink\" title=\"统计分析：busuanzi_count\"></a>统计分析：busuanzi_count</h3><p>NexT 主题集成了不蒜子（busuanzi_count）统计功能，在 NexT 配置文件中找到关键词 <code>busuanzi_count:</code> ，把 enable 设置为 true</p>\n<p>p.s. 除此之外，如果设置为true后仍然无效，且打开控制台显示js报错。有可能是不蒜子链接失效的原因，需要在Next主题配置文件位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_third-party\\analytics\\busuanzi-counter.swig</span><br></pre></td></tr></table></figure>\n\n<p>修改script链接为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"评论功能：ChangYan\"><a href=\"#评论功能：ChangYan\" class=\"headerlink\" title=\"评论功能：ChangYan\"></a>评论功能：ChangYan</h3><p>文档地址：<a href=\"https://theme-next.js.org/docs/third-party-services/comments.html#Changyan-China\">https://theme-next.js.org/docs/third-party-services/comments.html#Changyan-China</a></p>\n<ul>\n<li><p>注册登录：<a href=\"https://changyan.kuaizhan.com/\">https://changyan.kuaizhan.com/</a></p>\n</li>\n<li><p>获取 APP ID 和 APP KEY</p>\n</li>\n<li><p>设置 changyan enable: true:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># changyan</span></span><br><span class=\"line\"><span class=\"attr\">changyan:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span></span><br><span class=\"line\">  <span class=\"attr\">appkey:</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><p><a href=\"https://blog.csdn.net/lewky_liu/article/details/81277337\">Hexo瞎折腾系列(4) - 站点首页不显示文章全文</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm全局安装Hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建Hexo项目</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建文章</span><br><span class=\"line\">hexo new &#x27;文章名&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动服务器</span><br><span class=\"line\">hexo server -p 5000</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成静态文件</span><br><span class=\"line\">hexo generate --watch</span><br><span class=\"line\"></span><br><span class=\"line\">// 部署</span><br><span class=\"line\">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关配置及资源\"><a href=\"#相关配置及资源\" class=\"headerlink\" title=\"相关配置及资源\"></a>相关配置及资源</h2><ul>\n<li><a href=\"https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-42\">Hexo+NexT 打造一个炫酷博客</a></li>\n<li><a href=\"https://me.idealli.com/post/e8d13fc.html\">这应该是最全的hexo博客搭建以及next美化教程</a></li>\n<li><a href=\"https://leancloud.cn/\">LeanCloud</a></li>\n<li><a href=\"https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/\">Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</a></li>\n<li><a href=\"http://www.missfli.com/2018/06/19/github-hexo-next-08.html\">Hexo NexT主题代码块添加复制功能</a></li>\n<li><a href=\"https://ihaoming.top/archives/9a935f57.html\">修改hexo博客next主题文章页面宽度</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\">在Hexo中使用资源文件夹添加图片</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><p>利用 <a href=\"https://hexo.io/zh-cn/\">Hexo</a> 在 <a href=\"https://baike.baidu.com/item/github/10145341?fr=aladdin\">GitHub</a> 上搭建个人博客。</p>\n<h2 id=\"准备工作\"><a href=\"#准备工作\" class=\"headerlink\" title=\"准备工作\"></a>准备工作</h2><p>你的电脑需要安装下面两个应用程序：</p>\n<ul>\n<li>NodeJS <a href=\"http://www.runoob.com/nodejs/nodejs-install-setup.html\">如何安装</a></li>\n<li>Git <a href=\"http://www.runoob.com/git/git-install-setup.html\">如何安装</a></li>\n</ul>\n<p>或者直接查看hexo的<a href=\"https://hexo.io/zh-cn/docs/#%E5%AE%89%E8%A3%85%E5%89%8D%E6%8F%90\">官方文档</a>查看安装教程。</p>","more":"<h2 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a>安装Hexo</h2><blockquote>\n<p><a href=\"https://hexo.io/zh-cn/docs/\">安装文档</a></p>\n</blockquote>\n<p>终端全局安装：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"建站\"><a href=\"#建站\" class=\"headerlink\" title=\"建站\"></a>建站</h3><p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo init 你的站点文件夹</span><br><span class=\"line\">cd 你的站点文件夹</span><br><span class=\"line\">npm install</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命令执行\"><a href=\"#命令执行\" class=\"headerlink\" title=\"命令执行\"></a>命令执行</h3><p>下方是三个常见命令，可以先执行前俩看看效果，最后一个部署命令待会再执行。</p>\n<ul>\n<li><code>hexo server -p 5000</code> 本地启动服务器，5000端口</li>\n<li><code>hexo new &#39;你想要创建的文章名称&#39;</code> 创建文章</li>\n<li><code>hexo clean &amp;&amp; hexo deploy</code> 部署网站</li>\n</ul>\n<h3 id=\"使用第三方主题\"><a href=\"#使用第三方主题\" class=\"headerlink\" title=\"使用第三方主题\"></a>使用第三方主题</h3><ul>\n<li><a href=\"https://github.com/iissnan/hexo-theme-next\">Next</a> 【推荐】</li>\n<li><a href=\"https://github.com/litten/hexo-theme-yilia\">Yilia</a></li>\n</ul>\n<h4 id=\"安装Next主题\"><a href=\"#安装Next主题\" class=\"headerlink\" title=\"安装Next主题\"></a>安装Next主题</h4><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd 你的站点目录</span><br><span class=\"line\">git clone https://github.com/next-theme/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><h3 id=\"创建分类和标签\"><a href=\"#创建分类和标签\" class=\"headerlink\" title=\"创建分类和标签\"></a>创建分类和标签</h3><h4 id=\"分类\"><a href=\"#分类\" class=\"headerlink\" title=\"分类\"></a>分类</h4><p>运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page &quot;categories&quot;</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 命名为 <code>categories</code> 原因是 <code>categories</code> 在next主题中是一个关键词对应着分类。</p>\n<p>在主站根目录下,也就是你hexo的目录下找到 <code>/source/categories/index.md</code>，打开后的效果类似下方代码：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: categories  #本页标题</span><br><span class=\"line\">date: 2018-03-13 23:02:50  #创建日期</span><br><span class=\"line\">type: &quot;categories&quot; \t#分类属于</span><br><span class=\"line\">comments: false  #如果有启用多说 或者 Disqus评论，默认页面也会带有评论。需要关闭的话，请添加字段 comments 并将值设置为 false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>接着在 themes 主题文件夹下找到 next 文件夹，修改 _config.yml 文件：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"attr\">about:</span> <span class=\"string\">/about/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-user</span></span><br><span class=\"line\">  <span class=\"attr\">tags:</span> <span class=\"string\">/tags/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-tags</span></span><br><span class=\"line\">  <span class=\"attr\">categories:</span> <span class=\"string\">/categories/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在命令行输入添加文章命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new &#39;你想要创建的文章名称&#39;</span><br></pre></td></tr></table></figure>\n\n<p>根目录(主站目录下)/source/_posts/&lt;刚创建的文章名称&gt;.md，双击打开：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章标题</span><br><span class=\"line\">date: 2018-03-13 23:13:23</span><br><span class=\"line\">tags: html    #属于哪个标签</span><br><span class=\"line\">categories: interview   #属于哪个分类</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签\"></a>标签</h4><p>打开命令行，进入博客所在文件夹。执行命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page tags</span><br></pre></td></tr></table></figure>\n\n<p>成功后会有一个路径提示</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">INFO Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure>\n\n<p>找到对应的文件打开</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tags</span><br><span class=\"line\">date: 2018-03-14 00:02:05</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>添加type: “tags”到内容中，添加后是这样的：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-03-14 00:03:52</span><br><span class=\"line\">type: &#x27;tags&#x27;</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>打开你的文章页面：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: jQuery对表单的操作及更多应用</span><br><span class=\"line\">date: 2019-03-14 00:03:55</span><br><span class=\"line\">categories: 前端</span><br><span class=\"line\">tags: jQuery  #如果想要多个标签可以 tags: [jQuery, 表格, 表单验证] or</span><br><span class=\"line\"><span class=\"bullet\">-</span> jQuery</span><br><span class=\"line\"><span class=\"bullet\">-</span> 表格</span><br><span class=\"line\"><span class=\"bullet\">-</span> 表单验证</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 如果想要实现父子分类，也和标签一样的格式：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">categories:</span><br><span class=\"line\">- IDE</span><br><span class=\"line\">- VSCode</span><br></pre></td></tr></table></figure>\n\n<p>参考：<a href=\"https://hexo.io/zh-cn/docs/front-matter.html#%E5%88%86%E7%B1%BB%E5%92%8C%E6%A0%87%E7%AD%BE\">分类和标签</a></p>\n<h3 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h3><p>把头像放在站点根目录的 <code>source/uploads/</code> 下，然后在 <code>theme/next/_config.yml</code> 下修改配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">avatar:</span></span><br><span class=\"line\">  <span class=\"attr\">url:</span> <span class=\"string\">/uploads/avatar.png</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"侧边栏\"><a href=\"#侧边栏\" class=\"headerlink\" title=\"侧边栏\"></a>侧边栏</h3><h4 id=\"菜单\"><a href=\"#菜单\" class=\"headerlink\" title=\"菜单\"></a>菜单</h4><p>在 <code>theme/next/_config.yml</code> 下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">menu:</span></span><br><span class=\"line\">  <span class=\"attr\">home:</span> <span class=\"string\">/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-home</span></span><br><span class=\"line\">  <span class=\"comment\">#about: /about/ || fa fa-user</span></span><br><span class=\"line\">  <span class=\"comment\">#tags: /tags/ || fa fa-tags</span></span><br><span class=\"line\">  <span class=\"comment\">#categories: /categories/ || fa fa-th</span></span><br><span class=\"line\">  <span class=\"attr\">archives:</span> <span class=\"string\">/archives/</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-archive</span></span><br><span class=\"line\">  <span class=\"comment\">#schedule: /schedule/ || fa fa-calendar</span></span><br><span class=\"line\">  <span class=\"comment\">#sitemap: /sitemap.xml || fa fa-sitemap</span></span><br><span class=\"line\">  <span class=\"comment\">#commonweal: /404/ || fa fa-heartbeat</span></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"社交\"><a href=\"#社交\" class=\"headerlink\" title=\"社交\"></a>社交</h4><figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">social:</span></span><br><span class=\"line\">  <span class=\"attr\">GitHub:</span> <span class=\"string\">https://github.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-github</span></span><br><span class=\"line\">  <span class=\"attr\">E-Mail:</span> <span class=\"string\">mailto:yourname@gmail.com</span> <span class=\"string\">||</span> <span class=\"string\">fa</span> <span class=\"string\">fa-envelope</span></span><br><span class=\"line\">  <span class=\"attr\">Weibo:</span> <span class=\"string\">https://weibo.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-weibo</span></span><br><span class=\"line\">  <span class=\"attr\">Google:</span> <span class=\"string\">https://plus.google.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-google</span></span><br><span class=\"line\">  <span class=\"attr\">Twitter:</span> <span class=\"string\">https://twitter.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-twitter</span></span><br><span class=\"line\">  <span class=\"attr\">FB Page:</span> <span class=\"string\">https://www.facebook.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-facebook</span></span><br><span class=\"line\">  <span class=\"attr\">StackOverflow:</span> <span class=\"string\">https://stackoverflow.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-stack-overflow</span></span><br><span class=\"line\">  <span class=\"attr\">YouTube:</span> <span class=\"string\">https://youtube.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-youtube</span></span><br><span class=\"line\">  <span class=\"attr\">Instagram:</span> <span class=\"string\">https://instagram.com/yourname</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-instagram</span></span><br><span class=\"line\">  <span class=\"attr\">Skype:</span> <span class=\"string\">skype:yourname?call|chat</span> <span class=\"string\">||</span> <span class=\"string\">fab</span> <span class=\"string\">fa-skype</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"阅读更多\"><a href=\"#阅读更多\" class=\"headerlink\" title=\"阅读更多\"></a>阅读更多</h3><p>在文章想要截断的地方添加 <code>&lt;!-- more --&gt;</code> ，这样在文章列表中就会只展示到截断位置为止。</p>\n<h2 id=\"第三方插件\"><a href=\"#第三方插件\" class=\"headerlink\" title=\"第三方插件\"></a>第三方插件</h2><h3 id=\"永久URL生成：hexo-abbrlink\"><a href=\"#永久URL生成：hexo-abbrlink\" class=\"headerlink\" title=\"永久URL生成：hexo-abbrlink\"></a>永久URL生成：hexo-abbrlink</h3><ul>\n<li>用来生成每篇博客永久URL链接的</li>\n<li>Repo: <a href=\"https://github.com/rozbo/hexo-abbrlink\">https://github.com/rozbo/hexo-abbrlink</a></li>\n<li>执行： <code>npm install hexo-abbrlink --save</code></li>\n</ul>\n<h3 id=\"部署到GitHub：hexo-deployer-git\"><a href=\"#部署到GitHub：hexo-deployer-git\" class=\"headerlink\" title=\"部署到GitHub：hexo-deployer-git\"></a>部署到GitHub：hexo-deployer-git</h3><ul>\n<li>将本地博客部署到GitHub</li>\n<li>Repo: <a href=\"https://hexo.io/zh-cn/docs/one-command-deployment\">https://hexo.io/zh-cn/docs/one-command-deployment</a>)</li>\n<li>执行： <code>npm install hexo-deployer-git --save</code></li>\n</ul>\n<p><strong>如何部署</strong></p>\n<p>在 <code>_config.yml</code> 下配置：</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">deploy:</span></span><br><span class=\"line\">  <span class=\"attr\">type:</span> <span class=\"string\">git</span></span><br><span class=\"line\">  <span class=\"attr\">repo:</span> <span class=\"string\">&quot;https://github.com/evestorm/evestorm.github.io&quot;</span></span><br><span class=\"line\">  <span class=\"attr\">branch:</span> <span class=\"string\">&quot;gh-pages&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>然后在你的githubpages的repo下新建 <code>gh-pages</code> 分支，最后执行：<code>hexo clean &amp;&amp; hexo deploy</code> 即可部署。</p>\n<h3 id=\"本地热更新：hexo-server\"><a href=\"#本地热更新：hexo-server\" class=\"headerlink\" title=\"本地热更新：hexo-server\"></a>本地热更新：hexo-server</h3><ul>\n<li>服务器模块。在启动期间，Hexo 会监视文件变动并自动更新</li>\n<li>Repo: <a href=\"https://github.com/hexojs/hexo-server\">https://github.com/hexojs/hexo-server</a>)</li>\n<li>执行： <code>npm install hexo-server –save</code></li>\n</ul>\n<h3 id=\"关键词搜索：LocalSearch\"><a href=\"#关键词搜索：LocalSearch\" class=\"headerlink\" title=\"关键词搜索：LocalSearch\"></a>关键词搜索：LocalSearch</h3><ul>\n<li>本地搜索</li>\n<li>Repo: <a href=\"https://github.com/theme-next/hexo-generator-searchdb\">https://github.com/theme-next/hexo-generator-searchdb</a></li>\n<li>执行：<code>npm install hexo-generator-searchdb --save</code></li>\n</ul>\n<p><strong>配置博客</strong></p>\n<p>安装完成，编辑博客配置文件：<code>hexo/_config.yml</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">search:</span></span><br><span class=\"line\">  <span class=\"attr\">path:</span> <span class=\"string\">search.xml</span></span><br><span class=\"line\">  <span class=\"attr\">field:</span> <span class=\"string\">post</span></span><br><span class=\"line\">  <span class=\"attr\">content:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">format:</span> <span class=\"string\">html</span></span><br></pre></td></tr></table></figure>\n\n<p><strong>配置主题</strong></p>\n<p>Next 主题自带搜索设置，编辑主题配置文件：<code>_config.yml</code></p>\n<p>找到文件中 Local search 的相关配置，设为 <code>true</code></p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Local search</span></span><br><span class=\"line\"><span class=\"comment\"># Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class=\"line\"><span class=\"attr\">local_search:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"comment\"># If auto, trigger search by changing input.</span></span><br><span class=\"line\">  <span class=\"comment\"># If manual, trigger search by pressing enter key or search button.</span></span><br><span class=\"line\">  <span class=\"attr\">trigger:</span> <span class=\"string\">auto</span></span><br><span class=\"line\">  <span class=\"comment\"># Show top n results per article, show all results by setting to -1</span></span><br><span class=\"line\">  <span class=\"attr\">top_n_per_article:</span> <span class=\"number\">1</span></span><br><span class=\"line\">  <span class=\"comment\"># Unescape html strings to the readable one.</span></span><br><span class=\"line\">  <span class=\"attr\">unescape:</span> <span class=\"literal\">false</span></span><br><span class=\"line\">  <span class=\"comment\"># Preload the search data when the page loads.</span></span><br><span class=\"line\">  <span class=\"attr\">preload:</span> <span class=\"literal\">false</span></span><br></pre></td></tr></table></figure>\n\n<p>最后记得 hexo 重新部署。</p>\n<h3 id=\"统计分析：busuanzi-count\"><a href=\"#统计分析：busuanzi-count\" class=\"headerlink\" title=\"统计分析：busuanzi_count\"></a>统计分析：busuanzi_count</h3><p>NexT 主题集成了不蒜子（busuanzi_count）统计功能，在 NexT 配置文件中找到关键词 <code>busuanzi_count:</code> ，把 enable 设置为 true</p>\n<p>p.s. 除此之外，如果设置为true后仍然无效，且打开控制台显示js报错。有可能是不蒜子链接失效的原因，需要在Next主题配置文件位置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes\\next\\layout\\_third-party\\analytics\\busuanzi-counter.swig</span><br></pre></td></tr></table></figure>\n\n<p>修改script链接为：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">async</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;https://busuanzi.ibruce.info/busuanzi/2.3/busuanzi.pure.mini.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"评论功能：ChangYan\"><a href=\"#评论功能：ChangYan\" class=\"headerlink\" title=\"评论功能：ChangYan\"></a>评论功能：ChangYan</h3><p>文档地址：<a href=\"https://theme-next.js.org/docs/third-party-services/comments.html#Changyan-China\">https://theme-next.js.org/docs/third-party-services/comments.html#Changyan-China</a></p>\n<ul>\n<li><p>注册登录：<a href=\"https://changyan.kuaizhan.com/\">https://changyan.kuaizhan.com/</a></p>\n</li>\n<li><p>获取 APP ID 和 APP KEY</p>\n</li>\n<li><p>设置 changyan enable: true:</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># changyan</span></span><br><span class=\"line\"><span class=\"attr\">changyan:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br><span class=\"line\">  <span class=\"attr\">appid:</span></span><br><span class=\"line\">  <span class=\"attr\">appkey:</span></span><br></pre></td></tr></table></figure>\n\n\n\n</li>\n</ul>\n<h3 id=\"常用配置\"><a href=\"#常用配置\" class=\"headerlink\" title=\"常用配置\"></a>常用配置</h3><p><a href=\"https://blog.csdn.net/lewky_liu/article/details/81277337\">Hexo瞎折腾系列(4) - 站点首页不显示文章全文</a></p>\n<h3 id=\"常用命令\"><a href=\"#常用命令\" class=\"headerlink\" title=\"常用命令\"></a>常用命令</h3><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// npm全局安装Hexo</span><br><span class=\"line\">npm install -g hexo-cli</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建Hexo项目</span><br><span class=\"line\">hexo init &lt;folder&gt;</span><br><span class=\"line\">cd &lt;folder&gt;</span><br><span class=\"line\">npm install</span><br><span class=\"line\"></span><br><span class=\"line\">// 新建文章</span><br><span class=\"line\">hexo new &#x27;文章名&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">// 启动服务器</span><br><span class=\"line\">hexo server -p 5000</span><br><span class=\"line\"></span><br><span class=\"line\">// 生成静态文件</span><br><span class=\"line\">hexo generate --watch</span><br><span class=\"line\"></span><br><span class=\"line\">// 部署</span><br><span class=\"line\">hexo clean &amp;&amp; hexo deploy</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"相关配置及资源\"><a href=\"#相关配置及资源\" class=\"headerlink\" title=\"相关配置及资源\"></a>相关配置及资源</h2><ul>\n<li><a href=\"https://juejin.im/post/5bcd2d395188255c3b7dc1db#heading-42\">Hexo+NexT 打造一个炫酷博客</a></li>\n<li><a href=\"https://me.idealli.com/post/e8d13fc.html\">这应该是最全的hexo博客搭建以及next美化教程</a></li>\n<li><a href=\"https://leancloud.cn/\">LeanCloud</a></li>\n<li><a href=\"https://eirunye.github.io/2018/09/15/Hexo%E6%90%AD%E5%BB%BAGitHub%E5%8D%9A%E5%AE%A2%E2%80%94%E6%89%93%E9%80%A0%E7%82%AB%E9%85%B7%E7%9A%84NexT%E4%B8%BB%E9%A2%98%E2%80%94%E9%AB%98%E7%BA%A7%E2%80%94%E5%9B%9B/\">Hexo搭建GitHub博客—打造炫酷的NexT主题–高级(四)</a></li>\n<li><a href=\"http://www.missfli.com/2018/06/19/github-hexo-next-08.html\">Hexo NexT主题代码块添加复制功能</a></li>\n<li><a href=\"https://ihaoming.top/archives/9a935f57.html\">修改hexo博客next主题文章页面宽度</a></li>\n<li><a href=\"https://hexo.io/zh-cn/docs/asset-folders.html\">在Hexo中使用资源文件夹添加图片</a></li>\n</ul>"},{"title":"函数中的rest参数","abbrlink":29820,"date":"2019-01-02T15:47:13.000Z","_content":"\n## 什么是 REST 参数\n\nREST参数翻译过来就是剩余参数，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters)上的定义是：\n\n> 剩余参数语法允许我们将一个不定数量的参数表示为一个数组。\n\n<!-- more -->\n\n## 示例说明\n\n```js\nfunction sum(...theArgs) {\n  return theArgs.reduce((previous, current) => {\n    return previous + current;\n  });\n}\n\nconsole.log(sum(1, 2, 3));\n// expected output: 6\n\nconsole.log(sum(1, 2, 3, 4));\n// expected output: 10\n\n// 下例中，剩余参数包含了从第二个到最后的所有实参，然后用第一个实参依次乘以它们\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map(function (element) {\n    return multiplier * element;\n  });\n}\n\nvar arr = multiply(2, 1, 2, 3); \nconsole.log(arr);  // [2, 4, 6]\n```\n\n## rest 参数和 arguments 对象的区别\n\n剩余参数和 `arguments`对象之间的区别主要有三个：\n\n- 剩余参数只包含那些没有对应形参的实参，而 `arguments` 对象包含了传给函数的所有实参。\n\n- `arguments`对象不是一个真正的数组，而剩余参数是真正的 `Array`实例，也就是说你能够在它上面直接使用所有的数组方法，比如 `sort`，`map`，`forEach`或`pop`。\n\n- ```\n  arguments\n  ```\n\n  对象还有一些附加的属性 （如\n\n  ```\n  callee\n  ```\n\n  属性）。\n\n  - arguments.callee 属性包含当前正在执行的函数。\n","source":"_posts/函数中的rest参数.md","raw":"---\ntitle: 函数中的rest参数\ntags:\n  - ES6\ncategories:\n  - 前端\n  - JS\nabbrlink: 29820\ndate: 2019-01-02 23:47:13\n---\n\n## 什么是 REST 参数\n\nREST参数翻译过来就是剩余参数，[MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters)上的定义是：\n\n> 剩余参数语法允许我们将一个不定数量的参数表示为一个数组。\n\n<!-- more -->\n\n## 示例说明\n\n```js\nfunction sum(...theArgs) {\n  return theArgs.reduce((previous, current) => {\n    return previous + current;\n  });\n}\n\nconsole.log(sum(1, 2, 3));\n// expected output: 6\n\nconsole.log(sum(1, 2, 3, 4));\n// expected output: 10\n\n// 下例中，剩余参数包含了从第二个到最后的所有实参，然后用第一个实参依次乘以它们\nfunction multiply(multiplier, ...theArgs) {\n  return theArgs.map(function (element) {\n    return multiplier * element;\n  });\n}\n\nvar arr = multiply(2, 1, 2, 3); \nconsole.log(arr);  // [2, 4, 6]\n```\n\n## rest 参数和 arguments 对象的区别\n\n剩余参数和 `arguments`对象之间的区别主要有三个：\n\n- 剩余参数只包含那些没有对应形参的实参，而 `arguments` 对象包含了传给函数的所有实参。\n\n- `arguments`对象不是一个真正的数组，而剩余参数是真正的 `Array`实例，也就是说你能够在它上面直接使用所有的数组方法，比如 `sort`，`map`，`forEach`或`pop`。\n\n- ```\n  arguments\n  ```\n\n  对象还有一些附加的属性 （如\n\n  ```\n  callee\n  ```\n\n  属性）。\n\n  - arguments.callee 属性包含当前正在执行的函数。\n","slug":"函数中的rest参数","published":1,"updated":"2020-11-21T15:53:44.637Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyft0047khsr0yyv6yec","content":"<h2 id=\"什么是-REST-参数\"><a href=\"#什么是-REST-参数\" class=\"headerlink\" title=\"什么是 REST 参数\"></a>什么是 REST 参数</h2><p>REST参数翻译过来就是剩余参数，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters\">MDN</a>上的定义是：</p>\n<blockquote>\n<p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组。</p>\n</blockquote>\n<a id=\"more\"></a>\n\n<h2 id=\"示例说明\"><a href=\"#示例说明\" class=\"headerlink\" title=\"示例说明\"></a>示例说明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...theArgs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> theArgs.reduce(<span class=\"function\">(<span class=\"params\">previous, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previous + current;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下例中，剩余参数包含了从第二个到最后的所有实参，然后用第一个实参依次乘以它们</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">multiplier, ...theArgs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> theArgs.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multiplier * element;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = multiply(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);  <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rest-参数和-arguments-对象的区别\"><a href=\"#rest-参数和-arguments-对象的区别\" class=\"headerlink\" title=\"rest 参数和 arguments 对象的区别\"></a>rest 参数和 arguments 对象的区别</h2><p>剩余参数和 <code>arguments</code>对象之间的区别主要有三个：</p>\n<ul>\n<li><p>剩余参数只包含那些没有对应形参的实参，而 <code>arguments</code> 对象包含了传给函数的所有实参。</p>\n</li>\n<li><p><code>arguments</code>对象不是一个真正的数组，而剩余参数是真正的 <code>Array</code>实例，也就是说你能够在它上面直接使用所有的数组方法，比如 <code>sort</code>，<code>map</code>，<code>forEach</code>或<code>pop</code>。</p>\n</li>\n<li><pre><code>arguments\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">对象还有一些附加的属性 （如</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\ncallee</code></pre>\n<p>属性）。</p>\n<ul>\n<li>arguments.callee 属性包含当前正在执行的函数。</li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是-REST-参数\"><a href=\"#什么是-REST-参数\" class=\"headerlink\" title=\"什么是 REST 参数\"></a>什么是 REST 参数</h2><p>REST参数翻译过来就是剩余参数，<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Rest_parameters\">MDN</a>上的定义是：</p>\n<blockquote>\n<p>剩余参数语法允许我们将一个不定数量的参数表示为一个数组。</p>\n</blockquote>","more":"<h2 id=\"示例说明\"><a href=\"#示例说明\" class=\"headerlink\" title=\"示例说明\"></a>示例说明</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">sum</span>(<span class=\"params\">...theArgs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> theArgs.reduce(<span class=\"function\">(<span class=\"params\">previous, current</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> previous + current;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: 6</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(sum(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>));</span><br><span class=\"line\"><span class=\"comment\">// expected output: 10</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 下例中，剩余参数包含了从第二个到最后的所有实参，然后用第一个实参依次乘以它们</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">multiply</span>(<span class=\"params\">multiplier, ...theArgs</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> theArgs.map(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">element</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> multiplier * element;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = multiply(<span class=\"number\">2</span>, <span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>); </span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(arr);  <span class=\"comment\">// [2, 4, 6]</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"rest-参数和-arguments-对象的区别\"><a href=\"#rest-参数和-arguments-对象的区别\" class=\"headerlink\" title=\"rest 参数和 arguments 对象的区别\"></a>rest 参数和 arguments 对象的区别</h2><p>剩余参数和 <code>arguments</code>对象之间的区别主要有三个：</p>\n<ul>\n<li><p>剩余参数只包含那些没有对应形参的实参，而 <code>arguments</code> 对象包含了传给函数的所有实参。</p>\n</li>\n<li><p><code>arguments</code>对象不是一个真正的数组，而剩余参数是真正的 <code>Array</code>实例，也就是说你能够在它上面直接使用所有的数组方法，比如 <code>sort</code>，<code>map</code>，<code>forEach</code>或<code>pop</code>。</p>\n</li>\n<li><pre><code>arguments\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">对象还有一些附加的属性 （如</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\ncallee</code></pre>\n<p>属性）。</p>\n<ul>\n<li>arguments.callee 属性包含当前正在执行的函数。</li>\n</ul>\n</li>\n</ul>"},{"title":"前端vscode插件配置","abbrlink":11039,"date":"2018-05-06T04:14:33.000Z","_content":"\n### 外观配置\n\n- **主题**：[Chester Atom](https://marketplace.visualstudio.com/items?itemName=chriseckenrode.vscode-chester-atom)\n- **图标**：[VSCode Great Icons](https://marketplace.visualstudio.com/items?itemName=emmanuelbeziat.vscode-great-icons)\n- **字体**：[Fira Code](https://github.com/tonsky/FiraCode/wiki)\n\n<!-- more -->\n\n#### 预览\n\n{% asset_img 163001_02d3ddb2_1203301.png UI-Show %}\n\n\n#### 用户设置（User Settings）\n\n```json\n{\n    \"editor.fontSize\": 16,\n    \"workbench.colorTheme\": \"Chester Atom\",\n    \"editor.fontFamily\": \"Fira Code\",\n    \"emmet.triggerExpansionOnTab\": true,\n    \"editor.fontLigatures\": true\n}\n```\n\n### 风格检查\n\n- **[ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)**\n- **[StyleLint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint)**\n- **[MarkdownLint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)**\n- **[Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)**\n\n### 编码效率\n\n#### 代码片段\n\n- [HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets)\n- [Javascript (ES6) Code Snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets)\n- [Javascript Patterns Snippets](https://marketplace.visualstudio.com/items?itemName=nikhilkumar80.js-patterns-snippets)\n- [Document This](https://marketplace.visualstudio.com/items?itemName=joelday.docthis)，一键给代码中的类、函数加上注释，支持函数声明、函数表达式、箭头函数等；\n\n#### 自动补全\n\n- [Auto Close Tag](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-close-tag)，在打开标签并且键入 `</` 的时候，能自动补全要闭合的标签；\n- [Auto Rename Tag](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-rename-tag)，在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签。\n- [Path Intellisense](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.path-intellisense)，文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成。\n- [NPM Intellisense](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.npm-intellisense)，NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成。\n- [IntelliSense for CSS class names](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DZignd.html-css-class-completion)，CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示。\n- [Emmet](https://link.juejin.im/?target=https%3A%2F%2Femmet.io)，VSCode 已经内置，官方介绍文档[参见](https://link.juejin.im/?target=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Feditor%2Femmet)。\n\n#### 代码补全\n\n- [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)\n  <!-- [![Code Runner](前端vscode插件配置/162c15a64b468fd8.gif)](https://user-gold-cdn.xitu.io/2018/4/14/162c15a64b468fd8?imageslim) -->\n  {% asset_img 162c15a64b468fd8.gif Code-Runner %}\n\n### 功能增强\n\n- [Color Highlight](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dnaumovs.color-highlight)，识别代码中的颜色，包括各种颜色格式。\n- [Bracket Pair Colorizer](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DCoenraadS.bracket-pair-colorizer)，识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号。\n- [Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync)，基于 Gist 实现 VSCode 用户配置、快捷键配置、已安装插件列表等的备份和恢复功能，配置过程有详细精确的操作步骤文档。生成的备份 Gist 默认是私密的，如果你想设置为共享的，也可以一键切换。\n\n### 外观增强\n\n- [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight)\n  维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。\n  <!-- [![TODO Highlight](前端vscode插件配置/1)](https://user-gold-cdn.xitu.io/2018/4/14/162c1592cecf92d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1) -->\n  {% asset_img 1.png TODO-Highlight %}","source":"_posts/前端vscode插件配置.md","raw":"---\ntitle: 前端vscode插件配置\ntags: VSCode\ncategories:\n- 工具\n- IDE\nabbrlink: 11039\ndate: 2018-05-06 12:14:33\n---\n\n### 外观配置\n\n- **主题**：[Chester Atom](https://marketplace.visualstudio.com/items?itemName=chriseckenrode.vscode-chester-atom)\n- **图标**：[VSCode Great Icons](https://marketplace.visualstudio.com/items?itemName=emmanuelbeziat.vscode-great-icons)\n- **字体**：[Fira Code](https://github.com/tonsky/FiraCode/wiki)\n\n<!-- more -->\n\n#### 预览\n\n{% asset_img 163001_02d3ddb2_1203301.png UI-Show %}\n\n\n#### 用户设置（User Settings）\n\n```json\n{\n    \"editor.fontSize\": 16,\n    \"workbench.colorTheme\": \"Chester Atom\",\n    \"editor.fontFamily\": \"Fira Code\",\n    \"emmet.triggerExpansionOnTab\": true,\n    \"editor.fontLigatures\": true\n}\n```\n\n### 风格检查\n\n- **[ESLint](https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint)**\n- **[StyleLint](https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint)**\n- **[MarkdownLint](https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint)**\n- **[Prettier](https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode)**\n\n### 编码效率\n\n#### 代码片段\n\n- [HTML Snippets](https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets)\n- [Javascript (ES6) Code Snippets](https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets)\n- [Javascript Patterns Snippets](https://marketplace.visualstudio.com/items?itemName=nikhilkumar80.js-patterns-snippets)\n- [Document This](https://marketplace.visualstudio.com/items?itemName=joelday.docthis)，一键给代码中的类、函数加上注释，支持函数声明、函数表达式、箭头函数等；\n\n#### 自动补全\n\n- [Auto Close Tag](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-close-tag)，在打开标签并且键入 `</` 的时候，能自动补全要闭合的标签；\n- [Auto Rename Tag](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dformulahendry.auto-rename-tag)，在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签。\n- [Path Intellisense](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.path-intellisense)，文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成。\n- [NPM Intellisense](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dchristian-kohler.npm-intellisense)，NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成。\n- [IntelliSense for CSS class names](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DZignd.html-css-class-completion)，CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示。\n- [Emmet](https://link.juejin.im/?target=https%3A%2F%2Femmet.io)，VSCode 已经内置，官方介绍文档[参见](https://link.juejin.im/?target=https%3A%2F%2Fcode.visualstudio.com%2Fdocs%2Feditor%2Femmet)。\n\n#### 代码补全\n\n- [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)\n  <!-- [![Code Runner](前端vscode插件配置/162c15a64b468fd8.gif)](https://user-gold-cdn.xitu.io/2018/4/14/162c15a64b468fd8?imageslim) -->\n  {% asset_img 162c15a64b468fd8.gif Code-Runner %}\n\n### 功能增强\n\n- [Color Highlight](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3Dnaumovs.color-highlight)，识别代码中的颜色，包括各种颜色格式。\n- [Bracket Pair Colorizer](https://link.juejin.im/?target=https%3A%2F%2Fmarketplace.visualstudio.com%2Fitems%3FitemName%3DCoenraadS.bracket-pair-colorizer)，识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号。\n- [Settings Sync](https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync)，基于 Gist 实现 VSCode 用户配置、快捷键配置、已安装插件列表等的备份和恢复功能，配置过程有详细精确的操作步骤文档。生成的备份 Gist 默认是私密的，如果你想设置为共享的，也可以一键切换。\n\n### 外观增强\n\n- [TODO Highlight](https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight)\n  维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。\n  <!-- [![TODO Highlight](前端vscode插件配置/1)](https://user-gold-cdn.xitu.io/2018/4/14/162c1592cecf92d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1) -->\n  {% asset_img 1.png TODO-Highlight %}","slug":"前端vscode插件配置","published":1,"updated":"2020-11-21T10:46:10.860Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfu004akhsr54gw29zs","content":"<h3 id=\"外观配置\"><a href=\"#外观配置\" class=\"headerlink\" title=\"外观配置\"></a>外观配置</h3><ul>\n<li><strong>主题</strong>：<a href=\"https://marketplace.visualstudio.com/items?itemName=chriseckenrode.vscode-chester-atom\">Chester Atom</a></li>\n<li><strong>图标</strong>：<a href=\"https://marketplace.visualstudio.com/items?itemName=emmanuelbeziat.vscode-great-icons\">VSCode Great Icons</a></li>\n<li><strong>字体</strong>：<a href=\"https://github.com/tonsky/FiraCode/wiki\">Fira Code</a></li>\n</ul>\n<a id=\"more\"></a>\n\n<h4 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h4><img src=\"/posts/11039/163001_02d3ddb2_1203301.png\" class=\"\" title=\"UI-Show\">\n\n\n<h4 id=\"用户设置（User-Settings）\"><a href=\"#用户设置（User-Settings）\" class=\"headerlink\" title=\"用户设置（User Settings）\"></a>用户设置（User Settings）</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.fontSize&quot;</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;workbench.colorTheme&quot;</span>: <span class=\"string\">&quot;Chester Atom&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.fontFamily&quot;</span>: <span class=\"string\">&quot;Fira Code&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.fontLigatures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"风格检查\"><a href=\"#风格检查\" class=\"headerlink\" title=\"风格检查\"></a>风格检查</h3><ul>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a></strong></li>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\">StyleLint</a></strong></li>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\">MarkdownLint</a></strong></li>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier</a></strong></li>\n</ul>\n<h3 id=\"编码效率\"><a href=\"#编码效率\" class=\"headerlink\" title=\"编码效率\"></a>编码效率</h3><h4 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h4><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets\">HTML Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets\">Javascript (ES6) Code Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=nikhilkumar80.js-patterns-snippets\">Javascript Patterns Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=joelday.docthis\">Document This</a>，一键给代码中的类、函数加上注释，支持函数声明、函数表达式、箭头函数等；</li>\n</ul>\n<h4 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h4><ul>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag\">Auto Close Tag</a>，在打开标签并且键入 <code>&lt;/</code> 的时候，能自动补全要闭合的标签；</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\">Auto Rename Tag</a>，在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a>，文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense\">NPM Intellisense</a>，NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion\">IntelliSense for CSS class names</a>，CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示。</li>\n<li><a href=\"https://link.juejin.im/?target=https://emmet.io\">Emmet</a>，VSCode 已经内置，官方介绍文档<a href=\"https://link.juejin.im/?target=https://code.visualstudio.com/docs/editor/emmet\">参见</a>。</li>\n</ul>\n<h4 id=\"代码补全\"><a href=\"#代码补全\" class=\"headerlink\" title=\"代码补全\"></a>代码补全</h4><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\">Code Runner</a><!-- [![Code Runner](前端vscode插件配置/162c15a64b468fd8.gif)](https://user-gold-cdn.xitu.io/2018/4/14/162c15a64b468fd8?imageslim) -->\n<img src=\"/posts/11039/162c15a64b468fd8.gif\" class=\"\" title=\"Code-Runner\">\n\n</li>\n</ul>\n<h3 id=\"功能增强\"><a href=\"#功能增强\" class=\"headerlink\" title=\"功能增强\"></a>功能增强</h3><ul>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight\">Color Highlight</a>，识别代码中的颜色，包括各种颜色格式。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\">Bracket Pair Colorizer</a>，识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号。</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync</a>，基于 Gist 实现 VSCode 用户配置、快捷键配置、已安装插件列表等的备份和恢复功能，配置过程有详细精确的操作步骤文档。生成的备份 Gist 默认是私密的，如果你想设置为共享的，也可以一键切换。</li>\n</ul>\n<h3 id=\"外观增强\"><a href=\"#外观增强\" class=\"headerlink\" title=\"外观增强\"></a>外观增强</h3><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\">TODO Highlight</a><br>维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。<!-- [![TODO Highlight](前端vscode插件配置/1)](https://user-gold-cdn.xitu.io/2018/4/14/162c1592cecf92d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1) -->\n<img src=\"/posts/11039/1.png\" class=\"\" title=\"TODO-Highlight\"></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"外观配置\"><a href=\"#外观配置\" class=\"headerlink\" title=\"外观配置\"></a>外观配置</h3><ul>\n<li><strong>主题</strong>：<a href=\"https://marketplace.visualstudio.com/items?itemName=chriseckenrode.vscode-chester-atom\">Chester Atom</a></li>\n<li><strong>图标</strong>：<a href=\"https://marketplace.visualstudio.com/items?itemName=emmanuelbeziat.vscode-great-icons\">VSCode Great Icons</a></li>\n<li><strong>字体</strong>：<a href=\"https://github.com/tonsky/FiraCode/wiki\">Fira Code</a></li>\n</ul>","more":"<h4 id=\"预览\"><a href=\"#预览\" class=\"headerlink\" title=\"预览\"></a>预览</h4><img src=\"/posts/11039/163001_02d3ddb2_1203301.png\" class=\"\" title=\"UI-Show\">\n\n\n<h4 id=\"用户设置（User-Settings）\"><a href=\"#用户设置（User-Settings）\" class=\"headerlink\" title=\"用户设置（User Settings）\"></a>用户设置（User Settings）</h4><figure class=\"highlight json\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.fontSize&quot;</span>: <span class=\"number\">16</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;workbench.colorTheme&quot;</span>: <span class=\"string\">&quot;Chester Atom&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.fontFamily&quot;</span>: <span class=\"string\">&quot;Fira Code&quot;</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;emmet.triggerExpansionOnTab&quot;</span>: <span class=\"literal\">true</span>,</span><br><span class=\"line\">    <span class=\"attr\">&quot;editor.fontLigatures&quot;</span>: <span class=\"literal\">true</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"风格检查\"><a href=\"#风格检查\" class=\"headerlink\" title=\"风格检查\"></a>风格检查</h3><ul>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=dbaeumer.vscode-eslint\">ESLint</a></strong></li>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=shinnn.stylelint\">StyleLint</a></strong></li>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=DavidAnson.vscode-markdownlint\">MarkdownLint</a></strong></li>\n<li><strong><a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\">Prettier</a></strong></li>\n</ul>\n<h3 id=\"编码效率\"><a href=\"#编码效率\" class=\"headerlink\" title=\"编码效率\"></a>编码效率</h3><h4 id=\"代码片段\"><a href=\"#代码片段\" class=\"headerlink\" title=\"代码片段\"></a>代码片段</h4><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=abusaidm.html-snippets\">HTML Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=xabikos.JavaScriptSnippets\">Javascript (ES6) Code Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=nikhilkumar80.js-patterns-snippets\">Javascript Patterns Snippets</a></li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=joelday.docthis\">Document This</a>，一键给代码中的类、函数加上注释，支持函数声明、函数表达式、箭头函数等；</li>\n</ul>\n<h4 id=\"自动补全\"><a href=\"#自动补全\" class=\"headerlink\" title=\"自动补全\"></a>自动补全</h4><ul>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-close-tag\">Auto Close Tag</a>，在打开标签并且键入 <code>&lt;/</code> 的时候，能自动补全要闭合的标签；</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=formulahendry.auto-rename-tag\">Auto Rename Tag</a>，在修改标签名时，能在你修改开始（结束）标签的时候修改对应的结束（开始）标签。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=christian-kohler.path-intellisense\">Path Intellisense</a>，文件路径补全，在你用任何方式引入文件系统中的路径时提供智能提示和自动完成。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=christian-kohler.npm-intellisense\">NPM Intellisense</a>，NPM 依赖补全，在你引入任何 node_modules 里面的依赖包时提供智能提示和自动完成。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=Zignd.html-css-class-completion\">IntelliSense for CSS class names</a>，CSS 类名补全，会自动扫描整个项目里面的 CSS 类名并在你输入类名时做智能提示。</li>\n<li><a href=\"https://link.juejin.im/?target=https://emmet.io\">Emmet</a>，VSCode 已经内置，官方介绍文档<a href=\"https://link.juejin.im/?target=https://code.visualstudio.com/docs/editor/emmet\">参见</a>。</li>\n</ul>\n<h4 id=\"代码补全\"><a href=\"#代码补全\" class=\"headerlink\" title=\"代码补全\"></a>代码补全</h4><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\">Code Runner</a><!-- [![Code Runner](前端vscode插件配置/162c15a64b468fd8.gif)](https://user-gold-cdn.xitu.io/2018/4/14/162c15a64b468fd8?imageslim) -->\n<img src=\"/posts/11039/162c15a64b468fd8.gif\" class=\"\" title=\"Code-Runner\">\n\n</li>\n</ul>\n<h3 id=\"功能增强\"><a href=\"#功能增强\" class=\"headerlink\" title=\"功能增强\"></a>功能增强</h3><ul>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=naumovs.color-highlight\">Color Highlight</a>，识别代码中的颜色，包括各种颜色格式。</li>\n<li><a href=\"https://link.juejin.im/?target=https://marketplace.visualstudio.com/items?itemName=CoenraadS.bracket-pair-colorizer\">Bracket Pair Colorizer</a>，识别代码中的各种括号，并且标记上不同的颜色，方便你扫视到匹配的括号。</li>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=Shan.code-settings-sync\">Settings Sync</a>，基于 Gist 实现 VSCode 用户配置、快捷键配置、已安装插件列表等的备份和恢复功能，配置过程有详细精确的操作步骤文档。生成的备份 Gist 默认是私密的，如果你想设置为共享的，也可以一键切换。</li>\n</ul>\n<h3 id=\"外观增强\"><a href=\"#外观增强\" class=\"headerlink\" title=\"外观增强\"></a>外观增强</h3><ul>\n<li><a href=\"https://marketplace.visualstudio.com/items?itemName=wayou.vscode-todo-highlight\">TODO Highlight</a><br>维护时间稍长的代码仓库免不了会有各种 TODO、FIXME、HACK 之类的标记，TODO Highlight 能够帮我们把这些关键词高亮出来，在你翻阅代码时非常醒目，就像是在大声提醒你尽快把他解决掉。支持自定义配置需要高亮的关键词，实际使用比较坑的地方是，TODO、FIXME 之类的后面必须加上冒号，否则无法高亮。<!-- [![TODO Highlight](前端vscode插件配置/1)](https://user-gold-cdn.xitu.io/2018/4/14/162c1592cecf92d8?imageView2/0/w/1280/h/960/format/webp/ignore-error/1) -->\n<img src=\"/posts/11039/1.png\" class=\"\" title=\"TODO-Highlight\"></li>\n</ul>"},{"title":"去除图片上下左右间隙","abbrlink":31251,"date":"2018-12-11T15:30:41.000Z","_content":"\n## 情景\n\n当在定宽父容器下有多张图片顺序排列时，图片的上下左右之间都有间隙：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"KEBmRP\" src=\"https://codepen.io/JingW/embed/KEBmRP/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<!-- more -->\n\n## 原因\n\n- 左右：因为 img 是 inline-block 元素，元素代码之间有『换行（回车），空格，tab』时会产生左右间隙。\n- 上下：行内元素默认与父容器基线对齐，而基线与父容器底部有一定间隙，所以上下图片间有间隙。\n\n## 解决方案\n\n- 移除上下间隙：\n  - img本身设置 `display: block;`\n  - 父元素设置 `font-size: 0;` （基线与字体大小有关，字体为零，基线间就没距离了）\n  - img本身设置 `vertical-align: bottom;`（让inline-block 的 img 与每行的底部对齐）\n- 移除左右间距：\n  - 行内元素间不要有换行，连成一行写消除间隙（阅读性差，不推荐）\n  - 第一行img结尾写上 `<!--` ，第二行img开头跟上 `-->` 。即利用注释消除间距\n  - 父元素 `font-size: 0`\n","source":"_posts/去除图片上下左右间隙.md","raw":"---\ntitle: 去除图片上下左右间隙\ntags:\n  - 布局\n  - 技巧\ncategories:\n  - 前端\n  - CSS\nabbrlink: 31251\ndate: 2018-12-11 23:30:41\n---\n\n## 情景\n\n当在定宽父容器下有多张图片顺序排列时，图片的上下左右之间都有间隙：\n\n<iframe height=\"265\" scrolling=\"no\" title=\"KEBmRP\" src=\"https://codepen.io/JingW/embed/KEBmRP/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<!-- more -->\n\n## 原因\n\n- 左右：因为 img 是 inline-block 元素，元素代码之间有『换行（回车），空格，tab』时会产生左右间隙。\n- 上下：行内元素默认与父容器基线对齐，而基线与父容器底部有一定间隙，所以上下图片间有间隙。\n\n## 解决方案\n\n- 移除上下间隙：\n  - img本身设置 `display: block;`\n  - 父元素设置 `font-size: 0;` （基线与字体大小有关，字体为零，基线间就没距离了）\n  - img本身设置 `vertical-align: bottom;`（让inline-block 的 img 与每行的底部对齐）\n- 移除左右间距：\n  - 行内元素间不要有换行，连成一行写消除间隙（阅读性差，不推荐）\n  - 第一行img结尾写上 `<!--` ，第二行img开头跟上 `-->` 。即利用注释消除间距\n  - 父元素 `font-size: 0`\n","slug":"去除图片上下左右间隙","published":1,"updated":"2020-11-21T15:34:05.776Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfv004ekhsr4qf08e7w","content":"<h2 id=\"情景\"><a href=\"#情景\" class=\"headerlink\" title=\"情景\"></a>情景</h2><p>当在定宽父容器下有多张图片顺序排列时，图片的上下左右之间都有间隙：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"KEBmRP\" src=\"https://codepen.io/JingW/embed/KEBmRP/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<a id=\"more\"></a>\n\n<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><ul>\n<li>左右：因为 img 是 inline-block 元素，元素代码之间有『换行（回车），空格，tab』时会产生左右间隙。</li>\n<li>上下：行内元素默认与父容器基线对齐，而基线与父容器底部有一定间隙，所以上下图片间有间隙。</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>移除上下间隙：<ul>\n<li>img本身设置 <code>display: block;</code></li>\n<li>父元素设置 <code>font-size: 0;</code> （基线与字体大小有关，字体为零，基线间就没距离了）</li>\n<li>img本身设置 <code>vertical-align: bottom;</code>（让inline-block 的 img 与每行的底部对齐）</li>\n</ul>\n</li>\n<li>移除左右间距：<ul>\n<li>行内元素间不要有换行，连成一行写消除间隙（阅读性差，不推荐）</li>\n<li>第一行img结尾写上 <code>&lt;!--</code> ，第二行img开头跟上 <code>--&gt;</code> 。即利用注释消除间距</li>\n<li>父元素 <code>font-size: 0</code></li>\n</ul>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"情景\"><a href=\"#情景\" class=\"headerlink\" title=\"情景\"></a>情景</h2><p>当在定宽父容器下有多张图片顺序排列时，图片的上下左右之间都有间隙：</p>\n<iframe height=\"265\" scrolling=\"no\" title=\"KEBmRP\" src=\"https://codepen.io/JingW/embed/KEBmRP/?height=265&amp;theme-id=0&amp;default-tab=html,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>","more":"<h2 id=\"原因\"><a href=\"#原因\" class=\"headerlink\" title=\"原因\"></a>原因</h2><ul>\n<li>左右：因为 img 是 inline-block 元素，元素代码之间有『换行（回车），空格，tab』时会产生左右间隙。</li>\n<li>上下：行内元素默认与父容器基线对齐，而基线与父容器底部有一定间隙，所以上下图片间有间隙。</li>\n</ul>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ul>\n<li>移除上下间隙：<ul>\n<li>img本身设置 <code>display: block;</code></li>\n<li>父元素设置 <code>font-size: 0;</code> （基线与字体大小有关，字体为零，基线间就没距离了）</li>\n<li>img本身设置 <code>vertical-align: bottom;</code>（让inline-block 的 img 与每行的底部对齐）</li>\n</ul>\n</li>\n<li>移除左右间距：<ul>\n<li>行内元素间不要有换行，连成一行写消除间隙（阅读性差，不推荐）</li>\n<li>第一行img结尾写上 <code>&lt;!--</code> ，第二行img开头跟上 <code>--&gt;</code> 。即利用注释消除间距</li>\n<li>父元素 <code>font-size: 0</code></li>\n</ul>\n</li>\n</ul>"},{"title":"垂直居中方案汇总","abbrlink":12733,"date":"2018-11-25T15:12:33.000Z","_content":"\n这里汇总了常见的元素居中方案。\n\n## 水平居中\n\n### 行内元素水平居中\n\n核心：给父元素添加 `text-align: center`\n\n<iframe height=\"265\" scrolling=\"no\" title=\"行内元素水平居中\" src=\"https://codepen.io/JingW/embed/mvaNXw/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<!-- more -->\n\n### 块级元素水平居中\n\n核心：子元素自身 `margin: 0 auto;`\n\n<iframe height=\"291\" scrolling=\"no\" title=\"块元素水平居中\" src=\"https://codepen.io/JingW/embed/moxbxb/?height=291&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 多个div水平居中\n\n#### 传统方案\n\n核心：父元素设置 `text-align: center` ，子元素设置 `inline-block`\n\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中 - 传统方案\" src=\"https://codepen.io/JingW/embed/KEoPGq/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n#### Flex方案\n\n核心：父元素 `display: flex` + `justify-content: center` + `align-items: center`\n\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中-flex\" src=\"https://codepen.io/JingW/embed/XGEroY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 水平垂直居中\n\n### table自带水平垂直居中\n\n核心：使用 `table>tr>td` 布局\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - table\" src=\"https://codepen.io/JingW/embed/xBWxwe/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 模拟table\n\n核心：父元素 `display: table` ，子元素 `display: table-cell` + `vertical-align: middle`\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 模拟table\" src=\"https://codepen.io/JingW/embed/aMYbZx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相 + 子元素 margin:auto\n\n核心：子元素相对于父元素绝对定位，`top`、`right`、`bottom`、`left` 都设为0，margi设为auto\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + Margin Auto\" src=\"https://codepen.io/JingW/embed/PLRYrz/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相 + 负margin\n\n核心：子元素相对于父元素绝对定位，`top`、`left`设为50%，margin相对自身宽/高一半\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + 负Margin\" src=\"https://codepen.io/JingW/embed/oVqNvK/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相 + translate\n\n核心：子元素相对于父元素绝对定位，`top`、`left`设为50%，此时子元素左上角在父元素中心，然后让子元素向左上角位移自身宽度的一半\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + translate\" src=\"https://codepen.io/JingW/embed/EMExjr/?height=456&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### Flex布局\n\n父元素 `display: flex`，`justify-content` 和 `align-items` 都设为 center 实现垂直居中\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - flex\" src=\"https://codepen.io/JingW/embed/rRdNyo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","source":"_posts/垂直居中方案汇总.md","raw":"---\ntitle: 垂直居中方案汇总\ntags:\n  - 布局\n  - 技巧\ncategories:\n  - 前端\n  - CSS\nabbrlink: 12733\ndate: 2018-11-25 23:12:33\n---\n\n这里汇总了常见的元素居中方案。\n\n## 水平居中\n\n### 行内元素水平居中\n\n核心：给父元素添加 `text-align: center`\n\n<iframe height=\"265\" scrolling=\"no\" title=\"行内元素水平居中\" src=\"https://codepen.io/JingW/embed/mvaNXw/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<!-- more -->\n\n### 块级元素水平居中\n\n核心：子元素自身 `margin: 0 auto;`\n\n<iframe height=\"291\" scrolling=\"no\" title=\"块元素水平居中\" src=\"https://codepen.io/JingW/embed/moxbxb/?height=291&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 多个div水平居中\n\n#### 传统方案\n\n核心：父元素设置 `text-align: center` ，子元素设置 `inline-block`\n\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中 - 传统方案\" src=\"https://codepen.io/JingW/embed/KEoPGq/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n#### Flex方案\n\n核心：父元素 `display: flex` + `justify-content: center` + `align-items: center`\n\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中-flex\" src=\"https://codepen.io/JingW/embed/XGEroY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n## 水平垂直居中\n\n### table自带水平垂直居中\n\n核心：使用 `table>tr>td` 布局\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - table\" src=\"https://codepen.io/JingW/embed/xBWxwe/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 模拟table\n\n核心：父元素 `display: table` ，子元素 `display: table-cell` + `vertical-align: middle`\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 模拟table\" src=\"https://codepen.io/JingW/embed/aMYbZx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相 + 子元素 margin:auto\n\n核心：子元素相对于父元素绝对定位，`top`、`right`、`bottom`、`left` 都设为0，margi设为auto\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + Margin Auto\" src=\"https://codepen.io/JingW/embed/PLRYrz/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相 + 负margin\n\n核心：子元素相对于父元素绝对定位，`top`、`left`设为50%，margin相对自身宽/高一半\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + 负Margin\" src=\"https://codepen.io/JingW/embed/oVqNvK/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### 子绝父相 + translate\n\n核心：子元素相对于父元素绝对定位，`top`、`left`设为50%，此时子元素左上角在父元素中心，然后让子元素向左上角位移自身宽度的一半\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + translate\" src=\"https://codepen.io/JingW/embed/EMExjr/?height=456&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n### Flex布局\n\n父元素 `display: flex`，`justify-content` 和 `align-items` 都设为 center 实现垂直居中\n\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - flex\" src=\"https://codepen.io/JingW/embed/rRdNyo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","slug":"垂直居中方案汇总","published":1,"updated":"2020-11-21T15:14:17.585Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfw004ikhsr3zoscjjh","content":"<p>这里汇总了常见的元素居中方案。</p>\n<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><h3 id=\"行内元素水平居中\"><a href=\"#行内元素水平居中\" class=\"headerlink\" title=\"行内元素水平居中\"></a>行内元素水平居中</h3><p>核心：给父元素添加 <code>text-align: center</code></p>\n<iframe height=\"265\" scrolling=\"no\" title=\"行内元素水平居中\" src=\"https://codepen.io/JingW/embed/mvaNXw/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<a id=\"more\"></a>\n\n<h3 id=\"块级元素水平居中\"><a href=\"#块级元素水平居中\" class=\"headerlink\" title=\"块级元素水平居中\"></a>块级元素水平居中</h3><p>核心：子元素自身 <code>margin: 0 auto;</code></p>\n<iframe height=\"291\" scrolling=\"no\" title=\"块元素水平居中\" src=\"https://codepen.io/JingW/embed/moxbxb/?height=291&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"多个div水平居中\"><a href=\"#多个div水平居中\" class=\"headerlink\" title=\"多个div水平居中\"></a>多个div水平居中</h3><h4 id=\"传统方案\"><a href=\"#传统方案\" class=\"headerlink\" title=\"传统方案\"></a>传统方案</h4><p>核心：父元素设置 <code>text-align: center</code> ，子元素设置 <code>inline-block</code></p>\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中 - 传统方案\" src=\"https://codepen.io/JingW/embed/KEoPGq/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h4 id=\"Flex方案\"><a href=\"#Flex方案\" class=\"headerlink\" title=\"Flex方案\"></a>Flex方案</h4><p>核心：父元素 <code>display: flex</code> + <code>justify-content: center</code> + <code>align-items: center</code></p>\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中-flex\" src=\"https://codepen.io/JingW/embed/XGEroY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h2><h3 id=\"table自带水平垂直居中\"><a href=\"#table自带水平垂直居中\" class=\"headerlink\" title=\"table自带水平垂直居中\"></a>table自带水平垂直居中</h3><p>核心：使用 <code>table&gt;tr&gt;td</code> 布局</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - table\" src=\"https://codepen.io/JingW/embed/xBWxwe/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"模拟table\"><a href=\"#模拟table\" class=\"headerlink\" title=\"模拟table\"></a>模拟table</h3><p>核心：父元素 <code>display: table</code> ，子元素 <code>display: table-cell</code> + <code>vertical-align: middle</code></p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 模拟table\" src=\"https://codepen.io/JingW/embed/aMYbZx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相-子元素-margin-auto\"><a href=\"#子绝父相-子元素-margin-auto\" class=\"headerlink\" title=\"子绝父相 + 子元素 margin:auto\"></a>子绝父相 + 子元素 margin:auto</h3><p>核心：子元素相对于父元素绝对定位，<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 都设为0，margi设为auto</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + Margin Auto\" src=\"https://codepen.io/JingW/embed/PLRYrz/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相-负margin\"><a href=\"#子绝父相-负margin\" class=\"headerlink\" title=\"子绝父相 + 负margin\"></a>子绝父相 + 负margin</h3><p>核心：子元素相对于父元素绝对定位，<code>top</code>、<code>left</code>设为50%，margin相对自身宽/高一半</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + 负Margin\" src=\"https://codepen.io/JingW/embed/oVqNvK/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相-translate\"><a href=\"#子绝父相-translate\" class=\"headerlink\" title=\"子绝父相 + translate\"></a>子绝父相 + translate</h3><p>核心：子元素相对于父元素绝对定位，<code>top</code>、<code>left</code>设为50%，此时子元素左上角在父元素中心，然后让子元素向左上角位移自身宽度的一半</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + translate\" src=\"https://codepen.io/JingW/embed/EMExjr/?height=456&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h3><p>父元素 <code>display: flex</code>，<code>justify-content</code> 和 <code>align-items</code> 都设为 center 实现垂直居中</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - flex\" src=\"https://codepen.io/JingW/embed/rRdNyo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n","site":{"data":{}},"excerpt":"<p>这里汇总了常见的元素居中方案。</p>\n<h2 id=\"水平居中\"><a href=\"#水平居中\" class=\"headerlink\" title=\"水平居中\"></a>水平居中</h2><h3 id=\"行内元素水平居中\"><a href=\"#行内元素水平居中\" class=\"headerlink\" title=\"行内元素水平居中\"></a>行内元素水平居中</h3><p>核心：给父元素添加 <code>text-align: center</code></p>\n<iframe height=\"265\" scrolling=\"no\" title=\"行内元素水平居中\" src=\"https://codepen.io/JingW/embed/mvaNXw/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>","more":"<h3 id=\"块级元素水平居中\"><a href=\"#块级元素水平居中\" class=\"headerlink\" title=\"块级元素水平居中\"></a>块级元素水平居中</h3><p>核心：子元素自身 <code>margin: 0 auto;</code></p>\n<iframe height=\"291\" scrolling=\"no\" title=\"块元素水平居中\" src=\"https://codepen.io/JingW/embed/moxbxb/?height=291&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"多个div水平居中\"><a href=\"#多个div水平居中\" class=\"headerlink\" title=\"多个div水平居中\"></a>多个div水平居中</h3><h4 id=\"传统方案\"><a href=\"#传统方案\" class=\"headerlink\" title=\"传统方案\"></a>传统方案</h4><p>核心：父元素设置 <code>text-align: center</code> ，子元素设置 <code>inline-block</code></p>\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中 - 传统方案\" src=\"https://codepen.io/JingW/embed/KEoPGq/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h4 id=\"Flex方案\"><a href=\"#Flex方案\" class=\"headerlink\" title=\"Flex方案\"></a>Flex方案</h4><p>核心：父元素 <code>display: flex</code> + <code>justify-content: center</code> + <code>align-items: center</code></p>\n<iframe height=\"265\" scrolling=\"no\" title=\"多个div水平居中-flex\" src=\"https://codepen.io/JingW/embed/XGEroY/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h2 id=\"水平垂直居中\"><a href=\"#水平垂直居中\" class=\"headerlink\" title=\"水平垂直居中\"></a>水平垂直居中</h2><h3 id=\"table自带水平垂直居中\"><a href=\"#table自带水平垂直居中\" class=\"headerlink\" title=\"table自带水平垂直居中\"></a>table自带水平垂直居中</h3><p>核心：使用 <code>table&gt;tr&gt;td</code> 布局</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - table\" src=\"https://codepen.io/JingW/embed/xBWxwe/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"模拟table\"><a href=\"#模拟table\" class=\"headerlink\" title=\"模拟table\"></a>模拟table</h3><p>核心：父元素 <code>display: table</code> ，子元素 <code>display: table-cell</code> + <code>vertical-align: middle</code></p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 模拟table\" src=\"https://codepen.io/JingW/embed/aMYbZx/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相-子元素-margin-auto\"><a href=\"#子绝父相-子元素-margin-auto\" class=\"headerlink\" title=\"子绝父相 + 子元素 margin:auto\"></a>子绝父相 + 子元素 margin:auto</h3><p>核心：子元素相对于父元素绝对定位，<code>top</code>、<code>right</code>、<code>bottom</code>、<code>left</code> 都设为0，margi设为auto</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + Margin Auto\" src=\"https://codepen.io/JingW/embed/PLRYrz/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相-负margin\"><a href=\"#子绝父相-负margin\" class=\"headerlink\" title=\"子绝父相 + 负margin\"></a>子绝父相 + 负margin</h3><p>核心：子元素相对于父元素绝对定位，<code>top</code>、<code>left</code>设为50%，margin相对自身宽/高一半</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + 负Margin\" src=\"https://codepen.io/JingW/embed/oVqNvK/?height=460&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"子绝父相-translate\"><a href=\"#子绝父相-translate\" class=\"headerlink\" title=\"子绝父相 + translate\"></a>子绝父相 + translate</h3><p>核心：子元素相对于父元素绝对定位，<code>top</code>、<code>left</code>设为50%，此时子元素左上角在父元素中心，然后让子元素向左上角位移自身宽度的一半</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - 子绝父相 + translate\" src=\"https://codepen.io/JingW/embed/EMExjr/?height=456&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<h3 id=\"Flex布局\"><a href=\"#Flex布局\" class=\"headerlink\" title=\"Flex布局\"></a>Flex布局</h3><p>父元素 <code>display: flex</code>，<code>justify-content</code> 和 <code>align-items</code> 都设为 center 实现垂直居中</p>\n<iframe height=\"460\" scrolling=\"no\" title=\"div水平垂直居中 - flex\" src=\"https://codepen.io/JingW/embed/rRdNyo/?height=265&amp;theme-id=0&amp;default-tab=css,result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>"},{"title":"【转载】大屏上的全屏页面的自适应适配方案","abbrlink":61674,"date":"2020-11-22T13:59:35.000Z","_content":"\n转载自：https://www.njleonzhang.com/2018/08/15/flexible-pc-full-screen.html\n\n通常来说PC端的页面并不像移动端页面那样对屏幕大小和分别率有那么强的依赖。一般的页面都是取屏幕中间的一块宽度(1280px), 两边留白, 高度随着内容的长度滚动。这样无论窗口怎么变化，页面都是可用的。比如，我们的这个页面. 然而也有少数的页面，天生就是要在 pc 端全屏显示的，其中最为典型的代表就是全屏的 dashboard 页面。比如：\n\n当然，如果 dashboard 页面是内嵌在一些管理页面里的，通常是允许滚动的。\n\n{% asset_img ba7c9abd-2f10-3890-cfed-f8c389248b53.png admin_dashboard %}\n\n但是，如果 dashboard 是用于官方宣传，比如在电视机或者广告屏上的展示的时候，通常是不允许滚动条出现的。比如:\n\n{% asset_img 0349a840-ed31-06be-207c-e748883522b7.png 天猫 %}\n\n<!-- more -->\n\n> 这种 dashboard 有个帅气的名字叫数据可视化。\n\n## 通常的做法\n\n为了实现全屏的这种 dashboard, 通常的做法就是要对宽度和高度都做百分比（网格）来实现了。但是这种方案的缺点在于:\n\n- 实现太麻烦。设计师给的设计稿通常是 px 为单位标注的，我们需要仔细的计算宽度和高度的比例，然后小心处理页面的布局。\n- 难以处理屏幕宽高比与设计图不符时，带来的元素变形。所以最后展示的屏幕不能和设计稿的屏幕的宽高比差距太大。\n\n比如，下面这个简单的页面就是用百分比方案来做的。设计师给的图的比例为 16: 9。\n\n{% asset_img 16-9.png 16:9 %}\n\n{% asset_img 1-1.png 1:1 %}\n\n当窗口比例是 16 : 9 的时候黄色的长方形显示符合设计，当窗口变成正方形的时候，黄色部分也跟着变方了，这必然会影响显示效果。\n\n可以在浏览器中打开，改变窗口大小页面来体验这个[百分比方案](https://quellingblade.github.io/postcss-px-to-rem/percent.html)。\n\n## 理想的效果\n\n我心目中的理想效果可能是像下面这个页面一样，无论窗口怎么变，我们的内容都保持原来的比例，并尽量占满窗口（类似 background contain 的效果）。\n\n- 屏幕尺寸和设计稿比例(16:9)一致时，占满屏幕\n\n{% asset_img full-screen.png full-screen %}\n\n- 屏幕尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持16：9\n\n{% asset_img square.png square %}\n\n- 屏幕尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持16：9\n\n{% asset_img 600-300.png 600:300 %}\n\n可以在浏览器中打开，改变窗口大小页面来体验这个[flexible方案](https://quellingblade.github.io/postcss-px-to-rem/percent.html)\n\n## rem 方案\n\n熟悉移动端的自适应方案的朋友对 rem 适应方案，肯定不陌生，最出名的就是阿里的 [lib-flexible](https://github.com/amfe/lib-flexible) 方案。可能你已经猜到，本文的这个方案肯定也是基于 rem 的。\n\nrem (font size of the root element), 是 css3 的引入的一个大小单位。即相对于根元素的 font-size 值的大小。所谓根元素在网页里一般就是 html. 举例说明：下例中，`html 的 font-size 大小`是 20px, 那么 1.4rem 和 2.4 rem 就分别代表着 28px 和 48px 了。\n\n```css\nhtml { font-size: 20px; }\ntest1 {\n  width: 1.4rem; //1.4 × 20px = 28px\n}\ntest2 {\n  height: 2.4rem; //2.4 × 20px = 48px\n}\n```\n\n假设我们的设计稿其尺寸为 1920 * 1280 px，并且实际运行这个网页的屏幕分别率也是 1920 * 1280. 那么，这网页就好做了。简单粗暴地，按图中的元素的尺寸和位置，直接利用绝对定位把所有元素撸出来就行了。比如，设计稿中有这样一个元素:\n\n```css\n.doughnut {\n  top: 150px;\n  left: 30px;\n  width: 400px;\n  height: 300px;\n}\n```\n\n这不刚介绍了 rem, 我们试着用 rem 为单位来写一下 `doughnut` 元素的 css。我们把页面的 html 元素的 font-size 设置为 1920 / 10 = 192 px. 那么 `doughnut` 这个元素就应该写作：\n\n```css\n.doughnut {\n  top:  .781rem;     // 150 / 192 = 0.781\n  left: .156rem;     // 30  / 192 = 0.156\n  width: 2.083rem;   // 400 / 192 = 2.083\n  height: 1.563rem;  // 300 / 192 = 1.564\n}\n```\n\n恩。。。。这不是有病么？算成 rem，然后设置一下 html 的 font-size 让浏览器再算回去？显摆自己的数学好么？23333。\n\n注意上上面有一个假设，**屏幕大小正好是 1920 \\* 1280**。这个假设真的很假，根本不可能，一旦用了 px，那么一切长宽都死了。这时你再看一眼 rem，真实的长度为：\n\n```css\n  实际长度(px) = rootFontSize (html 的 font-size) * rem 长度\n```\n\n那么这个实际长度必然有一下特点：\n\n- 所有长度的比例必然和设计图一致。\n- 实际的显示长度完全由 `html 的 font-size` 值决定（线性关系）。\n\n我们来证明一下：\n\n> 设：设计稿上有任一1条线: A, A 的长度为 xx, `计算 rem 值的基准`为 zz\n> 那么 css 里，A 的长度表示为 xzxz (rem)\n>\n> 设网页运行时的 html 的 font-size 值为 fsfs，\n>\n> 那么 A 的实际显示长度就分为 xfszxfsz (px)\n>\n> 所以：\n>\n> 1. 对于任意2条线，其实际长度的比例为 x1fszx1fsz ： x2fszx2fsz 就等于 他们在设计图上的比例 x1x1 : x2x2\n> 2. 对于任意一条线，xx 和 zz 是固定值，其实际值随着 fsfs 值线性关系变化的\n\n我们取设计图的边框的4条线来分析, 那么`设计稿`，`真实显示（画布）`和 `显示窗口（全屏时，即为屏幕）`的关系如下图所示:\n\n{% asset_img 70ef9642-13d0-a15c-ff25-23feaef1029b.png 70ef9642-13d0-a15c-ff25-23feaef1029b %}\n\n- 设计稿的宽高分别为 axax 和 ayay, 比例为 xx : yy.\n- 实际显示的范围（我们称其为画布）比例和设计稿保持一致，所以可以设实际显示的画布的宽高为bx:bybx:by, 且所有线的实际显示长度是由 `html 的 font-size 值` fsfs 线性决定的。\n- 屏幕的尺寸不确定，假设其宽度为 ww, 高度为 hh\n\n> 小结一下，用了上面提到的 rem 来方案后，我们做出来的页面是一个**和设计稿比例一致的**，并且**大小根据网页运行时的 html 的 font-size的值缩放**的页面。\n\n既然页面的大小可以按**html 的 font-size的值**缩放，那么如果我希望**画布的实际显示宽度**始终和**浏览器窗口宽度**保持一致的话（即下图这样的状态），**html 的 font-size的值**应该如何设置呢？\n\n{% asset_img 19e45d16-534a-9ac3-578c-83bb3f01b45f.png 19e45d16-534a-9ac3-578c-83bb3f01b45f %}\n\n我们假设 `计算 rem 值的基准` 为设计稿宽度的 1q1q:\n\n> 假设，设计稿窗口宽为 axax，高为 ayay, 则`计算 rem 值的基准` zz 为 axqaxq\n>\n> 那么按上面的公式，浏览器中画布实际的\n> 宽度为 axfsaxq=fsqaxfsaxq=fsq，\n> 高度为 ayfsaxq=qyfsxayfsaxq=qyfsx\n>\n> 浏览器窗口的宽度 ww 要等于画布实际的宽度，即 w=fsqw=fsq，则 fs=wqfs=wq\n\n好的，从数学回到我们的工程中来，我们的设计稿尺寸是 1920 * 1280。我们取 qq 这个值为 10, 则 `计算 rem 值的基准` zz 为 axq=192010=192axq=192010=192. 然后我们把**所有元素的长、宽、位置、字体大小等原来 `px` 单位都转换成 rem**，网页加载后，我们**用 js 去计算当前浏览器窗口的宽度，并设置 `html 的 font-size` fsfs 为`当前浏览器窗口的宽度` ww 的 1q1q，即 w10w10，这样我们就做出了一个100%宽度的、等比例缩放设计稿的页面**了。\n\n> 通过这样的设置，我就得到了一个**和设计稿比例一致的**，**宽度与窗口大小一致**的页面。\n\n到此为止，就是现有 rem 方案的核心内容了。\n\n说了半天，都是别人的方案，读者可能会问了，那博主你干了啥？\n\n## 我的方案\n\n回头想一下，我们要的是什么？现在这个方案，能满足我们的要求么？我们来逐条分析：\n\n- 屏幕（窗口）尺寸和设计稿比例(x:yx:y)一致时，占满屏幕\n\n{% asset_img 327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png 327c8e32-cb68-0615-fa7f-b0bbec3dc4f1 %}\n\n这种情况肯定没问题，屏幕和真实页面完美重合.\n\n- 屏幕（窗口）尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持(x:yx:y)\n\n{% asset_img 19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png 19e45d16-534a-9ac3-578c-83bb3f01b45f(1) %}\n\n这种情况也没问题，真实页面高度小于屏幕，然后页面内容上下居中就可以了。\n\n- 屏幕（窗口）尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持(x:yx:y)\n\n{% asset_img c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4 %}\n\n问题出现了，在这种场景下，页面的高度超出了屏幕的高度，这就会导致垂直滚动条了。这就是我的方案处理的地方了。在这种场景下，我们需要页面的高度缩小为屏幕的高度，当然为了保持比例页面的宽度等也要等比例缩小.换句话说我们要把所有的线的长度等比例缩小，缩小后画布的高度要等于屏幕的高度，即下图所示的状态:\n\n{% asset_img d312b3ec-ded3-746f-9e59-7daa68811f30.png d312b3ec-ded3-746f-9e59-7daa68811f30 %}\n\n要等比例缩小所有的长度，那么操作 `html 的 font-size` fsfs 的值就能做到了。我们上面的分析中，我们已经计算了页面（画布）的真实高度\n\n> 那么按上面的公式，浏览器中页面（画布）的真实\n> 高度为 ayfsaxq=qyfsx\n\n在此场景下，我们需要把画布真实高度值缩小到屏幕的高度,\n\n> 设窗口的高度为 hh,\n> 设缩小比例为 ss, 则有 h=qyfsxsh=qyfsxs, 得 s=xhqyfss=xhqyfs\n> 即我们需要在页面（画布）真实高度上 qyfsxqyfsx 乘上个缩小系数 xhqyfsxhqyfs，可以使 页面（画布）的真是高等于窗口的高度了\n> 又因为 fs=wqfs=wq, 则这个缩小系数可变换为:\n> xhqywq=xhyw=xy/whxhqywq=xhyw=xy/wh, 即 设计稿宽高比窗口宽高比\n\nBingo. 综上可知: 当窗口尺寸比设计图比例胖时，只要我们在原来 fsfs 值的基础上，乘上 设计稿宽高比窗口宽高比设计稿宽高比窗口宽高比 的缩小系数，就可以实现我们想要的效果了。\n\n## 工程应用\n\n好了，前面的理论，你看着头疼，我写着更头疼。终于到了喜闻乐见的运用环节了。\n\n按照前面的一顿操作，应用这个方案，我们需要做2件事: （以设计稿的尺寸为 1920 * 1280 为例）\n\n1. 在 css 表示长度的时候，用设计稿上的长度除以 192, 算得 rem 的值。\n2. 页面内写一段 js 代码，根据我们上面的公式去计算并设置 `html 元素的 font-size` 值。\n\n关于第1点：如果告诉你所有的长度你要自己算。。。可能这个方案马上就没人用了，因为真的要算死人。参照 [lib-flexible](https://github.com/amfe/lib-flexible) 的方案，我写了一个 [post-css 插件](https://github.com/QuellingBlade/postcss-px-to-rem)来帮助你做这个计算，效果就是你不用算了，图上是多少长度，你写多少就行了，这个 rem 的转换由[插件](https://github.com/QuellingBlade/postcss-px-to-rem)完成。\n\n关于第2点：这段 js 代码我已经为你写好了 [lib-flexible-for-dashboard](https://github.com/QuellingBlade/lib-flexible-for-dashboard), 直接嵌入你的 html 里就行。考虑到这段 js 代码，会计算 font-size 的值，这个值会决定所有的长度，所以这个值要优先计算出来，最好的方案就是把这段代码拷贝到 html 的 head 里去（这个操作被称为 inline）. 为了方便你使用webpack 和 npm 管理这个库，我们还为你准备了一个 [webpack 插件](https://github.com/QuellingBlade/html-webpack-inline-plugin)，帮助你去做 inline.\n\n## 示例\n\n> talk is cheap, show me the [code](https://github.com/njleonzhang/flexible-pc-full-screen)\n\n设计稿是这样的一个 1920 * 1280（16：9）的图:\n\n{% asset_img 562e47bd-abda-dae4-7765-68706b5a978e.png 562e47bd-abda-dae4-7765-68706b5a978e %}\n\n实现的[效果]在这：http://www.njleonzhang.com/flexible-pc-full-screen/\n\n## 总结\n\n我是站在巨人的肩膀上，针对全屏 pc 页面这一特别场景做出了一个个人比较满意的方案，希望能给有需要的朋友一些帮助。\n\n相关项目：\n\n- https://github.com/njleonzhang/flexible-pc-full-screen\n- https://github.com/QuellingBlade/postcss-px-to-rem\n- https://github.com/QuellingBlade/lib-flexible-for-dashboard\n- https://github.com/QuellingBlade/html-webpack-inline-plugin","source":"_posts/大屏上的全屏页面的自适应适配方案.md","raw":"---\ntitle: 【转载】大屏上的全屏页面的自适应适配方案\ntags:\n  - 转载\n  - 大屏\ncategories:\n  - 前端\n  - CSS\nabbrlink: 61674\ndate: 2020-11-22 21:59:35\n---\n\n转载自：https://www.njleonzhang.com/2018/08/15/flexible-pc-full-screen.html\n\n通常来说PC端的页面并不像移动端页面那样对屏幕大小和分别率有那么强的依赖。一般的页面都是取屏幕中间的一块宽度(1280px), 两边留白, 高度随着内容的长度滚动。这样无论窗口怎么变化，页面都是可用的。比如，我们的这个页面. 然而也有少数的页面，天生就是要在 pc 端全屏显示的，其中最为典型的代表就是全屏的 dashboard 页面。比如：\n\n当然，如果 dashboard 页面是内嵌在一些管理页面里的，通常是允许滚动的。\n\n{% asset_img ba7c9abd-2f10-3890-cfed-f8c389248b53.png admin_dashboard %}\n\n但是，如果 dashboard 是用于官方宣传，比如在电视机或者广告屏上的展示的时候，通常是不允许滚动条出现的。比如:\n\n{% asset_img 0349a840-ed31-06be-207c-e748883522b7.png 天猫 %}\n\n<!-- more -->\n\n> 这种 dashboard 有个帅气的名字叫数据可视化。\n\n## 通常的做法\n\n为了实现全屏的这种 dashboard, 通常的做法就是要对宽度和高度都做百分比（网格）来实现了。但是这种方案的缺点在于:\n\n- 实现太麻烦。设计师给的设计稿通常是 px 为单位标注的，我们需要仔细的计算宽度和高度的比例，然后小心处理页面的布局。\n- 难以处理屏幕宽高比与设计图不符时，带来的元素变形。所以最后展示的屏幕不能和设计稿的屏幕的宽高比差距太大。\n\n比如，下面这个简单的页面就是用百分比方案来做的。设计师给的图的比例为 16: 9。\n\n{% asset_img 16-9.png 16:9 %}\n\n{% asset_img 1-1.png 1:1 %}\n\n当窗口比例是 16 : 9 的时候黄色的长方形显示符合设计，当窗口变成正方形的时候，黄色部分也跟着变方了，这必然会影响显示效果。\n\n可以在浏览器中打开，改变窗口大小页面来体验这个[百分比方案](https://quellingblade.github.io/postcss-px-to-rem/percent.html)。\n\n## 理想的效果\n\n我心目中的理想效果可能是像下面这个页面一样，无论窗口怎么变，我们的内容都保持原来的比例，并尽量占满窗口（类似 background contain 的效果）。\n\n- 屏幕尺寸和设计稿比例(16:9)一致时，占满屏幕\n\n{% asset_img full-screen.png full-screen %}\n\n- 屏幕尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持16：9\n\n{% asset_img square.png square %}\n\n- 屏幕尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持16：9\n\n{% asset_img 600-300.png 600:300 %}\n\n可以在浏览器中打开，改变窗口大小页面来体验这个[flexible方案](https://quellingblade.github.io/postcss-px-to-rem/percent.html)\n\n## rem 方案\n\n熟悉移动端的自适应方案的朋友对 rem 适应方案，肯定不陌生，最出名的就是阿里的 [lib-flexible](https://github.com/amfe/lib-flexible) 方案。可能你已经猜到，本文的这个方案肯定也是基于 rem 的。\n\nrem (font size of the root element), 是 css3 的引入的一个大小单位。即相对于根元素的 font-size 值的大小。所谓根元素在网页里一般就是 html. 举例说明：下例中，`html 的 font-size 大小`是 20px, 那么 1.4rem 和 2.4 rem 就分别代表着 28px 和 48px 了。\n\n```css\nhtml { font-size: 20px; }\ntest1 {\n  width: 1.4rem; //1.4 × 20px = 28px\n}\ntest2 {\n  height: 2.4rem; //2.4 × 20px = 48px\n}\n```\n\n假设我们的设计稿其尺寸为 1920 * 1280 px，并且实际运行这个网页的屏幕分别率也是 1920 * 1280. 那么，这网页就好做了。简单粗暴地，按图中的元素的尺寸和位置，直接利用绝对定位把所有元素撸出来就行了。比如，设计稿中有这样一个元素:\n\n```css\n.doughnut {\n  top: 150px;\n  left: 30px;\n  width: 400px;\n  height: 300px;\n}\n```\n\n这不刚介绍了 rem, 我们试着用 rem 为单位来写一下 `doughnut` 元素的 css。我们把页面的 html 元素的 font-size 设置为 1920 / 10 = 192 px. 那么 `doughnut` 这个元素就应该写作：\n\n```css\n.doughnut {\n  top:  .781rem;     // 150 / 192 = 0.781\n  left: .156rem;     // 30  / 192 = 0.156\n  width: 2.083rem;   // 400 / 192 = 2.083\n  height: 1.563rem;  // 300 / 192 = 1.564\n}\n```\n\n恩。。。。这不是有病么？算成 rem，然后设置一下 html 的 font-size 让浏览器再算回去？显摆自己的数学好么？23333。\n\n注意上上面有一个假设，**屏幕大小正好是 1920 \\* 1280**。这个假设真的很假，根本不可能，一旦用了 px，那么一切长宽都死了。这时你再看一眼 rem，真实的长度为：\n\n```css\n  实际长度(px) = rootFontSize (html 的 font-size) * rem 长度\n```\n\n那么这个实际长度必然有一下特点：\n\n- 所有长度的比例必然和设计图一致。\n- 实际的显示长度完全由 `html 的 font-size` 值决定（线性关系）。\n\n我们来证明一下：\n\n> 设：设计稿上有任一1条线: A, A 的长度为 xx, `计算 rem 值的基准`为 zz\n> 那么 css 里，A 的长度表示为 xzxz (rem)\n>\n> 设网页运行时的 html 的 font-size 值为 fsfs，\n>\n> 那么 A 的实际显示长度就分为 xfszxfsz (px)\n>\n> 所以：\n>\n> 1. 对于任意2条线，其实际长度的比例为 x1fszx1fsz ： x2fszx2fsz 就等于 他们在设计图上的比例 x1x1 : x2x2\n> 2. 对于任意一条线，xx 和 zz 是固定值，其实际值随着 fsfs 值线性关系变化的\n\n我们取设计图的边框的4条线来分析, 那么`设计稿`，`真实显示（画布）`和 `显示窗口（全屏时，即为屏幕）`的关系如下图所示:\n\n{% asset_img 70ef9642-13d0-a15c-ff25-23feaef1029b.png 70ef9642-13d0-a15c-ff25-23feaef1029b %}\n\n- 设计稿的宽高分别为 axax 和 ayay, 比例为 xx : yy.\n- 实际显示的范围（我们称其为画布）比例和设计稿保持一致，所以可以设实际显示的画布的宽高为bx:bybx:by, 且所有线的实际显示长度是由 `html 的 font-size 值` fsfs 线性决定的。\n- 屏幕的尺寸不确定，假设其宽度为 ww, 高度为 hh\n\n> 小结一下，用了上面提到的 rem 来方案后，我们做出来的页面是一个**和设计稿比例一致的**，并且**大小根据网页运行时的 html 的 font-size的值缩放**的页面。\n\n既然页面的大小可以按**html 的 font-size的值**缩放，那么如果我希望**画布的实际显示宽度**始终和**浏览器窗口宽度**保持一致的话（即下图这样的状态），**html 的 font-size的值**应该如何设置呢？\n\n{% asset_img 19e45d16-534a-9ac3-578c-83bb3f01b45f.png 19e45d16-534a-9ac3-578c-83bb3f01b45f %}\n\n我们假设 `计算 rem 值的基准` 为设计稿宽度的 1q1q:\n\n> 假设，设计稿窗口宽为 axax，高为 ayay, 则`计算 rem 值的基准` zz 为 axqaxq\n>\n> 那么按上面的公式，浏览器中画布实际的\n> 宽度为 axfsaxq=fsqaxfsaxq=fsq，\n> 高度为 ayfsaxq=qyfsxayfsaxq=qyfsx\n>\n> 浏览器窗口的宽度 ww 要等于画布实际的宽度，即 w=fsqw=fsq，则 fs=wqfs=wq\n\n好的，从数学回到我们的工程中来，我们的设计稿尺寸是 1920 * 1280。我们取 qq 这个值为 10, 则 `计算 rem 值的基准` zz 为 axq=192010=192axq=192010=192. 然后我们把**所有元素的长、宽、位置、字体大小等原来 `px` 单位都转换成 rem**，网页加载后，我们**用 js 去计算当前浏览器窗口的宽度，并设置 `html 的 font-size` fsfs 为`当前浏览器窗口的宽度` ww 的 1q1q，即 w10w10，这样我们就做出了一个100%宽度的、等比例缩放设计稿的页面**了。\n\n> 通过这样的设置，我就得到了一个**和设计稿比例一致的**，**宽度与窗口大小一致**的页面。\n\n到此为止，就是现有 rem 方案的核心内容了。\n\n说了半天，都是别人的方案，读者可能会问了，那博主你干了啥？\n\n## 我的方案\n\n回头想一下，我们要的是什么？现在这个方案，能满足我们的要求么？我们来逐条分析：\n\n- 屏幕（窗口）尺寸和设计稿比例(x:yx:y)一致时，占满屏幕\n\n{% asset_img 327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png 327c8e32-cb68-0615-fa7f-b0bbec3dc4f1 %}\n\n这种情况肯定没问题，屏幕和真实页面完美重合.\n\n- 屏幕（窗口）尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持(x:yx:y)\n\n{% asset_img 19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png 19e45d16-534a-9ac3-578c-83bb3f01b45f(1) %}\n\n这种情况也没问题，真实页面高度小于屏幕，然后页面内容上下居中就可以了。\n\n- 屏幕（窗口）尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持(x:yx:y)\n\n{% asset_img c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4 %}\n\n问题出现了，在这种场景下，页面的高度超出了屏幕的高度，这就会导致垂直滚动条了。这就是我的方案处理的地方了。在这种场景下，我们需要页面的高度缩小为屏幕的高度，当然为了保持比例页面的宽度等也要等比例缩小.换句话说我们要把所有的线的长度等比例缩小，缩小后画布的高度要等于屏幕的高度，即下图所示的状态:\n\n{% asset_img d312b3ec-ded3-746f-9e59-7daa68811f30.png d312b3ec-ded3-746f-9e59-7daa68811f30 %}\n\n要等比例缩小所有的长度，那么操作 `html 的 font-size` fsfs 的值就能做到了。我们上面的分析中，我们已经计算了页面（画布）的真实高度\n\n> 那么按上面的公式，浏览器中页面（画布）的真实\n> 高度为 ayfsaxq=qyfsx\n\n在此场景下，我们需要把画布真实高度值缩小到屏幕的高度,\n\n> 设窗口的高度为 hh,\n> 设缩小比例为 ss, 则有 h=qyfsxsh=qyfsxs, 得 s=xhqyfss=xhqyfs\n> 即我们需要在页面（画布）真实高度上 qyfsxqyfsx 乘上个缩小系数 xhqyfsxhqyfs，可以使 页面（画布）的真是高等于窗口的高度了\n> 又因为 fs=wqfs=wq, 则这个缩小系数可变换为:\n> xhqywq=xhyw=xy/whxhqywq=xhyw=xy/wh, 即 设计稿宽高比窗口宽高比\n\nBingo. 综上可知: 当窗口尺寸比设计图比例胖时，只要我们在原来 fsfs 值的基础上，乘上 设计稿宽高比窗口宽高比设计稿宽高比窗口宽高比 的缩小系数，就可以实现我们想要的效果了。\n\n## 工程应用\n\n好了，前面的理论，你看着头疼，我写着更头疼。终于到了喜闻乐见的运用环节了。\n\n按照前面的一顿操作，应用这个方案，我们需要做2件事: （以设计稿的尺寸为 1920 * 1280 为例）\n\n1. 在 css 表示长度的时候，用设计稿上的长度除以 192, 算得 rem 的值。\n2. 页面内写一段 js 代码，根据我们上面的公式去计算并设置 `html 元素的 font-size` 值。\n\n关于第1点：如果告诉你所有的长度你要自己算。。。可能这个方案马上就没人用了，因为真的要算死人。参照 [lib-flexible](https://github.com/amfe/lib-flexible) 的方案，我写了一个 [post-css 插件](https://github.com/QuellingBlade/postcss-px-to-rem)来帮助你做这个计算，效果就是你不用算了，图上是多少长度，你写多少就行了，这个 rem 的转换由[插件](https://github.com/QuellingBlade/postcss-px-to-rem)完成。\n\n关于第2点：这段 js 代码我已经为你写好了 [lib-flexible-for-dashboard](https://github.com/QuellingBlade/lib-flexible-for-dashboard), 直接嵌入你的 html 里就行。考虑到这段 js 代码，会计算 font-size 的值，这个值会决定所有的长度，所以这个值要优先计算出来，最好的方案就是把这段代码拷贝到 html 的 head 里去（这个操作被称为 inline）. 为了方便你使用webpack 和 npm 管理这个库，我们还为你准备了一个 [webpack 插件](https://github.com/QuellingBlade/html-webpack-inline-plugin)，帮助你去做 inline.\n\n## 示例\n\n> talk is cheap, show me the [code](https://github.com/njleonzhang/flexible-pc-full-screen)\n\n设计稿是这样的一个 1920 * 1280（16：9）的图:\n\n{% asset_img 562e47bd-abda-dae4-7765-68706b5a978e.png 562e47bd-abda-dae4-7765-68706b5a978e %}\n\n实现的[效果]在这：http://www.njleonzhang.com/flexible-pc-full-screen/\n\n## 总结\n\n我是站在巨人的肩膀上，针对全屏 pc 页面这一特别场景做出了一个个人比较满意的方案，希望能给有需要的朋友一些帮助。\n\n相关项目：\n\n- https://github.com/njleonzhang/flexible-pc-full-screen\n- https://github.com/QuellingBlade/postcss-px-to-rem\n- https://github.com/QuellingBlade/lib-flexible-for-dashboard\n- https://github.com/QuellingBlade/html-webpack-inline-plugin","slug":"大屏上的全屏页面的自适应适配方案","published":1,"updated":"2020-11-22T14:28:36.465Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfy004mkhsr9zgj8mk9","content":"<p>转载自：<a href=\"https://www.njleonzhang.com/2018/08/15/flexible-pc-full-screen.html\">https://www.njleonzhang.com/2018/08/15/flexible-pc-full-screen.html</a></p>\n<p>通常来说PC端的页面并不像移动端页面那样对屏幕大小和分别率有那么强的依赖。一般的页面都是取屏幕中间的一块宽度(1280px), 两边留白, 高度随着内容的长度滚动。这样无论窗口怎么变化，页面都是可用的。比如，我们的这个页面. 然而也有少数的页面，天生就是要在 pc 端全屏显示的，其中最为典型的代表就是全屏的 dashboard 页面。比如：</p>\n<p>当然，如果 dashboard 页面是内嵌在一些管理页面里的，通常是允许滚动的。</p>\n<img src=\"/posts/61674/ba7c9abd-2f10-3890-cfed-f8c389248b53.png\" class=\"\" title=\"admin_dashboard\">\n\n<p>但是，如果 dashboard 是用于官方宣传，比如在电视机或者广告屏上的展示的时候，通常是不允许滚动条出现的。比如:</p>\n<img src=\"/posts/61674/0349a840-ed31-06be-207c-e748883522b7.png\" class=\"\" title=\"天猫\">\n\n<a id=\"more\"></a>\n\n<blockquote>\n<p>这种 dashboard 有个帅气的名字叫数据可视化。</p>\n</blockquote>\n<h2 id=\"通常的做法\"><a href=\"#通常的做法\" class=\"headerlink\" title=\"通常的做法\"></a>通常的做法</h2><p>为了实现全屏的这种 dashboard, 通常的做法就是要对宽度和高度都做百分比（网格）来实现了。但是这种方案的缺点在于:</p>\n<ul>\n<li>实现太麻烦。设计师给的设计稿通常是 px 为单位标注的，我们需要仔细的计算宽度和高度的比例，然后小心处理页面的布局。</li>\n<li>难以处理屏幕宽高比与设计图不符时，带来的元素变形。所以最后展示的屏幕不能和设计稿的屏幕的宽高比差距太大。</li>\n</ul>\n<p>比如，下面这个简单的页面就是用百分比方案来做的。设计师给的图的比例为 16: 9。</p>\n<img src=\"/posts/61674/16-9.png\" class=\"\" title=\"16:9\">\n\n<img src=\"/posts/61674/1-1.png\" class=\"\" title=\"1:1\">\n\n<p>当窗口比例是 16 : 9 的时候黄色的长方形显示符合设计，当窗口变成正方形的时候，黄色部分也跟着变方了，这必然会影响显示效果。</p>\n<p>可以在浏览器中打开，改变窗口大小页面来体验这个<a href=\"https://quellingblade.github.io/postcss-px-to-rem/percent.html\">百分比方案</a>。</p>\n<h2 id=\"理想的效果\"><a href=\"#理想的效果\" class=\"headerlink\" title=\"理想的效果\"></a>理想的效果</h2><p>我心目中的理想效果可能是像下面这个页面一样，无论窗口怎么变，我们的内容都保持原来的比例，并尽量占满窗口（类似 background contain 的效果）。</p>\n<ul>\n<li>屏幕尺寸和设计稿比例(16:9)一致时，占满屏幕</li>\n</ul>\n<img src=\"/posts/61674/full-screen.png\" class=\"\" title=\"full-screen\">\n\n<ul>\n<li>屏幕尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持16：9</li>\n</ul>\n<img src=\"/posts/61674/square.png\" class=\"\" title=\"square\">\n\n<ul>\n<li>屏幕尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持16：9</li>\n</ul>\n<img src=\"/posts/61674/600-300.png\" class=\"\" title=\"600:300\">\n\n<p>可以在浏览器中打开，改变窗口大小页面来体验这个<a href=\"https://quellingblade.github.io/postcss-px-to-rem/percent.html\">flexible方案</a></p>\n<h2 id=\"rem-方案\"><a href=\"#rem-方案\" class=\"headerlink\" title=\"rem 方案\"></a>rem 方案</h2><p>熟悉移动端的自适应方案的朋友对 rem 适应方案，肯定不陌生，最出名的就是阿里的 <a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 方案。可能你已经猜到，本文的这个方案肯定也是基于 rem 的。</p>\n<p>rem (font size of the root element), 是 css3 的引入的一个大小单位。即相对于根元素的 font-size 值的大小。所谓根元素在网页里一般就是 html. 举例说明：下例中，<code>html 的 font-size 大小</code>是 20px, 那么 1.4rem 和 2.4 rem 就分别代表着 28px 和 48px 了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">test1</span> &#123;</span><br><span class=\"line\">  width: 1.4rem; //1.4 × 20px = 28px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">test2</span> &#123;</span><br><span class=\"line\">  height: 2.4rem; //2.4 × 20px = 48px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设我们的设计稿其尺寸为 1920 * 1280 px，并且实际运行这个网页的屏幕分别率也是 1920 * 1280. 那么，这网页就好做了。简单粗暴地，按图中的元素的尺寸和位置，直接利用绝对定位把所有元素撸出来就行了。比如，设计稿中有这样一个元素:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.doughnut</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这不刚介绍了 rem, 我们试着用 rem 为单位来写一下 <code>doughnut</code> 元素的 css。我们把页面的 html 元素的 font-size 设置为 1920 / 10 = 192 px. 那么 <code>doughnut</code> 这个元素就应该写作：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.doughnut</span> &#123;</span><br><span class=\"line\">  top:  .781rem;     // 150 / 192 = 0.781</span><br><span class=\"line\">  left: .156rem;     // 30  / 192 = 0.156</span><br><span class=\"line\">  width: 2.083rem;   // 400 / 192 = 2.083</span><br><span class=\"line\">  height: 1.563rem;  // 300 / 192 = 1.564</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>恩。。。。这不是有病么？算成 rem，然后设置一下 html 的 font-size 让浏览器再算回去？显摆自己的数学好么？23333。</p>\n<p>注意上上面有一个假设，<strong>屏幕大小正好是 1920 * 1280</strong>。这个假设真的很假，根本不可能，一旦用了 px，那么一切长宽都死了。这时你再看一眼 rem，真实的长度为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实际长度(px) = rootFontSize (html 的 font-size) * rem 长度</span><br></pre></td></tr></table></figure>\n\n<p>那么这个实际长度必然有一下特点：</p>\n<ul>\n<li>所有长度的比例必然和设计图一致。</li>\n<li>实际的显示长度完全由 <code>html 的 font-size</code> 值决定（线性关系）。</li>\n</ul>\n<p>我们来证明一下：</p>\n<blockquote>\n<p>设：设计稿上有任一1条线: A, A 的长度为 xx, <code>计算 rem 值的基准</code>为 zz<br>那么 css 里，A 的长度表示为 xzxz (rem)</p>\n<p>设网页运行时的 html 的 font-size 值为 fsfs，</p>\n<p>那么 A 的实际显示长度就分为 xfszxfsz (px)</p>\n<p>所以：</p>\n<ol>\n<li>对于任意2条线，其实际长度的比例为 x1fszx1fsz ： x2fszx2fsz 就等于 他们在设计图上的比例 x1x1 : x2x2</li>\n<li>对于任意一条线，xx 和 zz 是固定值，其实际值随着 fsfs 值线性关系变化的</li>\n</ol>\n</blockquote>\n<p>我们取设计图的边框的4条线来分析, 那么<code>设计稿</code>，<code>真实显示（画布）</code>和 <code>显示窗口（全屏时，即为屏幕）</code>的关系如下图所示:</p>\n<img src=\"/posts/61674/70ef9642-13d0-a15c-ff25-23feaef1029b.png\" class=\"\" title=\"70ef9642-13d0-a15c-ff25-23feaef1029b\">\n\n<ul>\n<li>设计稿的宽高分别为 axax 和 ayay, 比例为 xx : yy.</li>\n<li>实际显示的范围（我们称其为画布）比例和设计稿保持一致，所以可以设实际显示的画布的宽高为bx:bybx:by, 且所有线的实际显示长度是由 <code>html 的 font-size 值</code> fsfs 线性决定的。</li>\n<li>屏幕的尺寸不确定，假设其宽度为 ww, 高度为 hh</li>\n</ul>\n<blockquote>\n<p>小结一下，用了上面提到的 rem 来方案后，我们做出来的页面是一个<strong>和设计稿比例一致的</strong>，并且<strong>大小根据网页运行时的 html 的 font-size的值缩放</strong>的页面。</p>\n</blockquote>\n<p>既然页面的大小可以按<strong>html 的 font-size的值</strong>缩放，那么如果我希望<strong>画布的实际显示宽度</strong>始终和<strong>浏览器窗口宽度</strong>保持一致的话（即下图这样的状态），<strong>html 的 font-size的值</strong>应该如何设置呢？</p>\n<img src=\"/posts/61674/19e45d16-534a-9ac3-578c-83bb3f01b45f.png\" class=\"\" title=\"19e45d16-534a-9ac3-578c-83bb3f01b45f\">\n\n<p>我们假设 <code>计算 rem 值的基准</code> 为设计稿宽度的 1q1q:</p>\n<blockquote>\n<p>假设，设计稿窗口宽为 axax，高为 ayay, 则<code>计算 rem 值的基准</code> zz 为 axqaxq</p>\n<p>那么按上面的公式，浏览器中画布实际的<br>宽度为 axfsaxq=fsqaxfsaxq=fsq，<br>高度为 ayfsaxq=qyfsxayfsaxq=qyfsx</p>\n<p>浏览器窗口的宽度 ww 要等于画布实际的宽度，即 w=fsqw=fsq，则 fs=wqfs=wq</p>\n</blockquote>\n<p>好的，从数学回到我们的工程中来，我们的设计稿尺寸是 1920 * 1280。我们取 qq 这个值为 10, 则 <code>计算 rem 值的基准</code> zz 为 axq=192010=192axq=192010=192. 然后我们把<strong>所有元素的长、宽、位置、字体大小等原来 <code>px</code> 单位都转换成 rem</strong>，网页加载后，我们<strong>用 js 去计算当前浏览器窗口的宽度，并设置 <code>html 的 font-size</code> fsfs 为<code>当前浏览器窗口的宽度</code> ww 的 1q1q，即 w10w10，这样我们就做出了一个100%宽度的、等比例缩放设计稿的页面</strong>了。</p>\n<blockquote>\n<p>通过这样的设置，我就得到了一个<strong>和设计稿比例一致的</strong>，<strong>宽度与窗口大小一致</strong>的页面。</p>\n</blockquote>\n<p>到此为止，就是现有 rem 方案的核心内容了。</p>\n<p>说了半天，都是别人的方案，读者可能会问了，那博主你干了啥？</p>\n<h2 id=\"我的方案\"><a href=\"#我的方案\" class=\"headerlink\" title=\"我的方案\"></a>我的方案</h2><p>回头想一下，我们要的是什么？现在这个方案，能满足我们的要求么？我们来逐条分析：</p>\n<ul>\n<li>屏幕（窗口）尺寸和设计稿比例(x:yx:y)一致时，占满屏幕</li>\n</ul>\n<img src=\"/posts/61674/327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png\" class=\"\" title=\"327c8e32-cb68-0615-fa7f-b0bbec3dc4f1\">\n\n<p>这种情况肯定没问题，屏幕和真实页面完美重合.</p>\n<ul>\n<li>屏幕（窗口）尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持(x:yx:y)</li>\n</ul>\n<img src=\"/posts/61674/19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png\" class=\"\" title=\"19e45d16-534a-9ac3-578c-83bb3f01b45f(1)\">\n\n<p>这种情况也没问题，真实页面高度小于屏幕，然后页面内容上下居中就可以了。</p>\n<ul>\n<li>屏幕（窗口）尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持(x:yx:y)</li>\n</ul>\n<img src=\"/posts/61674/c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png\" class=\"\" title=\"c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4\">\n\n<p>问题出现了，在这种场景下，页面的高度超出了屏幕的高度，这就会导致垂直滚动条了。这就是我的方案处理的地方了。在这种场景下，我们需要页面的高度缩小为屏幕的高度，当然为了保持比例页面的宽度等也要等比例缩小.换句话说我们要把所有的线的长度等比例缩小，缩小后画布的高度要等于屏幕的高度，即下图所示的状态:</p>\n<img src=\"/posts/61674/d312b3ec-ded3-746f-9e59-7daa68811f30.png\" class=\"\" title=\"d312b3ec-ded3-746f-9e59-7daa68811f30\">\n\n<p>要等比例缩小所有的长度，那么操作 <code>html 的 font-size</code> fsfs 的值就能做到了。我们上面的分析中，我们已经计算了页面（画布）的真实高度</p>\n<blockquote>\n<p>那么按上面的公式，浏览器中页面（画布）的真实<br>高度为 ayfsaxq=qyfsx</p>\n</blockquote>\n<p>在此场景下，我们需要把画布真实高度值缩小到屏幕的高度,</p>\n<blockquote>\n<p>设窗口的高度为 hh,<br>设缩小比例为 ss, 则有 h=qyfsxsh=qyfsxs, 得 s=xhqyfss=xhqyfs<br>即我们需要在页面（画布）真实高度上 qyfsxqyfsx 乘上个缩小系数 xhqyfsxhqyfs，可以使 页面（画布）的真是高等于窗口的高度了<br>又因为 fs=wqfs=wq, 则这个缩小系数可变换为:<br>xhqywq=xhyw=xy/whxhqywq=xhyw=xy/wh, 即 设计稿宽高比窗口宽高比</p>\n</blockquote>\n<p>Bingo. 综上可知: 当窗口尺寸比设计图比例胖时，只要我们在原来 fsfs 值的基础上，乘上 设计稿宽高比窗口宽高比设计稿宽高比窗口宽高比 的缩小系数，就可以实现我们想要的效果了。</p>\n<h2 id=\"工程应用\"><a href=\"#工程应用\" class=\"headerlink\" title=\"工程应用\"></a>工程应用</h2><p>好了，前面的理论，你看着头疼，我写着更头疼。终于到了喜闻乐见的运用环节了。</p>\n<p>按照前面的一顿操作，应用这个方案，我们需要做2件事: （以设计稿的尺寸为 1920 * 1280 为例）</p>\n<ol>\n<li>在 css 表示长度的时候，用设计稿上的长度除以 192, 算得 rem 的值。</li>\n<li>页面内写一段 js 代码，根据我们上面的公式去计算并设置 <code>html 元素的 font-size</code> 值。</li>\n</ol>\n<p>关于第1点：如果告诉你所有的长度你要自己算。。。可能这个方案马上就没人用了，因为真的要算死人。参照 <a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 的方案，我写了一个 <a href=\"https://github.com/QuellingBlade/postcss-px-to-rem\">post-css 插件</a>来帮助你做这个计算，效果就是你不用算了，图上是多少长度，你写多少就行了，这个 rem 的转换由<a href=\"https://github.com/QuellingBlade/postcss-px-to-rem\">插件</a>完成。</p>\n<p>关于第2点：这段 js 代码我已经为你写好了 <a href=\"https://github.com/QuellingBlade/lib-flexible-for-dashboard\">lib-flexible-for-dashboard</a>, 直接嵌入你的 html 里就行。考虑到这段 js 代码，会计算 font-size 的值，这个值会决定所有的长度，所以这个值要优先计算出来，最好的方案就是把这段代码拷贝到 html 的 head 里去（这个操作被称为 inline）. 为了方便你使用webpack 和 npm 管理这个库，我们还为你准备了一个 <a href=\"https://github.com/QuellingBlade/html-webpack-inline-plugin\">webpack 插件</a>，帮助你去做 inline.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>talk is cheap, show me the <a href=\"https://github.com/njleonzhang/flexible-pc-full-screen\">code</a></p>\n</blockquote>\n<p>设计稿是这样的一个 1920 * 1280（16：9）的图:</p>\n<img src=\"/posts/61674/562e47bd-abda-dae4-7765-68706b5a978e.png\" class=\"\" title=\"562e47bd-abda-dae4-7765-68706b5a978e\">\n\n<p>实现的[效果]在这：<a href=\"http://www.njleonzhang.com/flexible-pc-full-screen/\">http://www.njleonzhang.com/flexible-pc-full-screen/</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我是站在巨人的肩膀上，针对全屏 pc 页面这一特别场景做出了一个个人比较满意的方案，希望能给有需要的朋友一些帮助。</p>\n<p>相关项目：</p>\n<ul>\n<li><a href=\"https://github.com/njleonzhang/flexible-pc-full-screen\">https://github.com/njleonzhang/flexible-pc-full-screen</a></li>\n<li><a href=\"https://github.com/QuellingBlade/postcss-px-to-rem\">https://github.com/QuellingBlade/postcss-px-to-rem</a></li>\n<li><a href=\"https://github.com/QuellingBlade/lib-flexible-for-dashboard\">https://github.com/QuellingBlade/lib-flexible-for-dashboard</a></li>\n<li><a href=\"https://github.com/QuellingBlade/html-webpack-inline-plugin\">https://github.com/QuellingBlade/html-webpack-inline-plugin</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>转载自：<a href=\"https://www.njleonzhang.com/2018/08/15/flexible-pc-full-screen.html\">https://www.njleonzhang.com/2018/08/15/flexible-pc-full-screen.html</a></p>\n<p>通常来说PC端的页面并不像移动端页面那样对屏幕大小和分别率有那么强的依赖。一般的页面都是取屏幕中间的一块宽度(1280px), 两边留白, 高度随着内容的长度滚动。这样无论窗口怎么变化，页面都是可用的。比如，我们的这个页面. 然而也有少数的页面，天生就是要在 pc 端全屏显示的，其中最为典型的代表就是全屏的 dashboard 页面。比如：</p>\n<p>当然，如果 dashboard 页面是内嵌在一些管理页面里的，通常是允许滚动的。</p>\n<img src=\"/posts/61674/ba7c9abd-2f10-3890-cfed-f8c389248b53.png\" class=\"\" title=\"admin_dashboard\">\n\n<p>但是，如果 dashboard 是用于官方宣传，比如在电视机或者广告屏上的展示的时候，通常是不允许滚动条出现的。比如:</p>\n<img src=\"/posts/61674/0349a840-ed31-06be-207c-e748883522b7.png\" class=\"\" title=\"天猫\">","more":"<blockquote>\n<p>这种 dashboard 有个帅气的名字叫数据可视化。</p>\n</blockquote>\n<h2 id=\"通常的做法\"><a href=\"#通常的做法\" class=\"headerlink\" title=\"通常的做法\"></a>通常的做法</h2><p>为了实现全屏的这种 dashboard, 通常的做法就是要对宽度和高度都做百分比（网格）来实现了。但是这种方案的缺点在于:</p>\n<ul>\n<li>实现太麻烦。设计师给的设计稿通常是 px 为单位标注的，我们需要仔细的计算宽度和高度的比例，然后小心处理页面的布局。</li>\n<li>难以处理屏幕宽高比与设计图不符时，带来的元素变形。所以最后展示的屏幕不能和设计稿的屏幕的宽高比差距太大。</li>\n</ul>\n<p>比如，下面这个简单的页面就是用百分比方案来做的。设计师给的图的比例为 16: 9。</p>\n<img src=\"/posts/61674/16-9.png\" class=\"\" title=\"16:9\">\n\n<img src=\"/posts/61674/1-1.png\" class=\"\" title=\"1:1\">\n\n<p>当窗口比例是 16 : 9 的时候黄色的长方形显示符合设计，当窗口变成正方形的时候，黄色部分也跟着变方了，这必然会影响显示效果。</p>\n<p>可以在浏览器中打开，改变窗口大小页面来体验这个<a href=\"https://quellingblade.github.io/postcss-px-to-rem/percent.html\">百分比方案</a>。</p>\n<h2 id=\"理想的效果\"><a href=\"#理想的效果\" class=\"headerlink\" title=\"理想的效果\"></a>理想的效果</h2><p>我心目中的理想效果可能是像下面这个页面一样，无论窗口怎么变，我们的内容都保持原来的比例，并尽量占满窗口（类似 background contain 的效果）。</p>\n<ul>\n<li>屏幕尺寸和设计稿比例(16:9)一致时，占满屏幕</li>\n</ul>\n<img src=\"/posts/61674/full-screen.png\" class=\"\" title=\"full-screen\">\n\n<ul>\n<li>屏幕尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持16：9</li>\n</ul>\n<img src=\"/posts/61674/square.png\" class=\"\" title=\"square\">\n\n<ul>\n<li>屏幕尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持16：9</li>\n</ul>\n<img src=\"/posts/61674/600-300.png\" class=\"\" title=\"600:300\">\n\n<p>可以在浏览器中打开，改变窗口大小页面来体验这个<a href=\"https://quellingblade.github.io/postcss-px-to-rem/percent.html\">flexible方案</a></p>\n<h2 id=\"rem-方案\"><a href=\"#rem-方案\" class=\"headerlink\" title=\"rem 方案\"></a>rem 方案</h2><p>熟悉移动端的自适应方案的朋友对 rem 适应方案，肯定不陌生，最出名的就是阿里的 <a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 方案。可能你已经猜到，本文的这个方案肯定也是基于 rem 的。</p>\n<p>rem (font size of the root element), 是 css3 的引入的一个大小单位。即相对于根元素的 font-size 值的大小。所谓根元素在网页里一般就是 html. 举例说明：下例中，<code>html 的 font-size 大小</code>是 20px, 那么 1.4rem 和 2.4 rem 就分别代表着 28px 和 48px 了。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">html</span> &#123; <span class=\"attribute\">font-size</span>: <span class=\"number\">20px</span>; &#125;</span><br><span class=\"line\"><span class=\"selector-tag\">test1</span> &#123;</span><br><span class=\"line\">  width: 1.4rem; //1.4 × 20px = 28px</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-tag\">test2</span> &#123;</span><br><span class=\"line\">  height: 2.4rem; //2.4 × 20px = 48px</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>假设我们的设计稿其尺寸为 1920 * 1280 px，并且实际运行这个网页的屏幕分别率也是 1920 * 1280. 那么，这网页就好做了。简单粗暴地，按图中的元素的尺寸和位置，直接利用绝对定位把所有元素撸出来就行了。比如，设计稿中有这样一个元素:</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.doughnut</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">top</span>: <span class=\"number\">150px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">left</span>: <span class=\"number\">30px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">width</span>: <span class=\"number\">400px</span>;</span><br><span class=\"line\">  <span class=\"attribute\">height</span>: <span class=\"number\">300px</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>这不刚介绍了 rem, 我们试着用 rem 为单位来写一下 <code>doughnut</code> 元素的 css。我们把页面的 html 元素的 font-size 设置为 1920 / 10 = 192 px. 那么 <code>doughnut</code> 这个元素就应该写作：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.doughnut</span> &#123;</span><br><span class=\"line\">  top:  .781rem;     // 150 / 192 = 0.781</span><br><span class=\"line\">  left: .156rem;     // 30  / 192 = 0.156</span><br><span class=\"line\">  width: 2.083rem;   // 400 / 192 = 2.083</span><br><span class=\"line\">  height: 1.563rem;  // 300 / 192 = 1.564</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>恩。。。。这不是有病么？算成 rem，然后设置一下 html 的 font-size 让浏览器再算回去？显摆自己的数学好么？23333。</p>\n<p>注意上上面有一个假设，<strong>屏幕大小正好是 1920 * 1280</strong>。这个假设真的很假，根本不可能，一旦用了 px，那么一切长宽都死了。这时你再看一眼 rem，真实的长度为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">实际长度(px) = rootFontSize (html 的 font-size) * rem 长度</span><br></pre></td></tr></table></figure>\n\n<p>那么这个实际长度必然有一下特点：</p>\n<ul>\n<li>所有长度的比例必然和设计图一致。</li>\n<li>实际的显示长度完全由 <code>html 的 font-size</code> 值决定（线性关系）。</li>\n</ul>\n<p>我们来证明一下：</p>\n<blockquote>\n<p>设：设计稿上有任一1条线: A, A 的长度为 xx, <code>计算 rem 值的基准</code>为 zz<br>那么 css 里，A 的长度表示为 xzxz (rem)</p>\n<p>设网页运行时的 html 的 font-size 值为 fsfs，</p>\n<p>那么 A 的实际显示长度就分为 xfszxfsz (px)</p>\n<p>所以：</p>\n<ol>\n<li>对于任意2条线，其实际长度的比例为 x1fszx1fsz ： x2fszx2fsz 就等于 他们在设计图上的比例 x1x1 : x2x2</li>\n<li>对于任意一条线，xx 和 zz 是固定值，其实际值随着 fsfs 值线性关系变化的</li>\n</ol>\n</blockquote>\n<p>我们取设计图的边框的4条线来分析, 那么<code>设计稿</code>，<code>真实显示（画布）</code>和 <code>显示窗口（全屏时，即为屏幕）</code>的关系如下图所示:</p>\n<img src=\"/posts/61674/70ef9642-13d0-a15c-ff25-23feaef1029b.png\" class=\"\" title=\"70ef9642-13d0-a15c-ff25-23feaef1029b\">\n\n<ul>\n<li>设计稿的宽高分别为 axax 和 ayay, 比例为 xx : yy.</li>\n<li>实际显示的范围（我们称其为画布）比例和设计稿保持一致，所以可以设实际显示的画布的宽高为bx:bybx:by, 且所有线的实际显示长度是由 <code>html 的 font-size 值</code> fsfs 线性决定的。</li>\n<li>屏幕的尺寸不确定，假设其宽度为 ww, 高度为 hh</li>\n</ul>\n<blockquote>\n<p>小结一下，用了上面提到的 rem 来方案后，我们做出来的页面是一个<strong>和设计稿比例一致的</strong>，并且<strong>大小根据网页运行时的 html 的 font-size的值缩放</strong>的页面。</p>\n</blockquote>\n<p>既然页面的大小可以按<strong>html 的 font-size的值</strong>缩放，那么如果我希望<strong>画布的实际显示宽度</strong>始终和<strong>浏览器窗口宽度</strong>保持一致的话（即下图这样的状态），<strong>html 的 font-size的值</strong>应该如何设置呢？</p>\n<img src=\"/posts/61674/19e45d16-534a-9ac3-578c-83bb3f01b45f.png\" class=\"\" title=\"19e45d16-534a-9ac3-578c-83bb3f01b45f\">\n\n<p>我们假设 <code>计算 rem 值的基准</code> 为设计稿宽度的 1q1q:</p>\n<blockquote>\n<p>假设，设计稿窗口宽为 axax，高为 ayay, 则<code>计算 rem 值的基准</code> zz 为 axqaxq</p>\n<p>那么按上面的公式，浏览器中画布实际的<br>宽度为 axfsaxq=fsqaxfsaxq=fsq，<br>高度为 ayfsaxq=qyfsxayfsaxq=qyfsx</p>\n<p>浏览器窗口的宽度 ww 要等于画布实际的宽度，即 w=fsqw=fsq，则 fs=wqfs=wq</p>\n</blockquote>\n<p>好的，从数学回到我们的工程中来，我们的设计稿尺寸是 1920 * 1280。我们取 qq 这个值为 10, 则 <code>计算 rem 值的基准</code> zz 为 axq=192010=192axq=192010=192. 然后我们把<strong>所有元素的长、宽、位置、字体大小等原来 <code>px</code> 单位都转换成 rem</strong>，网页加载后，我们<strong>用 js 去计算当前浏览器窗口的宽度，并设置 <code>html 的 font-size</code> fsfs 为<code>当前浏览器窗口的宽度</code> ww 的 1q1q，即 w10w10，这样我们就做出了一个100%宽度的、等比例缩放设计稿的页面</strong>了。</p>\n<blockquote>\n<p>通过这样的设置，我就得到了一个<strong>和设计稿比例一致的</strong>，<strong>宽度与窗口大小一致</strong>的页面。</p>\n</blockquote>\n<p>到此为止，就是现有 rem 方案的核心内容了。</p>\n<p>说了半天，都是别人的方案，读者可能会问了，那博主你干了啥？</p>\n<h2 id=\"我的方案\"><a href=\"#我的方案\" class=\"headerlink\" title=\"我的方案\"></a>我的方案</h2><p>回头想一下，我们要的是什么？现在这个方案，能满足我们的要求么？我们来逐条分析：</p>\n<ul>\n<li>屏幕（窗口）尺寸和设计稿比例(x:yx:y)一致时，占满屏幕</li>\n</ul>\n<img src=\"/posts/61674/327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png\" class=\"\" title=\"327c8e32-cb68-0615-fa7f-b0bbec3dc4f1\">\n\n<p>这种情况肯定没问题，屏幕和真实页面完美重合.</p>\n<ul>\n<li>屏幕（窗口）尺寸比设计图比例瘦时，上下留白，左右占满，并上下居中, 显示的比例保持(x:yx:y)</li>\n</ul>\n<img src=\"/posts/61674/19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png\" class=\"\" title=\"19e45d16-534a-9ac3-578c-83bb3f01b45f(1)\">\n\n<p>这种情况也没问题，真实页面高度小于屏幕，然后页面内容上下居中就可以了。</p>\n<ul>\n<li>屏幕（窗口）尺寸比设计图比例胖时，左右留白，上下占满，并左右居中, 显示的比例保持(x:yx:y)</li>\n</ul>\n<img src=\"/posts/61674/c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png\" class=\"\" title=\"c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4\">\n\n<p>问题出现了，在这种场景下，页面的高度超出了屏幕的高度，这就会导致垂直滚动条了。这就是我的方案处理的地方了。在这种场景下，我们需要页面的高度缩小为屏幕的高度，当然为了保持比例页面的宽度等也要等比例缩小.换句话说我们要把所有的线的长度等比例缩小，缩小后画布的高度要等于屏幕的高度，即下图所示的状态:</p>\n<img src=\"/posts/61674/d312b3ec-ded3-746f-9e59-7daa68811f30.png\" class=\"\" title=\"d312b3ec-ded3-746f-9e59-7daa68811f30\">\n\n<p>要等比例缩小所有的长度，那么操作 <code>html 的 font-size</code> fsfs 的值就能做到了。我们上面的分析中，我们已经计算了页面（画布）的真实高度</p>\n<blockquote>\n<p>那么按上面的公式，浏览器中页面（画布）的真实<br>高度为 ayfsaxq=qyfsx</p>\n</blockquote>\n<p>在此场景下，我们需要把画布真实高度值缩小到屏幕的高度,</p>\n<blockquote>\n<p>设窗口的高度为 hh,<br>设缩小比例为 ss, 则有 h=qyfsxsh=qyfsxs, 得 s=xhqyfss=xhqyfs<br>即我们需要在页面（画布）真实高度上 qyfsxqyfsx 乘上个缩小系数 xhqyfsxhqyfs，可以使 页面（画布）的真是高等于窗口的高度了<br>又因为 fs=wqfs=wq, 则这个缩小系数可变换为:<br>xhqywq=xhyw=xy/whxhqywq=xhyw=xy/wh, 即 设计稿宽高比窗口宽高比</p>\n</blockquote>\n<p>Bingo. 综上可知: 当窗口尺寸比设计图比例胖时，只要我们在原来 fsfs 值的基础上，乘上 设计稿宽高比窗口宽高比设计稿宽高比窗口宽高比 的缩小系数，就可以实现我们想要的效果了。</p>\n<h2 id=\"工程应用\"><a href=\"#工程应用\" class=\"headerlink\" title=\"工程应用\"></a>工程应用</h2><p>好了，前面的理论，你看着头疼，我写着更头疼。终于到了喜闻乐见的运用环节了。</p>\n<p>按照前面的一顿操作，应用这个方案，我们需要做2件事: （以设计稿的尺寸为 1920 * 1280 为例）</p>\n<ol>\n<li>在 css 表示长度的时候，用设计稿上的长度除以 192, 算得 rem 的值。</li>\n<li>页面内写一段 js 代码，根据我们上面的公式去计算并设置 <code>html 元素的 font-size</code> 值。</li>\n</ol>\n<p>关于第1点：如果告诉你所有的长度你要自己算。。。可能这个方案马上就没人用了，因为真的要算死人。参照 <a href=\"https://github.com/amfe/lib-flexible\">lib-flexible</a> 的方案，我写了一个 <a href=\"https://github.com/QuellingBlade/postcss-px-to-rem\">post-css 插件</a>来帮助你做这个计算，效果就是你不用算了，图上是多少长度，你写多少就行了，这个 rem 的转换由<a href=\"https://github.com/QuellingBlade/postcss-px-to-rem\">插件</a>完成。</p>\n<p>关于第2点：这段 js 代码我已经为你写好了 <a href=\"https://github.com/QuellingBlade/lib-flexible-for-dashboard\">lib-flexible-for-dashboard</a>, 直接嵌入你的 html 里就行。考虑到这段 js 代码，会计算 font-size 的值，这个值会决定所有的长度，所以这个值要优先计算出来，最好的方案就是把这段代码拷贝到 html 的 head 里去（这个操作被称为 inline）. 为了方便你使用webpack 和 npm 管理这个库，我们还为你准备了一个 <a href=\"https://github.com/QuellingBlade/html-webpack-inline-plugin\">webpack 插件</a>，帮助你去做 inline.</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>talk is cheap, show me the <a href=\"https://github.com/njleonzhang/flexible-pc-full-screen\">code</a></p>\n</blockquote>\n<p>设计稿是这样的一个 1920 * 1280（16：9）的图:</p>\n<img src=\"/posts/61674/562e47bd-abda-dae4-7765-68706b5a978e.png\" class=\"\" title=\"562e47bd-abda-dae4-7765-68706b5a978e\">\n\n<p>实现的[效果]在这：<a href=\"http://www.njleonzhang.com/flexible-pc-full-screen/\">http://www.njleonzhang.com/flexible-pc-full-screen/</a></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>我是站在巨人的肩膀上，针对全屏 pc 页面这一特别场景做出了一个个人比较满意的方案，希望能给有需要的朋友一些帮助。</p>\n<p>相关项目：</p>\n<ul>\n<li><a href=\"https://github.com/njleonzhang/flexible-pc-full-screen\">https://github.com/njleonzhang/flexible-pc-full-screen</a></li>\n<li><a href=\"https://github.com/QuellingBlade/postcss-px-to-rem\">https://github.com/QuellingBlade/postcss-px-to-rem</a></li>\n<li><a href=\"https://github.com/QuellingBlade/lib-flexible-for-dashboard\">https://github.com/QuellingBlade/lib-flexible-for-dashboard</a></li>\n<li><a href=\"https://github.com/QuellingBlade/html-webpack-inline-plugin\">https://github.com/QuellingBlade/html-webpack-inline-plugin</a></li>\n</ul>"},{"title":"奇妙的-webkit-background-clip","abbrlink":12897,"date":"2020-01-01T07:36:50.000Z","_content":"\ngithub 链接：https://github.com/chokcoco/iCSS/issues/14\n\n## 效果\n\n<iframe height=\"1449\" scrolling=\"no\" title=\"existential gradient buttons\" src=\"https://codepen.io/JingW/embed/gObGjww?height=1449&amp;theme-id=default&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n原特效链接：[A PEN BY alex baldwin](https://codepen.io/cubeghost/pen/ByJGEN)\n\n## 相关资源\n\n- [MDN - background-clip](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip)\n- [MDN - border-image-slice](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image-slice)\n","source":"_posts/奇妙的-webkit-background-clip.md","raw":"---\ntitle: 奇妙的-webkit-background-clip\ntags:\n  - 转载\n  - CSS3\ncategories:\n  - 前端\n  - CSS\nabbrlink: 12897\ndate: 2020-01-01 15:36:50\n---\n\ngithub 链接：https://github.com/chokcoco/iCSS/issues/14\n\n## 效果\n\n<iframe height=\"1449\" scrolling=\"no\" title=\"existential gradient buttons\" src=\"https://codepen.io/JingW/embed/gObGjww?height=1449&amp;theme-id=default&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n原特效链接：[A PEN BY alex baldwin](https://codepen.io/cubeghost/pen/ByJGEN)\n\n## 相关资源\n\n- [MDN - background-clip](https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip)\n- [MDN - border-image-slice](https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image-slice)\n","slug":"奇妙的-webkit-background-clip","published":1,"updated":"2020-11-30T07:45:30.444Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyfz004pkhsrhlixfhmu","content":"<p>github 链接：<a href=\"https://github.com/chokcoco/iCSS/issues/14\">https://github.com/chokcoco/iCSS/issues/14</a></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><iframe height=\"1449\" scrolling=\"no\" title=\"existential gradient buttons\" src=\"https://codepen.io/JingW/embed/gObGjww?height=1449&amp;theme-id=default&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>原特效链接：<a href=\"https://codepen.io/cubeghost/pen/ByJGEN\">A PEN BY alex baldwin</a></p>\n<h2 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip\">MDN - background-clip</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image-slice\">MDN - border-image-slice</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p>github 链接：<a href=\"https://github.com/chokcoco/iCSS/issues/14\">https://github.com/chokcoco/iCSS/issues/14</a></p>\n<h2 id=\"效果\"><a href=\"#效果\" class=\"headerlink\" title=\"效果\"></a>效果</h2><iframe height=\"1449\" scrolling=\"no\" title=\"existential gradient buttons\" src=\"https://codepen.io/JingW/embed/gObGjww?height=1449&amp;theme-id=default&amp;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\" style=\"width: 997.594px;\"></iframe>\n\n<p>原特效链接：<a href=\"https://codepen.io/cubeghost/pen/ByJGEN\">A PEN BY alex baldwin</a></p>\n<h2 id=\"相关资源\"><a href=\"#相关资源\" class=\"headerlink\" title=\"相关资源\"></a>相关资源</h2><ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/background-clip\">MDN - background-clip</a></li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-image-slice\">MDN - border-image-slice</a></li>\n</ul>\n"},{"title":"如何清除浮动","abbrlink":12906,"date":"2018-12-03T15:27:56.000Z","_content":"\n## 为什么要清除浮动\n\n其实浮动（e.g. `float: left;`）本质上是用来做文字混排的，但却被我们拿来做布局，这个时候虽然实现了某些效果，但也带来了不少副作用。\n\n由于浮动元素不再占有原文档流的位置，所以它会对后续元素的排版带来影响（无视浮动元素，就当它不存在过）。因此我们很多时候要做的，就是消除浮动元素造成的影响。清除浮动的本质主要是为了解决父元素因为子元素浮动造成的内部高度为0的问题。\n\n<!-- more -->\n\n## clear\n\n清除浮动的核心css属性是 clear ，基本语法如下：\n\n```css\n选择器: {\n    clear: 属性值;\n}\n```\n\n| 属性值 | 描述                                       |\n| :----- | :----------------------------------------- |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n## 清除浮动常见方案\n\n### 额外标记法\n\n在浮动元素后面添加一个空标签，例如：\n\n```html\n<div style=\"float: left;\"></div>\n<div style=\"clear: both;\"></div>\n```\n\n优点：通俗易懂，书写方便\n缺点：加入了过多的没有实际含义的额外标签，结构化差。\n\n### 父元素添加overflow\n\n通过触发BFC达到清除浮动的效果。（p.s. 对bfc不了解可以看[这篇](https://evestorm.github.io/posts/9722/)文章）\n\n```css\n.parent {\n    overflow: hidden;\n}\n```\n\n优点：代码简洁\n缺点：超出的内容会被隐藏\n\n### before和after双伪元素方案\n\n```css\n.clearfix:before,\n.clearfix:after { \n    content:\"\";\n    display: table;  /* 触发BFC清除浮动 */\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix {\n    *zoom: 1;\n}\n```\n\n优点：代码简洁\n缺点：IE6-7不支持:after，需要使用 `zoom: 1` 触发 `hasLayout`\n\n### 使用after伪元素（我平常使用的）\n\n```css\n.clearfix::after {  \n    content: \".\";\n    display: block;\n    height: 0;\n    visibility: hidden;\n    clear: both;\n}\n\n.clearfix {\n    *zoom: 1;\n}   /* IE6、7 专有 */\n```\n\n使用方式：给浮动元素的父元素添加一个class类：`clearfix`\n优点：一次书写多处使用，并且符合闭合浮动思想，结构语义化正确\n缺点：IE6-7不支持:after，需要使用 `zoom: 1` 触发 `hasLayout`\n注意：`content:\".\"` 内容尽量不为空，可以跟一个小点，否则在firefox 7.0前的版本会生成空格\n\n## :after 和 ::after 的区别\n\n:before、:after 在旧版本里是伪元素，CSS3的规范里 “:” 用来表示伪类，”::” 用来表示伪元素，但是在高版本浏览器下 :before、:after 会被自动识别为 ::before、::after ，这样做的目的是用来做兼容处理。\n\n### 相同点\n\n伪类对象，用来设置对象前的内容\n:before 和 ::before 写法是等效的\n\n### 不同点\n\n:before 是 css2 的写法，::before 是 css3 的写法\n:before 兼容性比 ::before要好\n\n### 注意\n\n伪类元素必须要配合 content 属性一起使用，否则无效\n伪类元素是css渲染层加入的，不能通过js来操作\n","source":"_posts/如何清除浮动.md","raw":"---\ntitle: 如何清除浮动\ntags:\n  - 布局\n  - 技巧\ncategories:\n  - 前端\n  - CSS\nabbrlink: 12906\ndate: 2018-12-03 23:27:56\n---\n\n## 为什么要清除浮动\n\n其实浮动（e.g. `float: left;`）本质上是用来做文字混排的，但却被我们拿来做布局，这个时候虽然实现了某些效果，但也带来了不少副作用。\n\n由于浮动元素不再占有原文档流的位置，所以它会对后续元素的排版带来影响（无视浮动元素，就当它不存在过）。因此我们很多时候要做的，就是消除浮动元素造成的影响。清除浮动的本质主要是为了解决父元素因为子元素浮动造成的内部高度为0的问题。\n\n<!-- more -->\n\n## clear\n\n清除浮动的核心css属性是 clear ，基本语法如下：\n\n```css\n选择器: {\n    clear: 属性值;\n}\n```\n\n| 属性值 | 描述                                       |\n| :----- | :----------------------------------------- |\n| left   | 不允许左侧有浮动元素（清除左侧浮动的影响） |\n| right  | 不允许右侧有浮动元素（清除右侧浮动的影响） |\n| both   | 同时清除左右两侧浮动的影响                 |\n\n## 清除浮动常见方案\n\n### 额外标记法\n\n在浮动元素后面添加一个空标签，例如：\n\n```html\n<div style=\"float: left;\"></div>\n<div style=\"clear: both;\"></div>\n```\n\n优点：通俗易懂，书写方便\n缺点：加入了过多的没有实际含义的额外标签，结构化差。\n\n### 父元素添加overflow\n\n通过触发BFC达到清除浮动的效果。（p.s. 对bfc不了解可以看[这篇](https://evestorm.github.io/posts/9722/)文章）\n\n```css\n.parent {\n    overflow: hidden;\n}\n```\n\n优点：代码简洁\n缺点：超出的内容会被隐藏\n\n### before和after双伪元素方案\n\n```css\n.clearfix:before,\n.clearfix:after { \n    content:\"\";\n    display: table;  /* 触发BFC清除浮动 */\n}\n.clearfix:after {\n    clear: both;\n}\n.clearfix {\n    *zoom: 1;\n}\n```\n\n优点：代码简洁\n缺点：IE6-7不支持:after，需要使用 `zoom: 1` 触发 `hasLayout`\n\n### 使用after伪元素（我平常使用的）\n\n```css\n.clearfix::after {  \n    content: \".\";\n    display: block;\n    height: 0;\n    visibility: hidden;\n    clear: both;\n}\n\n.clearfix {\n    *zoom: 1;\n}   /* IE6、7 专有 */\n```\n\n使用方式：给浮动元素的父元素添加一个class类：`clearfix`\n优点：一次书写多处使用，并且符合闭合浮动思想，结构语义化正确\n缺点：IE6-7不支持:after，需要使用 `zoom: 1` 触发 `hasLayout`\n注意：`content:\".\"` 内容尽量不为空，可以跟一个小点，否则在firefox 7.0前的版本会生成空格\n\n## :after 和 ::after 的区别\n\n:before、:after 在旧版本里是伪元素，CSS3的规范里 “:” 用来表示伪类，”::” 用来表示伪元素，但是在高版本浏览器下 :before、:after 会被自动识别为 ::before、::after ，这样做的目的是用来做兼容处理。\n\n### 相同点\n\n伪类对象，用来设置对象前的内容\n:before 和 ::before 写法是等效的\n\n### 不同点\n\n:before 是 css2 的写法，::before 是 css3 的写法\n:before 兼容性比 ::before要好\n\n### 注意\n\n伪类元素必须要配合 content 属性一起使用，否则无效\n伪类元素是css渲染层加入的，不能通过js来操作\n","slug":"如何清除浮动","published":1,"updated":"2020-11-21T15:34:07.054Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyg3004ukhsr0dzrc8ch","content":"<h2 id=\"为什么要清除浮动\"><a href=\"#为什么要清除浮动\" class=\"headerlink\" title=\"为什么要清除浮动\"></a>为什么要清除浮动</h2><p>其实浮动（e.g. <code>float: left;</code>）本质上是用来做文字混排的，但却被我们拿来做布局，这个时候虽然实现了某些效果，但也带来了不少副作用。</p>\n<p>由于浮动元素不再占有原文档流的位置，所以它会对后续元素的排版带来影响（无视浮动元素，就当它不存在过）。因此我们很多时候要做的，就是消除浮动元素造成的影响。清除浮动的本质主要是为了解决父元素因为子元素浮动造成的内部高度为0的问题。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h2><p>清除浮动的核心css属性是 clear ，基本语法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: 属性值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">left</td>\n<td align=\"left\">不允许左侧有浮动元素（清除左侧浮动的影响）</td>\n</tr>\n<tr>\n<td align=\"left\">right</td>\n<td align=\"left\">不允许右侧有浮动元素（清除右侧浮动的影响）</td>\n</tr>\n<tr>\n<td align=\"left\">both</td>\n<td align=\"left\">同时清除左右两侧浮动的影响</td>\n</tr>\n</tbody></table>\n<h2 id=\"清除浮动常见方案\"><a href=\"#清除浮动常见方案\" class=\"headerlink\" title=\"清除浮动常见方案\"></a>清除浮动常见方案</h2><h3 id=\"额外标记法\"><a href=\"#额外标记法\" class=\"headerlink\" title=\"额外标记法\"></a>额外标记法</h3><p>在浮动元素后面添加一个空标签，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;float: left;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;clear: both;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>优点：通俗易懂，书写方便<br>缺点：加入了过多的没有实际含义的额外标签，结构化差。</p>\n<h3 id=\"父元素添加overflow\"><a href=\"#父元素添加overflow\" class=\"headerlink\" title=\"父元素添加overflow\"></a>父元素添加overflow</h3><p>通过触发BFC达到清除浮动的效果。（p.s. 对bfc不了解可以看<a href=\"https://evestorm.github.io/posts/9722/\">这篇</a>文章）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优点：代码简洁<br>缺点：超出的内容会被隐藏</p>\n<h3 id=\"before和after双伪元素方案\"><a href=\"#before和after双伪元素方案\" class=\"headerlink\" title=\"before和after双伪元素方案\"></a>before和after双伪元素方案</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;  <span class=\"comment\">/* 触发BFC清除浮动 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">*zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优点：代码简洁<br>缺点：IE6-7不支持:after，需要使用 <code>zoom: 1</code> 触发 <code>hasLayout</code></p>\n<h3 id=\"使用after伪元素（我平常使用的）\"><a href=\"#使用after伪元素（我平常使用的）\" class=\"headerlink\" title=\"使用after伪元素（我平常使用的）\"></a>使用after伪元素（我平常使用的）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;  </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">*zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;   <span class=\"comment\">/* IE6、7 专有 */</span></span><br></pre></td></tr></table></figure>\n\n<p>使用方式：给浮动元素的父元素添加一个class类：<code>clearfix</code><br>优点：一次书写多处使用，并且符合闭合浮动思想，结构语义化正确<br>缺点：IE6-7不支持:after，需要使用 <code>zoom: 1</code> 触发 <code>hasLayout</code><br>注意：<code>content:&quot;.&quot;</code> 内容尽量不为空，可以跟一个小点，否则在firefox 7.0前的版本会生成空格</p>\n<h2 id=\"after-和-after-的区别\"><a href=\"#after-和-after-的区别\" class=\"headerlink\" title=\":after 和 ::after 的区别\"></a>:after 和 ::after 的区别</h2><p>:before、:after 在旧版本里是伪元素，CSS3的规范里 “:” 用来表示伪类，”::” 用来表示伪元素，但是在高版本浏览器下 :before、:after 会被自动识别为 ::before、::after ，这样做的目的是用来做兼容处理。</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>伪类对象，用来设置对象前的内容<br>:before 和 ::before 写法是等效的</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>:before 是 css2 的写法，::before 是 css3 的写法<br>:before 兼容性比 ::before要好</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>伪类元素必须要配合 content 属性一起使用，否则无效<br>伪类元素是css渲染层加入的，不能通过js来操作</p>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要清除浮动\"><a href=\"#为什么要清除浮动\" class=\"headerlink\" title=\"为什么要清除浮动\"></a>为什么要清除浮动</h2><p>其实浮动（e.g. <code>float: left;</code>）本质上是用来做文字混排的，但却被我们拿来做布局，这个时候虽然实现了某些效果，但也带来了不少副作用。</p>\n<p>由于浮动元素不再占有原文档流的位置，所以它会对后续元素的排版带来影响（无视浮动元素，就当它不存在过）。因此我们很多时候要做的，就是消除浮动元素造成的影响。清除浮动的本质主要是为了解决父元素因为子元素浮动造成的内部高度为0的问题。</p>","more":"<h2 id=\"clear\"><a href=\"#clear\" class=\"headerlink\" title=\"clear\"></a>clear</h2><p>清除浮动的核心css属性是 clear ，基本语法如下：</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器: &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: 属性值;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th align=\"left\">属性值</th>\n<th align=\"left\">描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">left</td>\n<td align=\"left\">不允许左侧有浮动元素（清除左侧浮动的影响）</td>\n</tr>\n<tr>\n<td align=\"left\">right</td>\n<td align=\"left\">不允许右侧有浮动元素（清除右侧浮动的影响）</td>\n</tr>\n<tr>\n<td align=\"left\">both</td>\n<td align=\"left\">同时清除左右两侧浮动的影响</td>\n</tr>\n</tbody></table>\n<h2 id=\"清除浮动常见方案\"><a href=\"#清除浮动常见方案\" class=\"headerlink\" title=\"清除浮动常见方案\"></a>清除浮动常见方案</h2><h3 id=\"额外标记法\"><a href=\"#额外标记法\" class=\"headerlink\" title=\"额外标记法\"></a>额外标记法</h3><p>在浮动元素后面添加一个空标签，例如：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;float: left;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">div</span> <span class=\"attr\">style</span>=<span class=\"string\">&quot;clear: both;&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">div</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>优点：通俗易懂，书写方便<br>缺点：加入了过多的没有实际含义的额外标签，结构化差。</p>\n<h3 id=\"父元素添加overflow\"><a href=\"#父元素添加overflow\" class=\"headerlink\" title=\"父元素添加overflow\"></a>父元素添加overflow</h3><p>通过触发BFC达到清除浮动的效果。（p.s. 对bfc不了解可以看<a href=\"https://evestorm.github.io/posts/9722/\">这篇</a>文章）</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.parent</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">overflow</span>: hidden;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优点：代码简洁<br>缺点：超出的内容会被隐藏</p>\n<h3 id=\"before和after双伪元素方案\"><a href=\"#before和after双伪元素方案\" class=\"headerlink\" title=\"before和after双伪元素方案\"></a>before和after双伪元素方案</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:before</span>,</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123; </span><br><span class=\"line\">    <span class=\"attribute\">content</span>:<span class=\"string\">&quot;&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: table;  <span class=\"comment\">/* 触发BFC清除浮动 */</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">:after</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">*zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>优点：代码简洁<br>缺点：IE6-7不支持:after，需要使用 <code>zoom: 1</code> 触发 <code>hasLayout</code></p>\n<h3 id=\"使用after伪元素（我平常使用的）\"><a href=\"#使用after伪元素（我平常使用的）\" class=\"headerlink\" title=\"使用after伪元素（我平常使用的）\"></a>使用after伪元素（我平常使用的）</h3><figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-class\">.clearfix</span><span class=\"selector-pseudo\">::after</span> &#123;  </span><br><span class=\"line\">    <span class=\"attribute\">content</span>: <span class=\"string\">&quot;.&quot;</span>;</span><br><span class=\"line\">    <span class=\"attribute\">display</span>: block;</span><br><span class=\"line\">    <span class=\"attribute\">height</span>: <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"attribute\">visibility</span>: hidden;</span><br><span class=\"line\">    <span class=\"attribute\">clear</span>: both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-class\">.clearfix</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">*zoom</span>: <span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;   <span class=\"comment\">/* IE6、7 专有 */</span></span><br></pre></td></tr></table></figure>\n\n<p>使用方式：给浮动元素的父元素添加一个class类：<code>clearfix</code><br>优点：一次书写多处使用，并且符合闭合浮动思想，结构语义化正确<br>缺点：IE6-7不支持:after，需要使用 <code>zoom: 1</code> 触发 <code>hasLayout</code><br>注意：<code>content:&quot;.&quot;</code> 内容尽量不为空，可以跟一个小点，否则在firefox 7.0前的版本会生成空格</p>\n<h2 id=\"after-和-after-的区别\"><a href=\"#after-和-after-的区别\" class=\"headerlink\" title=\":after 和 ::after 的区别\"></a>:after 和 ::after 的区别</h2><p>:before、:after 在旧版本里是伪元素，CSS3的规范里 “:” 用来表示伪类，”::” 用来表示伪元素，但是在高版本浏览器下 :before、:after 会被自动识别为 ::before、::after ，这样做的目的是用来做兼容处理。</p>\n<h3 id=\"相同点\"><a href=\"#相同点\" class=\"headerlink\" title=\"相同点\"></a>相同点</h3><p>伪类对象，用来设置对象前的内容<br>:before 和 ::before 写法是等效的</p>\n<h3 id=\"不同点\"><a href=\"#不同点\" class=\"headerlink\" title=\"不同点\"></a>不同点</h3><p>:before 是 css2 的写法，::before 是 css3 的写法<br>:before 兼容性比 ::before要好</p>\n<h3 id=\"注意\"><a href=\"#注意\" class=\"headerlink\" title=\"注意\"></a>注意</h3><p>伪类元素必须要配合 content 属性一起使用，否则无效<br>伪类元素是css渲染层加入的，不能通过js来操作</p>"},{"title":"如何解决0.1+0.2不等于0.3的问题","abbrlink":21245,"date":"2019-01-07T16:00:00.000Z","_content":"\n## 为何会出现此问题？\n\n总结一句话：这是因为二进制模拟十进制进行运算时的精度问题。\n\n具体可查看 [0.1 + 0.2 不等于 0.3？为什么 JavaScript 有这种“骚”操作？](https://juejin.im/post/5b90e00e6fb9a05cf9080dff) 这篇掘金文章。\n\n<!-- more -->\n\n## 如何解决\n\n### Number.EPSILON\n\n第一种方法是利用 `Number.EPSILON` ，这个值无限接近于 0。0.1+0.2 的精度误差在这个值的范围内：\n\n```js\nfunction numbersEqual(a,b){\n    return Math.abs(a-b)<Number.EPSILON;\n}\nvar a=0.1+0.2， b=0.3;\nconsole.log(numbersEqual(a,b));    //true\n```\n\n### 内置函数 toFixed\n\n利用 `parseFloat` + 内置函数 toFixed：\n\n```js\nfunction formatNum(num, fixed = 10) {\n  // a.toFixed(fixed) 先转为小数点10位的字符串 \"0.3000000000\"\n  return parseFloat(a.toFixed(fixed)); // 然后通过parseFloat转为浮点数\n}\nvar a = 0.1 + 0.2;\nconsole.log(formatNum(a)); //0.3\n```\n\n### 内置函数 toPrecision\n\n我平常用此函数来计算精度，具体可参考 [Number.prototype.toPrecision() | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)：\n\n```js\n// 内置函数toPrecision(中文：精确，精度)\n// 参数是精度.比如5.1234，传2返回5.1，传1返回5；0.2+0.1传2返回0.30\n(0.1 + 0.2).toPrecision(10) == 0.3; // true\n```\n","source":"_posts/如何解决0-1-0-2不等于0-3的问题.md","raw":"---\ntitle: 如何解决0.1+0.2不等于0.3的问题\ntags:\n  - 技巧\ncategories:\n  - 前端\n  - JS\nabbrlink: 21245\ndate: 2019-01-08 00:00:00\n---\n\n## 为何会出现此问题？\n\n总结一句话：这是因为二进制模拟十进制进行运算时的精度问题。\n\n具体可查看 [0.1 + 0.2 不等于 0.3？为什么 JavaScript 有这种“骚”操作？](https://juejin.im/post/5b90e00e6fb9a05cf9080dff) 这篇掘金文章。\n\n<!-- more -->\n\n## 如何解决\n\n### Number.EPSILON\n\n第一种方法是利用 `Number.EPSILON` ，这个值无限接近于 0。0.1+0.2 的精度误差在这个值的范围内：\n\n```js\nfunction numbersEqual(a,b){\n    return Math.abs(a-b)<Number.EPSILON;\n}\nvar a=0.1+0.2， b=0.3;\nconsole.log(numbersEqual(a,b));    //true\n```\n\n### 内置函数 toFixed\n\n利用 `parseFloat` + 内置函数 toFixed：\n\n```js\nfunction formatNum(num, fixed = 10) {\n  // a.toFixed(fixed) 先转为小数点10位的字符串 \"0.3000000000\"\n  return parseFloat(a.toFixed(fixed)); // 然后通过parseFloat转为浮点数\n}\nvar a = 0.1 + 0.2;\nconsole.log(formatNum(a)); //0.3\n```\n\n### 内置函数 toPrecision\n\n我平常用此函数来计算精度，具体可参考 [Number.prototype.toPrecision() | MDN](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision)：\n\n```js\n// 内置函数toPrecision(中文：精确，精度)\n// 参数是精度.比如5.1234，传2返回5.1，传1返回5；0.2+0.1传2返回0.30\n(0.1 + 0.2).toPrecision(10) == 0.3; // true\n```\n","slug":"如何解决0-1-0-2不等于0-3的问题","published":1,"updated":"2020-12-02T02:30:42.980Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyg4004xkhsray1i8xc1","content":"<h2 id=\"为何会出现此问题？\"><a href=\"#为何会出现此问题？\" class=\"headerlink\" title=\"为何会出现此问题？\"></a>为何会出现此问题？</h2><p>总结一句话：这是因为二进制模拟十进制进行运算时的精度问题。</p>\n<p>具体可查看 <a href=\"https://juejin.im/post/5b90e00e6fb9a05cf9080dff\">0.1 + 0.2 不等于 0.3？为什么 JavaScript 有这种“骚”操作？</a> 这篇掘金文章。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><h3 id=\"Number-EPSILON\"><a href=\"#Number-EPSILON\" class=\"headerlink\" title=\"Number.EPSILON\"></a>Number.EPSILON</h3><p>第一种方法是利用 <code>Number.EPSILON</code> ，这个值无限接近于 0。0.1+0.2 的精度误差在这个值的范围内：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">numbersEqual</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(a-b)&lt;<span class=\"built_in\">Number</span>.EPSILON;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>， b=<span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersEqual(a,b));    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置函数-toFixed\"><a href=\"#内置函数-toFixed\" class=\"headerlink\" title=\"内置函数 toFixed\"></a>内置函数 toFixed</h3><p>利用 <code>parseFloat</code> + 内置函数 toFixed：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatNum</span>(<span class=\"params\">num, fixed = <span class=\"number\">10</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// a.toFixed(fixed) 先转为小数点10位的字符串 &quot;0.3000000000&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseFloat</span>(a.toFixed(fixed)); <span class=\"comment\">// 然后通过parseFloat转为浮点数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formatNum(a)); <span class=\"comment\">//0.3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置函数-toPrecision\"><a href=\"#内置函数-toPrecision\" class=\"headerlink\" title=\"内置函数 toPrecision\"></a>内置函数 toPrecision</h3><p>我平常用此函数来计算精度，具体可参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision() | MDN</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 内置函数toPrecision(中文：精确，精度)</span></span><br><span class=\"line\"><span class=\"comment\">// 参数是精度.比如5.1234，传2返回5.1，传1返回5；0.2+0.1传2返回0.30</span></span><br><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).toPrecision(<span class=\"number\">10</span>) == <span class=\"number\">0.3</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"为何会出现此问题？\"><a href=\"#为何会出现此问题？\" class=\"headerlink\" title=\"为何会出现此问题？\"></a>为何会出现此问题？</h2><p>总结一句话：这是因为二进制模拟十进制进行运算时的精度问题。</p>\n<p>具体可查看 <a href=\"https://juejin.im/post/5b90e00e6fb9a05cf9080dff\">0.1 + 0.2 不等于 0.3？为什么 JavaScript 有这种“骚”操作？</a> 这篇掘金文章。</p>","more":"<h2 id=\"如何解决\"><a href=\"#如何解决\" class=\"headerlink\" title=\"如何解决\"></a>如何解决</h2><h3 id=\"Number-EPSILON\"><a href=\"#Number-EPSILON\" class=\"headerlink\" title=\"Number.EPSILON\"></a>Number.EPSILON</h3><p>第一种方法是利用 <code>Number.EPSILON</code> ，这个值无限接近于 0。0.1+0.2 的精度误差在这个值的范围内：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">numbersEqual</span>(<span class=\"params\">a,b</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"built_in\">Math</span>.abs(a-b)&lt;<span class=\"built_in\">Number</span>.EPSILON;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a=<span class=\"number\">0.1</span>+<span class=\"number\">0.2</span>， b=<span class=\"number\">0.3</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(numbersEqual(a,b));    <span class=\"comment\">//true</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置函数-toFixed\"><a href=\"#内置函数-toFixed\" class=\"headerlink\" title=\"内置函数 toFixed\"></a>内置函数 toFixed</h3><p>利用 <code>parseFloat</code> + 内置函数 toFixed：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">formatNum</span>(<span class=\"params\">num, fixed = <span class=\"number\">10</span></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"comment\">// a.toFixed(fixed) 先转为小数点10位的字符串 &quot;0.3000000000&quot;</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> <span class=\"built_in\">parseFloat</span>(a.toFixed(fixed)); <span class=\"comment\">// 然后通过parseFloat转为浮点数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> a = <span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>;</span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(formatNum(a)); <span class=\"comment\">//0.3</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"内置函数-toPrecision\"><a href=\"#内置函数-toPrecision\" class=\"headerlink\" title=\"内置函数 toPrecision\"></a>内置函数 toPrecision</h3><p>我平常用此函数来计算精度，具体可参考 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toPrecision\">Number.prototype.toPrecision() | MDN</a>：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 内置函数toPrecision(中文：精确，精度)</span></span><br><span class=\"line\"><span class=\"comment\">// 参数是精度.比如5.1234，传2返回5.1，传1返回5；0.2+0.1传2返回0.30</span></span><br><span class=\"line\">(<span class=\"number\">0.1</span> + <span class=\"number\">0.2</span>).toPrecision(<span class=\"number\">10</span>) == <span class=\"number\">0.3</span>; <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>"},{"title":"字体侵权避坑指南","date":"2020-12-02T12:22:38.000Z","_content":"\n## 来源\n\n本文摘录自：https://www.uisdc.com/avoiding-pits-in-font-copyright\n\n**初始设定：**字体，微软雅黑。\n\n**场景设定：**因产品需要，客户希望在 windows 的客户端查看网站都能够和设计稿保持一致用微软雅黑。项目组给了两种前端解决方案：\n\n- 在 css 样式文件中：引用字体样式为微软雅黑。\n- 在网站样式文件中，打包微软雅黑字体，客户打开网站会预加载微软雅黑字体。\n\n请问两种解决方案应该用哪一个？\n\n**案例分析：**\n\n应使用第一种方案，因为第一种方案，我们只是设定了如果载体有安装微软雅黑的字体的客户端，那网站显示字体，这个字体授权的控制单位在客户端那里。如果用第二种方案，我们预置了，不管任何客户端都加载微软雅黑字体，除非客户已经购买了微软雅黑所属的方正公司授权商用，否则即判定为字体侵权。\n\n```css\nfont-family: '微软雅黑';\n@font-face {\n  font-family: 'MyFont'; /* 字体名称 */\n  src: url('微软雅黑.ttf'); /*字体源文件*/\n}\n```\n\n## 字体侵权情况\n\n1 图片或视频中使用了版权字体。\n\n2. 网站本身引入了字体库文件（直接将整个字体库加载了，也就是说如果浏览者没有这个字体，则会下载这种）\n","source":"_posts/字体侵权避坑指南.md","raw":"---\ntitle: 字体侵权避坑指南\ndate: 2020-12-02 20:22:38\ntags:\n  - 字体侵权\ncategories:\n  - 设计\n  - 平面\n---\n\n## 来源\n\n本文摘录自：https://www.uisdc.com/avoiding-pits-in-font-copyright\n\n**初始设定：**字体，微软雅黑。\n\n**场景设定：**因产品需要，客户希望在 windows 的客户端查看网站都能够和设计稿保持一致用微软雅黑。项目组给了两种前端解决方案：\n\n- 在 css 样式文件中：引用字体样式为微软雅黑。\n- 在网站样式文件中，打包微软雅黑字体，客户打开网站会预加载微软雅黑字体。\n\n请问两种解决方案应该用哪一个？\n\n**案例分析：**\n\n应使用第一种方案，因为第一种方案，我们只是设定了如果载体有安装微软雅黑的字体的客户端，那网站显示字体，这个字体授权的控制单位在客户端那里。如果用第二种方案，我们预置了，不管任何客户端都加载微软雅黑字体，除非客户已经购买了微软雅黑所属的方正公司授权商用，否则即判定为字体侵权。\n\n```css\nfont-family: '微软雅黑';\n@font-face {\n  font-family: 'MyFont'; /* 字体名称 */\n  src: url('微软雅黑.ttf'); /*字体源文件*/\n}\n```\n\n## 字体侵权情况\n\n1 图片或视频中使用了版权字体。\n\n2. 网站本身引入了字体库文件（直接将整个字体库加载了，也就是说如果浏览者没有这个字体，则会下载这种）\n","slug":"字体侵权避坑指南","published":1,"updated":"2020-12-02T12:27:03.694Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyg50051khsrcbqlex4n","content":"<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p>本文摘录自：<a href=\"https://www.uisdc.com/avoiding-pits-in-font-copyright\">https://www.uisdc.com/avoiding-pits-in-font-copyright</a></p>\n<p><strong>初始设定：</strong>字体，微软雅黑。</p>\n<p><strong>场景设定：</strong>因产品需要，客户希望在 windows 的客户端查看网站都能够和设计稿保持一致用微软雅黑。项目组给了两种前端解决方案：</p>\n<ul>\n<li>在 css 样式文件中：引用字体样式为微软雅黑。</li>\n<li>在网站样式文件中，打包微软雅黑字体，客户打开网站会预加载微软雅黑字体。</li>\n</ul>\n<p>请问两种解决方案应该用哪一个？</p>\n<p><strong>案例分析：</strong></p>\n<p>应使用第一种方案，因为第一种方案，我们只是设定了如果载体有安装微软雅黑的字体的客户端，那网站显示字体，这个字体授权的控制单位在客户端那里。如果用第二种方案，我们预置了，不管任何客户端都加载微软雅黑字体，除非客户已经购买了微软雅黑所属的方正公司授权商用，否则即判定为字体侵权。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font-family: &#x27;微软雅黑&#x27;;</span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;MyFont&#x27;</span>; <span class=\"comment\">/* 字体名称 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;微软雅黑.ttf&#x27;</span>); <span class=\"comment\">/*字体源文件*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字体侵权情况\"><a href=\"#字体侵权情况\" class=\"headerlink\" title=\"字体侵权情况\"></a>字体侵权情况</h2><p>1 图片或视频中使用了版权字体。</p>\n<ol start=\"2\">\n<li>网站本身引入了字体库文件（直接将整个字体库加载了，也就是说如果浏览者没有这个字体，则会下载这种）</li>\n</ol>\n","site":{"data":{}},"abbrlink":9274,"excerpt":"","more":"<h2 id=\"来源\"><a href=\"#来源\" class=\"headerlink\" title=\"来源\"></a>来源</h2><p>本文摘录自：<a href=\"https://www.uisdc.com/avoiding-pits-in-font-copyright\">https://www.uisdc.com/avoiding-pits-in-font-copyright</a></p>\n<p><strong>初始设定：</strong>字体，微软雅黑。</p>\n<p><strong>场景设定：</strong>因产品需要，客户希望在 windows 的客户端查看网站都能够和设计稿保持一致用微软雅黑。项目组给了两种前端解决方案：</p>\n<ul>\n<li>在 css 样式文件中：引用字体样式为微软雅黑。</li>\n<li>在网站样式文件中，打包微软雅黑字体，客户打开网站会预加载微软雅黑字体。</li>\n</ul>\n<p>请问两种解决方案应该用哪一个？</p>\n<p><strong>案例分析：</strong></p>\n<p>应使用第一种方案，因为第一种方案，我们只是设定了如果载体有安装微软雅黑的字体的客户端，那网站显示字体，这个字体授权的控制单位在客户端那里。如果用第二种方案，我们预置了，不管任何客户端都加载微软雅黑字体，除非客户已经购买了微软雅黑所属的方正公司授权商用，否则即判定为字体侵权。</p>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">font-family: &#x27;微软雅黑&#x27;;</span><br><span class=\"line\"><span class=\"keyword\">@font-face</span> &#123;</span><br><span class=\"line\">  <span class=\"attribute\">font-family</span>: <span class=\"string\">&#x27;MyFont&#x27;</span>; <span class=\"comment\">/* 字体名称 */</span></span><br><span class=\"line\">  <span class=\"attribute\">src</span>: <span class=\"built_in\">url</span>(<span class=\"string\">&#x27;微软雅黑.ttf&#x27;</span>); <span class=\"comment\">/*字体源文件*/</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"字体侵权情况\"><a href=\"#字体侵权情况\" class=\"headerlink\" title=\"字体侵权情况\"></a>字体侵权情况</h2><p>1 图片或视频中使用了版权字体。</p>\n<ol start=\"2\">\n<li>网站本身引入了字体库文件（直接将整个字体库加载了，也就是说如果浏览者没有这个字体，则会下载这种）</li>\n</ol>\n"},{"title":"对this指向的判定","abbrlink":33207,"date":"2018-12-29T15:44:19.000Z","_content":"\n## 对 this 的理解\n\n对于this指向的判定，时刻记住下面两点就好：\n\n- 普通函数的 this 指向是在函数的执行期间绑定的，换句话说 this 总是指向函数的**直接**调用者\n- 箭头函数的 this 指向是在函数创建期间就绑定好了的，指向的是创建该箭头函数所在的作用域对象\n\n<!-- more -->\n\n## 普通函数中的this\n\n这里直接引用 [You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) 中对 this 的判定步骤：\n\n1. 函数是通过 `new` 被调用的吗（**new 绑定**）？如果是，`this` 就是新构建的对象。\n   `var bar = new foo()`\n2. 函数是通过 `call` 或 `apply` 被调用（**明确绑定**），甚至是隐藏在 `bind` *硬绑定* 之中吗？如果是，`this` 就是那个被明确指定的对象。\n   `var bar = foo.call( obj2 )`\n3. 函数是通过环境对象（也称为拥有者或容器对象）被调用的吗（**隐含绑定**）？如果是，`this` 就是那个环境对象。\n   `var bar = obj1.foo()`\n4. 否则，使用默认的 `this`（**默认绑定**）。如果在 `strict mode` 下，就是 `undefined`，否则是 `global` 对象。\n   `var bar = foo()`\n\n## 常见this指向\n\n- 普通函数中this ——> window\n- 构造函数中this ——> new出来的实例对象\n- 方法中的this ——> 实例对象\n- 原型中的方法中的this ——> 实例对象\n- 定时器中的this ——> window\n\n","source":"_posts/对this指向的判定.md","raw":"---\ntitle: 对this指向的判定\ntags:\n  - this\ncategories:\n  - 前端\n  - JS\nabbrlink: 33207\ndate: 2018-12-29 23:44:19\n---\n\n## 对 this 的理解\n\n对于this指向的判定，时刻记住下面两点就好：\n\n- 普通函数的 this 指向是在函数的执行期间绑定的，换句话说 this 总是指向函数的**直接**调用者\n- 箭头函数的 this 指向是在函数创建期间就绑定好了的，指向的是创建该箭头函数所在的作用域对象\n\n<!-- more -->\n\n## 普通函数中的this\n\n这里直接引用 [You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS) 中对 this 的判定步骤：\n\n1. 函数是通过 `new` 被调用的吗（**new 绑定**）？如果是，`this` 就是新构建的对象。\n   `var bar = new foo()`\n2. 函数是通过 `call` 或 `apply` 被调用（**明确绑定**），甚至是隐藏在 `bind` *硬绑定* 之中吗？如果是，`this` 就是那个被明确指定的对象。\n   `var bar = foo.call( obj2 )`\n3. 函数是通过环境对象（也称为拥有者或容器对象）被调用的吗（**隐含绑定**）？如果是，`this` 就是那个环境对象。\n   `var bar = obj1.foo()`\n4. 否则，使用默认的 `this`（**默认绑定**）。如果在 `strict mode` 下，就是 `undefined`，否则是 `global` 对象。\n   `var bar = foo()`\n\n## 常见this指向\n\n- 普通函数中this ——> window\n- 构造函数中this ——> new出来的实例对象\n- 方法中的this ——> 实例对象\n- 原型中的方法中的this ——> 实例对象\n- 定时器中的this ——> window\n\n","slug":"对this指向的判定","published":1,"updated":"2020-11-21T15:47:07.287Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyg60054khsres3c7ihw","content":"<h2 id=\"对-this-的理解\"><a href=\"#对-this-的理解\" class=\"headerlink\" title=\"对 this 的理解\"></a>对 this 的理解</h2><p>对于this指向的判定，时刻记住下面两点就好：</p>\n<ul>\n<li>普通函数的 this 指向是在函数的执行期间绑定的，换句话说 this 总是指向函数的<strong>直接</strong>调用者</li>\n<li>箭头函数的 this 指向是在函数创建期间就绑定好了的，指向的是创建该箭头函数所在的作用域对象</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"普通函数中的this\"><a href=\"#普通函数中的this\" class=\"headerlink\" title=\"普通函数中的this\"></a>普通函数中的this</h2><p>这里直接引用 <a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a> 中对 this 的判定步骤：</p>\n<ol>\n<li>函数是通过 <code>new</code> 被调用的吗（<strong>new 绑定</strong>）？如果是，<code>this</code> 就是新构建的对象。<br><code>var bar = new foo()</code></li>\n<li>函数是通过 <code>call</code> 或 <code>apply</code> 被调用（<strong>明确绑定</strong>），甚至是隐藏在 <code>bind</code> <em>硬绑定</em> 之中吗？如果是，<code>this</code> 就是那个被明确指定的对象。<br><code>var bar = foo.call( obj2 )</code></li>\n<li>函数是通过环境对象（也称为拥有者或容器对象）被调用的吗（<strong>隐含绑定</strong>）？如果是，<code>this</code> 就是那个环境对象。<br><code>var bar = obj1.foo()</code></li>\n<li>否则，使用默认的 <code>this</code>（<strong>默认绑定</strong>）。如果在 <code>strict mode</code> 下，就是 <code>undefined</code>，否则是 <code>global</code> 对象。<br><code>var bar = foo()</code></li>\n</ol>\n<h2 id=\"常见this指向\"><a href=\"#常见this指向\" class=\"headerlink\" title=\"常见this指向\"></a>常见this指向</h2><ul>\n<li>普通函数中this ——&gt; window</li>\n<li>构造函数中this ——&gt; new出来的实例对象</li>\n<li>方法中的this ——&gt; 实例对象</li>\n<li>原型中的方法中的this ——&gt; 实例对象</li>\n<li>定时器中的this ——&gt; window</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"对-this-的理解\"><a href=\"#对-this-的理解\" class=\"headerlink\" title=\"对 this 的理解\"></a>对 this 的理解</h2><p>对于this指向的判定，时刻记住下面两点就好：</p>\n<ul>\n<li>普通函数的 this 指向是在函数的执行期间绑定的，换句话说 this 总是指向函数的<strong>直接</strong>调用者</li>\n<li>箭头函数的 this 指向是在函数创建期间就绑定好了的，指向的是创建该箭头函数所在的作用域对象</li>\n</ul>","more":"<h2 id=\"普通函数中的this\"><a href=\"#普通函数中的this\" class=\"headerlink\" title=\"普通函数中的this\"></a>普通函数中的this</h2><p>这里直接引用 <a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a> 中对 this 的判定步骤：</p>\n<ol>\n<li>函数是通过 <code>new</code> 被调用的吗（<strong>new 绑定</strong>）？如果是，<code>this</code> 就是新构建的对象。<br><code>var bar = new foo()</code></li>\n<li>函数是通过 <code>call</code> 或 <code>apply</code> 被调用（<strong>明确绑定</strong>），甚至是隐藏在 <code>bind</code> <em>硬绑定</em> 之中吗？如果是，<code>this</code> 就是那个被明确指定的对象。<br><code>var bar = foo.call( obj2 )</code></li>\n<li>函数是通过环境对象（也称为拥有者或容器对象）被调用的吗（<strong>隐含绑定</strong>）？如果是，<code>this</code> 就是那个环境对象。<br><code>var bar = obj1.foo()</code></li>\n<li>否则，使用默认的 <code>this</code>（<strong>默认绑定</strong>）。如果在 <code>strict mode</code> 下，就是 <code>undefined</code>，否则是 <code>global</code> 对象。<br><code>var bar = foo()</code></li>\n</ol>\n<h2 id=\"常见this指向\"><a href=\"#常见this指向\" class=\"headerlink\" title=\"常见this指向\"></a>常见this指向</h2><ul>\n<li>普通函数中this ——&gt; window</li>\n<li>构造函数中this ——&gt; new出来的实例对象</li>\n<li>方法中的this ——&gt; 实例对象</li>\n<li>原型中的方法中的this ——&gt; 实例对象</li>\n<li>定时器中的this ——&gt; window</li>\n</ul>"},{"title":"对闭包的理解","abbrlink":29980,"date":"2018-12-20T15:37:59.000Z","_content":"\n## 什么是闭包\n\n我一直认为，MDN是前端学习的在线指南。只要有不懂的语法，或者不懂的概念，查找资料的首选就应该是它。虽然早些年做iOS开发的时候就就接触过闭包，但如今已经忘得一干二净，所以在想要了解闭包的时候，第一件事就是在MDN中搜索。[其中](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)给到了一个闭包的例子：\n\n```js\nfunction makeFunc() {\n    var name = \"Mozilla\";    // name 是一个被 init 创建的局部变量\n    function displayName() { // displayName() 是内部函数,一个闭包\n        alert(name);         // 使用了父函数中声明的变量\n    }\n    return displayName;      // 返回 displayName 这个函数\n}\n\nvar myFunc = makeFunc();\nmyFunc(); // 当执行myFunc时，其实调用了displayName，会弹窗显示\"Mozilla\"\n```\n\n<!-- more -->\n\n在上面这个例子中，一个函数套了一个函数，且这个内部函数使用到了外部函数中的变量，这个时候就形成了闭包。有什么用呢？其中一个用处就如上面代码所示，能够让 makeFunc 函数外面也能访问 name 这个局部变量。换句话说，闭包缓存了数据，延长了作用域链。\n\nKyle Simpson编写的[You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)中对闭包的总结我觉得很精髓：\n\n> 闭包就是当一个函数即使是在它的词法作用域之外被调用时，也可以记住并访问它的词法作用域。\n\n## 闭包的特性\n\n1. 函数内再嵌套函数\n2. 内部函数可以引用外层的参数和变量\n3. 参数和变量不会被垃圾回收机制回收\n\n## 闭包的用途\n\n### 读取正确的值\n\n一个经典的例子，给 ul>li 下面的每个 li 节点添加点击事件，让其弹出当前 li 元素的索引：\n\n```js\n<ul id=\"testUL\">\n    <li> index = 0</li>\n    <li> index = 1</li>\n    <li> index = 2</li>\n    <li> index = 3</li>\n</ul>\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for (var i = 0; i < nodes.length; i += 1) {\n        nodes[i].onclick = function () {\n            console.log(i);\n        }\n    }\n</script>\n```\n\n\n\n运行上述代码后就会发现，每次打印的结果都显示为4，而不是真正的索引值。这是因为点击事件的匿名函数发生在for循环之后，而for循环执行完毕时 i 的值就为4，所以点谁都是同样的结果。那么这个时候就能通过[立即执行函数](https://developer.mozilla.org/zh-CN/docs/Glossary/立即执行函数表达式) + **闭包**的方法解决此问题：\n\n```html\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for (var i = 0; i < nodes.length; i += 1) {\n        nodes[i].onclick = (function (i) { // 1. IIFE创建一个函数作用域\n            return function () { // 4. 返回这个匿名函数，延长作用域链\n                // 3. 内部嵌套的匿名函数使用到了IIFE的参数i，形成闭包\n                console.log(i);\n            }\n        })(i); // 2. 给IIFE传递每次for循环的i\n    }\n</script>\n```\n\n这个时候触发click事件，打印的值就是li元素的索引了。\n\n### 高级排他\n\n这个例子有点像上面的，现在我们要个需求：在一个 `ul li` 列表中，鼠标移入时高亮当前li标签，移除之前li标签的高亮状态。\n\n常规写法如下：\n\n```js\n// 假设给li添加active类可以让标签高亮\nwindow.onload = function() {\n    let list = document.querySelectorAll('li')\n    // 遍历每个标签\n    for (let i = 0; i < list.length; i++) {\n      const li = list[i]\n      li.onmouseover = function() {\n        // mouseover触发后遍历整个列表，将所有标签class设为空\n        for (let j = 0; j < list.length; j++) {\n          list[j].className = ''\n        }\n        // 最后给当前li标签添加active\n        this.className = 'active'\n      }\n    }\n  }\n```\n\n上面的代码能够实现功能，然而一旦列表非常长性能就不高，所以可以利用闭包来缓存li标签的索引，使其与标签一一对应：\n\n```js\nwindow.onload = function() {\n  let list = document.querySelectorAll('li')\n  // 记录上一次选中的li标签的对应索引\n  let preActiveIndex = 0\n  for (let i = 0; i < list.length; i++) {\n    (function(j) {\n      const li = list[i]\n      li.onmouseover = function() {\n        // 清除上次li标签的高亮\n        list[preActiveIndex].className = ''\n        // 设置当前位高亮\n        this.className = 'active'\n        // 赋值\n        preActiveIndex = j\n      }\n    })(i)\n  }\n}\n```\n\n### 模块化开发\n\n在团队开发中，为了避免命名冲突通常不同成员会把自己的代码单独封装起来，最后return一个对象出去，挂载到window上。这样其他人也可以使用，而且能在一定程度上避免命名冲突：\n\n```js\n(function(w) {\n  var money = 1000;\n  function get() {\n    money *= 10\n    console.log(\"赚了一笔钱，总资产：\" + money + \"元\")\n  }\n  function send() {\n    money--\n    console.log(\"花了一笔钱，总资产：\" + money + \"元\")\n  }\n\n  // 向外暴露对象\n  w.myTools = {\n    get,\n    set\n  }\n})(window)\n```\n\n### 函数节流防抖\n\n在日常开发中，我们也经常用到函数节流与防抖，通常我们会将它们封装为函数，这样可以在需要的地方直接调用使用，还不会污染全局：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>防抖节流</title>\n</head>\n<body>\n  <input id=\"input\" type=\"text\">\n  <!-- 函数防抖 -->\n  <script>\n    function debounce(fn, delay) {\n      var timer = null\n      return function() {\n        var ctx = this,\n            args = arguments\n        if (timer) {\n          window.clearTimeout(timer)\n        }\n        timer = setTimeout(function() {\n          fn.apply(ctx, args)\n          timer = null\n        }, delay);\n      }\n    }\n    // 搜索框做函数防抖避免用户高频输入内容\n    input.addEventListener('input', debounce(function(e) {\n      console.log(e.target.value)\n    }, 500))\n  </script>\n  <!-- 函数节流 -->\n  <script>\n    function throttle(fn, delay) {\n      var canUse = true\n      return function() {\n        var ctx = this,\n            args = arguments\n        if (canUse) {\n          fn.apply(ctx, args)\n          canUse = false\n          setTimeout(() => {\n            canUse = true\n          }, delay);\n        }\n      }\n    }\n    // 对于像onresize这样的高频事件，可以使用函数节流让其回调函数中的代码隔一段时间再次执行\n    window.onresize = throttle(function(e) {\n      input.value = Math.random() * 100\n    }, 1000)\n  </script>\n</body>\n</html>\n```\n\n## 内存泄漏\n\n其实闭包并不会造成内存泄漏，现在的垃圾回收机制已经很成熟了。但早期的IE（ie4-ie6）版本里，对宿主对象（也就是document对象）采用是引用计数的[垃圾回收机制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management)，闭包导致内存泄漏的一个原因就是这个算法的一个缺陷。循环引用会导致没法回收，这个循环引用只限定于有宿主对象参与的循环引用，而js对象之间即使形成循环引用，也不会产生内存泄漏，因为对js对象的回收算法不是计数的方式：\n\n```js\nfunction closure(){\n    var oDiv = document.getElementById('oDiv');//oDiv用完之后一直驻留在内存中\n    oDiv.onclick = function () {\n        alert('oDiv.innerHTML');//这里用oDiv导致内存泄露\n    };\n}\n\n// 以上代码创建了一个作为 div 元素事件处理程序的闭包，而这个闭包则又创建了一个循环引用。\n// 由于匿名函数保存了一个对closure()的活动对象的引用，因此就会导致无法减少 div 的引用数。\n// 只要匿名函数存在，element 的引用数至少也是1，因此它所占用的内存就永远不会被回收\n\nclosure();\n\n\n//最后应将oDiv解除引用来避免内存泄露\nfunction closure(){\n    var oDiv = document.getElementById('oDiv');\n    var test = oDiv.innerHTML;\n    oDiv.onclick = function () {\n        alert(test);\n    };\n    oDiv = null;\n}\n// 解决办法: 把 oDiv.innerHTML 的一个副本保存在一个变量中，\n// 从而消除闭包中该变量的循环引用,同时将 oDiv 变量设为null。\n```\n\n所以我们要保持良好的编程习惯，在使用完闭包后记得释放内存：\n\n```js\nfunction fn1() {\n  var arr = new Array(9999999999999)\n\n  function fn2() {\n    console.log(arr)\n  }\n  return fn2\n}\nvar f = fn1()\nf() // 调用完后没有释放，arr就会一直在内存中占着，导致内存泄漏\n// 记得释放\nf = null\n```\n","source":"_posts/对闭包的理解.md","raw":"---\ntitle: 对闭包的理解\ncategories:\n  - 前端\n  - JS\nabbrlink: 29980\ndate: 2018-12-20 23:37:59\ntags:\n- 闭包\n---\n\n## 什么是闭包\n\n我一直认为，MDN是前端学习的在线指南。只要有不懂的语法，或者不懂的概念，查找资料的首选就应该是它。虽然早些年做iOS开发的时候就就接触过闭包，但如今已经忘得一干二净，所以在想要了解闭包的时候，第一件事就是在MDN中搜索。[其中](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures)给到了一个闭包的例子：\n\n```js\nfunction makeFunc() {\n    var name = \"Mozilla\";    // name 是一个被 init 创建的局部变量\n    function displayName() { // displayName() 是内部函数,一个闭包\n        alert(name);         // 使用了父函数中声明的变量\n    }\n    return displayName;      // 返回 displayName 这个函数\n}\n\nvar myFunc = makeFunc();\nmyFunc(); // 当执行myFunc时，其实调用了displayName，会弹窗显示\"Mozilla\"\n```\n\n<!-- more -->\n\n在上面这个例子中，一个函数套了一个函数，且这个内部函数使用到了外部函数中的变量，这个时候就形成了闭包。有什么用呢？其中一个用处就如上面代码所示，能够让 makeFunc 函数外面也能访问 name 这个局部变量。换句话说，闭包缓存了数据，延长了作用域链。\n\nKyle Simpson编写的[You-Dont-Know-JS](https://github.com/getify/You-Dont-Know-JS)中对闭包的总结我觉得很精髓：\n\n> 闭包就是当一个函数即使是在它的词法作用域之外被调用时，也可以记住并访问它的词法作用域。\n\n## 闭包的特性\n\n1. 函数内再嵌套函数\n2. 内部函数可以引用外层的参数和变量\n3. 参数和变量不会被垃圾回收机制回收\n\n## 闭包的用途\n\n### 读取正确的值\n\n一个经典的例子，给 ul>li 下面的每个 li 节点添加点击事件，让其弹出当前 li 元素的索引：\n\n```js\n<ul id=\"testUL\">\n    <li> index = 0</li>\n    <li> index = 1</li>\n    <li> index = 2</li>\n    <li> index = 3</li>\n</ul>\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for (var i = 0; i < nodes.length; i += 1) {\n        nodes[i].onclick = function () {\n            console.log(i);\n        }\n    }\n</script>\n```\n\n\n\n运行上述代码后就会发现，每次打印的结果都显示为4，而不是真正的索引值。这是因为点击事件的匿名函数发生在for循环之后，而for循环执行完毕时 i 的值就为4，所以点谁都是同样的结果。那么这个时候就能通过[立即执行函数](https://developer.mozilla.org/zh-CN/docs/Glossary/立即执行函数表达式) + **闭包**的方法解决此问题：\n\n```html\n<script type=\"text/javascript\">\n    var nodes = document.getElementsByTagName(\"li\");\n    for (var i = 0; i < nodes.length; i += 1) {\n        nodes[i].onclick = (function (i) { // 1. IIFE创建一个函数作用域\n            return function () { // 4. 返回这个匿名函数，延长作用域链\n                // 3. 内部嵌套的匿名函数使用到了IIFE的参数i，形成闭包\n                console.log(i);\n            }\n        })(i); // 2. 给IIFE传递每次for循环的i\n    }\n</script>\n```\n\n这个时候触发click事件，打印的值就是li元素的索引了。\n\n### 高级排他\n\n这个例子有点像上面的，现在我们要个需求：在一个 `ul li` 列表中，鼠标移入时高亮当前li标签，移除之前li标签的高亮状态。\n\n常规写法如下：\n\n```js\n// 假设给li添加active类可以让标签高亮\nwindow.onload = function() {\n    let list = document.querySelectorAll('li')\n    // 遍历每个标签\n    for (let i = 0; i < list.length; i++) {\n      const li = list[i]\n      li.onmouseover = function() {\n        // mouseover触发后遍历整个列表，将所有标签class设为空\n        for (let j = 0; j < list.length; j++) {\n          list[j].className = ''\n        }\n        // 最后给当前li标签添加active\n        this.className = 'active'\n      }\n    }\n  }\n```\n\n上面的代码能够实现功能，然而一旦列表非常长性能就不高，所以可以利用闭包来缓存li标签的索引，使其与标签一一对应：\n\n```js\nwindow.onload = function() {\n  let list = document.querySelectorAll('li')\n  // 记录上一次选中的li标签的对应索引\n  let preActiveIndex = 0\n  for (let i = 0; i < list.length; i++) {\n    (function(j) {\n      const li = list[i]\n      li.onmouseover = function() {\n        // 清除上次li标签的高亮\n        list[preActiveIndex].className = ''\n        // 设置当前位高亮\n        this.className = 'active'\n        // 赋值\n        preActiveIndex = j\n      }\n    })(i)\n  }\n}\n```\n\n### 模块化开发\n\n在团队开发中，为了避免命名冲突通常不同成员会把自己的代码单独封装起来，最后return一个对象出去，挂载到window上。这样其他人也可以使用，而且能在一定程度上避免命名冲突：\n\n```js\n(function(w) {\n  var money = 1000;\n  function get() {\n    money *= 10\n    console.log(\"赚了一笔钱，总资产：\" + money + \"元\")\n  }\n  function send() {\n    money--\n    console.log(\"花了一笔钱，总资产：\" + money + \"元\")\n  }\n\n  // 向外暴露对象\n  w.myTools = {\n    get,\n    set\n  }\n})(window)\n```\n\n### 函数节流防抖\n\n在日常开发中，我们也经常用到函数节流与防抖，通常我们会将它们封装为函数，这样可以在需要的地方直接调用使用，还不会污染全局：\n\n```html\n<!DOCTYPE html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n  <title>防抖节流</title>\n</head>\n<body>\n  <input id=\"input\" type=\"text\">\n  <!-- 函数防抖 -->\n  <script>\n    function debounce(fn, delay) {\n      var timer = null\n      return function() {\n        var ctx = this,\n            args = arguments\n        if (timer) {\n          window.clearTimeout(timer)\n        }\n        timer = setTimeout(function() {\n          fn.apply(ctx, args)\n          timer = null\n        }, delay);\n      }\n    }\n    // 搜索框做函数防抖避免用户高频输入内容\n    input.addEventListener('input', debounce(function(e) {\n      console.log(e.target.value)\n    }, 500))\n  </script>\n  <!-- 函数节流 -->\n  <script>\n    function throttle(fn, delay) {\n      var canUse = true\n      return function() {\n        var ctx = this,\n            args = arguments\n        if (canUse) {\n          fn.apply(ctx, args)\n          canUse = false\n          setTimeout(() => {\n            canUse = true\n          }, delay);\n        }\n      }\n    }\n    // 对于像onresize这样的高频事件，可以使用函数节流让其回调函数中的代码隔一段时间再次执行\n    window.onresize = throttle(function(e) {\n      input.value = Math.random() * 100\n    }, 1000)\n  </script>\n</body>\n</html>\n```\n\n## 内存泄漏\n\n其实闭包并不会造成内存泄漏，现在的垃圾回收机制已经很成熟了。但早期的IE（ie4-ie6）版本里，对宿主对象（也就是document对象）采用是引用计数的[垃圾回收机制](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management)，闭包导致内存泄漏的一个原因就是这个算法的一个缺陷。循环引用会导致没法回收，这个循环引用只限定于有宿主对象参与的循环引用，而js对象之间即使形成循环引用，也不会产生内存泄漏，因为对js对象的回收算法不是计数的方式：\n\n```js\nfunction closure(){\n    var oDiv = document.getElementById('oDiv');//oDiv用完之后一直驻留在内存中\n    oDiv.onclick = function () {\n        alert('oDiv.innerHTML');//这里用oDiv导致内存泄露\n    };\n}\n\n// 以上代码创建了一个作为 div 元素事件处理程序的闭包，而这个闭包则又创建了一个循环引用。\n// 由于匿名函数保存了一个对closure()的活动对象的引用，因此就会导致无法减少 div 的引用数。\n// 只要匿名函数存在，element 的引用数至少也是1，因此它所占用的内存就永远不会被回收\n\nclosure();\n\n\n//最后应将oDiv解除引用来避免内存泄露\nfunction closure(){\n    var oDiv = document.getElementById('oDiv');\n    var test = oDiv.innerHTML;\n    oDiv.onclick = function () {\n        alert(test);\n    };\n    oDiv = null;\n}\n// 解决办法: 把 oDiv.innerHTML 的一个副本保存在一个变量中，\n// 从而消除闭包中该变量的循环引用,同时将 oDiv 变量设为null。\n```\n\n所以我们要保持良好的编程习惯，在使用完闭包后记得释放内存：\n\n```js\nfunction fn1() {\n  var arr = new Array(9999999999999)\n\n  function fn2() {\n    console.log(arr)\n  }\n  return fn2\n}\nvar f = fn1()\nf() // 调用完后没有释放，arr就会一直在内存中占着，导致内存泄漏\n// 记得释放\nf = null\n```\n","slug":"对闭包的理解","published":1,"updated":"2020-11-21T15:45:38.266Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyg70059khsr3kmigevs","content":"<h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>我一直认为，MDN是前端学习的在线指南。只要有不懂的语法，或者不懂的概念，查找资料的首选就应该是它。虽然早些年做iOS开发的时候就就接触过闭包，但如今已经忘得一干二净，所以在想要了解闭包的时候，第一件事就是在MDN中搜索。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">其中</a>给到了一个闭包的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Mozilla&quot;</span>;    <span class=\"comment\">// name 是一个被 init 创建的局部变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// displayName() 是内部函数,一个闭包</span></span><br><span class=\"line\">        alert(name);         <span class=\"comment\">// 使用了父函数中声明的变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> displayName;      <span class=\"comment\">// 返回 displayName 这个函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</span><br><span class=\"line\">myFunc(); <span class=\"comment\">// 当执行myFunc时，其实调用了displayName，会弹窗显示&quot;Mozilla&quot;</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<p>在上面这个例子中，一个函数套了一个函数，且这个内部函数使用到了外部函数中的变量，这个时候就形成了闭包。有什么用呢？其中一个用处就如上面代码所示，能够让 makeFunc 函数外面也能访问 name 这个局部变量。换句话说，闭包缓存了数据，延长了作用域链。</p>\n<p>Kyle Simpson编写的<a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a>中对闭包的总结我觉得很精髓：</p>\n<blockquote>\n<p>闭包就是当一个函数即使是在它的词法作用域之外被调用时，也可以记住并访问它的词法作用域。</p>\n</blockquote>\n<h2 id=\"闭包的特性\"><a href=\"#闭包的特性\" class=\"headerlink\" title=\"闭包的特性\"></a>闭包的特性</h2><ol>\n<li>函数内再嵌套函数</li>\n<li>内部函数可以引用外层的参数和变量</li>\n<li>参数和变量不会被垃圾回收机制回收</li>\n</ol>\n<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><h3 id=\"读取正确的值\"><a href=\"#读取正确的值\" class=\"headerlink\" title=\"读取正确的值\"></a>读取正确的值</h3><p>一个经典的例子，给 ul&gt;li 下面的每个 li 节点添加点击事件，让其弹出当前 li 元素的索引：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">&quot;testUL&quot;</span>&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">0</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">1</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">2</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">3</span>&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nodes[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行上述代码后就会发现，每次打印的结果都显示为4，而不是真正的索引值。这是因为点击事件的匿名函数发生在for循环之后，而for循环执行完毕时 i 的值就为4，所以点谁都是同样的结果。那么这个时候就能通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">立即执行函数</a> + <strong>闭包</strong>的方法解决此问题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;li&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i += <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        nodes[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123; <span class=\"comment\">// 1. IIFE创建一个函数作用域</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 4. 返回这个匿名函数，延长作用域链</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 3. 内部嵌套的匿名函数使用到了IIFE的参数i，形成闭包</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(i);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">        &#125;)(i); <span class=\"comment\">// 2. 给IIFE传递每次for循环的i</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候触发click事件，打印的值就是li元素的索引了。</p>\n<h3 id=\"高级排他\"><a href=\"#高级排他\" class=\"headerlink\" title=\"高级排他\"></a>高级排他</h3><p>这个例子有点像上面的，现在我们要个需求：在一个 <code>ul li</code> 列表中，鼠标移入时高亮当前li标签，移除之前li标签的高亮状态。</p>\n<p>常规写法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设给li添加active类可以让标签高亮</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 遍历每个标签</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = list[i]</span><br><span class=\"line\">      li.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// mouseover触发后遍历整个列表，将所有标签class设为空</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; list.length; j++) &#123;</span><br><span class=\"line\">          list[j].className = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后给当前li标签添加active</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码能够实现功能，然而一旦列表非常长性能就不高，所以可以利用闭包来缓存li标签的索引，使其与标签一一对应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 记录上一次选中的li标签的对应索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> preActiveIndex = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = list[i]</span><br><span class=\"line\">      li.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除上次li标签的高亮</span></span><br><span class=\"line\">        list[preActiveIndex].className = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置当前位高亮</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 赋值</span></span><br><span class=\"line\">        preActiveIndex = j</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块化开发\"><a href=\"#模块化开发\" class=\"headerlink\" title=\"模块化开发\"></a>模块化开发</h3><p>在团队开发中，为了避免命名冲突通常不同成员会把自己的代码单独封装起来，最后return一个对象出去，挂载到window上。这样其他人也可以使用，而且能在一定程度上避免命名冲突：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    money *= <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;赚了一笔钱，总资产：&quot;</span> + money + <span class=\"string\">&quot;元&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    money--</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;花了一笔钱，总资产：&quot;</span> + money + <span class=\"string\">&quot;元&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 向外暴露对象</span></span><br><span class=\"line\">  w.myTools = &#123;</span><br><span class=\"line\">    get,</span><br><span class=\"line\">    set</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数节流防抖\"><a href=\"#函数节流防抖\" class=\"headerlink\" title=\"函数节流防抖\"></a>函数节流防抖</h3><p>在日常开发中，我们也经常用到函数节流与防抖，通常我们会将它们封装为函数，这样可以在需要的地方直接调用使用，还不会污染全局：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>防抖节流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 函数防抖 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ctx = <span class=\"built_in\">this</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            args = <span class=\"built_in\">arguments</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (timer) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">window</span>.clearTimeout(timer)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">          fn.apply(ctx, args)</span><br><span class=\"line\"><span class=\"javascript\">          timer = <span class=\"literal\">null</span></span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框做函数防抖避免用户高频输入内容</span></span></span><br><span class=\"line\"><span class=\"javascript\">    input.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(e.target.value)</span></span><br><span class=\"line\">    &#125;, 500))</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 函数节流 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> canUse = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ctx = <span class=\"built_in\">this</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            args = <span class=\"built_in\">arguments</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (canUse) &#123;</span></span><br><span class=\"line\">          fn.apply(ctx, args)</span><br><span class=\"line\"><span class=\"javascript\">          canUse = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            canUse = <span class=\"literal\">true</span></span></span><br><span class=\"line\">          &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 对于像onresize这样的高频事件，可以使用函数节流让其回调函数中的代码隔一段时间再次执行</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onresize = throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      input.value = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span></span></span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>其实闭包并不会造成内存泄漏，现在的垃圾回收机制已经很成熟了。但早期的IE（ie4-ie6）版本里，对宿主对象（也就是document对象）采用是引用计数的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management\">垃圾回收机制</a>，闭包导致内存泄漏的一个原因就是这个算法的一个缺陷。循环引用会导致没法回收，这个循环引用只限定于有宿主对象参与的循环引用，而js对象之间即使形成循环引用，也不会产生内存泄漏，因为对js对象的回收算法不是计数的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;oDiv&#x27;</span>);<span class=\"comment\">//oDiv用完之后一直驻留在内存中</span></span><br><span class=\"line\">    oDiv.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;oDiv.innerHTML&#x27;</span>);<span class=\"comment\">//这里用oDiv导致内存泄露</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码创建了一个作为 div 元素事件处理程序的闭包，而这个闭包则又创建了一个循环引用。</span></span><br><span class=\"line\"><span class=\"comment\">// 由于匿名函数保存了一个对closure()的活动对象的引用，因此就会导致无法减少 div 的引用数。</span></span><br><span class=\"line\"><span class=\"comment\">// 只要匿名函数存在，element 的引用数至少也是1，因此它所占用的内存就永远不会被回收</span></span><br><span class=\"line\"></span><br><span class=\"line\">closure();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后应将oDiv解除引用来避免内存泄露</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;oDiv&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = oDiv.innerHTML;</span><br><span class=\"line\">    oDiv.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(test);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    oDiv = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 解决办法: 把 oDiv.innerHTML 的一个副本保存在一个变量中，</span></span><br><span class=\"line\"><span class=\"comment\">// 从而消除闭包中该变量的循环引用,同时将 oDiv 变量设为null。</span></span><br></pre></td></tr></table></figure>\n\n<p>所以我们要保持良好的编程习惯，在使用完闭包后记得释放内存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">9999999999999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn1()</span><br><span class=\"line\">f() <span class=\"comment\">// 调用完后没有释放，arr就会一直在内存中占着，导致内存泄漏</span></span><br><span class=\"line\"><span class=\"comment\">// 记得释放</span></span><br><span class=\"line\">f = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"什么是闭包\"><a href=\"#什么是闭包\" class=\"headerlink\" title=\"什么是闭包\"></a>什么是闭包</h2><p>我一直认为，MDN是前端学习的在线指南。只要有不懂的语法，或者不懂的概念，查找资料的首选就应该是它。虽然早些年做iOS开发的时候就就接触过闭包，但如今已经忘得一干二净，所以在想要了解闭包的时候，第一件事就是在MDN中搜索。<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Closures\">其中</a>给到了一个闭包的例子：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">makeFunc</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> name = <span class=\"string\">&quot;Mozilla&quot;</span>;    <span class=\"comment\">// name 是一个被 init 创建的局部变量</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">displayName</span>(<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// displayName() 是内部函数,一个闭包</span></span><br><span class=\"line\">        alert(name);         <span class=\"comment\">// 使用了父函数中声明的变量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> displayName;      <span class=\"comment\">// 返回 displayName 这个函数</span></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> myFunc = makeFunc();</span><br><span class=\"line\">myFunc(); <span class=\"comment\">// 当执行myFunc时，其实调用了displayName，会弹窗显示&quot;Mozilla&quot;</span></span><br></pre></td></tr></table></figure>","more":"<p>在上面这个例子中，一个函数套了一个函数，且这个内部函数使用到了外部函数中的变量，这个时候就形成了闭包。有什么用呢？其中一个用处就如上面代码所示，能够让 makeFunc 函数外面也能访问 name 这个局部变量。换句话说，闭包缓存了数据，延长了作用域链。</p>\n<p>Kyle Simpson编写的<a href=\"https://github.com/getify/You-Dont-Know-JS\">You-Dont-Know-JS</a>中对闭包的总结我觉得很精髓：</p>\n<blockquote>\n<p>闭包就是当一个函数即使是在它的词法作用域之外被调用时，也可以记住并访问它的词法作用域。</p>\n</blockquote>\n<h2 id=\"闭包的特性\"><a href=\"#闭包的特性\" class=\"headerlink\" title=\"闭包的特性\"></a>闭包的特性</h2><ol>\n<li>函数内再嵌套函数</li>\n<li>内部函数可以引用外层的参数和变量</li>\n<li>参数和变量不会被垃圾回收机制回收</li>\n</ol>\n<h2 id=\"闭包的用途\"><a href=\"#闭包的用途\" class=\"headerlink\" title=\"闭包的用途\"></a>闭包的用途</h2><h3 id=\"读取正确的值\"><a href=\"#读取正确的值\" class=\"headerlink\" title=\"读取正确的值\"></a>读取正确的值</h3><p>一个经典的例子，给 ul&gt;li 下面的每个 li 节点添加点击事件，让其弹出当前 li 元素的索引：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;ul id=<span class=\"string\">&quot;testUL&quot;</span>&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">0</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">1</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">2</span>&lt;/li&gt;</span><br><span class=\"line\">    &lt;li&gt; index = <span class=\"number\">3</span>&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;script type=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;li&quot;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i += <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">        nodes[i].onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(i);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>运行上述代码后就会发现，每次打印的结果都显示为4，而不是真正的索引值。这是因为点击事件的匿名函数发生在for循环之后，而for循环执行完毕时 i 的值就为4，所以点谁都是同样的结果。那么这个时候就能通过<a href=\"https://developer.mozilla.org/zh-CN/docs/Glossary/%E7%AB%8B%E5%8D%B3%E6%89%A7%E8%A1%8C%E5%87%BD%E6%95%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F\">立即执行函数</a> + <strong>闭包</strong>的方法解决此问题：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text/javascript&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">var</span> nodes = <span class=\"built_in\">document</span>.getElementsByTagName(<span class=\"string\">&quot;li&quot;</span>);</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; nodes.length; i += <span class=\"number\">1</span>) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        nodes[i].onclick = (<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">i</span>) </span>&#123; <span class=\"comment\">// 1. IIFE创建一个函数作用域</span></span></span><br><span class=\"line\"><span class=\"javascript\">            <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123; <span class=\"comment\">// 4. 返回这个匿名函数，延长作用域链</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"comment\">// 3. 内部嵌套的匿名函数使用到了IIFE的参数i，形成闭包</span></span></span><br><span class=\"line\"><span class=\"javascript\">                <span class=\"built_in\">console</span>.log(i);</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"><span class=\"javascript\">        &#125;)(i); <span class=\"comment\">// 2. 给IIFE传递每次for循环的i</span></span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>这个时候触发click事件，打印的值就是li元素的索引了。</p>\n<h3 id=\"高级排他\"><a href=\"#高级排他\" class=\"headerlink\" title=\"高级排他\"></a>高级排他</h3><p>这个例子有点像上面的，现在我们要个需求：在一个 <code>ul li</code> 列表中，鼠标移入时高亮当前li标签，移除之前li标签的高亮状态。</p>\n<p>常规写法如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 假设给li添加active类可以让标签高亮</span></span><br><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">    <span class=\"comment\">// 遍历每个标签</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = list[i]</span><br><span class=\"line\">      li.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// mouseover触发后遍历整个列表，将所有标签class设为空</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> j = <span class=\"number\">0</span>; j &lt; list.length; j++) &#123;</span><br><span class=\"line\">          list[j].className = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 最后给当前li标签添加active</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n\n<p>上面的代码能够实现功能，然而一旦列表非常长性能就不高，所以可以利用闭包来缓存li标签的索引，使其与标签一一对应：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">window</span>.onload = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">let</span> list = <span class=\"built_in\">document</span>.querySelectorAll(<span class=\"string\">&#x27;li&#x27;</span>)</span><br><span class=\"line\">  <span class=\"comment\">// 记录上一次选中的li标签的对应索引</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> preActiveIndex = <span class=\"number\">0</span></span><br><span class=\"line\">  <span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> i = <span class=\"number\">0</span>; i &lt; list.length; i++) &#123;</span><br><span class=\"line\">    (<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">j</span>) </span>&#123;</span><br><span class=\"line\">      <span class=\"keyword\">const</span> li = list[i]</span><br><span class=\"line\">      li.onmouseover = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 清除上次li标签的高亮</span></span><br><span class=\"line\">        list[preActiveIndex].className = <span class=\"string\">&#x27;&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 设置当前位高亮</span></span><br><span class=\"line\">        <span class=\"built_in\">this</span>.className = <span class=\"string\">&#x27;active&#x27;</span></span><br><span class=\"line\">        <span class=\"comment\">// 赋值</span></span><br><span class=\"line\">        preActiveIndex = j</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)(i)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块化开发\"><a href=\"#模块化开发\" class=\"headerlink\" title=\"模块化开发\"></a>模块化开发</h3><p>在团队开发中，为了避免命名冲突通常不同成员会把自己的代码单独封装起来，最后return一个对象出去，挂载到window上。这样其他人也可以使用，而且能在一定程度上避免命名冲突：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">w</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> money = <span class=\"number\">1000</span>;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">get</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    money *= <span class=\"number\">10</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;赚了一笔钱，总资产：&quot;</span> + money + <span class=\"string\">&quot;元&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">send</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    money--</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;花了一笔钱，总资产：&quot;</span> + money + <span class=\"string\">&quot;元&quot;</span>)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"comment\">// 向外暴露对象</span></span><br><span class=\"line\">  w.myTools = &#123;</span><br><span class=\"line\">    get,</span><br><span class=\"line\">    set</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;)(<span class=\"built_in\">window</span>)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"函数节流防抖\"><a href=\"#函数节流防抖\" class=\"headerlink\" title=\"函数节流防抖\"></a>函数节流防抖</h3><p>在日常开发中，我们也经常用到函数节流与防抖，通常我们会将它们封装为函数，这样可以在需要的地方直接调用使用，还不会污染全局：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>防抖节流<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">input</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;input&quot;</span> <span class=\"attr\">type</span>=<span class=\"string\">&quot;text&quot;</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 函数防抖 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">debounce</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> timer = <span class=\"literal\">null</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ctx = <span class=\"built_in\">this</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            args = <span class=\"built_in\">arguments</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (timer) &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">window</span>.clearTimeout(timer)</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"><span class=\"javascript\">        timer = <span class=\"built_in\">setTimeout</span>(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\">          fn.apply(ctx, args)</span><br><span class=\"line\"><span class=\"javascript\">          timer = <span class=\"literal\">null</span></span></span><br><span class=\"line\">        &#125;, delay);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 搜索框做函数防抖避免用户高频输入内容</span></span></span><br><span class=\"line\"><span class=\"javascript\">    input.addEventListener(<span class=\"string\">&#x27;input&#x27;</span>, debounce(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"built_in\">console</span>.log(e.target.value)</span></span><br><span class=\"line\">    &#125;, 500))</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\">  <span class=\"comment\">&lt;!-- 函数节流 --&gt;</span></span><br><span class=\"line\">  <span class=\"tag\">&lt;<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">throttle</span>(<span class=\"params\">fn, delay</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">var</span> canUse = <span class=\"literal\">true</span></span></span><br><span class=\"line\"><span class=\"javascript\">      <span class=\"keyword\">return</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">var</span> ctx = <span class=\"built_in\">this</span>,</span></span><br><span class=\"line\"><span class=\"javascript\">            args = <span class=\"built_in\">arguments</span></span></span><br><span class=\"line\"><span class=\"javascript\">        <span class=\"keyword\">if</span> (canUse) &#123;</span></span><br><span class=\"line\">          fn.apply(ctx, args)</span><br><span class=\"line\"><span class=\"javascript\">          canUse = <span class=\"literal\">false</span></span></span><br><span class=\"line\"><span class=\"javascript\">          <span class=\"built_in\">setTimeout</span>(<span class=\"function\">() =&gt;</span> &#123;</span></span><br><span class=\"line\"><span class=\"javascript\">            canUse = <span class=\"literal\">true</span></span></span><br><span class=\"line\">          &#125;, delay);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"comment\">// 对于像onresize这样的高频事件，可以使用函数节流让其回调函数中的代码隔一段时间再次执行</span></span></span><br><span class=\"line\"><span class=\"javascript\">    <span class=\"built_in\">window</span>.onresize = throttle(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">e</span>) </span>&#123;</span></span><br><span class=\"line\"><span class=\"javascript\">      input.value = <span class=\"built_in\">Math</span>.random() * <span class=\"number\">100</span></span></span><br><span class=\"line\">    &#125;, 1000)</span><br><span class=\"line\">  <span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<h2 id=\"内存泄漏\"><a href=\"#内存泄漏\" class=\"headerlink\" title=\"内存泄漏\"></a>内存泄漏</h2><p>其实闭包并不会造成内存泄漏，现在的垃圾回收机制已经很成熟了。但早期的IE（ie4-ie6）版本里，对宿主对象（也就是document对象）采用是引用计数的<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Memory_Management\">垃圾回收机制</a>，闭包导致内存泄漏的一个原因就是这个算法的一个缺陷。循环引用会导致没法回收，这个循环引用只限定于有宿主对象参与的循环引用，而js对象之间即使形成循环引用，也不会产生内存泄漏，因为对js对象的回收算法不是计数的方式：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;oDiv&#x27;</span>);<span class=\"comment\">//oDiv用完之后一直驻留在内存中</span></span><br><span class=\"line\">    oDiv.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(<span class=\"string\">&#x27;oDiv.innerHTML&#x27;</span>);<span class=\"comment\">//这里用oDiv导致内存泄露</span></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 以上代码创建了一个作为 div 元素事件处理程序的闭包，而这个闭包则又创建了一个循环引用。</span></span><br><span class=\"line\"><span class=\"comment\">// 由于匿名函数保存了一个对closure()的活动对象的引用，因此就会导致无法减少 div 的引用数。</span></span><br><span class=\"line\"><span class=\"comment\">// 只要匿名函数存在，element 的引用数至少也是1，因此它所占用的内存就永远不会被回收</span></span><br><span class=\"line\"></span><br><span class=\"line\">closure();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//最后应将oDiv解除引用来避免内存泄露</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">closure</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> oDiv = <span class=\"built_in\">document</span>.getElementById(<span class=\"string\">&#x27;oDiv&#x27;</span>);</span><br><span class=\"line\">    <span class=\"keyword\">var</span> test = oDiv.innerHTML;</span><br><span class=\"line\">    oDiv.onclick = <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        alert(test);</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    oDiv = <span class=\"literal\">null</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 解决办法: 把 oDiv.innerHTML 的一个副本保存在一个变量中，</span></span><br><span class=\"line\"><span class=\"comment\">// 从而消除闭包中该变量的循环引用,同时将 oDiv 变量设为null。</span></span><br></pre></td></tr></table></figure>\n\n<p>所以我们要保持良好的编程习惯，在使用完闭包后记得释放内存：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn1</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">var</span> arr = <span class=\"keyword\">new</span> <span class=\"built_in\">Array</span>(<span class=\"number\">9999999999999</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">fn2</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(arr)</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> fn2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">var</span> f = fn1()</span><br><span class=\"line\">f() <span class=\"comment\">// 调用完后没有释放，arr就会一直在内存中占着，导致内存泄漏</span></span><br><span class=\"line\"><span class=\"comment\">// 记得释放</span></span><br><span class=\"line\">f = <span class=\"literal\">null</span></span><br></pre></td></tr></table></figure>"},{"title":"对HTML语义化的理解","abbrlink":2906,"date":"2018-09-21T12:08:10.000Z","_content":"\n## 对HTML语义化的理解\n\n核心：用正确的标签做正确的事情\n\n1. 利与开发：方便代码的阅读和维护\n2. 利于SEO：方便爬虫根据 语义标签 确定 页面结构 和 关键字 的权重\n\n<!-- more -->\n\n## 常见语义化标签\n\n一图胜千言：\n\n{% asset_img f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg 语义化demo %}\n\n\n元素细节：\n\n- [main](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main) 存放每个页面独有的内容。每个页面上只能用一次 `<main>`，且直位于 [``](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body)中。最好不要把它嵌套进其它元素。\n- [article](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article) 包围的内容即一篇文章，与页面其它部分无关（比如一篇博文）。\n- [section](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section) 与 `<article>` 类似，但 `<section>` 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 [标题](https://developer.mozilla.org/en-US/Learn/HTML/Howto/Set_up_a_proper_title_hierarchy) 作为开头；也可以把一篇 `<article>` 分成若干部分并分别置于不同的 `<section>` 中，也可以把一个区段 `<section>` 分成若干部分并分别置于不同的 `<article>` 中，取决于上下文。\n- [aside](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside) 包含一些间接信息（术语条目、作者简介、相关链接，等等）。\n- [header](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header) 是简介形式的内容。如果它是 [body](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body) 的子元素，那么就是网站的全局页眉。如果它是 [article](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article) 或[section](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section) 的子元素，那么它是这些部分特有的页眉（此 `<header>` 非彼 [标题](https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#增加一个标题)）。\n- [nav](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav) 包含页面主导航功能。其中不应包含二级链接等内容。\n- [footer](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer) 包含了页面的页脚部分。\n\n来源：[文档与网站架构](https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/文件和网站结构)","source":"_posts/对HTML语义化的理解.md","raw":"---\ntitle: 对HTML语义化的理解\ncategories:\n  - 前端\n  - HTML\nabbrlink: 2906\ndate: 2018-09-21 20:08:10\ntags:\n---\n\n## 对HTML语义化的理解\n\n核心：用正确的标签做正确的事情\n\n1. 利与开发：方便代码的阅读和维护\n2. 利于SEO：方便爬虫根据 语义标签 确定 页面结构 和 关键字 的权重\n\n<!-- more -->\n\n## 常见语义化标签\n\n一图胜千言：\n\n{% asset_img f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg 语义化demo %}\n\n\n元素细节：\n\n- [main](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main) 存放每个页面独有的内容。每个页面上只能用一次 `<main>`，且直位于 [``](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body)中。最好不要把它嵌套进其它元素。\n- [article](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article) 包围的内容即一篇文章，与页面其它部分无关（比如一篇博文）。\n- [section](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section) 与 `<article>` 类似，但 `<section>` 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 [标题](https://developer.mozilla.org/en-US/Learn/HTML/Howto/Set_up_a_proper_title_hierarchy) 作为开头；也可以把一篇 `<article>` 分成若干部分并分别置于不同的 `<section>` 中，也可以把一个区段 `<section>` 分成若干部分并分别置于不同的 `<article>` 中，取决于上下文。\n- [aside](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside) 包含一些间接信息（术语条目、作者简介、相关链接，等等）。\n- [header](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header) 是简介形式的内容。如果它是 [body](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body) 的子元素，那么就是网站的全局页眉。如果它是 [article](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article) 或[section](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section) 的子元素，那么它是这些部分特有的页眉（此 `<header>` 非彼 [标题](https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#增加一个标题)）。\n- [nav](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav) 包含页面主导航功能。其中不应包含二级链接等内容。\n- [footer](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer) 包含了页面的页脚部分。\n\n来源：[文档与网站架构](https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/文件和网站结构)","slug":"对HTML语义化的理解","published":1,"updated":"2020-11-21T15:03:18.947Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyg8005ckhsrdge49tpc","content":"<h2 id=\"对HTML语义化的理解\"><a href=\"#对HTML语义化的理解\" class=\"headerlink\" title=\"对HTML语义化的理解\"></a>对HTML语义化的理解</h2><p>核心：用正确的标签做正确的事情</p>\n<ol>\n<li>利与开发：方便代码的阅读和维护</li>\n<li>利于SEO：方便爬虫根据 语义标签 确定 页面结构 和 关键字 的权重</li>\n</ol>\n<a id=\"more\"></a>\n\n<h2 id=\"常见语义化标签\"><a href=\"#常见语义化标签\" class=\"headerlink\" title=\"常见语义化标签\"></a>常见语义化标签</h2><p>一图胜千言：</p>\n<img src=\"/posts/2906/f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg\" class=\"\" title=\"语义化demo\">\n\n\n<p>元素细节：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main\">main</a> 存放每个页面独有的内容。每个页面上只能用一次 <code>&lt;main&gt;</code>，且直位于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body\">``</a>中。最好不要把它嵌套进其它元素。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article\">article</a> 包围的内容即一篇文章，与页面其它部分无关（比如一篇博文）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section\">section</a> 与 <code>&lt;article&gt;</code> 类似，但 <code>&lt;section&gt;</code> 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 <a href=\"https://developer.mozilla.org/en-US/Learn/HTML/Howto/Set_up_a_proper_title_hierarchy\">标题</a> 作为开头；也可以把一篇 <code>&lt;article&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;section&gt;</code> 中，也可以把一个区段 <code>&lt;section&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;article&gt;</code> 中，取决于上下文。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside\">aside</a> 包含一些间接信息（术语条目、作者简介、相关链接，等等）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header\">header</a> 是简介形式的内容。如果它是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body\">body</a> 的子元素，那么就是网站的全局页眉。如果它是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article\">article</a> 或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section\">section</a> 的子元素，那么它是这些部分特有的页眉（此 <code>&lt;header&gt;</code> 非彼 <a href=\"https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\">标题</a>）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav\">nav</a> 包含页面主导航功能。其中不应包含二级链接等内容。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer\">footer</a> 包含了页面的页脚部分。</li>\n</ul>\n<p>来源：<a href=\"https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/%E6%96%87%E4%BB%B6%E5%92%8C%E7%BD%91%E7%AB%99%E7%BB%93%E6%9E%84\">文档与网站架构</a></p>\n","site":{"data":{}},"excerpt":"<h2 id=\"对HTML语义化的理解\"><a href=\"#对HTML语义化的理解\" class=\"headerlink\" title=\"对HTML语义化的理解\"></a>对HTML语义化的理解</h2><p>核心：用正确的标签做正确的事情</p>\n<ol>\n<li>利与开发：方便代码的阅读和维护</li>\n<li>利于SEO：方便爬虫根据 语义标签 确定 页面结构 和 关键字 的权重</li>\n</ol>","more":"<h2 id=\"常见语义化标签\"><a href=\"#常见语义化标签\" class=\"headerlink\" title=\"常见语义化标签\"></a>常见语义化标签</h2><p>一图胜千言：</p>\n<img src=\"/posts/2906/f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg\" class=\"\" title=\"语义化demo\">\n\n\n<p>元素细节：</p>\n<ul>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/main\">main</a> 存放每个页面独有的内容。每个页面上只能用一次 <code>&lt;main&gt;</code>，且直位于 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body\">``</a>中。最好不要把它嵌套进其它元素。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article\">article</a> 包围的内容即一篇文章，与页面其它部分无关（比如一篇博文）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section\">section</a> 与 <code>&lt;article&gt;</code> 类似，但 <code>&lt;section&gt;</code> 更适用于组织页面使其按功能（比如迷你地图、一组文章标题和摘要）分块。一般的最佳用法是：以 <a href=\"https://developer.mozilla.org/en-US/Learn/HTML/Howto/Set_up_a_proper_title_hierarchy\">标题</a> 作为开头；也可以把一篇 <code>&lt;article&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;section&gt;</code> 中，也可以把一个区段 <code>&lt;section&gt;</code> 分成若干部分并分别置于不同的 <code>&lt;article&gt;</code> 中，取决于上下文。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/aside\">aside</a> 包含一些间接信息（术语条目、作者简介、相关链接，等等）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/header\">header</a> 是简介形式的内容。如果它是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/body\">body</a> 的子元素，那么就是网站的全局页眉。如果它是 <a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/article\">article</a> 或<a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/section\">section</a> 的子元素，那么它是这些部分特有的页眉（此 <code>&lt;header&gt;</code> 非彼 <a href=\"https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/The_head_metadata_in_HTML#%E5%A2%9E%E5%8A%A0%E4%B8%80%E4%B8%AA%E6%A0%87%E9%A2%98\">标题</a>）。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/nav\">nav</a> 包含页面主导航功能。其中不应包含二级链接等内容。</li>\n<li><a href=\"https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/footer\">footer</a> 包含了页面的页脚部分。</li>\n</ul>\n<p>来源：<a href=\"https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML/%E6%96%87%E4%BB%B6%E5%92%8C%E7%BD%91%E7%AB%99%E7%BB%93%E6%9E%84\">文档与网站架构</a></p>"},{"title":"常见排序算法","abbrlink":59937,"date":"2019-02-23T01:35:51.000Z","_content":"\n## 冒泡排序\n\n冒泡排序是一种交换排序，基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。\n\n### 算法步骤\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n### 动图演示\n\n{% asset_img 冒泡.gif 冒泡 %}\n\n<!-- more -->\n\n———— 动图来自《菜鸟教程》\n\n说明：绿色表示当前正在比较的两个相邻元素；橘黄色表示已排完序的元素，不再参与后续的比较\n\n### 代码实现（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction myBubbleSort(arr) {\n    var len = arr.length, temp;\n    for (var i = 0; i < len - 1; i++) { // 趟数\n        for (var j = 0; j < len - 1 - i; j++) { // 当前趟要比较的次数\n            if (arr[j] > arr[j+1]) {        // 相邻元素两两比较\n                temp = arr[j];              // 元素交换\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n代码与图片配合食用更加~\n\n{% asset_img 冒泡2.png 冒泡2 %}\n\n------\n\n## 选择排序\n\n选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。\n\n### 算法步骤\n\n1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 重复第2步，直到所有元素均排序完毕。\n\n### 动图演示\n\n{% asset_img 选择.gif 选择 %}\n\n### 代码实现（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction mySelectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {       // 第 i 轮选择\n        minIndex = i;                         // 每轮开始假设起始元素为最小值\n        for (var j = i + 1; j < len; j++) {   // 遍历剩余未排序元素\n            if (arr[j] < arr[minIndex]) {     // 寻找最小的数\n                minIndex = j;                 // 将最小数的索引保存\n            }\n        }\n        temp = arr[i];                         // 交换起始元素与真正的最小值\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n```\n\n配图：\n\n{% asset_img 选择2.png 选择2 %}\n\n------\n\n## 插入排序\n\n插入排序的原理应该是最容易理解的，因为只要你打过扑克牌就应该能秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n\n### 算法步骤\n\n1. 从第一个元素开始，该元素可以认为已经被排序；\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n5. 将新元素插入到该位置后；\n6. 重复步骤2~5。\n\n### 动图演示\n\n{% asset_img 插入.gif 插入 %}\n\n### 代码实现（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction myInsertSort(arr) {\n    var len = arr.length;\n    var insertItem; // 要插入的元素\n\n    // 从数组的第二个元素开始循环将数组中的元素插入\n    for (var i = 1; i < len; i++) {\n        insertItem = arr[i]; // 设置数组中的第2个元素为第一次遍历要插入的数据\n        var j = i - 1;       // 已排序好数组的最后一个元素的索引\n\n        // 将已排好序的元素从最后一个往前依次与待插入元素比较，\n        while (j >= 0 && insertItem < arr[j]) {\n            // 如果要插入的元素小于第j个元素,就将第j个元素向后移动\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        // 直到要插入的元素不小于第j个元素,将insertNote插入到数组中\n        arr[j + 1] = insertItem;\n    }\n    return arr;\n}\n// 例如for循环中 i 等于 2 时，已排序完毕的元素为[3,44]，进入for循环\n    // 待插入元素为 arr[2]，也就是38;\n    // j=i-1也就是2-1等于1\n    // while循环比较，待插入元素38是小于arr[j]（j=1）44 的 => 条件成立\n        // arr[j+1]要等于arr[j] => arr[2]要等于arr[1] => arr[2]=44 => 此刻数组前三个元素：[3,44,44]\n        // j-- => j=1-1也就是0\n    // 再来一轮while比较，待插入元素38现在不小于arr[j] 也就是arr[0]的3，所以直接退出while循环\n    // arr[j+1]=insertItem => arr[1]=38 => 数组前三排序完毕：[3,38,44]\n```\n\n------\n\n## 希尔排序\n\n希尔排序也是一种插入排序，它是简单插入排序的一个改进版，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。本文会以图解的方式详细介绍希尔排序的基本思想及其代码实现。\n\n希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n### 算法步骤(示例)\n\n在此我们选择增量 `gap=数组长度length/2`，缩小增量继续以 `gap = gap/2` 的方式，这种增量选择我们可以用一个序列来表示：`{n/2,(n/2)/2...1}`，称为增量序列。当然，希尔排序的增量序列有很多种，这里采用的是比较常用的一种作为示例：\n\n{% asset_img 希尔.png 希尔排序 %}\n\n在上面这幅图中：\n\n初始时，有一个大小为 10 的无序序列。\n\n在第一趟排序中，我们设 gap1 = 10 / 2 = 5，即相隔距离为 5 的元素组成一组，可以分为 5 组。接下来，按照直接插入排序的方法对每个组进行排序。\n\n在第二趟排序中，我们把上次的 gap 缩小一半，即 gap2 = gap1 / 2 = 2 (取整)。这样每相隔距离为 2 的元素组成一组，可以分为 2 组。按照直接插入排序的方法对每个组进行排序。\n\n在第三趟排序中，再次把 gap 缩小一半，即gap3 = gap2 / 2 = 1。 这样相隔距离为 1 的元素组成一组，即只有一组。按照直接插入排序的方法对每个组进行排序。此时，排序已经结束。\n\n**注意**：图中有两个相等数值的元素 5 和 5 。我们可以清楚的看到，在排序过程中，两个元素位置交换了。\n所以，希尔排序是不稳定的算法。\n\n### 代码演示（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction myShellSort(arr) {\n    var gap = Math.floor(arr.length / 2);\n\n    while (1 <= gap) {\n        // 把距离为 gap 的元素编为一个组，扫描所有组\n        for (var i = gap; i < arr.length; i++) {\n            var j = 0;\n            var temp = arr[i];\n\n            // 对距离为 gap 的元素组进行排序\n            for (j = i - gap; j >= 0 && temp < arr[j]; j = j - gap) {\n                arr[j + gap] = arr[j];\n            }\n            arr[j + gap] = temp;\n        }\n\n        console.log(`gap = ${gap}`);\n        console.log(arr);\n        gap = Math.floor(gap / 2); // 减小增量\n    }\n    return arr;\n}\n```\n\n------\n\n## 归并排序\n\n归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。\n\n{% asset_img 归并.png 分而治之 %}\n\n可以看到这种结构很像一棵完全二叉树，下面的归并排序代码将会采用递归去实现（你也可采用迭代的方式去实现）。**分**阶段可以理解为就是递归拆分子序列的过程，递归深度为logn。\n\n### 算法步骤\n\n1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列\n2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置\n3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置\n4. 重复步骤 3 直到某一指针达到序列尾\n5. 将另一序列剩下的所有元素直接复制到合并序列尾\n\n### 图片演示\n\n{% asset_img 归并2.png 归并排序 %}\n\n图片来自博客[《图解排序算法之归并排序》](https://www.cnblogs.com/chengxiao/p/6194356.html)\n\n### 代码实现\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction mergeSort(arr) { // 采用自上而下的递归方法\n    var len = arr.length;\n    if (len < 2) return arr;\n  \n    var middle = Math.floor(len / 2), // 将未排序数组拆分成两半分而治之\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n  \n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    var result = [];\n\n    while (left.length && right.length) {\n      \t// 两边的起始元素相互比较，始终将小的一方的头元素弹出，并push到准备好的容器result中\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n\n    return result;\n}\n```\n\n------\n\n## 快速排序\n\n快速排序的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的元素均比另一部分记录的元素小，继而再分别对这两部分记录递归的进行同样的排序操作。\n\n### 算法步骤\n\n1. 把数组中第一个元素当做一个基准值，称为“基准”（Pivot）\n\n{% asset_img 快排.png 快排 %}\n\n1. 重新排序数列，把所有比基准值小的元素摆放在基准前面，所有比基准值大元素摆放在基准后面。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n\n{% asset_img 快排2.png 快排2 %}\n\n{% asset_img 快排3.png 快排3 %}\n\n1. 递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n{% asset_img 快排4.png 快排4 %}\n\n### 分区（Partition）思路\n\n首先把未排序数组的第一个（最左边）元素设置为基准，把它的位置叫做 `l` ：\n\n{% asset_img 快排5.png 快排5 %}\n\n然后依次向后查看所有元素，在查看过程中，不断的调整后面元素的位置，使得后面的元素分为两部分，一部分都小于 v ；一部分都大于 v 。\n\n我们用 `j` 来不断记录这两部分的分割线位置。而 e 就是我们要判断的下一个元素，用索引 `i` 来表示，`i` 会遍历每一个元素，来看该如何调整这个元素。\n\n在下图中，我们用 `arr[l+1 ... j]` 来表示小于 v 的橙色部分，用 `arr[j+1 ... i-1]` 来表示大于 v 的紫色部分。\n\n{% asset_img 快排6.png 快排6 %}\n\n接下来就要看如何来调整下一个元素 e 的位置。分情况讨论：\n\n**当 e 大于 v 时**，我们直接让 e 融入大于 v 的部分，并让 `i++`\n\n{% asset_img 快排7.png 快排7 %}\n\n{% asset_img 快排8.png 快排8 %}\n\n\n**当 e 小于 v 时**，我们让 e 和大于 v 部分的第一个元素交换位置。\n\n{% asset_img 快排9.png 快排9 %}\n\n{% asset_img 快排10.png 快排10 %}\n\n把 e 融入到小于 v 的部分。此时就需要让分隔线的索引位置 `j++` ，相应的，索引 `i` 的位置也要 `i++` 以便查看下一个元素。\n\n{% asset_img 快排11.png 快排11 %}\n\n{% asset_img 快排12.png 快排12 %}\n\n以这样的步骤我们就能遍历完整个数组，如下图所示\n\n{% asset_img 快排13.png 快排13 %}\n\n\n现在还差最后一个步骤，那就是把基准值 v ，与小于 v 部分的最后一个元素交换位置。此刻 v 左边都小于它，v 右边都大于它，而 `j` 指向的就是基准值所在的位置。这样我们就完成了分区（Partition）操作。\n\n{% asset_img 快排14.png 快排14 %}\n\n### 代码实现\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction quickSort(arr, left, right) {\n    var len = arr.length,\n        partitionIndex,         // 分区索引\n        left = typeof left != 'number' ? 0 : left,\n        right = typeof right != 'number' ? len - 1 : right;\n\n    if (left >= right) return;\n\n    // 通过分区找到分隔点，再分别快排左右两部分\n    partitionIndex = partition(arr, left, right);\n    quickSort(arr, left, partitionIndex - 1);\n    quickSort(arr, partitionIndex + 1, right);\n    return arr;\n}\n\nfunction partition(arr, left, right) { // 分区操作\n    var v = left,   // 设定基准值（pivot）\n        j = left;  // arr[l+1...j] ; arr[j+1...i]\n    for (var i = j + 1; i <= right; i++) {\n        if (arr[i] < arr[v]) { // 当前要判断元素 小于 基准元素时\n            j++; // 分隔点右移\n            swap(arr, i, j);   // 让 当前元素 与大于 v 部分的第一个元素交换位置\n        }\n        // 此处不用写 else ，因为当大于基准元素时，直接i++就好，\n        // 而i++，for循环已经帮我们做了\n    }\n    // 循环完毕后，交换基准值和小于v部分的最后一个元素的位置\n    swap(arr, v, j);\n    return j;\n}\n\nfunction swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nconsole.log(quickSort(arr, 0, arr.length));\n```\n\n------\n\n## 计数排序\n\n计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n\n### 算法步骤\n\n1. 找出待排序的数组中最大和最小的元素；\n2. 统计数组中每个值为 i 的元素出现的次数，存入数组 Count 的第 i 项；\n3. 对所有的计数累加（从 Count 中的第一个元素开始，每一项和前一项相加）；\n4. 反向填充目标数组：将每个元素 i 放在新数组的第 Count(i) 项，每放一个元素就将 Count(i) 减去1。\n\n### 代码实现\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction countingSort(arr) {\n    var len = arr.length,\n        Result = [],\n        Count = [],\n        min = max = arr[0];\n\n    // 查找最大最小值,并将arr数置入Count数组中,统计出现次数\n    for (var i = 0; i < len; i++) {\n        min = min <= arr[i] ? min : arr[i];\n        max = max >= arr[i] ? max : arr[i];\n        Count[arr[i]] = Count[arr[i]] ? Count[arr[i]] + 1 : 1;\n    }\n\n    // 从最小值->最大值,将计数逐项相加\n    for (var j = min; j < max; j++) {\n        Count[j + 1] = (Count[j + 1] || 0) + (Count[j] || 0);\n    }\n    // Count中,下标为arr数值,数据为arr数值出现次数;反向填充数据进入Result数据\n    for (var k = len - 1; k >= 0; k--) {\n        // Result[位置] = arr数据\n        Result[Count[arr[k]] - 1] = arr[k];\n        // 减少Count数组中保存的计数\n        Count[arr[k]]--;\n    }\n    return Result;\n}\n\nconsole.log(countingSort(arr));\n```\n","source":"_posts/常见排序算法.md","raw":"---\ntitle: 常见排序算法\ncategories:\n  - 后端\n  - 算法\nabbrlink: 59937\ndate: 2019-02-23 09:35:51\ntags:\n---\n\n## 冒泡排序\n\n冒泡排序是一种交换排序，基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。\n\n### 算法步骤\n\n1. 比较相邻的元素。如果第一个比第二个大，就交换他们两个。\n2. 对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。\n3. 针对所有的元素重复以上的步骤，除了最后一个。\n4. 持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。\n\n### 动图演示\n\n{% asset_img 冒泡.gif 冒泡 %}\n\n<!-- more -->\n\n———— 动图来自《菜鸟教程》\n\n说明：绿色表示当前正在比较的两个相邻元素；橘黄色表示已排完序的元素，不再参与后续的比较\n\n### 代码实现（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction myBubbleSort(arr) {\n    var len = arr.length, temp;\n    for (var i = 0; i < len - 1; i++) { // 趟数\n        for (var j = 0; j < len - 1 - i; j++) { // 当前趟要比较的次数\n            if (arr[j] > arr[j+1]) {        // 相邻元素两两比较\n                temp = arr[j];              // 元素交换\n                arr[j] = arr[j+1];\n                arr[j+1] = temp;\n            }\n        }\n    }\n    return arr;\n}\n```\n\n代码与图片配合食用更加~\n\n{% asset_img 冒泡2.png 冒泡2 %}\n\n------\n\n## 选择排序\n\n选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。\n\n### 算法步骤\n\n1. 首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。\n2. 再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。\n3. 重复第2步，直到所有元素均排序完毕。\n\n### 动图演示\n\n{% asset_img 选择.gif 选择 %}\n\n### 代码实现（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction mySelectionSort(arr) {\n    var len = arr.length;\n    var minIndex, temp;\n    for (var i = 0; i < len - 1; i++) {       // 第 i 轮选择\n        minIndex = i;                         // 每轮开始假设起始元素为最小值\n        for (var j = i + 1; j < len; j++) {   // 遍历剩余未排序元素\n            if (arr[j] < arr[minIndex]) {     // 寻找最小的数\n                minIndex = j;                 // 将最小数的索引保存\n            }\n        }\n        temp = arr[i];                         // 交换起始元素与真正的最小值\n        arr[i] = arr[minIndex];\n        arr[minIndex] = temp;\n    }\n    return arr;\n}\n```\n\n配图：\n\n{% asset_img 选择2.png 选择2 %}\n\n------\n\n## 插入排序\n\n插入排序的原理应该是最容易理解的，因为只要你打过扑克牌就应该能秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。\n\n### 算法步骤\n\n1. 从第一个元素开始，该元素可以认为已经被排序；\n2. 取出下一个元素，在已经排序的元素序列中从后向前扫描；\n3. 如果该元素（已排序）大于新元素，将该元素移到下一位置；\n4. 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；\n5. 将新元素插入到该位置后；\n6. 重复步骤2~5。\n\n### 动图演示\n\n{% asset_img 插入.gif 插入 %}\n\n### 代码实现（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction myInsertSort(arr) {\n    var len = arr.length;\n    var insertItem; // 要插入的元素\n\n    // 从数组的第二个元素开始循环将数组中的元素插入\n    for (var i = 1; i < len; i++) {\n        insertItem = arr[i]; // 设置数组中的第2个元素为第一次遍历要插入的数据\n        var j = i - 1;       // 已排序好数组的最后一个元素的索引\n\n        // 将已排好序的元素从最后一个往前依次与待插入元素比较，\n        while (j >= 0 && insertItem < arr[j]) {\n            // 如果要插入的元素小于第j个元素,就将第j个元素向后移动\n            arr[j + 1] = arr[j];\n            j--;\n        }\n        // 直到要插入的元素不小于第j个元素,将insertNote插入到数组中\n        arr[j + 1] = insertItem;\n    }\n    return arr;\n}\n// 例如for循环中 i 等于 2 时，已排序完毕的元素为[3,44]，进入for循环\n    // 待插入元素为 arr[2]，也就是38;\n    // j=i-1也就是2-1等于1\n    // while循环比较，待插入元素38是小于arr[j]（j=1）44 的 => 条件成立\n        // arr[j+1]要等于arr[j] => arr[2]要等于arr[1] => arr[2]=44 => 此刻数组前三个元素：[3,44,44]\n        // j-- => j=1-1也就是0\n    // 再来一轮while比较，待插入元素38现在不小于arr[j] 也就是arr[0]的3，所以直接退出while循环\n    // arr[j+1]=insertItem => arr[1]=38 => 数组前三排序完毕：[3,38,44]\n```\n\n------\n\n## 希尔排序\n\n希尔排序也是一种插入排序，它是简单插入排序的一个改进版，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。本文会以图解的方式详细介绍希尔排序的基本思想及其代码实现。\n\n希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。\n\n### 算法步骤(示例)\n\n在此我们选择增量 `gap=数组长度length/2`，缩小增量继续以 `gap = gap/2` 的方式，这种增量选择我们可以用一个序列来表示：`{n/2,(n/2)/2...1}`，称为增量序列。当然，希尔排序的增量序列有很多种，这里采用的是比较常用的一种作为示例：\n\n{% asset_img 希尔.png 希尔排序 %}\n\n在上面这幅图中：\n\n初始时，有一个大小为 10 的无序序列。\n\n在第一趟排序中，我们设 gap1 = 10 / 2 = 5，即相隔距离为 5 的元素组成一组，可以分为 5 组。接下来，按照直接插入排序的方法对每个组进行排序。\n\n在第二趟排序中，我们把上次的 gap 缩小一半，即 gap2 = gap1 / 2 = 2 (取整)。这样每相隔距离为 2 的元素组成一组，可以分为 2 组。按照直接插入排序的方法对每个组进行排序。\n\n在第三趟排序中，再次把 gap 缩小一半，即gap3 = gap2 / 2 = 1。 这样相隔距离为 1 的元素组成一组，即只有一组。按照直接插入排序的方法对每个组进行排序。此时，排序已经结束。\n\n**注意**：图中有两个相等数值的元素 5 和 5 。我们可以清楚的看到，在排序过程中，两个元素位置交换了。\n所以，希尔排序是不稳定的算法。\n\n### 代码演示（JS）\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction myShellSort(arr) {\n    var gap = Math.floor(arr.length / 2);\n\n    while (1 <= gap) {\n        // 把距离为 gap 的元素编为一个组，扫描所有组\n        for (var i = gap; i < arr.length; i++) {\n            var j = 0;\n            var temp = arr[i];\n\n            // 对距离为 gap 的元素组进行排序\n            for (j = i - gap; j >= 0 && temp < arr[j]; j = j - gap) {\n                arr[j + gap] = arr[j];\n            }\n            arr[j + gap] = temp;\n        }\n\n        console.log(`gap = ${gap}`);\n        console.log(arr);\n        gap = Math.floor(gap / 2); // 减小增量\n    }\n    return arr;\n}\n```\n\n------\n\n## 归并排序\n\n归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。\n\n{% asset_img 归并.png 分而治之 %}\n\n可以看到这种结构很像一棵完全二叉树，下面的归并排序代码将会采用递归去实现（你也可采用迭代的方式去实现）。**分**阶段可以理解为就是递归拆分子序列的过程，递归深度为logn。\n\n### 算法步骤\n\n1. 申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列\n2. 设定两个指针，最初位置分别为两个已经排序序列的起始位置\n3. 比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置\n4. 重复步骤 3 直到某一指针达到序列尾\n5. 将另一序列剩下的所有元素直接复制到合并序列尾\n\n### 图片演示\n\n{% asset_img 归并2.png 归并排序 %}\n\n图片来自博客[《图解排序算法之归并排序》](https://www.cnblogs.com/chengxiao/p/6194356.html)\n\n### 代码实现\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction mergeSort(arr) { // 采用自上而下的递归方法\n    var len = arr.length;\n    if (len < 2) return arr;\n  \n    var middle = Math.floor(len / 2), // 将未排序数组拆分成两半分而治之\n        left = arr.slice(0, middle),\n        right = arr.slice(middle);\n  \n    return merge(mergeSort(left), mergeSort(right));\n}\n\nfunction merge(left, right) {\n    var result = [];\n\n    while (left.length && right.length) {\n      \t// 两边的起始元素相互比较，始终将小的一方的头元素弹出，并push到准备好的容器result中\n        if (left[0] <= right[0]) {\n            result.push(left.shift());\n        } else {\n            result.push(right.shift());\n        }\n    }\n\n    while (left.length)\n        result.push(left.shift());\n\n    while (right.length)\n        result.push(right.shift());\n\n    return result;\n}\n```\n\n------\n\n## 快速排序\n\n快速排序的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的元素均比另一部分记录的元素小，继而再分别对这两部分记录递归的进行同样的排序操作。\n\n### 算法步骤\n\n1. 把数组中第一个元素当做一个基准值，称为“基准”（Pivot）\n\n{% asset_img 快排.png 快排 %}\n\n1. 重新排序数列，把所有比基准值小的元素摆放在基准前面，所有比基准值大元素摆放在基准后面。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；\n\n{% asset_img 快排2.png 快排2 %}\n\n{% asset_img 快排3.png 快排3 %}\n\n1. 递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；\n\n{% asset_img 快排4.png 快排4 %}\n\n### 分区（Partition）思路\n\n首先把未排序数组的第一个（最左边）元素设置为基准，把它的位置叫做 `l` ：\n\n{% asset_img 快排5.png 快排5 %}\n\n然后依次向后查看所有元素，在查看过程中，不断的调整后面元素的位置，使得后面的元素分为两部分，一部分都小于 v ；一部分都大于 v 。\n\n我们用 `j` 来不断记录这两部分的分割线位置。而 e 就是我们要判断的下一个元素，用索引 `i` 来表示，`i` 会遍历每一个元素，来看该如何调整这个元素。\n\n在下图中，我们用 `arr[l+1 ... j]` 来表示小于 v 的橙色部分，用 `arr[j+1 ... i-1]` 来表示大于 v 的紫色部分。\n\n{% asset_img 快排6.png 快排6 %}\n\n接下来就要看如何来调整下一个元素 e 的位置。分情况讨论：\n\n**当 e 大于 v 时**，我们直接让 e 融入大于 v 的部分，并让 `i++`\n\n{% asset_img 快排7.png 快排7 %}\n\n{% asset_img 快排8.png 快排8 %}\n\n\n**当 e 小于 v 时**，我们让 e 和大于 v 部分的第一个元素交换位置。\n\n{% asset_img 快排9.png 快排9 %}\n\n{% asset_img 快排10.png 快排10 %}\n\n把 e 融入到小于 v 的部分。此时就需要让分隔线的索引位置 `j++` ，相应的，索引 `i` 的位置也要 `i++` 以便查看下一个元素。\n\n{% asset_img 快排11.png 快排11 %}\n\n{% asset_img 快排12.png 快排12 %}\n\n以这样的步骤我们就能遍历完整个数组，如下图所示\n\n{% asset_img 快排13.png 快排13 %}\n\n\n现在还差最后一个步骤，那就是把基准值 v ，与小于 v 部分的最后一个元素交换位置。此刻 v 左边都小于它，v 右边都大于它，而 `j` 指向的就是基准值所在的位置。这样我们就完成了分区（Partition）操作。\n\n{% asset_img 快排14.png 快排14 %}\n\n### 代码实现\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction quickSort(arr, left, right) {\n    var len = arr.length,\n        partitionIndex,         // 分区索引\n        left = typeof left != 'number' ? 0 : left,\n        right = typeof right != 'number' ? len - 1 : right;\n\n    if (left >= right) return;\n\n    // 通过分区找到分隔点，再分别快排左右两部分\n    partitionIndex = partition(arr, left, right);\n    quickSort(arr, left, partitionIndex - 1);\n    quickSort(arr, partitionIndex + 1, right);\n    return arr;\n}\n\nfunction partition(arr, left, right) { // 分区操作\n    var v = left,   // 设定基准值（pivot）\n        j = left;  // arr[l+1...j] ; arr[j+1...i]\n    for (var i = j + 1; i <= right; i++) {\n        if (arr[i] < arr[v]) { // 当前要判断元素 小于 基准元素时\n            j++; // 分隔点右移\n            swap(arr, i, j);   // 让 当前元素 与大于 v 部分的第一个元素交换位置\n        }\n        // 此处不用写 else ，因为当大于基准元素时，直接i++就好，\n        // 而i++，for循环已经帮我们做了\n    }\n    // 循环完毕后，交换基准值和小于v部分的最后一个元素的位置\n    swap(arr, v, j);\n    return j;\n}\n\nfunction swap(arr, i, j) {\n    var temp = arr[i];\n    arr[i] = arr[j];\n    arr[j] = temp;\n}\n\nconsole.log(quickSort(arr, 0, arr.length));\n```\n\n------\n\n## 计数排序\n\n计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。\n\n### 算法步骤\n\n1. 找出待排序的数组中最大和最小的元素；\n2. 统计数组中每个值为 i 的元素出现的次数，存入数组 Count 的第 i 项；\n3. 对所有的计数累加（从 Count 中的第一个元素开始，每一项和前一项相加）；\n4. 反向填充目标数组：将每个元素 i 放在新数组的第 Count(i) 项，每放一个元素就将 Count(i) 减去1。\n\n### 代码实现\n\n```js\nvar arr = [3, 44, 38, 5, 47, 15, 36, 26, 27, 2, 46, 4, 19, 50, 48];\n\nfunction countingSort(arr) {\n    var len = arr.length,\n        Result = [],\n        Count = [],\n        min = max = arr[0];\n\n    // 查找最大最小值,并将arr数置入Count数组中,统计出现次数\n    for (var i = 0; i < len; i++) {\n        min = min <= arr[i] ? min : arr[i];\n        max = max >= arr[i] ? max : arr[i];\n        Count[arr[i]] = Count[arr[i]] ? Count[arr[i]] + 1 : 1;\n    }\n\n    // 从最小值->最大值,将计数逐项相加\n    for (var j = min; j < max; j++) {\n        Count[j + 1] = (Count[j + 1] || 0) + (Count[j] || 0);\n    }\n    // Count中,下标为arr数值,数据为arr数值出现次数;反向填充数据进入Result数据\n    for (var k = len - 1; k >= 0; k--) {\n        // Result[位置] = arr数据\n        Result[Count[arr[k]] - 1] = arr[k];\n        // 减少Count数组中保存的计数\n        Count[arr[k]]--;\n    }\n    return Result;\n}\n\nconsole.log(countingSort(arr));\n```\n","slug":"常见排序算法","published":1,"updated":"2020-11-22T01:43:27.016Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxyga005fkhsr4hvudjc4","content":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序是一种交换排序，基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。</p>\n<h3 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<h3 id=\"动图演示\"><a href=\"#动图演示\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h3><img src=\"/posts/59937/%E5%86%92%E6%B3%A1.gif\" class=\"\" title=\"冒泡\">\n\n<a id=\"more\"></a>\n\n<p>———— 动图来自《菜鸟教程》</p>\n<p>说明：绿色表示当前正在比较的两个相邻元素；橘黄色表示已排完序的元素，不再参与后续的比较</p>\n<h3 id=\"代码实现（JS）\"><a href=\"#代码实现（JS）\" class=\"headerlink\" title=\"代码实现（JS）\"></a>代码实现（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myBubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">// 趟数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123; <span class=\"comment\">// 当前趟要比较的次数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">// 相邻元素两两比较</span></span><br><span class=\"line\">                temp = arr[j];              <span class=\"comment\">// 元素交换</span></span><br><span class=\"line\">                arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码与图片配合食用更加~</p>\n<img src=\"/posts/59937/%E5%86%92%E6%B3%A12.png\" class=\"\" title=\"冒泡2\">\n\n<hr>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p>\n<h3 id=\"算法步骤-1\"><a href=\"#算法步骤-1\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>重复第2步，直到所有元素均排序完毕。</li>\n</ol>\n<h3 id=\"动图演示-1\"><a href=\"#动图演示-1\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h3><img src=\"/posts/59937/%E9%80%89%E6%8B%A9.gif\" class=\"\" title=\"选择\">\n\n<h3 id=\"代码实现（JS）-1\"><a href=\"#代码实现（JS）-1\" class=\"headerlink\" title=\"代码实现（JS）\"></a>代码实现（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySelectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;       <span class=\"comment\">// 第 i 轮选择</span></span><br><span class=\"line\">        minIndex = i;                         <span class=\"comment\">// 每轮开始假设起始元素为最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;   <span class=\"comment\">// 遍历剩余未排序元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">// 寻找最小的数</span></span><br><span class=\"line\">                minIndex = j;                 <span class=\"comment\">// 将最小数的索引保存</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp = arr[i];                         <span class=\"comment\">// 交换起始元素与真正的最小值</span></span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配图：</p>\n<img src=\"/posts/59937/%E9%80%89%E6%8B%A92.png\" class=\"\" title=\"选择2\">\n\n<hr>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>插入排序的原理应该是最容易理解的，因为只要你打过扑克牌就应该能秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>\n<h3 id=\"算法步骤-2\"><a href=\"#算法步骤-2\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤2~5。</li>\n</ol>\n<h3 id=\"动图演示-2\"><a href=\"#动图演示-2\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h3><img src=\"/posts/59937/%E6%8F%92%E5%85%A5.gif\" class=\"\" title=\"插入\">\n\n<h3 id=\"代码实现（JS）-2\"><a href=\"#代码实现（JS）-2\" class=\"headerlink\" title=\"代码实现（JS）\"></a>代码实现（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInsertSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insertItem; <span class=\"comment\">// 要插入的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从数组的第二个元素开始循环将数组中的元素插入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        insertItem = arr[i]; <span class=\"comment\">// 设置数组中的第2个元素为第一次遍历要插入的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>;       <span class=\"comment\">// 已排序好数组的最后一个元素的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将已排好序的元素从最后一个往前依次与待插入元素比较，</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; insertItem &lt; arr[j]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要插入的元素小于第j个元素,就将第j个元素向后移动</span></span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 直到要插入的元素不小于第j个元素,将insertNote插入到数组中</span></span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = insertItem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 例如for循环中 i 等于 2 时，已排序完毕的元素为[3,44]，进入for循环</span></span><br><span class=\"line\">    <span class=\"comment\">// 待插入元素为 arr[2]，也就是38;</span></span><br><span class=\"line\">    <span class=\"comment\">// j=i-1也就是2-1等于1</span></span><br><span class=\"line\">    <span class=\"comment\">// while循环比较，待插入元素38是小于arr[j]（j=1）44 的 =&gt; 条件成立</span></span><br><span class=\"line\">        <span class=\"comment\">// arr[j+1]要等于arr[j] =&gt; arr[2]要等于arr[1] =&gt; arr[2]=44 =&gt; 此刻数组前三个元素：[3,44,44]</span></span><br><span class=\"line\">        <span class=\"comment\">// j-- =&gt; j=1-1也就是0</span></span><br><span class=\"line\">    <span class=\"comment\">// 再来一轮while比较，待插入元素38现在不小于arr[j] 也就是arr[0]的3，所以直接退出while循环</span></span><br><span class=\"line\">    <span class=\"comment\">// arr[j+1]=insertItem =&gt; arr[1]=38 =&gt; 数组前三排序完毕：[3,38,44]</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><p>希尔排序也是一种插入排序，它是简单插入排序的一个改进版，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。本文会以图解的方式详细介绍希尔排序的基本思想及其代码实现。</p>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n<h3 id=\"算法步骤-示例\"><a href=\"#算法步骤-示例\" class=\"headerlink\" title=\"算法步骤(示例)\"></a>算法步骤(示例)</h3><p>在此我们选择增量 <code>gap=数组长度length/2</code>，缩小增量继续以 <code>gap = gap/2</code> 的方式，这种增量选择我们可以用一个序列来表示：<code>&#123;n/2,(n/2)/2...1&#125;</code>，称为增量序列。当然，希尔排序的增量序列有很多种，这里采用的是比较常用的一种作为示例：</p>\n<img src=\"/posts/59937/%E5%B8%8C%E5%B0%94.png\" class=\"\" title=\"希尔排序\">\n\n<p>在上面这幅图中：</p>\n<p>初始时，有一个大小为 10 的无序序列。</p>\n<p>在第一趟排序中，我们设 gap1 = 10 / 2 = 5，即相隔距离为 5 的元素组成一组，可以分为 5 组。接下来，按照直接插入排序的方法对每个组进行排序。</p>\n<p>在第二趟排序中，我们把上次的 gap 缩小一半，即 gap2 = gap1 / 2 = 2 (取整)。这样每相隔距离为 2 的元素组成一组，可以分为 2 组。按照直接插入排序的方法对每个组进行排序。</p>\n<p>在第三趟排序中，再次把 gap 缩小一半，即gap3 = gap2 / 2 = 1。 这样相隔距离为 1 的元素组成一组，即只有一组。按照直接插入排序的方法对每个组进行排序。此时，排序已经结束。</p>\n<p><strong>注意</strong>：图中有两个相等数值的元素 5 和 5 。我们可以清楚的看到，在排序过程中，两个元素位置交换了。<br>所以，希尔排序是不稳定的算法。</p>\n<h3 id=\"代码演示（JS）\"><a href=\"#代码演示（JS）\" class=\"headerlink\" title=\"代码演示（JS）\"></a>代码演示（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myShellSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gap = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span> &lt;= gap) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把距离为 gap 的元素编为一个组，扫描所有组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 对距离为 gap 的元素组进行排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]; j = j - gap) &#123;</span><br><span class=\"line\">                arr[j + gap] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + gap] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`gap = <span class=\"subst\">$&#123;gap&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">        gap = <span class=\"built_in\">Math</span>.floor(gap / <span class=\"number\">2</span>); <span class=\"comment\">// 减小增量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>\n<img src=\"/posts/59937/%E5%BD%92%E5%B9%B6.png\" class=\"\" title=\"分而治之\">\n\n<p>可以看到这种结构很像一棵完全二叉树，下面的归并排序代码将会采用递归去实现（你也可采用迭代的方式去实现）。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为logn。</p>\n<h3 id=\"算法步骤-3\"><a href=\"#算法步骤-3\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>\n<li>重复步骤 3 直到某一指针达到序列尾</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>\n</ol>\n<h3 id=\"图片演示\"><a href=\"#图片演示\" class=\"headerlink\" title=\"图片演示\"></a>图片演示</h3><img src=\"/posts/59937/%E5%BD%92%E5%B9%B62.png\" class=\"\" title=\"归并排序\">\n\n<p>图片来自博客<a href=\"https://www.cnblogs.com/chengxiao/p/6194356.html\">《图解排序算法之归并排序》</a></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>) </span>&#123; <span class=\"comment\">// 采用自上而下的递归方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>), <span class=\"comment\">// 将未排序数组拆分成两半分而治之</span></span><br><span class=\"line\">        left = arr.slice(<span class=\"number\">0</span>, middle),</span><br><span class=\"line\">        right = arr.slice(middle);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 两边的起始元素相互比较，始终将小的一方的头元素弹出，并push到准备好的容器result中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length)</span><br><span class=\"line\">        result.push(left.shift());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right.length)</span><br><span class=\"line\">        result.push(right.shift());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的元素均比另一部分记录的元素小，继而再分别对这两部分记录递归的进行同样的排序操作。</p>\n<h3 id=\"算法步骤-4\"><a href=\"#算法步骤-4\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>把数组中第一个元素当做一个基准值，称为“基准”（Pivot）</li>\n</ol>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%92.png\" class=\"\" title=\"快排\">\n\n<ol>\n<li>重新排序数列，把所有比基准值小的元素摆放在基准前面，所有比基准值大元素摆放在基准后面。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n</ol>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%922.png\" class=\"\" title=\"快排2\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%923.png\" class=\"\" title=\"快排3\">\n\n<ol>\n<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>\n</ol>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%924.png\" class=\"\" title=\"快排4\">\n\n<h3 id=\"分区（Partition）思路\"><a href=\"#分区（Partition）思路\" class=\"headerlink\" title=\"分区（Partition）思路\"></a>分区（Partition）思路</h3><p>首先把未排序数组的第一个（最左边）元素设置为基准，把它的位置叫做 <code>l</code> ：</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%925.png\" class=\"\" title=\"快排5\">\n\n<p>然后依次向后查看所有元素，在查看过程中，不断的调整后面元素的位置，使得后面的元素分为两部分，一部分都小于 v ；一部分都大于 v 。</p>\n<p>我们用 <code>j</code> 来不断记录这两部分的分割线位置。而 e 就是我们要判断的下一个元素，用索引 <code>i</code> 来表示，<code>i</code> 会遍历每一个元素，来看该如何调整这个元素。</p>\n<p>在下图中，我们用 <code>arr[l+1 ... j]</code> 来表示小于 v 的橙色部分，用 <code>arr[j+1 ... i-1]</code> 来表示大于 v 的紫色部分。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%926.png\" class=\"\" title=\"快排6\">\n\n<p>接下来就要看如何来调整下一个元素 e 的位置。分情况讨论：</p>\n<p><strong>当 e 大于 v 时</strong>，我们直接让 e 融入大于 v 的部分，并让 <code>i++</code></p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%927.png\" class=\"\" title=\"快排7\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%928.png\" class=\"\" title=\"快排8\">\n\n\n<p><strong>当 e 小于 v 时</strong>，我们让 e 和大于 v 部分的第一个元素交换位置。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%929.png\" class=\"\" title=\"快排9\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9210.png\" class=\"\" title=\"快排10\">\n\n<p>把 e 融入到小于 v 的部分。此时就需要让分隔线的索引位置 <code>j++</code> ，相应的，索引 <code>i</code> 的位置也要 <code>i++</code> 以便查看下一个元素。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9211.png\" class=\"\" title=\"快排11\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9212.png\" class=\"\" title=\"快排12\">\n\n<p>以这样的步骤我们就能遍历完整个数组，如下图所示</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9213.png\" class=\"\" title=\"快排13\">\n\n\n<p>现在还差最后一个步骤，那就是把基准值 v ，与小于 v 部分的最后一个元素交换位置。此刻 v 左边都小于它，v 右边都大于它，而 <code>j</code> 指向的就是基准值所在的位置。这样我们就完成了分区（Partition）操作。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9214.png\" class=\"\" title=\"快排14\">\n\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        partitionIndex,         <span class=\"comment\">// 分区索引</span></span><br><span class=\"line\">        left = <span class=\"keyword\">typeof</span> left != <span class=\"string\">&#x27;number&#x27;</span> ? <span class=\"number\">0</span> : left,</span><br><span class=\"line\">        right = <span class=\"keyword\">typeof</span> right != <span class=\"string\">&#x27;number&#x27;</span> ? len - <span class=\"number\">1</span> : right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过分区找到分隔点，再分别快排左右两部分</span></span><br><span class=\"line\">    partitionIndex = partition(arr, left, right);</span><br><span class=\"line\">    quickSort(arr, left, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort(arr, partitionIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">arr, left, right</span>) </span>&#123; <span class=\"comment\">// 分区操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> v = left,   <span class=\"comment\">// 设定基准值（pivot）</span></span><br><span class=\"line\">        j = left;  <span class=\"comment\">// arr[l+1...j] ; arr[j+1...i]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = j + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[v]) &#123; <span class=\"comment\">// 当前要判断元素 小于 基准元素时</span></span><br><span class=\"line\">            j++; <span class=\"comment\">// 分隔点右移</span></span><br><span class=\"line\">            swap(arr, i, j);   <span class=\"comment\">// 让 当前元素 与大于 v 部分的第一个元素交换位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 此处不用写 else ，因为当大于基准元素时，直接i++就好，</span></span><br><span class=\"line\">        <span class=\"comment\">// 而i++，for循环已经帮我们做了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环完毕后，交换基准值和小于v部分的最后一个元素的位置</span></span><br><span class=\"line\">    swap(arr, v, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(arr, <span class=\"number\">0</span>, arr.length));</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h2><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n<h3 id=\"算法步骤-5\"><a href=\"#算法步骤-5\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>找出待排序的数组中最大和最小的元素；</li>\n<li>统计数组中每个值为 i 的元素出现的次数，存入数组 Count 的第 i 项；</li>\n<li>对所有的计数累加（从 Count 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组：将每个元素 i 放在新数组的第 Count(i) 项，每放一个元素就将 Count(i) 减去1。</li>\n</ol>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        Result = [],</span><br><span class=\"line\">        Count = [],</span><br><span class=\"line\">        min = max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找最大最小值,并将arr数置入Count数组中,统计出现次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        min = min &lt;= arr[i] ? min : arr[i];</span><br><span class=\"line\">        max = max &gt;= arr[i] ? max : arr[i];</span><br><span class=\"line\">        Count[arr[i]] = Count[arr[i]] ? Count[arr[i]] + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从最小值-&gt;最大值,将计数逐项相加</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = min; j &lt; max; j++) &#123;</span><br><span class=\"line\">        Count[j + <span class=\"number\">1</span>] = (Count[j + <span class=\"number\">1</span>] || <span class=\"number\">0</span>) + (Count[j] || <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Count中,下标为arr数值,数据为arr数值出现次数;反向填充数据进入Result数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = len - <span class=\"number\">1</span>; k &gt;= <span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Result[位置] = arr数据</span></span><br><span class=\"line\">        Result[Count[arr[k]] - <span class=\"number\">1</span>] = arr[k];</span><br><span class=\"line\">        <span class=\"comment\">// 减少Count数组中保存的计数</span></span><br><span class=\"line\">        Count[arr[k]]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(countingSort(arr));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><p>冒泡排序是一种交换排序，基本思想是：两两比较相邻记录的关键字，如果反序则交换，直到没有反序的记录为止。</p>\n<h3 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li>\n<li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li>\n<li>针对所有的元素重复以上的步骤，除了最后一个。</li>\n<li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li>\n</ol>\n<h3 id=\"动图演示\"><a href=\"#动图演示\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h3><img src=\"/posts/59937/%E5%86%92%E6%B3%A1.gif\" class=\"\" title=\"冒泡\">","more":"<p>———— 动图来自《菜鸟教程》</p>\n<p>说明：绿色表示当前正在比较的两个相邻元素；橘黄色表示已排完序的元素，不再参与后续的比较</p>\n<h3 id=\"代码实现（JS）\"><a href=\"#代码实现（JS）\" class=\"headerlink\" title=\"代码实现（JS）\"></a>代码实现（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myBubbleSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123; <span class=\"comment\">// 趟数</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = <span class=\"number\">0</span>; j &lt; len - <span class=\"number\">1</span> - i; j++) &#123; <span class=\"comment\">// 当前趟要比较的次数</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &gt; arr[j+<span class=\"number\">1</span>]) &#123;        <span class=\"comment\">// 相邻元素两两比较</span></span><br><span class=\"line\">                temp = arr[j];              <span class=\"comment\">// 元素交换</span></span><br><span class=\"line\">                arr[j] = arr[j+<span class=\"number\">1</span>];</span><br><span class=\"line\">                arr[j+<span class=\"number\">1</span>] = temp;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>代码与图片配合食用更加~</p>\n<img src=\"/posts/59937/%E5%86%92%E6%B3%A12.png\" class=\"\" title=\"冒泡2\">\n\n<hr>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><p>选择排序是一种简单直观的排序算法，无论什么数据进去都是 O(n²) 的时间复杂度。所以用到它的时候，数据规模越小越好。唯一的好处可能就是不占用额外的内存空间了吧。</p>\n<h3 id=\"算法步骤-1\"><a href=\"#算法步骤-1\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置。</li>\n<li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li>\n<li>重复第2步，直到所有元素均排序完毕。</li>\n</ol>\n<h3 id=\"动图演示-1\"><a href=\"#动图演示-1\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h3><img src=\"/posts/59937/%E9%80%89%E6%8B%A9.gif\" class=\"\" title=\"选择\">\n\n<h3 id=\"代码实现（JS）-1\"><a href=\"#代码实现（JS）-1\" class=\"headerlink\" title=\"代码实现（JS）\"></a>代码实现（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mySelectionSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> minIndex, temp;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len - <span class=\"number\">1</span>; i++) &#123;       <span class=\"comment\">// 第 i 轮选择</span></span><br><span class=\"line\">        minIndex = i;                         <span class=\"comment\">// 每轮开始假设起始元素为最小值</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = i + <span class=\"number\">1</span>; j &lt; len; j++) &#123;   <span class=\"comment\">// 遍历剩余未排序元素</span></span><br><span class=\"line\">            <span class=\"keyword\">if</span> (arr[j] &lt; arr[minIndex]) &#123;     <span class=\"comment\">// 寻找最小的数</span></span><br><span class=\"line\">                minIndex = j;                 <span class=\"comment\">// 将最小数的索引保存</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        temp = arr[i];                         <span class=\"comment\">// 交换起始元素与真正的最小值</span></span><br><span class=\"line\">        arr[i] = arr[minIndex];</span><br><span class=\"line\">        arr[minIndex] = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配图：</p>\n<img src=\"/posts/59937/%E9%80%89%E6%8B%A92.png\" class=\"\" title=\"选择2\">\n\n<hr>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><p>插入排序的原理应该是最容易理解的，因为只要你打过扑克牌就应该能秒懂。插入排序是一种最简单直观的排序算法，它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。</p>\n<h3 id=\"算法步骤-2\"><a href=\"#算法步骤-2\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>从第一个元素开始，该元素可以认为已经被排序；</li>\n<li>取出下一个元素，在已经排序的元素序列中从后向前扫描；</li>\n<li>如果该元素（已排序）大于新元素，将该元素移到下一位置；</li>\n<li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置；</li>\n<li>将新元素插入到该位置后；</li>\n<li>重复步骤2~5。</li>\n</ol>\n<h3 id=\"动图演示-2\"><a href=\"#动图演示-2\" class=\"headerlink\" title=\"动图演示\"></a>动图演示</h3><img src=\"/posts/59937/%E6%8F%92%E5%85%A5.gif\" class=\"\" title=\"插入\">\n\n<h3 id=\"代码实现（JS）-2\"><a href=\"#代码实现（JS）-2\" class=\"headerlink\" title=\"代码实现（JS）\"></a>代码实现（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myInsertSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> insertItem; <span class=\"comment\">// 要插入的元素</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从数组的第二个元素开始循环将数组中的元素插入</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">1</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        insertItem = arr[i]; <span class=\"comment\">// 设置数组中的第2个元素为第一次遍历要插入的数据</span></span><br><span class=\"line\">        <span class=\"keyword\">var</span> j = i - <span class=\"number\">1</span>;       <span class=\"comment\">// 已排序好数组的最后一个元素的索引</span></span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// 将已排好序的元素从最后一个往前依次与待插入元素比较，</span></span><br><span class=\"line\">        <span class=\"keyword\">while</span> (j &gt;= <span class=\"number\">0</span> &amp;&amp; insertItem &lt; arr[j]) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 如果要插入的元素小于第j个元素,就将第j个元素向后移动</span></span><br><span class=\"line\">            arr[j + <span class=\"number\">1</span>] = arr[j];</span><br><span class=\"line\">            j--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 直到要插入的元素不小于第j个元素,将insertNote插入到数组中</span></span><br><span class=\"line\">        arr[j + <span class=\"number\">1</span>] = insertItem;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 例如for循环中 i 等于 2 时，已排序完毕的元素为[3,44]，进入for循环</span></span><br><span class=\"line\">    <span class=\"comment\">// 待插入元素为 arr[2]，也就是38;</span></span><br><span class=\"line\">    <span class=\"comment\">// j=i-1也就是2-1等于1</span></span><br><span class=\"line\">    <span class=\"comment\">// while循环比较，待插入元素38是小于arr[j]（j=1）44 的 =&gt; 条件成立</span></span><br><span class=\"line\">        <span class=\"comment\">// arr[j+1]要等于arr[j] =&gt; arr[2]要等于arr[1] =&gt; arr[2]=44 =&gt; 此刻数组前三个元素：[3,44,44]</span></span><br><span class=\"line\">        <span class=\"comment\">// j-- =&gt; j=1-1也就是0</span></span><br><span class=\"line\">    <span class=\"comment\">// 再来一轮while比较，待插入元素38现在不小于arr[j] 也就是arr[0]的3，所以直接退出while循环</span></span><br><span class=\"line\">    <span class=\"comment\">// arr[j+1]=insertItem =&gt; arr[1]=38 =&gt; 数组前三排序完毕：[3,38,44]</span></span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"希尔排序\"><a href=\"#希尔排序\" class=\"headerlink\" title=\"希尔排序\"></a>希尔排序</h2><p>希尔排序也是一种插入排序，它是简单插入排序的一个改进版，也称为缩小增量排序，同时该算法是冲破O(n2）的第一批算法之一。本文会以图解的方式详细介绍希尔排序的基本思想及其代码实现。</p>\n<p>希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。</p>\n<h3 id=\"算法步骤-示例\"><a href=\"#算法步骤-示例\" class=\"headerlink\" title=\"算法步骤(示例)\"></a>算法步骤(示例)</h3><p>在此我们选择增量 <code>gap=数组长度length/2</code>，缩小增量继续以 <code>gap = gap/2</code> 的方式，这种增量选择我们可以用一个序列来表示：<code>&#123;n/2,(n/2)/2...1&#125;</code>，称为增量序列。当然，希尔排序的增量序列有很多种，这里采用的是比较常用的一种作为示例：</p>\n<img src=\"/posts/59937/%E5%B8%8C%E5%B0%94.png\" class=\"\" title=\"希尔排序\">\n\n<p>在上面这幅图中：</p>\n<p>初始时，有一个大小为 10 的无序序列。</p>\n<p>在第一趟排序中，我们设 gap1 = 10 / 2 = 5，即相隔距离为 5 的元素组成一组，可以分为 5 组。接下来，按照直接插入排序的方法对每个组进行排序。</p>\n<p>在第二趟排序中，我们把上次的 gap 缩小一半，即 gap2 = gap1 / 2 = 2 (取整)。这样每相隔距离为 2 的元素组成一组，可以分为 2 组。按照直接插入排序的方法对每个组进行排序。</p>\n<p>在第三趟排序中，再次把 gap 缩小一半，即gap3 = gap2 / 2 = 1。 这样相隔距离为 1 的元素组成一组，即只有一组。按照直接插入排序的方法对每个组进行排序。此时，排序已经结束。</p>\n<p><strong>注意</strong>：图中有两个相等数值的元素 5 和 5 。我们可以清楚的看到，在排序过程中，两个元素位置交换了。<br>所以，希尔排序是不稳定的算法。</p>\n<h3 id=\"代码演示（JS）\"><a href=\"#代码演示（JS）\" class=\"headerlink\" title=\"代码演示（JS）\"></a>代码演示（JS）</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">myShellSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> gap = <span class=\"built_in\">Math</span>.floor(arr.length / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (<span class=\"number\">1</span> &lt;= gap) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 把距离为 gap 的元素编为一个组，扫描所有组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = gap; i &lt; arr.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> j = <span class=\"number\">0</span>;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> temp = arr[i];</span><br><span class=\"line\"></span><br><span class=\"line\">            <span class=\"comment\">// 对距离为 gap 的元素组进行排序</span></span><br><span class=\"line\">            <span class=\"keyword\">for</span> (j = i - gap; j &gt;= <span class=\"number\">0</span> &amp;&amp; temp &lt; arr[j]; j = j - gap) &#123;</span><br><span class=\"line\">                arr[j + gap] = arr[j];</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            arr[j + gap] = temp;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(<span class=\"string\">`gap = <span class=\"subst\">$&#123;gap&#125;</span>`</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(arr);</span><br><span class=\"line\">        gap = <span class=\"built_in\">Math</span>.floor(gap / <span class=\"number\">2</span>); <span class=\"comment\">// 减小增量</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><p>归并排序是利用归并的思想实现的排序方法，该算法采用经典的分治策略（分治法将问题分成一些小的问题然后递归求解，而治的阶段则将分的阶段得到的各答案”修补”在一起，即分而治之)。</p>\n<img src=\"/posts/59937/%E5%BD%92%E5%B9%B6.png\" class=\"\" title=\"分而治之\">\n\n<p>可以看到这种结构很像一棵完全二叉树，下面的归并排序代码将会采用递归去实现（你也可采用迭代的方式去实现）。<strong>分</strong>阶段可以理解为就是递归拆分子序列的过程，递归深度为logn。</p>\n<h3 id=\"算法步骤-3\"><a href=\"#算法步骤-3\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li>\n<li>设定两个指针，最初位置分别为两个已经排序序列的起始位置</li>\n<li>比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li>\n<li>重复步骤 3 直到某一指针达到序列尾</li>\n<li>将另一序列剩下的所有元素直接复制到合并序列尾</li>\n</ol>\n<h3 id=\"图片演示\"><a href=\"#图片演示\" class=\"headerlink\" title=\"图片演示\"></a>图片演示</h3><img src=\"/posts/59937/%E5%BD%92%E5%B9%B62.png\" class=\"\" title=\"归并排序\">\n\n<p>图片来自博客<a href=\"https://www.cnblogs.com/chengxiao/p/6194356.html\">《图解排序算法之归并排序》</a></p>\n<h3 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">mergeSort</span>(<span class=\"params\">arr</span>) </span>&#123; <span class=\"comment\">// 采用自上而下的递归方法</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (len &lt; <span class=\"number\">2</span>) <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">var</span> middle = <span class=\"built_in\">Math</span>.floor(len / <span class=\"number\">2</span>), <span class=\"comment\">// 将未排序数组拆分成两半分而治之</span></span><br><span class=\"line\">        left = arr.slice(<span class=\"number\">0</span>, middle),</span><br><span class=\"line\">        right = arr.slice(middle);</span><br><span class=\"line\">  </span><br><span class=\"line\">    <span class=\"keyword\">return</span> merge(mergeSort(left), mergeSort(right));</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">merge</span>(<span class=\"params\">left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> result = [];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length &amp;&amp; right.length) &#123;</span><br><span class=\"line\">      \t<span class=\"comment\">// 两边的起始元素相互比较，始终将小的一方的头元素弹出，并push到准备好的容器result中</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (left[<span class=\"number\">0</span>] &lt;= right[<span class=\"number\">0</span>]) &#123;</span><br><span class=\"line\">            result.push(left.shift());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            result.push(right.shift());</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (left.length)</span><br><span class=\"line\">        result.push(left.shift());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (right.length)</span><br><span class=\"line\">        result.push(right.shift());</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> result;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><p>快速排序的基本思想是：通过一趟排序将待排记录分割成独立的两部分，其中一部分记录的元素均比另一部分记录的元素小，继而再分别对这两部分记录递归的进行同样的排序操作。</p>\n<h3 id=\"算法步骤-4\"><a href=\"#算法步骤-4\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>把数组中第一个元素当做一个基准值，称为“基准”（Pivot）</li>\n</ol>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%92.png\" class=\"\" title=\"快排\">\n\n<ol>\n<li>重新排序数列，把所有比基准值小的元素摆放在基准前面，所有比基准值大元素摆放在基准后面。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；</li>\n</ol>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%922.png\" class=\"\" title=\"快排2\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%923.png\" class=\"\" title=\"快排3\">\n\n<ol>\n<li>递归地把小于基准值元素的子数列和大于基准值元素的子数列排序；</li>\n</ol>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%924.png\" class=\"\" title=\"快排4\">\n\n<h3 id=\"分区（Partition）思路\"><a href=\"#分区（Partition）思路\" class=\"headerlink\" title=\"分区（Partition）思路\"></a>分区（Partition）思路</h3><p>首先把未排序数组的第一个（最左边）元素设置为基准，把它的位置叫做 <code>l</code> ：</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%925.png\" class=\"\" title=\"快排5\">\n\n<p>然后依次向后查看所有元素，在查看过程中，不断的调整后面元素的位置，使得后面的元素分为两部分，一部分都小于 v ；一部分都大于 v 。</p>\n<p>我们用 <code>j</code> 来不断记录这两部分的分割线位置。而 e 就是我们要判断的下一个元素，用索引 <code>i</code> 来表示，<code>i</code> 会遍历每一个元素，来看该如何调整这个元素。</p>\n<p>在下图中，我们用 <code>arr[l+1 ... j]</code> 来表示小于 v 的橙色部分，用 <code>arr[j+1 ... i-1]</code> 来表示大于 v 的紫色部分。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%926.png\" class=\"\" title=\"快排6\">\n\n<p>接下来就要看如何来调整下一个元素 e 的位置。分情况讨论：</p>\n<p><strong>当 e 大于 v 时</strong>，我们直接让 e 融入大于 v 的部分，并让 <code>i++</code></p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%927.png\" class=\"\" title=\"快排7\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%928.png\" class=\"\" title=\"快排8\">\n\n\n<p><strong>当 e 小于 v 时</strong>，我们让 e 和大于 v 部分的第一个元素交换位置。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%929.png\" class=\"\" title=\"快排9\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9210.png\" class=\"\" title=\"快排10\">\n\n<p>把 e 融入到小于 v 的部分。此时就需要让分隔线的索引位置 <code>j++</code> ，相应的，索引 <code>i</code> 的位置也要 <code>i++</code> 以便查看下一个元素。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9211.png\" class=\"\" title=\"快排11\">\n\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9212.png\" class=\"\" title=\"快排12\">\n\n<p>以这样的步骤我们就能遍历完整个数组，如下图所示</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9213.png\" class=\"\" title=\"快排13\">\n\n\n<p>现在还差最后一个步骤，那就是把基准值 v ，与小于 v 部分的最后一个元素交换位置。此刻 v 左边都小于它，v 右边都大于它，而 <code>j</code> 指向的就是基准值所在的位置。这样我们就完成了分区（Partition）操作。</p>\n<img src=\"/posts/59937/%E5%BF%AB%E6%8E%9214.png\" class=\"\" title=\"快排14\">\n\n<h3 id=\"代码实现-1\"><a href=\"#代码实现-1\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">quickSort</span>(<span class=\"params\">arr, left, right</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        partitionIndex,         <span class=\"comment\">// 分区索引</span></span><br><span class=\"line\">        left = <span class=\"keyword\">typeof</span> left != <span class=\"string\">&#x27;number&#x27;</span> ? <span class=\"number\">0</span> : left,</span><br><span class=\"line\">        right = <span class=\"keyword\">typeof</span> right != <span class=\"string\">&#x27;number&#x27;</span> ? len - <span class=\"number\">1</span> : right;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (left &gt;= right) <span class=\"keyword\">return</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 通过分区找到分隔点，再分别快排左右两部分</span></span><br><span class=\"line\">    partitionIndex = partition(arr, left, right);</span><br><span class=\"line\">    quickSort(arr, left, partitionIndex - <span class=\"number\">1</span>);</span><br><span class=\"line\">    quickSort(arr, partitionIndex + <span class=\"number\">1</span>, right);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> arr;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">partition</span>(<span class=\"params\">arr, left, right</span>) </span>&#123; <span class=\"comment\">// 分区操作</span></span><br><span class=\"line\">    <span class=\"keyword\">var</span> v = left,   <span class=\"comment\">// 设定基准值（pivot）</span></span><br><span class=\"line\">        j = left;  <span class=\"comment\">// arr[l+1...j] ; arr[j+1...i]</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = j + <span class=\"number\">1</span>; i &lt;= right; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (arr[i] &lt; arr[v]) &#123; <span class=\"comment\">// 当前要判断元素 小于 基准元素时</span></span><br><span class=\"line\">            j++; <span class=\"comment\">// 分隔点右移</span></span><br><span class=\"line\">            swap(arr, i, j);   <span class=\"comment\">// 让 当前元素 与大于 v 部分的第一个元素交换位置</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">// 此处不用写 else ，因为当大于基准元素时，直接i++就好，</span></span><br><span class=\"line\">        <span class=\"comment\">// 而i++，for循环已经帮我们做了</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 循环完毕后，交换基准值和小于v部分的最后一个元素的位置</span></span><br><span class=\"line\">    swap(arr, v, j);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> j;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">swap</span>(<span class=\"params\">arr, i, j</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = arr[i];</span><br><span class=\"line\">    arr[i] = arr[j];</span><br><span class=\"line\">    arr[j] = temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(quickSort(arr, <span class=\"number\">0</span>, arr.length));</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h2 id=\"计数排序\"><a href=\"#计数排序\" class=\"headerlink\" title=\"计数排序\"></a>计数排序</h2><p>计数排序不是基于比较的排序算法，其核心在于将输入的数据值转化为键存储在额外开辟的数组空间中。 作为一种线性时间复杂度的排序，计数排序要求输入的数据必须是有确定范围的整数。</p>\n<h3 id=\"算法步骤-5\"><a href=\"#算法步骤-5\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h3><ol>\n<li>找出待排序的数组中最大和最小的元素；</li>\n<li>统计数组中每个值为 i 的元素出现的次数，存入数组 Count 的第 i 项；</li>\n<li>对所有的计数累加（从 Count 中的第一个元素开始，每一项和前一项相加）；</li>\n<li>反向填充目标数组：将每个元素 i 放在新数组的第 Count(i) 项，每放一个元素就将 Count(i) 减去1。</li>\n</ol>\n<h3 id=\"代码实现-2\"><a href=\"#代码实现-2\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">3</span>, <span class=\"number\">44</span>, <span class=\"number\">38</span>, <span class=\"number\">5</span>, <span class=\"number\">47</span>, <span class=\"number\">15</span>, <span class=\"number\">36</span>, <span class=\"number\">26</span>, <span class=\"number\">27</span>, <span class=\"number\">2</span>, <span class=\"number\">46</span>, <span class=\"number\">4</span>, <span class=\"number\">19</span>, <span class=\"number\">50</span>, <span class=\"number\">48</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">countingSort</span>(<span class=\"params\">arr</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> len = arr.length,</span><br><span class=\"line\">        Result = [],</span><br><span class=\"line\">        Count = [],</span><br><span class=\"line\">        min = max = arr[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 查找最大最小值,并将arr数置入Count数组中,统计出现次数</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> i = <span class=\"number\">0</span>; i &lt; len; i++) &#123;</span><br><span class=\"line\">        min = min &lt;= arr[i] ? min : arr[i];</span><br><span class=\"line\">        max = max &gt;= arr[i] ? max : arr[i];</span><br><span class=\"line\">        Count[arr[i]] = Count[arr[i]] ? Count[arr[i]] + <span class=\"number\">1</span> : <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 从最小值-&gt;最大值,将计数逐项相加</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> j = min; j &lt; max; j++) &#123;</span><br><span class=\"line\">        Count[j + <span class=\"number\">1</span>] = (Count[j + <span class=\"number\">1</span>] || <span class=\"number\">0</span>) + (Count[j] || <span class=\"number\">0</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// Count中,下标为arr数值,数据为arr数值出现次数;反向填充数据进入Result数据</span></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">var</span> k = len - <span class=\"number\">1</span>; k &gt;= <span class=\"number\">0</span>; k--) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// Result[位置] = arr数据</span></span><br><span class=\"line\">        Result[Count[arr[k]] - <span class=\"number\">1</span>] = arr[k];</span><br><span class=\"line\">        <span class=\"comment\">// 减少Count数组中保存的计数</span></span><br><span class=\"line\">        Count[arr[k]]--;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> Result;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(countingSort(arr));</span><br></pre></td></tr></table></figure>"},{"title":"数组的遍历方法","abbrlink":64478,"date":"2018-12-24T15:42:36.000Z","_content":"\n下面是总结的数组遍历的常见方法\n\n## for循环\n\n- 标准for循环\n- forEach((当前值, 当前索引, 当前数组) => {…}, [, 绑定的this])`\n  - 无法中途退出循环，只能用 return 退出本次回调，进行下一次回调\n  - 它总是返回 undefined 值，即使你 return 了一个值\n- for…in（不推荐）会把继承链的对象属性都会遍历一遍，而且数组遍历不一定按次序\n  - for-in 循环返回的是所有能通过对象访问的、可枚举的属性\n- for (variable of iterable)（ES6）可迭代Array，Map，Set，String等（迭代的是值value）\n  - 在 for..of 中如果遍历中途要退出，可以使用 break 退出循环\n\n<!-- more -->\n\n## ES5\n\n- map (不改变原数组) 会给原数组中的每个元素都按顺序调用一次 callback 函数\n\n- reduce (不改变原数组) 数组中的前项和后项做某种计算,并累计最终值。\n\n  ```js\n  // 语法：\n  // arr.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n  // callback 参数\n  // (累积器, 当前元素, 当前元素索引, 当前数组)\n  // initialValue:指定第一次回调 的第一个参数\n  var wallets = [4, 7.8, 3]\n  var totalMoney = wallets.reduce(function (countedMoney, curMoney) {\n      return countedMoney + curMoney;\n  }, 0)\n  ```\n\n- filter (不改变原数组)\n\n  ```js\n  var arr = [2, 3, 4, 5, 6]\n  var morearr = arr.filter(function (number) {\n      return number > 3\n  }) // [4,5,6]\n  ```\n\n- every (不改变原数组) 测试数组的所有元素是否都通过了指定函数的测试\n\n  - 如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测\n  - 如果所有元素都满足条件，则返回 true\n\n  ```js\n  var arr = [1,2,3,4,5]\n  var result = arr.every(function (item, index) {\n      return item > 2\n  }) // false\n  ```\n\n- some (不改变原数组) 测试是否至少有一个元素通过 callback 中的条件。对于放在空数组上的任何条件，此方法返回 false\n\n  - 如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测\n  - 如果没有满足条件的元素，则返回false\n\n  ```js\n  // some(callback, thisArg)\n  // callback:\n  //    (当前元素, 当前索引, 调用some的数组)\n  \n  var arr = [1,2,3,4,5]\n  var result = arr.some(function (item,index) {\n      return item > 3\n  }) // true\n  ```\n\n## ES6\n\n- find() & findIndex() 根据条件找到数组成员\n\n  - find 定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined\n  - findIndex 定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1\n\n  ```js\n  // 语法\n  let new_array = arr.find(function(currentValue, index, arr), thisArg)\n  let new_array = arr.findIndex(function(currentValue, index, arr), thisArg)\n  \n  // 这两个方法都可以识别NaN,弥补了indexOf的不足\n  \n  // find\n  let a = [1, 4, -5, 10].find((n) => n < 0); // 返回元素-5\n  let b = [1, 4, -5, 10,NaN].find((n) => Object.is(NaN, n));  // 返回元素NaN\n  // findIndex\n  let a = [1, 4, -5, 10].findIndex((n) => n < 0); // 返回索引2\n  let b = [1, 4, -5, 10,NaN].findIndex((n) => Object.is(NaN, n));  // 返回索引4\n  ```\n\n- keys() & values() & entries() 遍历键名、遍历键值、遍历键名+键值\n\n  - 三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值\n\n  ```js\n  // 语法\n  array.keys()   array.values()   array.entries()\n  \n  for (let index of ['a', 'b'].keys()) {\n    console.log(index);\n  }\n  // 0\n  // 1\n  \n  for (let elem of ['a', 'b'].values()) {\n    console.log(elem);\n  }\n  // 'a'\n  // 'b'\n  \n  for (let [index, elem] of ['a', 'b'].entries()) {\n    console.log(index, elem);\n  }\n  // 0 \"a\"\n  // 1 \"b\"\n  ```","source":"_posts/数组的遍历方法.md","raw":"---\ntitle: 数组的遍历方法\ncategories:\n  - 前端\n  - JS\nabbrlink: 64478\ndate: 2018-12-24 23:42:36\ntags:\n---\n\n下面是总结的数组遍历的常见方法\n\n## for循环\n\n- 标准for循环\n- forEach((当前值, 当前索引, 当前数组) => {…}, [, 绑定的this])`\n  - 无法中途退出循环，只能用 return 退出本次回调，进行下一次回调\n  - 它总是返回 undefined 值，即使你 return 了一个值\n- for…in（不推荐）会把继承链的对象属性都会遍历一遍，而且数组遍历不一定按次序\n  - for-in 循环返回的是所有能通过对象访问的、可枚举的属性\n- for (variable of iterable)（ES6）可迭代Array，Map，Set，String等（迭代的是值value）\n  - 在 for..of 中如果遍历中途要退出，可以使用 break 退出循环\n\n<!-- more -->\n\n## ES5\n\n- map (不改变原数组) 会给原数组中的每个元素都按顺序调用一次 callback 函数\n\n- reduce (不改变原数组) 数组中的前项和后项做某种计算,并累计最终值。\n\n  ```js\n  // 语法：\n  // arr.reduce(function(total, currentValue, currentIndex, arr), initialValue)\n  // callback 参数\n  // (累积器, 当前元素, 当前元素索引, 当前数组)\n  // initialValue:指定第一次回调 的第一个参数\n  var wallets = [4, 7.8, 3]\n  var totalMoney = wallets.reduce(function (countedMoney, curMoney) {\n      return countedMoney + curMoney;\n  }, 0)\n  ```\n\n- filter (不改变原数组)\n\n  ```js\n  var arr = [2, 3, 4, 5, 6]\n  var morearr = arr.filter(function (number) {\n      return number > 3\n  }) // [4,5,6]\n  ```\n\n- every (不改变原数组) 测试数组的所有元素是否都通过了指定函数的测试\n\n  - 如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测\n  - 如果所有元素都满足条件，则返回 true\n\n  ```js\n  var arr = [1,2,3,4,5]\n  var result = arr.every(function (item, index) {\n      return item > 2\n  }) // false\n  ```\n\n- some (不改变原数组) 测试是否至少有一个元素通过 callback 中的条件。对于放在空数组上的任何条件，此方法返回 false\n\n  - 如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测\n  - 如果没有满足条件的元素，则返回false\n\n  ```js\n  // some(callback, thisArg)\n  // callback:\n  //    (当前元素, 当前索引, 调用some的数组)\n  \n  var arr = [1,2,3,4,5]\n  var result = arr.some(function (item,index) {\n      return item > 3\n  }) // true\n  ```\n\n## ES6\n\n- find() & findIndex() 根据条件找到数组成员\n\n  - find 定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined\n  - findIndex 定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1\n\n  ```js\n  // 语法\n  let new_array = arr.find(function(currentValue, index, arr), thisArg)\n  let new_array = arr.findIndex(function(currentValue, index, arr), thisArg)\n  \n  // 这两个方法都可以识别NaN,弥补了indexOf的不足\n  \n  // find\n  let a = [1, 4, -5, 10].find((n) => n < 0); // 返回元素-5\n  let b = [1, 4, -5, 10,NaN].find((n) => Object.is(NaN, n));  // 返回元素NaN\n  // findIndex\n  let a = [1, 4, -5, 10].findIndex((n) => n < 0); // 返回索引2\n  let b = [1, 4, -5, 10,NaN].findIndex((n) => Object.is(NaN, n));  // 返回索引4\n  ```\n\n- keys() & values() & entries() 遍历键名、遍历键值、遍历键名+键值\n\n  - 三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值\n\n  ```js\n  // 语法\n  array.keys()   array.values()   array.entries()\n  \n  for (let index of ['a', 'b'].keys()) {\n    console.log(index);\n  }\n  // 0\n  // 1\n  \n  for (let elem of ['a', 'b'].values()) {\n    console.log(elem);\n  }\n  // 'a'\n  // 'b'\n  \n  for (let [index, elem] of ['a', 'b'].entries()) {\n    console.log(index, elem);\n  }\n  // 0 \"a\"\n  // 1 \"b\"\n  ```","slug":"数组的遍历方法","published":1,"updated":"2020-11-21T15:47:07.288Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygc005jkhsrawvv9tz6","content":"<p>下面是总结的数组遍历的常见方法</p>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><ul>\n<li>标准for循环</li>\n<li>forEach((当前值, 当前索引, 当前数组) =&gt; {…}, [, 绑定的this])`<ul>\n<li>无法中途退出循环，只能用 return 退出本次回调，进行下一次回调</li>\n<li>它总是返回 undefined 值，即使你 return 了一个值</li>\n</ul>\n</li>\n<li>for…in（不推荐）会把继承链的对象属性都会遍历一遍，而且数组遍历不一定按次序<ul>\n<li>for-in 循环返回的是所有能通过对象访问的、可枚举的属性</li>\n</ul>\n</li>\n<li>for (variable of iterable)（ES6）可迭代Array，Map，Set，String等（迭代的是值value）<ul>\n<li>在 for..of 中如果遍历中途要退出，可以使用 break 退出循环</li>\n</ul>\n</li>\n</ul>\n<a id=\"more\"></a>\n\n<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><ul>\n<li><p>map (不改变原数组) 会给原数组中的每个元素都按顺序调用一次 callback 函数</p>\n</li>\n<li><p>reduce (不改变原数组) 数组中的前项和后项做某种计算,并累计最终值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法：</span></span><br><span class=\"line\"><span class=\"comment\">// arr.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span></span><br><span class=\"line\"><span class=\"comment\">// callback 参数</span></span><br><span class=\"line\"><span class=\"comment\">// (累积器, 当前元素, 当前元素索引, 当前数组)</span></span><br><span class=\"line\"><span class=\"comment\">// initialValue:指定第一次回调 的第一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wallets = [<span class=\"number\">4</span>, <span class=\"number\">7.8</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> totalMoney = wallets.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">countedMoney, curMoney</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> countedMoney + curMoney;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>filter (不改变原数组)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> morearr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number &gt; <span class=\"number\">3</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// [4,5,6]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>every (不改变原数组) 测试数组的所有元素是否都通过了指定函数的测试</p>\n<ul>\n<li>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测</li>\n<li>如果所有元素都满足条件，则返回 true</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>some (不改变原数组) 测试是否至少有一个元素通过 callback 中的条件。对于放在空数组上的任何条件，此方法返回 false</p>\n<ul>\n<li>如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测</li>\n<li>如果没有满足条件的元素，则返回false</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some(callback, thisArg)</span></span><br><span class=\"line\"><span class=\"comment\">// callback:</span></span><br><span class=\"line\"><span class=\"comment\">//    (当前元素, 当前索引, 调用some的数组)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><ul>\n<li><p>find() &amp; findIndex() 根据条件找到数组成员</p>\n<ul>\n<li>find 定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined</li>\n<li>findIndex 定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> new_array = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue, index, arr</span>), <span class=\"title\">thisArg</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">new_array</span> = <span class=\"title\">arr</span>.<span class=\"title\">findIndex</span>(<span class=\"params\"><span class=\"keyword\">function</span>(currentValue, index, arr), thisArg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 这两个方法都可以识别<span class=\"title\">NaN</span>,弥补了<span class=\"title\">indexOf</span>的不足</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">find</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">a</span> = [1, 4, -5, 10].<span class=\"title\">find</span>(<span class=\"params\">(n) =&gt; n &lt; <span class=\"number\">0</span></span>)</span>; <span class=\"comment\">// 返回元素-5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">10</span>,<span class=\"literal\">NaN</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, n));  <span class=\"comment\">// 返回元素NaN</span></span><br><span class=\"line\"><span class=\"comment\">// findIndex</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">10</span>].findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>); <span class=\"comment\">// 返回索引2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">10</span>,<span class=\"literal\">NaN</span>].findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, n));  <span class=\"comment\">// 返回索引4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>keys() &amp; values() &amp; entries() 遍历键名、遍历键值、遍历键名+键值</p>\n<ul>\n<li>三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\">array.keys()   array.values()   array.entries()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;b&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>下面是总结的数组遍历的常见方法</p>\n<h2 id=\"for循环\"><a href=\"#for循环\" class=\"headerlink\" title=\"for循环\"></a>for循环</h2><ul>\n<li>标准for循环</li>\n<li>forEach((当前值, 当前索引, 当前数组) =&gt; {…}, [, 绑定的this])`<ul>\n<li>无法中途退出循环，只能用 return 退出本次回调，进行下一次回调</li>\n<li>它总是返回 undefined 值，即使你 return 了一个值</li>\n</ul>\n</li>\n<li>for…in（不推荐）会把继承链的对象属性都会遍历一遍，而且数组遍历不一定按次序<ul>\n<li>for-in 循环返回的是所有能通过对象访问的、可枚举的属性</li>\n</ul>\n</li>\n<li>for (variable of iterable)（ES6）可迭代Array，Map，Set，String等（迭代的是值value）<ul>\n<li>在 for..of 中如果遍历中途要退出，可以使用 break 退出循环</li>\n</ul>\n</li>\n</ul>","more":"<h2 id=\"ES5\"><a href=\"#ES5\" class=\"headerlink\" title=\"ES5\"></a>ES5</h2><ul>\n<li><p>map (不改变原数组) 会给原数组中的每个元素都按顺序调用一次 callback 函数</p>\n</li>\n<li><p>reduce (不改变原数组) 数组中的前项和后项做某种计算,并累计最终值。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法：</span></span><br><span class=\"line\"><span class=\"comment\">// arr.reduce(function(total, currentValue, currentIndex, arr), initialValue)</span></span><br><span class=\"line\"><span class=\"comment\">// callback 参数</span></span><br><span class=\"line\"><span class=\"comment\">// (累积器, 当前元素, 当前元素索引, 当前数组)</span></span><br><span class=\"line\"><span class=\"comment\">// initialValue:指定第一次回调 的第一个参数</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> wallets = [<span class=\"number\">4</span>, <span class=\"number\">7.8</span>, <span class=\"number\">3</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> totalMoney = wallets.reduce(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">countedMoney, curMoney</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> countedMoney + curMoney;</span><br><span class=\"line\">&#125;, <span class=\"number\">0</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>filter (不改变原数组)</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>, <span class=\"number\">5</span>, <span class=\"number\">6</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> morearr = arr.filter(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">number</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> number &gt; <span class=\"number\">3</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// [4,5,6]</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>every (不改变原数组) 测试数组的所有元素是否都通过了指定函数的测试</p>\n<ul>\n<li>如果数组中检测到有一个元素不满足，则整个表达式返回 false ，且剩余的元素不会再进行检测</li>\n<li>如果所有元素都满足条件，则返回 true</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.every(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item, index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">2</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>some (不改变原数组) 测试是否至少有一个元素通过 callback 中的条件。对于放在空数组上的任何条件，此方法返回 false</p>\n<ul>\n<li>如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测</li>\n<li>如果没有满足条件的元素，则返回false</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// some(callback, thisArg)</span></span><br><span class=\"line\"><span class=\"comment\">// callback:</span></span><br><span class=\"line\"><span class=\"comment\">//    (当前元素, 当前索引, 调用some的数组)</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">1</span>,<span class=\"number\">2</span>,<span class=\"number\">3</span>,<span class=\"number\">4</span>,<span class=\"number\">5</span>]</span><br><span class=\"line\"><span class=\"keyword\">var</span> result = arr.some(<span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">item,index</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> item &gt; <span class=\"number\">3</span></span><br><span class=\"line\">&#125;) <span class=\"comment\">// true</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h2 id=\"ES6\"><a href=\"#ES6\" class=\"headerlink\" title=\"ES6\"></a>ES6</h2><ul>\n<li><p>find() &amp; findIndex() 根据条件找到数组成员</p>\n<ul>\n<li>find 定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回 undefined</li>\n<li>findIndex 定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> new_array = arr.find(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">currentValue, index, arr</span>), <span class=\"title\">thisArg</span>)</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">new_array</span> = <span class=\"title\">arr</span>.<span class=\"title\">findIndex</span>(<span class=\"params\"><span class=\"keyword\">function</span>(currentValue, index, arr), thisArg</span>)</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// 这两个方法都可以识别<span class=\"title\">NaN</span>,弥补了<span class=\"title\">indexOf</span>的不足</span></span><br><span class=\"line\"><span class=\"function\"></span></span><br><span class=\"line\"><span class=\"function\">// <span class=\"title\">find</span></span></span><br><span class=\"line\"><span class=\"function\"><span class=\"title\">let</span> <span class=\"title\">a</span> = [1, 4, -5, 10].<span class=\"title\">find</span>(<span class=\"params\">(n) =&gt; n &lt; <span class=\"number\">0</span></span>)</span>; <span class=\"comment\">// 返回元素-5</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">10</span>,<span class=\"literal\">NaN</span>].find(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, n));  <span class=\"comment\">// 返回元素NaN</span></span><br><span class=\"line\"><span class=\"comment\">// findIndex</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> a = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">10</span>].findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> n &lt; <span class=\"number\">0</span>); <span class=\"comment\">// 返回索引2</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> b = [<span class=\"number\">1</span>, <span class=\"number\">4</span>, -<span class=\"number\">5</span>, <span class=\"number\">10</span>,<span class=\"literal\">NaN</span>].findIndex(<span class=\"function\">(<span class=\"params\">n</span>) =&gt;</span> <span class=\"built_in\">Object</span>.is(<span class=\"literal\">NaN</span>, n));  <span class=\"comment\">// 返回索引4</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>keys() &amp; values() &amp; entries() 遍历键名、遍历键值、遍历键名+键值</p>\n<ul>\n<li>三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 语法</span></span><br><span class=\"line\">array.keys()   array.values()   array.entries()</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> index <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].keys()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0</span></span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> elem <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].values()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// &#x27;a&#x27;</span></span><br><span class=\"line\"><span class=\"comment\">// &#x27;b&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">let</span> [index, elem] <span class=\"keyword\">of</span> [<span class=\"string\">&#x27;a&#x27;</span>, <span class=\"string\">&#x27;b&#x27;</span>].entries()) &#123;</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(index, elem);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 0 &quot;a&quot;</span></span><br><span class=\"line\"><span class=\"comment\">// 1 &quot;b&quot;</span></span><br></pre></td></tr></table></figure></li>\n</ul>"},{"title":"【转载】常见正则表达式合集","abbrlink":40424,"date":"2019-12-13T07:15:35.000Z","_content":"\n转载来源：[常见正则表达式合集](http://obkoro1.com/web_accumulate/codeBlack/正则表达式收集.html#常见正则表达式合集)\n\n为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。\n\n<!-- more -->\n\n### 如何验证？\n\n验证的方式当然是很多了，这里推荐采用[test()](http://www.w3school.com.cn/js/jsref_test_regexp.asp)方法来验证。\n\n```js\nlet isTrue = RegExpObject.test(string);// RegExpObject为正则 string是要检测的字符串\n// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。\nif (isTrue){\n    //验证成功 do something\n}elseP{\n    //验证失败\n}\n```\n\n### 身份证号码正则表达式：\n\n第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。\n\n```js\n//第二代身份证号码正则\nlet isTrue = /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;\n//第一代身份证正则表达式(15位)\nlet isTrue = /^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$/;\n```\n\n### 手机号码正则表达式：\n\n时间截止为：2018 年 1 月 11 日\n\n- 移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198\n- 联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186\n- 电信号段：133 149 153 173 174 177 180 181 189 199\n- 虚拟运营商：170\n\n```js\nlet isTrue = /^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]{8}$/;\n```\n\n### 邮箱正则表达式：\n\n```js\nlet isTrue = /^([A-Za-z0-9_\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,8})$/;\n```\n\n### 用户名正则:\n\n```js\n//用户名正则，4到16位（字母，数字，下划线，减号）\nlet isTrue = /^[a-zA-Z0-9_-]{4,16}$/;\n```\n\n### 密码正则:\n\n密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线\n\n```js\nlet isTrue =^[a-zA-Z]\\w{5,17}$;\n```\n\n强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符\n\n```js\nlet isTrue = /^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/;\n```\n\n### QQ 号码正则:\n\n```js\nlet isTrue = /^[1-9][0-9]{4,10}$/;\n```\n\n### 微信号码正则:\n\n```js\n//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线\nlet isTrue = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/;\n```\n\n### 特殊字符检测正则:\n\n```js\nlet isTrue = /[\"'<>%;)(&+]+-!！@#$~/;\n```\n\n### 域名正则:\n\n```js\nlet isTrue=[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?;\n```\n\n### 车牌号码正则:\n\n```js\nlet isTrue = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/;\n```\n\n### 包含中文正则:\n\n```js\nlet isTrue = /[\\u4E00-\\u9FA5]/;\n//这个可以用于验证用户的真实姓名。\n```\n\n### 护照正则:\n\n```js\nlet isTrue = /^(P\\d{7}|G\\d{7,8}|TH\\d{7,8}|S\\d{7,8}|A\\d{7,8}|L\\d{7,8}|\\d{9}|D\\d+|1[4,5]\\d{7})$/;\n```\n\n### 固定电话正则：\n\n```js\nlet isTrue=(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{8};\n```\n\n### IP 地址正则:\n\n```js\nlet isTrue=\\d+\\.\\d+\\.\\d+\\.\\d+;\n```\n\n### 邮政编码正则:\n\n```js\nlet isTrue=[1-9]{1}(\\d+){5};\n```\n\n### 经纬度正则:\n\n```js\n//经度正则\nlet isTrue = /^(\\-|\\+)?(((\\d|[1-9]\\d|1[0-7]\\d|0{1,3})\\.\\d{0,6})|(\\d|[1-9]\\d|1[0-7]\\d|0{1,3})|180\\.0{0,6}|180)$/;\n//纬度正则\nlet isTrue = /^(\\-|\\+)?([0-8]?\\d{1}\\.\\d{0,6}|90\\.0{0,6}|[0-8]?\\d{1}|90)$/;\n```\n","source":"_posts/常见正则表达式合集.md","raw":"---\ntitle: 【转载】常见正则表达式合集\ntags:\n  - 转载\ncategories:\n  - 前端\n  - 正则\nabbrlink: 40424\ndate: 2019-12-13 15:15:35\n---\n\n转载来源：[常见正则表达式合集](http://obkoro1.com/web_accumulate/codeBlack/正则表达式收集.html#常见正则表达式合集)\n\n为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。\n\n<!-- more -->\n\n### 如何验证？\n\n验证的方式当然是很多了，这里推荐采用[test()](http://www.w3school.com.cn/js/jsref_test_regexp.asp)方法来验证。\n\n```js\nlet isTrue = RegExpObject.test(string);// RegExpObject为正则 string是要检测的字符串\n// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。\nif (isTrue){\n    //验证成功 do something\n}elseP{\n    //验证失败\n}\n```\n\n### 身份证号码正则表达式：\n\n第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。\n\n```js\n//第二代身份证号码正则\nlet isTrue = /^[1-9]\\d{5}(18|19|20)\\d{2}((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d{3}[0-9Xx]$/;\n//第一代身份证正则表达式(15位)\nlet isTrue = /^[1-9]\\d{7}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}$/;\n```\n\n### 手机号码正则表达式：\n\n时间截止为：2018 年 1 月 11 日\n\n- 移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198\n- 联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186\n- 电信号段：133 149 153 173 174 177 180 181 189 199\n- 虚拟运营商：170\n\n```js\nlet isTrue = /^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]{8}$/;\n```\n\n### 邮箱正则表达式：\n\n```js\nlet isTrue = /^([A-Za-z0-9_\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]{2,8})$/;\n```\n\n### 用户名正则:\n\n```js\n//用户名正则，4到16位（字母，数字，下划线，减号）\nlet isTrue = /^[a-zA-Z0-9_-]{4,16}$/;\n```\n\n### 密码正则:\n\n密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线\n\n```js\nlet isTrue =^[a-zA-Z]\\w{5,17}$;\n```\n\n强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符\n\n```js\nlet isTrue = /^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/;\n```\n\n### QQ 号码正则:\n\n```js\nlet isTrue = /^[1-9][0-9]{4,10}$/;\n```\n\n### 微信号码正则:\n\n```js\n//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线\nlet isTrue = /^[a-zA-Z]([-_a-zA-Z0-9]{5,19})+$/;\n```\n\n### 特殊字符检测正则:\n\n```js\nlet isTrue = /[\"'<>%;)(&+]+-!！@#$~/;\n```\n\n### 域名正则:\n\n```js\nlet isTrue=[a-zA-Z0-9][-a-zA-Z0-9]{0,62}(/.[a-zA-Z0-9][-a-zA-Z0-9]{0,62})+/.?;\n```\n\n### 车牌号码正则:\n\n```js\nlet isTrue = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-Z0-9]{4}[A-Z0-9挂学警港澳]{1}$/;\n```\n\n### 包含中文正则:\n\n```js\nlet isTrue = /[\\u4E00-\\u9FA5]/;\n//这个可以用于验证用户的真实姓名。\n```\n\n### 护照正则:\n\n```js\nlet isTrue = /^(P\\d{7}|G\\d{7,8}|TH\\d{7,8}|S\\d{7,8}|A\\d{7,8}|L\\d{7,8}|\\d{9}|D\\d+|1[4,5]\\d{7})$/;\n```\n\n### 固定电话正则：\n\n```js\nlet isTrue=(\\(\\d{3,4}\\)|\\d{3,4}-|\\s)?\\d{8};\n```\n\n### IP 地址正则:\n\n```js\nlet isTrue=\\d+\\.\\d+\\.\\d+\\.\\d+;\n```\n\n### 邮政编码正则:\n\n```js\nlet isTrue=[1-9]{1}(\\d+){5};\n```\n\n### 经纬度正则:\n\n```js\n//经度正则\nlet isTrue = /^(\\-|\\+)?(((\\d|[1-9]\\d|1[0-7]\\d|0{1,3})\\.\\d{0,6})|(\\d|[1-9]\\d|1[0-7]\\d|0{1,3})|180\\.0{0,6}|180)$/;\n//纬度正则\nlet isTrue = /^(\\-|\\+)?([0-8]?\\d{1}\\.\\d{0,6}|90\\.0{0,6}|[0-8]?\\d{1}|90)$/;\n```\n","slug":"常见正则表达式合集","published":1,"updated":"2020-12-02T02:30:10.874Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygd005nkhsr14ep1j5e","content":"<p>转载来源：<a href=\"http://obkoro1.com/web_accumulate/codeBlack/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html#%E5%B8%B8%E8%A7%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86\">常见正则表达式合集</a></p>\n<p>为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。</p>\n<a id=\"more\"></a>\n\n<h3 id=\"如何验证？\"><a href=\"#如何验证？\" class=\"headerlink\" title=\"如何验证？\"></a>如何验证？</h3><p>验证的方式当然是很多了，这里推荐采用<a href=\"http://www.w3school.com.cn/js/jsref_test_regexp.asp\">test()</a>方法来验证。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = RegExpObject.test(string);<span class=\"comment\">// RegExpObject为正则 string是要检测的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isTrue)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证成功 do something</span></span><br><span class=\"line\">&#125;elseP&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"身份证号码正则表达式：\"><a href=\"#身份证号码正则表达式：\" class=\"headerlink\" title=\"身份证号码正则表达式：\"></a>身份证号码正则表达式：</h3><p>第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二代身份证号码正则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//第一代身份证正则表达式(15位)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手机号码正则表达式：\"><a href=\"#手机号码正则表达式：\" class=\"headerlink\" title=\"手机号码正则表达式：\"></a>手机号码正则表达式：</h3><p>时间截止为：2018 年 1 月 11 日</p>\n<ul>\n<li>移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198</li>\n<li>联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186</li>\n<li>电信号段：133 149 153 173 174 177 180 181 189 199</li>\n<li>虚拟运营商：170</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]&#123;8&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"邮箱正则表达式：\"><a href=\"#邮箱正则表达式：\" class=\"headerlink\" title=\"邮箱正则表达式：\"></a>邮箱正则表达式：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^([A-Za-z0-9_\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]&#123;2,8&#125;)$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户名正则\"><a href=\"#用户名正则\" class=\"headerlink\" title=\"用户名正则:\"></a>用户名正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"密码正则\"><a href=\"#密码正则\" class=\"headerlink\" title=\"密码正则:\"></a>密码正则:</h3><p>密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue =^[a-zA-Z]\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$;</span><br></pre></td></tr></table></figure>\n\n<p>强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"QQ-号码正则\"><a href=\"#QQ-号码正则\" class=\"headerlink\" title=\"QQ 号码正则:\"></a>QQ 号码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[1-9][0-9]&#123;4,10&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微信号码正则\"><a href=\"#微信号码正则\" class=\"headerlink\" title=\"微信号码正则:\"></a>微信号码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊字符检测正则\"><a href=\"#特殊字符检测正则\" class=\"headerlink\" title=\"特殊字符检测正则:\"></a>特殊字符检测正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/[&quot;&#x27;&lt;&gt;%;)(&amp;+]+-!！@#$~/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"域名正则\"><a href=\"#域名正则\" class=\"headerlink\" title=\"域名正则:\"></a>域名正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=[a-zA-Z0-<span class=\"number\">9</span>][-a-zA-Z0-<span class=\"number\">9</span>]&#123;<span class=\"number\">0</span>,<span class=\"number\">62</span>&#125;(<span class=\"regexp\">/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/</span>.?;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"车牌号码正则\"><a href=\"#车牌号码正则\" class=\"headerlink\" title=\"车牌号码正则:\"></a>车牌号码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包含中文正则\"><a href=\"#包含中文正则\" class=\"headerlink\" title=\"包含中文正则:\"></a>包含中文正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/[\\u4E00-\\u9FA5]/</span>;</span><br><span class=\"line\"><span class=\"comment\">//这个可以用于验证用户的真实姓名。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"护照正则\"><a href=\"#护照正则\" class=\"headerlink\" title=\"护照正则:\"></a>护照正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(P\\d&#123;7&#125;|G\\d&#123;7,8&#125;|TH\\d&#123;7,8&#125;|S\\d&#123;7,8&#125;|A\\d&#123;7,8&#125;|L\\d&#123;7,8&#125;|\\d&#123;9&#125;|D\\d+|1[4,5]\\d&#123;7&#125;)$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"固定电话正则：\"><a href=\"#固定电话正则：\" class=\"headerlink\" title=\"固定电话正则：\"></a>固定电话正则：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=(\\(\\d&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;\\)|\\d&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;-|\\s)?\\d&#123;<span class=\"number\">8</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IP-地址正则\"><a href=\"#IP-地址正则\" class=\"headerlink\" title=\"IP 地址正则:\"></a>IP 地址正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=\\d+\\.\\d+\\.\\d+\\.\\d+;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"邮政编码正则\"><a href=\"#邮政编码正则\" class=\"headerlink\" title=\"邮政编码正则:\"></a>邮政编码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=[<span class=\"number\">1</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;(\\d+)&#123;<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"经纬度正则\"><a href=\"#经纬度正则\" class=\"headerlink\" title=\"经纬度正则:\"></a>经纬度正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经度正则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(\\-|\\+)?(((\\d|[1-9]\\d|1[0-7]\\d|0&#123;1,3&#125;)\\.\\d&#123;0,6&#125;)|(\\d|[1-9]\\d|1[0-7]\\d|0&#123;1,3&#125;)|180\\.0&#123;0,6&#125;|180)$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//纬度正则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(\\-|\\+)?([0-8]?\\d&#123;1&#125;\\.\\d&#123;0,6&#125;|90\\.0&#123;0,6&#125;|[0-8]?\\d&#123;1&#125;|90)$/</span>;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<p>转载来源：<a href=\"http://obkoro1.com/web_accumulate/codeBlack/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%94%B6%E9%9B%86.html#%E5%B8%B8%E8%A7%81%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E5%90%88%E9%9B%86\">常见正则表达式合集</a></p>\n<p>为了避免用户胡乱输入就通过验证，很多时候我们都会采用正则表达式来验证一下用户输入的信息是否符合规范。这部分的内容基本上是在网上收集来的，这里跟大家一起分享一下，有需要的可以记在自己的有道云笔记里面。</p>","more":"<h3 id=\"如何验证？\"><a href=\"#如何验证？\" class=\"headerlink\" title=\"如何验证？\"></a>如何验证？</h3><p>验证的方式当然是很多了，这里推荐采用<a href=\"http://www.w3school.com.cn/js/jsref_test_regexp.asp\">test()</a>方法来验证。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = RegExpObject.test(string);<span class=\"comment\">// RegExpObject为正则 string是要检测的字符串</span></span><br><span class=\"line\"><span class=\"comment\">// 如果字符串 string 中含有与 RegExpObject 匹配的文本，则返回 true，否则返回 false。</span></span><br><span class=\"line\"><span class=\"keyword\">if</span> (isTrue)&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证成功 do something</span></span><br><span class=\"line\">&#125;elseP&#123;</span><br><span class=\"line\">    <span class=\"comment\">//验证失败</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"身份证号码正则表达式：\"><a href=\"#身份证号码正则表达式：\" class=\"headerlink\" title=\"身份证号码正则表达式：\"></a>身份证号码正则表达式：</h3><p>第一代身份证只有 15 位数，第二代身份证有 18 位数，各位按照需求来选择表达式。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//第二代身份证号码正则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[1-9]\\d&#123;5&#125;(18|19|20)\\d&#123;2&#125;((0[1-9])|(1[0-2]))(([0-2][1-9])|10|20|30|31)\\d&#123;3&#125;[0-9Xx]$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//第一代身份证正则表达式(15位)</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[1-9]\\d&#123;7&#125;((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d&#123;3&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"手机号码正则表达式：\"><a href=\"#手机号码正则表达式：\" class=\"headerlink\" title=\"手机号码正则表达式：\"></a>手机号码正则表达式：</h3><p>时间截止为：2018 年 1 月 11 日</p>\n<ul>\n<li>移动号段：134 135 136 137 138 139 147 148 150 151 152 157 158 159 172 178 182 183 184 187 188 198</li>\n<li>联通号段：130 131 132 145 146 155 156 166 171 175 176 185 186</li>\n<li>电信号段：133 149 153 173 174 177 180 181 189 199</li>\n<li>虚拟运营商：170</li>\n</ul>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(13[0-9]|14[5-9]|15[012356789]|166|17[0-8]|18[0-9]|19[8-9])[0-9]&#123;8&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"邮箱正则表达式：\"><a href=\"#邮箱正则表达式：\" class=\"headerlink\" title=\"邮箱正则表达式：\"></a>邮箱正则表达式：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^([A-Za-z0-9_\\-\\.\\u4e00-\\u9fa5])+\\@([A-Za-z0-9_\\-\\.])+\\.([A-Za-z]&#123;2,8&#125;)$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"用户名正则\"><a href=\"#用户名正则\" class=\"headerlink\" title=\"用户名正则:\"></a>用户名正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//用户名正则，4到16位（字母，数字，下划线，减号）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[a-zA-Z0-9_-]&#123;4,16&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"密码正则\"><a href=\"#密码正则\" class=\"headerlink\" title=\"密码正则:\"></a>密码正则:</h3><p>密码正则，以字母开头，长度在 6~18 之间，只能包含字母、数字和下划线</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue =^[a-zA-Z]\\w&#123;<span class=\"number\">5</span>,<span class=\"number\">17</span>&#125;$;</span><br></pre></td></tr></table></figure>\n\n<p>强密码正则，最少 6 位，包括至少 1 个大写字母，1 个小写字母，1 个数字，1 个特殊字符</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^.*(?=.&#123;6,&#125;)(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"QQ-号码正则\"><a href=\"#QQ-号码正则\" class=\"headerlink\" title=\"QQ 号码正则:\"></a>QQ 号码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[1-9][0-9]&#123;4,10&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"微信号码正则\"><a href=\"#微信号码正则\" class=\"headerlink\" title=\"微信号码正则:\"></a>微信号码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//微信号正则，6至20位，以字母开头，字母，数字，减号，下划线</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[a-zA-Z]([-_a-zA-Z0-9]&#123;5,19&#125;)+$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"特殊字符检测正则\"><a href=\"#特殊字符检测正则\" class=\"headerlink\" title=\"特殊字符检测正则:\"></a>特殊字符检测正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/[&quot;&#x27;&lt;&gt;%;)(&amp;+]+-!！@#$~/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"域名正则\"><a href=\"#域名正则\" class=\"headerlink\" title=\"域名正则:\"></a>域名正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=[a-zA-Z0-<span class=\"number\">9</span>][-a-zA-Z0-<span class=\"number\">9</span>]&#123;<span class=\"number\">0</span>,<span class=\"number\">62</span>&#125;(<span class=\"regexp\">/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/</span>.?;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"车牌号码正则\"><a href=\"#车牌号码正则\" class=\"headerlink\" title=\"车牌号码正则:\"></a>车牌号码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"包含中文正则\"><a href=\"#包含中文正则\" class=\"headerlink\" title=\"包含中文正则:\"></a>包含中文正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/[\\u4E00-\\u9FA5]/</span>;</span><br><span class=\"line\"><span class=\"comment\">//这个可以用于验证用户的真实姓名。</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"护照正则\"><a href=\"#护照正则\" class=\"headerlink\" title=\"护照正则:\"></a>护照正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(P\\d&#123;7&#125;|G\\d&#123;7,8&#125;|TH\\d&#123;7,8&#125;|S\\d&#123;7,8&#125;|A\\d&#123;7,8&#125;|L\\d&#123;7,8&#125;|\\d&#123;9&#125;|D\\d+|1[4,5]\\d&#123;7&#125;)$/</span>;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"固定电话正则：\"><a href=\"#固定电话正则：\" class=\"headerlink\" title=\"固定电话正则：\"></a>固定电话正则：</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=(\\(\\d&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;\\)|\\d&#123;<span class=\"number\">3</span>,<span class=\"number\">4</span>&#125;-|\\s)?\\d&#123;<span class=\"number\">8</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"IP-地址正则\"><a href=\"#IP-地址正则\" class=\"headerlink\" title=\"IP 地址正则:\"></a>IP 地址正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=\\d+\\.\\d+\\.\\d+\\.\\d+;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"邮政编码正则\"><a href=\"#邮政编码正则\" class=\"headerlink\" title=\"邮政编码正则:\"></a>邮政编码正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">let</span> isTrue=[<span class=\"number\">1</span>-<span class=\"number\">9</span>]&#123;<span class=\"number\">1</span>&#125;(\\d+)&#123;<span class=\"number\">5</span>&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"经纬度正则\"><a href=\"#经纬度正则\" class=\"headerlink\" title=\"经纬度正则:\"></a>经纬度正则:</h3><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//经度正则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(\\-|\\+)?(((\\d|[1-9]\\d|1[0-7]\\d|0&#123;1,3&#125;)\\.\\d&#123;0,6&#125;)|(\\d|[1-9]\\d|1[0-7]\\d|0&#123;1,3&#125;)|180\\.0&#123;0,6&#125;|180)$/</span>;</span><br><span class=\"line\"><span class=\"comment\">//纬度正则</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> isTrue = <span class=\"regexp\">/^(\\-|\\+)?([0-8]?\\d&#123;1&#125;\\.\\d&#123;0,6&#125;|90\\.0&#123;0,6&#125;|[0-8]?\\d&#123;1&#125;|90)$/</span>;</span><br></pre></td></tr></table></figure>"},{"title":"有序表查找之二分查找","abbrlink":39853,"date":"2019-02-27T01:43:38.000Z","_content":"\n## 简介\n\n二分查找又名折半查找。它的前提是所操作的数据集是一个有序的数据集。它的基本思想是：开始时，先找出有序集合中间的那个元素。如果此元素比要查找的元素大，就接着在较小的一个半区进行查找；反之，如果此元素比要找的元素小，就在较大的一个半区进行查找。在每个更小的数据集中重复这个查找过程，直到找到要查找的元素或者数据集不能再分割。\n\n## 图解\n\n{% asset_img 1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png 二分查找 %}\n\n<!-- more -->\n\n## 适用场景\n\n二分查找可以应用于任何类型的数据，但前提是这些数据是按某种规则进行排序的。这使得它在处理那些频繁插入和删除操作的数据集时不太高效。因为执行完插入和删除操作后，无法保证数据集的有序性，在查找前还得先维护一个有序数据集，从而导致查找过程代价太高。此外，元素必须存储在连续的空间中。\n\n因此，当待搜索的集合是相对静态的数据集时，此时使用二分查找是最好的选择。\n\n## 代码示例（JS）\n\n> 非递归实现\n\n```js\nvar arr = [4, 9, 12, 13, 15, 33, 46, 49, 50, 77, 101];\n\nfunction binary_search(arr, target) {\n    var min = 0,\n        max = arr.length;\n\n    while (min <= max) {\n        var mid = parseInt((min + max) / 2);\n\n        if (target === arr[mid]) {\n            return mid;\n        } else if (target > arr[mid]) {\n            min = mid + 1;\n        } else {\n            max = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconsole.log(binary_search(arr, 33));\n```\n\n> 递归实现\n\n```js\nvar arr = [4, 9, 12, 13, 15, 33, 46, 49, 50, 77, 101];\n\nfunction binary_search(arr, min, max, target) {\n    if (min > max) {\n        return -1;\n    }\n\n    var mid = parseInt((min + max) / 2);\n\n    if (target === arr[mid]) {\n        return mid;\n    } else if (target > arr[mid]) {\n        min = mid + 1;\n        return binary_search(arr, min, max, target);\n    } else {\n        max = mid - 1;\n        return binary_search(arr, min, max, target);\n    }\n}\n\nconsole.log(binary_search(arr, 0, arr.length - 1, 33));\n```\n","source":"_posts/有序表查找之二分查找.md","raw":"---\ntitle: 有序表查找之二分查找\ncategories:\n  - 后端\n  - 算法\nabbrlink: 39853\ndate: 2019-02-27 09:43:38\ntags:\n---\n\n## 简介\n\n二分查找又名折半查找。它的前提是所操作的数据集是一个有序的数据集。它的基本思想是：开始时，先找出有序集合中间的那个元素。如果此元素比要查找的元素大，就接着在较小的一个半区进行查找；反之，如果此元素比要找的元素小，就在较大的一个半区进行查找。在每个更小的数据集中重复这个查找过程，直到找到要查找的元素或者数据集不能再分割。\n\n## 图解\n\n{% asset_img 1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png 二分查找 %}\n\n<!-- more -->\n\n## 适用场景\n\n二分查找可以应用于任何类型的数据，但前提是这些数据是按某种规则进行排序的。这使得它在处理那些频繁插入和删除操作的数据集时不太高效。因为执行完插入和删除操作后，无法保证数据集的有序性，在查找前还得先维护一个有序数据集，从而导致查找过程代价太高。此外，元素必须存储在连续的空间中。\n\n因此，当待搜索的集合是相对静态的数据集时，此时使用二分查找是最好的选择。\n\n## 代码示例（JS）\n\n> 非递归实现\n\n```js\nvar arr = [4, 9, 12, 13, 15, 33, 46, 49, 50, 77, 101];\n\nfunction binary_search(arr, target) {\n    var min = 0,\n        max = arr.length;\n\n    while (min <= max) {\n        var mid = parseInt((min + max) / 2);\n\n        if (target === arr[mid]) {\n            return mid;\n        } else if (target > arr[mid]) {\n            min = mid + 1;\n        } else {\n            max = mid - 1;\n        }\n    }\n    return -1;\n}\n\nconsole.log(binary_search(arr, 33));\n```\n\n> 递归实现\n\n```js\nvar arr = [4, 9, 12, 13, 15, 33, 46, 49, 50, 77, 101];\n\nfunction binary_search(arr, min, max, target) {\n    if (min > max) {\n        return -1;\n    }\n\n    var mid = parseInt((min + max) / 2);\n\n    if (target === arr[mid]) {\n        return mid;\n    } else if (target > arr[mid]) {\n        min = mid + 1;\n        return binary_search(arr, min, max, target);\n    } else {\n        max = mid - 1;\n        return binary_search(arr, min, max, target);\n    }\n}\n\nconsole.log(binary_search(arr, 0, arr.length - 1, 33));\n```\n","slug":"有序表查找之二分查找","published":1,"updated":"2020-11-22T02:29:06.951Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygf005rkhsrh3kp3oib","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>二分查找又名折半查找。它的前提是所操作的数据集是一个有序的数据集。它的基本思想是：开始时，先找出有序集合中间的那个元素。如果此元素比要查找的元素大，就接着在较小的一个半区进行查找；反之，如果此元素比要找的元素小，就在较大的一个半区进行查找。在每个更小的数据集中重复这个查找过程，直到找到要查找的元素或者数据集不能再分割。</p>\n<h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><img src=\"/posts/39853/1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png\" class=\"\" title=\"二分查找\">\n\n<a id=\"more\"></a>\n\n<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>二分查找可以应用于任何类型的数据，但前提是这些数据是按某种规则进行排序的。这使得它在处理那些频繁插入和删除操作的数据集时不太高效。因为执行完插入和删除操作后，无法保证数据集的有序性，在查找前还得先维护一个有序数据集，从而导致查找过程代价太高。此外，元素必须存储在连续的空间中。</p>\n<p>因此，当待搜索的集合是相对静态的数据集时，此时使用二分查找是最好的选择。</p>\n<h2 id=\"代码示例（JS）\"><a href=\"#代码示例（JS）\" class=\"headerlink\" title=\"代码示例（JS）\"></a>代码示例（JS）</h2><blockquote>\n<p>非递归实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">33</span>, <span class=\"number\">46</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">77</span>, <span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min = <span class=\"number\">0</span>,</span><br><span class=\"line\">        max = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (min &lt;= max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((min + max) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target === arr[mid]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">            min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binary_search(arr, <span class=\"number\">33</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">33</span>, <span class=\"number\">46</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">77</span>, <span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, min, max, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min &gt; max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((min + max) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target === arr[mid]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">        min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, min, max, target);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, min, max, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binary_search(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">33</span>));</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>二分查找又名折半查找。它的前提是所操作的数据集是一个有序的数据集。它的基本思想是：开始时，先找出有序集合中间的那个元素。如果此元素比要查找的元素大，就接着在较小的一个半区进行查找；反之，如果此元素比要找的元素小，就在较大的一个半区进行查找。在每个更小的数据集中重复这个查找过程，直到找到要查找的元素或者数据集不能再分割。</p>\n<h2 id=\"图解\"><a href=\"#图解\" class=\"headerlink\" title=\"图解\"></a>图解</h2><img src=\"/posts/39853/1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png\" class=\"\" title=\"二分查找\">","more":"<h2 id=\"适用场景\"><a href=\"#适用场景\" class=\"headerlink\" title=\"适用场景\"></a>适用场景</h2><p>二分查找可以应用于任何类型的数据，但前提是这些数据是按某种规则进行排序的。这使得它在处理那些频繁插入和删除操作的数据集时不太高效。因为执行完插入和删除操作后，无法保证数据集的有序性，在查找前还得先维护一个有序数据集，从而导致查找过程代价太高。此外，元素必须存储在连续的空间中。</p>\n<p>因此，当待搜索的集合是相对静态的数据集时，此时使用二分查找是最好的选择。</p>\n<h2 id=\"代码示例（JS）\"><a href=\"#代码示例（JS）\" class=\"headerlink\" title=\"代码示例（JS）\"></a>代码示例（JS）</h2><blockquote>\n<p>非递归实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">33</span>, <span class=\"number\">46</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">77</span>, <span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> min = <span class=\"number\">0</span>,</span><br><span class=\"line\">        max = arr.length;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">while</span> (min &lt;= max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((min + max) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (target === arr[mid]) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">            min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binary_search(arr, <span class=\"number\">33</span>));</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>递归实现</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> arr = [<span class=\"number\">4</span>, <span class=\"number\">9</span>, <span class=\"number\">12</span>, <span class=\"number\">13</span>, <span class=\"number\">15</span>, <span class=\"number\">33</span>, <span class=\"number\">46</span>, <span class=\"number\">49</span>, <span class=\"number\">50</span>, <span class=\"number\">77</span>, <span class=\"number\">101</span>];</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">binary_search</span>(<span class=\"params\">arr, min, max, target</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (min &gt; max) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">var</span> mid = <span class=\"built_in\">parseInt</span>((min + max) / <span class=\"number\">2</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (target === arr[mid]) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> mid;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (target &gt; arr[mid]) &#123;</span><br><span class=\"line\">        min = mid + <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, min, max, target);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        max = mid - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> binary_search(arr, min, max, target);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(binary_search(arr, <span class=\"number\">0</span>, arr.length - <span class=\"number\">1</span>, <span class=\"number\">33</span>));</span><br></pre></td></tr></table></figure>"},{"title":"用JS实现翻转二叉树","abbrlink":50491,"date":"2019-02-27T01:45:39.000Z","_content":"\n## 简介\n\n翻转二叉树就是把二叉树每一层的左右顺序颠倒过来。\n\n## 示例\n\n> 输入\n\n```js\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\n```\n\n> 输出\n\n```js\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n```\n\n<!-- more -->\n\n## 算法步骤\n\n如果根节点不为空，那么将左右子结点交换，然后将左右子结点进行递归调用。\n\n## 代码实现\n\n```js\nvar invertTree = function(root) {\n  if (root !== null) {\n    var temp = root.left;\n    root.left = root.right;\n    root.right = temp;\n    invertTree(root.left);\n    invertTree(root.right);\n  }\n  return root;\n \n};\n```\n","source":"_posts/用JS实现翻转二叉树.md","raw":"---\ntitle: 用JS实现翻转二叉树\ncategories:\n  - 后端\n  - 算法\nabbrlink: 50491\ndate: 2019-02-27 09:45:39\ntags:\n---\n\n## 简介\n\n翻转二叉树就是把二叉树每一层的左右顺序颠倒过来。\n\n## 示例\n\n> 输入\n\n```js\n     4\n   /   \\\n  2     7\n / \\   / \\\n1   3 6   9\n```\n\n> 输出\n\n```js\n     4\n   /   \\\n  7     2\n / \\   / \\\n9   6 3   1\n```\n\n<!-- more -->\n\n## 算法步骤\n\n如果根节点不为空，那么将左右子结点交换，然后将左右子结点进行递归调用。\n\n## 代码实现\n\n```js\nvar invertTree = function(root) {\n  if (root !== null) {\n    var temp = root.left;\n    root.left = root.right;\n    root.right = temp;\n    invertTree(root.left);\n    invertTree(root.right);\n  }\n  return root;\n \n};\n```\n","slug":"用JS实现翻转二叉树","published":1,"updated":"2020-11-22T02:29:06.952Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygg005vkhsr200i1dja","content":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>翻转二叉树就是把二叉树每一层的左右顺序颠倒过来。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>输入</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"number\">4</span></span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">7</span></span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">3</span> <span class=\"number\">6</span>   <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"number\">4</span></span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  <span class=\"number\">7</span>     <span class=\"number\">2</span></span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\"><span class=\"number\">9</span>   <span class=\"number\">6</span> <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>\n\n<a id=\"more\"></a>\n\n<h2 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h2><p>如果根节点不为空，那么将左右子结点交换，然后将左右子结点进行递归调用。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invertTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = root.left;</span><br><span class=\"line\">    root.left = root.right;</span><br><span class=\"line\">    root.right = temp;</span><br><span class=\"line\">    invertTree(root.left);</span><br><span class=\"line\">    invertTree(root.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>翻转二叉树就是把二叉树每一层的左右顺序颠倒过来。</p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><blockquote>\n<p>输入</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"number\">4</span></span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  <span class=\"number\">2</span>     <span class=\"number\">7</span></span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\"><span class=\"number\">1</span>   <span class=\"number\">3</span> <span class=\"number\">6</span>   <span class=\"number\">9</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>输出</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     <span class=\"number\">4</span></span><br><span class=\"line\">   /   \\</span><br><span class=\"line\">  <span class=\"number\">7</span>     <span class=\"number\">2</span></span><br><span class=\"line\"> / \\   / \\</span><br><span class=\"line\"><span class=\"number\">9</span>   <span class=\"number\">6</span> <span class=\"number\">3</span>   <span class=\"number\">1</span></span><br></pre></td></tr></table></figure>","more":"<h2 id=\"算法步骤\"><a href=\"#算法步骤\" class=\"headerlink\" title=\"算法步骤\"></a>算法步骤</h2><p>如果根节点不为空，那么将左右子结点交换，然后将左右子结点进行递归调用。</p>\n<h2 id=\"代码实现\"><a href=\"#代码实现\" class=\"headerlink\" title=\"代码实现\"></a>代码实现</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> invertTree = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">root</span>) </span>&#123;</span><br><span class=\"line\">  <span class=\"keyword\">if</span> (root !== <span class=\"literal\">null</span>) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> temp = root.left;</span><br><span class=\"line\">    root.left = root.right;</span><br><span class=\"line\">    root.right = temp;</span><br><span class=\"line\">    invertTree(root.left);</span><br><span class=\"line\">    invertTree(root.right);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> root;</span><br><span class=\"line\"> </span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>"},{"title":"Sequelize框架入门","abbrlink":1183,"date":"2019-03-11T02:22:53.000Z","_content":"\n## 前言\n\n平常写前端项目时，为了更方便的获取“真实”的动态数据，也会新建几个数据库表来作支撑。但每每需要用Node搭建后端服务时，数据库的查询真的让人头疼，难倒不难，就是特别繁琐，即使封装了个查询sql用工具模块，在遇到稍复杂的查询语句时还是得写完整SQL。\n\n我又是个比较懒的人，在经历了几次痛苦折磨后，我开始google有没有谁帮我们解决了数据库表字段与对象之间的关系映射。也就是我们通常所说的 [ORM](https://baike.baidu.com/item/ORM/3583252?fr=aladdin) 。经过几番搜索，我找到了 [Sequelize](http://docs.sequelizejs.com/) 框架。在了解它之前，我们先简单介绍下什么是 `ORM` ：（我知道不少人是不会点击上面链接查看详情的 :)）\n\n<!-- more -->\n\n## 介绍\n\n### ORM\n\nORM 全称 Object Relational Mapping，翻译成中文就是 `对象关系映射` 。是对 SQL 查询语句的封装，让我们可以用面向对象的方式操作数据库，来更加优雅的生成安全、可维护的 SQL 代码。说白了，就是通过对象来映射和操作数据库。\n\n### Sequelize\n\n而今天的主角 `Sequelize` 则是一个基于 promise 的 Node.js 异步ORM框架。它能够支持多种数据库，包含但不限于 PostgreSQL, MySQL 和 MSSQL 。\n\n> 官网地址：http://docs.sequelizejs.com/\n> github：https://github.com/sequelize/sequelize\n\n## 使用\n\n### 起步\n\n在本地新建文件夹，例如 `sequelize-demo` ，然后在项目根目录下运行命令行命名 `npm init -y`。运行完该命令后项目tree如下：\n\n{% asset_img npminit-y.png npminit-y %}\n\n接着使用 npm 安装 `sequelize`：\n\n```shell\nnpm i sequelize\n```\n\n\n\n### 连接数据库\n\n完成上述步骤以后，我们在根目录下新建一个 `app.js` 文件来使用 `sequelize` ，代码如下：\n\n```js\n// 导入 sequelize\nconst Sequelize = require('sequelize');\n\n// 新建 sequelize 实例\nconst sequelize = new Sequelize('数据库名称', '数据库用户名', '数据库密码', {\n    // 其他的数据库连接配置\n    host: '127.0.0.1', // 主机，默认 localhost\n    port: 8889,        // 端口，默认 3306\n    dialect: 'mysql',  // 数据库类型， 默认 mysql 【必填】\n    timezone: '+08:00' // 时区，默认会根据系统当前所在时区进行设置，格式：'+08:00' 或字符串格式 'Asia/Shanghai' 参考：http://php.net/manual/zh/timezones.php 【使用场景：一般情况下默认配置就好，但如果服务器在美国，但想存储中国时区，就需要明确指定 '+08:00' 了】\n});\n\n// 测试数据库的连接（返回的是一个Promise，记得 catch 捕获错误）\ntry {\n    sequelize.authenticate();\n    console.log('数据库连接成功!');\n} catch (err) {\n    console.log('连接失败');  \n}\n```\n\n此时你可以尝试运行 `app.js` 文件，即在根目录下运行 `node app.js` 命令。正常情况下你会收到报错信息，类似这样：\n\n{% asset_img error-mysql2.png mysql2 %}\n\n意思是你需要安装 `mysql2` ，这是因为 `sequelize` 虽然依赖了 `mysql2` ，但却没有内置安装。所以接下来你得在项目根目录下运行如下代码来安装 `mysql2`：\n\n```shell\nnpm i mysql2\n```\n\n\n\n安装完毕后再次运行 `app.js` ，就能连接数据库成功了：\n\n```shell\nnode app.js\nExecuting (default): SELECT 1+1 AS result\n数据库连接成功!\n```\n\n\n\n### 定义模型（Model）\n\n> 所谓模型，就是用来描述数据库表字段信息的对象，每一个模型对象表示数据库中的一个表，后续对数据库的操作都是用过对应的模型对象来完成的。\n\n接下来我们就要定义数据的模型了。在此之前，你还需要做一些准备工作。以我为例，我在数据库中新建了一个 `users` 表，表字段和类型如下：\n\n{% asset_img table-property.png 表字段 %}\n\n然后定义出对应此表的数据模型：\n\n```js\n// 定义模型（用对象的方式来描述数据库中的表）\nconst UserModel = sequelize.define('User', {\n    // 描述表中对应的字段信息\n    id: { // 每一个字段的信息\n        type: Sequelize.INTEGER(11), // 字段类型\n        allowNull: false,            // 不允许为空\n        autoIncrement: true,         // id自增长\n        primaryKey: true,            // 设为主键\n    },\n    username: {\n        type: Sequelize.STRING(50),\n        allowNull: false,\n        defaultValue: '',            // 设置字段默认值\n    },\n    age: {\n        type: Sequelize.TINYINT(3),\n        allowNull: false,\n    },\n    gender: {\n        type: Sequelize.ENUM(['men', 'women', 'other']), // 这是个枚举类型字段，表示性别只能为“男”，“女”，“保密”中的其中一个，传入 ENUM 中的可以是逗号隔开的字符串，也可以是个数组：ENUM(['men', 'women']) or ENUM('men', 'women', 'other')\n        allowNull: false,\n        defaultValue: 'men',\n    },\n}, { // 用来设置字段以外的其他信息\n    timestamps: false, // 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true\n    tableName: 'users', // 该模型映射的真实表名\n});\n```\n\n\n\n**注意：**在定义模型时，字段名称可以和数据库表中的字段名称不相同，但如果你想另起一个别名，则需要在字段信息设置中加入 `field` 来关联真正的表字段名称。例如：\n\n```js\nuserName: { // <-- 你起的别名\n    type: Sequelize.STRING(50),\n    allowNull: false,\n    field: 'username', // 关联数据库表中真正的字段名\n},\n```\n\n\n\n### 数据查询\n\n#### 查询所有\n\n完成表模型的定义以后，我们就可以通过 `findAll` 来查询表数据了：\n\n```js\n// 查询 users 表中所有数据\nUserModel.findAll().then(users => {\n    // 返回的 users 是个数组\n    users.forEach(user => {\n        // 循环的每个 user 都是个 Model 实例\n        // 该 Model 实例包含 get 方法，我们能通过它获取 username\n        console.log(user.get('username'));\n    });\n}).catch(err => {\n    console.log(err);\n});\n```\n\n\n\n写完上面代码后，再次运行 `app.js` ，你就应该能够查询到数据了~\np.s. 查询之前别忘了在数据库中插入一些数据。\n\n#### 条件查询\n\n除了查询全部数据，我们还可以使用 `where` 查询指定的数据：\n\n```js\n// 这次不用 .then 形式，而采用 async + await\n(async function() {\n    // 查找 username 为 '李元芳' 的唯一数据\n    let res = await UserModel.findOne({\n        where: {\n            username: '李元芳'\n        }\n    })\n    console.dir(res);\n})();\n```\n\n\n\n而类似大于小于这样的查询会稍显麻烦一点。例如我们来编写查询 users 表中年龄大于某个值的代码：\n\n```js\n(async function () {\n    // 查找满足 age > 24 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            age: {\n                [Sequelize.Op.gt]: 24,\n            }\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n})();\n```\n\n\n\n#### 多条件查询\n\n除了单一条件查询，我们还可以通过嵌套 or 或 and 运算符的集合来生成复杂条件语句。例如我们来查询 `年龄小于25 或者 性别为男` 的所有数据：\n\n```js\n(async function () {\n    let { Op } = Sequelize;\n    // 查找满足 age < 25 或 gender = 'men' 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            [Op.or]: [\n                {\n                    age: {\n                        [Sequelize.Op.lt]: 25,\n                    }\n                },\n                {\n                    gender: 'men'\n                }\n            ]\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n})();\n```\n\n\n\n从上面几组查询语句我们可以看出，`where` 通常用 `attribute: value` 键值对获取一个对象，其中 `value` 可以是匹配等式的**数据**或其他运算符的**键值对象**。更多查询语法可在下方链接查询：\n\n- [Sequelize - Querying](http://docs.sequelizejs.com/manual/querying.html)\n- [Sequelize - Querying（中文文档）](https://demopark.github.io/sequelize-docs-Zh-CN/querying.html)\n\n#### 查询限制 limit, offset\n\n我们还能限制查询的数量：\n\n```js\n(async () => {\n    // 只从表中查询两条数据\n    let res = await UserModel.findAll({\n        limit: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n跳过前2条数据：\n\n```js\n(async () => {\n    let res = await UserModel.findAll({\n        offset: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n跳过前2条数据并获取3条：\n\n```js\n(async () => {\n    let res = await UserModel.findAll({\n        offset: 2,\n        limit: 3\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n#### 查询排序\n\n我们还可以将查询数据进行排序：\n\n```js\n(async () => {\n    // 查询的结果按年龄高到低排序\n    let res = await UserModel.findAll({\n        order: [\n            ['age', 'desc']\n        ]\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n#### 查询记录\n\n有些时候我们可能只是想单纯的查询数据表中有多少条数据，这时可以用 `count()` 方法：\n\n```js\n(async () => {\n  // 查询 users 表中有多少条数据\n  let count = await UserModel.count();\n  console.log(count);\n})();\n\n\n\n// 或者使用 `findAndCountAll()` 方法在数据库中搜索多条记录，它能返回给我们**数据和总计数**：\n\n\n(async () => {\n    // 查询 users 表中的前两条数据，并返回 users 表中总记录数\n    let res = await UserModel.findAndCountAll({\n        limit: 2,\n    });\n    console.log(res);\n})();\n```\n\n\n\n查询结果的格式如下：\n\n```js\n{ \n    count: 总记录数,\n    rows: [ \n        {第一条记录}, {第二条记录}, ...\n    ]\n}\n```\n\n\n\n这个方法对我们为前端提供分页功能很方便，count是符合条件的总记录数，而rows中可以是当前页数下的记录数。\n\n### 数据增加\n\n既然能查，当然就能往数据库插入数据，在 `sequelize` 中，插入数据可以用 `build` 方法：\n\n```js\n// 新建一条数据（除了build外，还可以通过 new UserModel({}) 的形式创建一条记录）\nlet wangwu = UserModel.build({\n    username: '王五',\n    age: 22,\n    gender: 'men'\n});\n\n// **注意：** 通过 new 或 build 出来的对象不会立即同步到数据库中，\n// 需要使用后续的一些方法（例如 save ）来同步\n\n// 你还可以修改这条数据\nwangwu.set('age', 25);\n\n// 最后别忘了保存才能成功插入数据\nwangwu.save();\n```\n\n\n如果运行后没报错，去数据库刷新表吧，数据已经成功的插入到 `users` 表了~\n\n### 数据修改\n\n实际开发中修改数据是再平常不过的了，比如修改一篇博客，更新自己的个人信息… 在 `sequelize` 中，我们这样修改数据：\n\n```js\n// 查询id为2的用户数据\nUserModel.findByPk(2).then(user => {\n    // 查询到以后修改其 age 字段为 99\n    user.set('age', 99);\n    // 修改后别忘了保存\n    user.save();\n});\n```\n\n\n\n**注意：** 在 Sequelize v5 版本以前，通过id查询数据的方法名为 `findById` ，从 v5 版本开始，更改为 `findByPk` 。其实想一下这样非常合理，以前的 `findById` 太主观了，要知道不一定每个表的主键都为 id ，所以更改为 `findByPk` 后，表示通过**主键（Pk -> PrimaryKey）**查找，`sequelize` 会自动通过你在创建表模型时定义的主键字段查找。例如我们一开始在定义 `User` 模型时，就给 `id` 字段添加了 `primaryKey: true,` 属性。\n\n除了 set + update 来更新数据以外，还可以使用 `update()` 方法做相同的事情：\n\n```js\n(async function () {\n    // 先查询\n    let xiaohong = await UserModel.findByPk(3);\n    // update方法相当于 set + save\n    await xiaohong.update({\n        age: 22,\n    });\n})();\n```\n\n\n\n### 数据删除\n\n如果想要删除一条数据，可以使用 `destroy` 方法：\n\n```js\n(async function () {\n    // 先查询\n    let wangwu = await UserModel.findByPk(4);\n    // 对查询到的数据进行删除\n    wangwu.destroy();\n})();\n```\n\n\n\n## 完整代码\n\n```js\nconst Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize(\"miaov\", \"root\", \"root\", {\n  // 其他的数据库连接配置\n  host: \"127.0.0.1\", // 主机\n  port: 8889, // 端口\n  dialect: \"mysql\" // 数据库类型\n});\n\n// 测试连接\ntry {\n    sequelize.authenticate();\n    console.log('数据库连接成功!');\n} catch (err) {\n    console.log('连接失败');    \n}\n\n// 定义模型（用对象的方式来描述数据库中的表）\nconst UserModel = sequelize.define('User', {\n    // 定义字段\n    id: { // 对字段属性的定义\n        type: Sequelize.INTEGER(11), // 字段类型\n        allowNull: false,            // 不允许为空\n        autoIncrement: true,         // id自增长\n        primaryKey: true,            // 设为主键\n    },\n    username: {\n        type: Sequelize.STRING(50),\n        allowNull: false,\n        defaultValue: '',            // 设置字段默认值\n    },\n    age: {\n        type: Sequelize.TINYINT(3),\n        allowNull: false,\n    },\n    gender: {\n        type: Sequelize.ENUM(['men', 'women', 'other']),\n        allowNull: false,\n        defaultValue: 'men',\n    },\n}, { // 用来设置字段以外的其他信息\n    timestamps: false,  // 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true\n    tableName: 'users', // 该模型映射的真实表名\n});\n\n// 为了方便学习，使用一个函数包裹一组代码\n// 这样代码就不会运行了，从而避免干扰其他代码的执行\n// 如果想要此函数中代码执行，添加 `()` 就好\n// (function(){...})();  <-- 加上括号\n(function() {\n    // 查询 users 表中所有数据\n    UserModel.findAll().then(users => {\n        // 返回的 users 是个数组\n        users.forEach(user => {\n            // 循环的每个 user 都是个 Model 实例\n            // 该 Model 实例包含 get 方法，我们能通过它获取 username\n            console.log(user.get('username'));\n        });\n    }).catch(err => {\n        console.log(err);\n    });\n});\n\n(async function() {\n    // 新建一条数据（除了build外，还可以通过 new UserModel() 的形式创建一条记录）\n    let liyuanfang = UserModel.build({\n        username: '李元芳',\n        age: 09,\n        gender: 'men'\n    });\n    // 修改数据\n    liyuanfang.set('age', 25);\n    // 别忘了保存\n    await liyuanfang.save();\n});\n\n(function() {\n    // 查询id为2的用户数据\n    UserModel.findByPk(2).then(user => {\n        // 查询到以后修改其 age 字段为 99\n        user.set('age', 99);\n        // 修改后别忘了保存\n        user.save();\n    });\n});\n\n(async function() {\n    // 先查询\n    let xiaohong = await UserModel.findByPk(3);\n    // update方法相当于 set + save\n    await xiaohong.update({\n        age: 18\n    });\n});\n\n(async function () {\n    // 先查询\n    let wangwu = await UserModel.findByPk(4);\n    // 对查询到的数据进行删除\n    wangwu.destroy();\n});\n\n(async function() {\n    // 查找 username 为 '李元芳' 的唯一数据\n    let res = await UserModel.findOne({\n        where: {\n            username: '李元芳'\n        }\n    })\n    console.dir(res);\n});\n\n(async function () {\n    // 查找满足 age > 24 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            age: {\n                [Sequelize.Op.gt]: 24,\n            }\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n});\n\n(async function () {\n    let { Op } = Sequelize;\n    // 查找满足 age < 25 或 gender = 'men' 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            [Op.or]: [\n                {\n                    age: {\n                        [Sequelize.Op.lt]: 25,\n                    }\n                },\n                {\n                    gender: 'men'\n                }\n            ]\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 只从表中查询两条数据\n    let res = await UserModel.findAll({\n        limit: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 跳过前2条数据\n    let res = await UserModel.findAll({\n        offset: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 跳过前2条数据并获取3条\n    let res = await UserModel.findAll({\n        offset: 2,\n        limit: 3\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 查询的结果按年龄高到低排序\n    let res = await UserModel.findAll({\n        order: [\n            ['age', 'desc']\n        ]\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 查询的结果按年龄高到低排序\n    let count = await UserModel.count();\n    console.log(count);\n});\n\n(async () => {\n    // 查询 users 表中的前两条数据，并返回 users 表中总记录数\n    let res = await UserModel.findAndCountAll({\n        limit: 2,\n    });\n    console.log(res);\n})();\n```\n\n## 版本\n\n安装的 sequelize 和 mysql2 的版本为：\n\n```js\n\"dependencies\": {\n    \"mysql2\": \"^1.6.5\",\n    \"sequelize\": \"^5.3.1\"\n}\n```\n\n\n\n## 资源\n\n- [Sequelize Docs](http://docs.sequelizejs.com/)\n- [Sequelize Docs 中文版](https://demopark.github.io/sequelize-docs-Zh-CN/)\n","source":"_posts/Sequelize框架入门.md","raw":"---\ntitle: Sequelize框架入门\ntags:\n  - Sequelize\ncategories:\n  - 后端\n  - SQL\nabbrlink: 1183\ndate: 2019-03-11 10:22:53\n---\n\n## 前言\n\n平常写前端项目时，为了更方便的获取“真实”的动态数据，也会新建几个数据库表来作支撑。但每每需要用Node搭建后端服务时，数据库的查询真的让人头疼，难倒不难，就是特别繁琐，即使封装了个查询sql用工具模块，在遇到稍复杂的查询语句时还是得写完整SQL。\n\n我又是个比较懒的人，在经历了几次痛苦折磨后，我开始google有没有谁帮我们解决了数据库表字段与对象之间的关系映射。也就是我们通常所说的 [ORM](https://baike.baidu.com/item/ORM/3583252?fr=aladdin) 。经过几番搜索，我找到了 [Sequelize](http://docs.sequelizejs.com/) 框架。在了解它之前，我们先简单介绍下什么是 `ORM` ：（我知道不少人是不会点击上面链接查看详情的 :)）\n\n<!-- more -->\n\n## 介绍\n\n### ORM\n\nORM 全称 Object Relational Mapping，翻译成中文就是 `对象关系映射` 。是对 SQL 查询语句的封装，让我们可以用面向对象的方式操作数据库，来更加优雅的生成安全、可维护的 SQL 代码。说白了，就是通过对象来映射和操作数据库。\n\n### Sequelize\n\n而今天的主角 `Sequelize` 则是一个基于 promise 的 Node.js 异步ORM框架。它能够支持多种数据库，包含但不限于 PostgreSQL, MySQL 和 MSSQL 。\n\n> 官网地址：http://docs.sequelizejs.com/\n> github：https://github.com/sequelize/sequelize\n\n## 使用\n\n### 起步\n\n在本地新建文件夹，例如 `sequelize-demo` ，然后在项目根目录下运行命令行命名 `npm init -y`。运行完该命令后项目tree如下：\n\n{% asset_img npminit-y.png npminit-y %}\n\n接着使用 npm 安装 `sequelize`：\n\n```shell\nnpm i sequelize\n```\n\n\n\n### 连接数据库\n\n完成上述步骤以后，我们在根目录下新建一个 `app.js` 文件来使用 `sequelize` ，代码如下：\n\n```js\n// 导入 sequelize\nconst Sequelize = require('sequelize');\n\n// 新建 sequelize 实例\nconst sequelize = new Sequelize('数据库名称', '数据库用户名', '数据库密码', {\n    // 其他的数据库连接配置\n    host: '127.0.0.1', // 主机，默认 localhost\n    port: 8889,        // 端口，默认 3306\n    dialect: 'mysql',  // 数据库类型， 默认 mysql 【必填】\n    timezone: '+08:00' // 时区，默认会根据系统当前所在时区进行设置，格式：'+08:00' 或字符串格式 'Asia/Shanghai' 参考：http://php.net/manual/zh/timezones.php 【使用场景：一般情况下默认配置就好，但如果服务器在美国，但想存储中国时区，就需要明确指定 '+08:00' 了】\n});\n\n// 测试数据库的连接（返回的是一个Promise，记得 catch 捕获错误）\ntry {\n    sequelize.authenticate();\n    console.log('数据库连接成功!');\n} catch (err) {\n    console.log('连接失败');  \n}\n```\n\n此时你可以尝试运行 `app.js` 文件，即在根目录下运行 `node app.js` 命令。正常情况下你会收到报错信息，类似这样：\n\n{% asset_img error-mysql2.png mysql2 %}\n\n意思是你需要安装 `mysql2` ，这是因为 `sequelize` 虽然依赖了 `mysql2` ，但却没有内置安装。所以接下来你得在项目根目录下运行如下代码来安装 `mysql2`：\n\n```shell\nnpm i mysql2\n```\n\n\n\n安装完毕后再次运行 `app.js` ，就能连接数据库成功了：\n\n```shell\nnode app.js\nExecuting (default): SELECT 1+1 AS result\n数据库连接成功!\n```\n\n\n\n### 定义模型（Model）\n\n> 所谓模型，就是用来描述数据库表字段信息的对象，每一个模型对象表示数据库中的一个表，后续对数据库的操作都是用过对应的模型对象来完成的。\n\n接下来我们就要定义数据的模型了。在此之前，你还需要做一些准备工作。以我为例，我在数据库中新建了一个 `users` 表，表字段和类型如下：\n\n{% asset_img table-property.png 表字段 %}\n\n然后定义出对应此表的数据模型：\n\n```js\n// 定义模型（用对象的方式来描述数据库中的表）\nconst UserModel = sequelize.define('User', {\n    // 描述表中对应的字段信息\n    id: { // 每一个字段的信息\n        type: Sequelize.INTEGER(11), // 字段类型\n        allowNull: false,            // 不允许为空\n        autoIncrement: true,         // id自增长\n        primaryKey: true,            // 设为主键\n    },\n    username: {\n        type: Sequelize.STRING(50),\n        allowNull: false,\n        defaultValue: '',            // 设置字段默认值\n    },\n    age: {\n        type: Sequelize.TINYINT(3),\n        allowNull: false,\n    },\n    gender: {\n        type: Sequelize.ENUM(['men', 'women', 'other']), // 这是个枚举类型字段，表示性别只能为“男”，“女”，“保密”中的其中一个，传入 ENUM 中的可以是逗号隔开的字符串，也可以是个数组：ENUM(['men', 'women']) or ENUM('men', 'women', 'other')\n        allowNull: false,\n        defaultValue: 'men',\n    },\n}, { // 用来设置字段以外的其他信息\n    timestamps: false, // 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true\n    tableName: 'users', // 该模型映射的真实表名\n});\n```\n\n\n\n**注意：**在定义模型时，字段名称可以和数据库表中的字段名称不相同，但如果你想另起一个别名，则需要在字段信息设置中加入 `field` 来关联真正的表字段名称。例如：\n\n```js\nuserName: { // <-- 你起的别名\n    type: Sequelize.STRING(50),\n    allowNull: false,\n    field: 'username', // 关联数据库表中真正的字段名\n},\n```\n\n\n\n### 数据查询\n\n#### 查询所有\n\n完成表模型的定义以后，我们就可以通过 `findAll` 来查询表数据了：\n\n```js\n// 查询 users 表中所有数据\nUserModel.findAll().then(users => {\n    // 返回的 users 是个数组\n    users.forEach(user => {\n        // 循环的每个 user 都是个 Model 实例\n        // 该 Model 实例包含 get 方法，我们能通过它获取 username\n        console.log(user.get('username'));\n    });\n}).catch(err => {\n    console.log(err);\n});\n```\n\n\n\n写完上面代码后，再次运行 `app.js` ，你就应该能够查询到数据了~\np.s. 查询之前别忘了在数据库中插入一些数据。\n\n#### 条件查询\n\n除了查询全部数据，我们还可以使用 `where` 查询指定的数据：\n\n```js\n// 这次不用 .then 形式，而采用 async + await\n(async function() {\n    // 查找 username 为 '李元芳' 的唯一数据\n    let res = await UserModel.findOne({\n        where: {\n            username: '李元芳'\n        }\n    })\n    console.dir(res);\n})();\n```\n\n\n\n而类似大于小于这样的查询会稍显麻烦一点。例如我们来编写查询 users 表中年龄大于某个值的代码：\n\n```js\n(async function () {\n    // 查找满足 age > 24 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            age: {\n                [Sequelize.Op.gt]: 24,\n            }\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n})();\n```\n\n\n\n#### 多条件查询\n\n除了单一条件查询，我们还可以通过嵌套 or 或 and 运算符的集合来生成复杂条件语句。例如我们来查询 `年龄小于25 或者 性别为男` 的所有数据：\n\n```js\n(async function () {\n    let { Op } = Sequelize;\n    // 查找满足 age < 25 或 gender = 'men' 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            [Op.or]: [\n                {\n                    age: {\n                        [Sequelize.Op.lt]: 25,\n                    }\n                },\n                {\n                    gender: 'men'\n                }\n            ]\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n})();\n```\n\n\n\n从上面几组查询语句我们可以看出，`where` 通常用 `attribute: value` 键值对获取一个对象，其中 `value` 可以是匹配等式的**数据**或其他运算符的**键值对象**。更多查询语法可在下方链接查询：\n\n- [Sequelize - Querying](http://docs.sequelizejs.com/manual/querying.html)\n- [Sequelize - Querying（中文文档）](https://demopark.github.io/sequelize-docs-Zh-CN/querying.html)\n\n#### 查询限制 limit, offset\n\n我们还能限制查询的数量：\n\n```js\n(async () => {\n    // 只从表中查询两条数据\n    let res = await UserModel.findAll({\n        limit: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n跳过前2条数据：\n\n```js\n(async () => {\n    let res = await UserModel.findAll({\n        offset: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n跳过前2条数据并获取3条：\n\n```js\n(async () => {\n    let res = await UserModel.findAll({\n        offset: 2,\n        limit: 3\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n#### 查询排序\n\n我们还可以将查询数据进行排序：\n\n```js\n(async () => {\n    // 查询的结果按年龄高到低排序\n    let res = await UserModel.findAll({\n        order: [\n            ['age', 'desc']\n        ]\n    });\n    console.log(res.map(r => r.get('username')));\n})();\n```\n\n\n\n#### 查询记录\n\n有些时候我们可能只是想单纯的查询数据表中有多少条数据，这时可以用 `count()` 方法：\n\n```js\n(async () => {\n  // 查询 users 表中有多少条数据\n  let count = await UserModel.count();\n  console.log(count);\n})();\n\n\n\n// 或者使用 `findAndCountAll()` 方法在数据库中搜索多条记录，它能返回给我们**数据和总计数**：\n\n\n(async () => {\n    // 查询 users 表中的前两条数据，并返回 users 表中总记录数\n    let res = await UserModel.findAndCountAll({\n        limit: 2,\n    });\n    console.log(res);\n})();\n```\n\n\n\n查询结果的格式如下：\n\n```js\n{ \n    count: 总记录数,\n    rows: [ \n        {第一条记录}, {第二条记录}, ...\n    ]\n}\n```\n\n\n\n这个方法对我们为前端提供分页功能很方便，count是符合条件的总记录数，而rows中可以是当前页数下的记录数。\n\n### 数据增加\n\n既然能查，当然就能往数据库插入数据，在 `sequelize` 中，插入数据可以用 `build` 方法：\n\n```js\n// 新建一条数据（除了build外，还可以通过 new UserModel({}) 的形式创建一条记录）\nlet wangwu = UserModel.build({\n    username: '王五',\n    age: 22,\n    gender: 'men'\n});\n\n// **注意：** 通过 new 或 build 出来的对象不会立即同步到数据库中，\n// 需要使用后续的一些方法（例如 save ）来同步\n\n// 你还可以修改这条数据\nwangwu.set('age', 25);\n\n// 最后别忘了保存才能成功插入数据\nwangwu.save();\n```\n\n\n如果运行后没报错，去数据库刷新表吧，数据已经成功的插入到 `users` 表了~\n\n### 数据修改\n\n实际开发中修改数据是再平常不过的了，比如修改一篇博客，更新自己的个人信息… 在 `sequelize` 中，我们这样修改数据：\n\n```js\n// 查询id为2的用户数据\nUserModel.findByPk(2).then(user => {\n    // 查询到以后修改其 age 字段为 99\n    user.set('age', 99);\n    // 修改后别忘了保存\n    user.save();\n});\n```\n\n\n\n**注意：** 在 Sequelize v5 版本以前，通过id查询数据的方法名为 `findById` ，从 v5 版本开始，更改为 `findByPk` 。其实想一下这样非常合理，以前的 `findById` 太主观了，要知道不一定每个表的主键都为 id ，所以更改为 `findByPk` 后，表示通过**主键（Pk -> PrimaryKey）**查找，`sequelize` 会自动通过你在创建表模型时定义的主键字段查找。例如我们一开始在定义 `User` 模型时，就给 `id` 字段添加了 `primaryKey: true,` 属性。\n\n除了 set + update 来更新数据以外，还可以使用 `update()` 方法做相同的事情：\n\n```js\n(async function () {\n    // 先查询\n    let xiaohong = await UserModel.findByPk(3);\n    // update方法相当于 set + save\n    await xiaohong.update({\n        age: 22,\n    });\n})();\n```\n\n\n\n### 数据删除\n\n如果想要删除一条数据，可以使用 `destroy` 方法：\n\n```js\n(async function () {\n    // 先查询\n    let wangwu = await UserModel.findByPk(4);\n    // 对查询到的数据进行删除\n    wangwu.destroy();\n})();\n```\n\n\n\n## 完整代码\n\n```js\nconst Sequelize = require('sequelize');\n\nconst sequelize = new Sequelize(\"miaov\", \"root\", \"root\", {\n  // 其他的数据库连接配置\n  host: \"127.0.0.1\", // 主机\n  port: 8889, // 端口\n  dialect: \"mysql\" // 数据库类型\n});\n\n// 测试连接\ntry {\n    sequelize.authenticate();\n    console.log('数据库连接成功!');\n} catch (err) {\n    console.log('连接失败');    \n}\n\n// 定义模型（用对象的方式来描述数据库中的表）\nconst UserModel = sequelize.define('User', {\n    // 定义字段\n    id: { // 对字段属性的定义\n        type: Sequelize.INTEGER(11), // 字段类型\n        allowNull: false,            // 不允许为空\n        autoIncrement: true,         // id自增长\n        primaryKey: true,            // 设为主键\n    },\n    username: {\n        type: Sequelize.STRING(50),\n        allowNull: false,\n        defaultValue: '',            // 设置字段默认值\n    },\n    age: {\n        type: Sequelize.TINYINT(3),\n        allowNull: false,\n    },\n    gender: {\n        type: Sequelize.ENUM(['men', 'women', 'other']),\n        allowNull: false,\n        defaultValue: 'men',\n    },\n}, { // 用来设置字段以外的其他信息\n    timestamps: false,  // 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true\n    tableName: 'users', // 该模型映射的真实表名\n});\n\n// 为了方便学习，使用一个函数包裹一组代码\n// 这样代码就不会运行了，从而避免干扰其他代码的执行\n// 如果想要此函数中代码执行，添加 `()` 就好\n// (function(){...})();  <-- 加上括号\n(function() {\n    // 查询 users 表中所有数据\n    UserModel.findAll().then(users => {\n        // 返回的 users 是个数组\n        users.forEach(user => {\n            // 循环的每个 user 都是个 Model 实例\n            // 该 Model 实例包含 get 方法，我们能通过它获取 username\n            console.log(user.get('username'));\n        });\n    }).catch(err => {\n        console.log(err);\n    });\n});\n\n(async function() {\n    // 新建一条数据（除了build外，还可以通过 new UserModel() 的形式创建一条记录）\n    let liyuanfang = UserModel.build({\n        username: '李元芳',\n        age: 09,\n        gender: 'men'\n    });\n    // 修改数据\n    liyuanfang.set('age', 25);\n    // 别忘了保存\n    await liyuanfang.save();\n});\n\n(function() {\n    // 查询id为2的用户数据\n    UserModel.findByPk(2).then(user => {\n        // 查询到以后修改其 age 字段为 99\n        user.set('age', 99);\n        // 修改后别忘了保存\n        user.save();\n    });\n});\n\n(async function() {\n    // 先查询\n    let xiaohong = await UserModel.findByPk(3);\n    // update方法相当于 set + save\n    await xiaohong.update({\n        age: 18\n    });\n});\n\n(async function () {\n    // 先查询\n    let wangwu = await UserModel.findByPk(4);\n    // 对查询到的数据进行删除\n    wangwu.destroy();\n});\n\n(async function() {\n    // 查找 username 为 '李元芳' 的唯一数据\n    let res = await UserModel.findOne({\n        where: {\n            username: '李元芳'\n        }\n    })\n    console.dir(res);\n});\n\n(async function () {\n    // 查找满足 age > 24 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            age: {\n                [Sequelize.Op.gt]: 24,\n            }\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n});\n\n(async function () {\n    let { Op } = Sequelize;\n    // 查找满足 age < 25 或 gender = 'men' 的所有数据\n    let res = await UserModel.findAll({\n        where: {\n            [Op.or]: [\n                {\n                    age: {\n                        [Sequelize.Op.lt]: 25,\n                    }\n                },\n                {\n                    gender: 'men'\n                }\n            ]\n        }\n    })\n    // 打印出符合条件的用户的 username\n    console.dir(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 只从表中查询两条数据\n    let res = await UserModel.findAll({\n        limit: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 跳过前2条数据\n    let res = await UserModel.findAll({\n        offset: 2,\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 跳过前2条数据并获取3条\n    let res = await UserModel.findAll({\n        offset: 2,\n        limit: 3\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 查询的结果按年龄高到低排序\n    let res = await UserModel.findAll({\n        order: [\n            ['age', 'desc']\n        ]\n    });\n    console.log(res.map(r => r.get('username')));\n});\n\n(async () => {\n    // 查询的结果按年龄高到低排序\n    let count = await UserModel.count();\n    console.log(count);\n});\n\n(async () => {\n    // 查询 users 表中的前两条数据，并返回 users 表中总记录数\n    let res = await UserModel.findAndCountAll({\n        limit: 2,\n    });\n    console.log(res);\n})();\n```\n\n## 版本\n\n安装的 sequelize 和 mysql2 的版本为：\n\n```js\n\"dependencies\": {\n    \"mysql2\": \"^1.6.5\",\n    \"sequelize\": \"^5.3.1\"\n}\n```\n\n\n\n## 资源\n\n- [Sequelize Docs](http://docs.sequelizejs.com/)\n- [Sequelize Docs 中文版](https://demopark.github.io/sequelize-docs-Zh-CN/)\n","slug":"Sequelize框架入门","published":1,"updated":"2020-11-22T02:29:06.953Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygh005ykhsra4pfg73q","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平常写前端项目时，为了更方便的获取“真实”的动态数据，也会新建几个数据库表来作支撑。但每每需要用Node搭建后端服务时，数据库的查询真的让人头疼，难倒不难，就是特别繁琐，即使封装了个查询sql用工具模块，在遇到稍复杂的查询语句时还是得写完整SQL。</p>\n<p>我又是个比较懒的人，在经历了几次痛苦折磨后，我开始google有没有谁帮我们解决了数据库表字段与对象之间的关系映射。也就是我们通常所说的 <a href=\"https://baike.baidu.com/item/ORM/3583252?fr=aladdin\">ORM</a> 。经过几番搜索，我找到了 <a href=\"http://docs.sequelizejs.com/\">Sequelize</a> 框架。在了解它之前，我们先简单介绍下什么是 <code>ORM</code> ：（我知道不少人是不会点击上面链接查看详情的 :)）</p>\n<a id=\"more\"></a>\n\n<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h3><p>ORM 全称 Object Relational Mapping，翻译成中文就是 <code>对象关系映射</code> 。是对 SQL 查询语句的封装，让我们可以用面向对象的方式操作数据库，来更加优雅的生成安全、可维护的 SQL 代码。说白了，就是通过对象来映射和操作数据库。</p>\n<h3 id=\"Sequelize\"><a href=\"#Sequelize\" class=\"headerlink\" title=\"Sequelize\"></a>Sequelize</h3><p>而今天的主角 <code>Sequelize</code> 则是一个基于 promise 的 Node.js 异步ORM框架。它能够支持多种数据库，包含但不限于 PostgreSQL, MySQL 和 MSSQL 。</p>\n<blockquote>\n<p>官网地址：<a href=\"http://docs.sequelizejs.com/\">http://docs.sequelizejs.com/</a><br>github：<a href=\"https://github.com/sequelize/sequelize\">https://github.com/sequelize/sequelize</a></p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><p>在本地新建文件夹，例如 <code>sequelize-demo</code> ，然后在项目根目录下运行命令行命名 <code>npm init -y</code>。运行完该命令后项目tree如下：</p>\n<img src=\"/posts/1183/npminit-y.png\" class=\"\" title=\"npminit-y\">\n\n<p>接着使用 npm 安装 <code>sequelize</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sequelize</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>完成上述步骤以后，我们在根目录下新建一个 <code>app.js</code> 文件来使用 <code>sequelize</code> ，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 sequelize</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sequelize&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新建 sequelize 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">&#x27;数据库名称&#x27;</span>, <span class=\"string\">&#x27;数据库用户名&#x27;</span>, <span class=\"string\">&#x27;数据库密码&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他的数据库连接配置</span></span><br><span class=\"line\">    host: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\">// 主机，默认 localhost</span></span><br><span class=\"line\">    port: <span class=\"number\">8889</span>,        <span class=\"comment\">// 端口，默认 3306</span></span><br><span class=\"line\">    dialect: <span class=\"string\">&#x27;mysql&#x27;</span>,  <span class=\"comment\">// 数据库类型， 默认 mysql 【必填】</span></span><br><span class=\"line\">    timezone: <span class=\"string\">&#x27;+08:00&#x27;</span> <span class=\"comment\">// 时区，默认会根据系统当前所在时区进行设置，格式：&#x27;+08:00&#x27; 或字符串格式 &#x27;Asia/Shanghai&#x27; 参考：http://php.net/manual/zh/timezones.php 【使用场景：一般情况下默认配置就好，但如果服务器在美国，但想存储中国时区，就需要明确指定 &#x27;+08:00&#x27; 了】</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试数据库的连接（返回的是一个Promise，记得 catch 捕获错误）</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sequelize.authenticate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接成功!&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接失败&#x27;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时你可以尝试运行 <code>app.js</code> 文件，即在根目录下运行 <code>node app.js</code> 命令。正常情况下你会收到报错信息，类似这样：</p>\n<img src=\"/posts/1183/error-mysql2.png\" class=\"\" title=\"mysql2\">\n\n<p>意思是你需要安装 <code>mysql2</code> ，这是因为 <code>sequelize</code> 虽然依赖了 <code>mysql2</code> ，但却没有内置安装。所以接下来你得在项目根目录下运行如下代码来安装 <code>mysql2</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mysql2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装完毕后再次运行 <code>app.js</code> ，就能连接数据库成功了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br><span class=\"line\">Executing (default): SELECT 1+1 AS result</span><br><span class=\"line\">数据库连接成功!</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"定义模型（Model）\"><a href=\"#定义模型（Model）\" class=\"headerlink\" title=\"定义模型（Model）\"></a>定义模型（Model）</h3><blockquote>\n<p>所谓模型，就是用来描述数据库表字段信息的对象，每一个模型对象表示数据库中的一个表，后续对数据库的操作都是用过对应的模型对象来完成的。</p>\n</blockquote>\n<p>接下来我们就要定义数据的模型了。在此之前，你还需要做一些准备工作。以我为例，我在数据库中新建了一个 <code>users</code> 表，表字段和类型如下：</p>\n<img src=\"/posts/1183/table-property.png\" class=\"\" title=\"表字段\">\n\n<p>然后定义出对应此表的数据模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模型（用对象的方式来描述数据库中的表）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 描述表中对应的字段信息</span></span><br><span class=\"line\">    id: &#123; <span class=\"comment\">// 每一个字段的信息</span></span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>), <span class=\"comment\">// 字段类型</span></span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,            <span class=\"comment\">// 不允许为空</span></span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,         <span class=\"comment\">// id自增长</span></span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,            <span class=\"comment\">// 设为主键</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,            <span class=\"comment\">// 设置字段默认值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT(<span class=\"number\">3</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    gender: &#123;</span><br><span class=\"line\">        type: Sequelize.ENUM([<span class=\"string\">&#x27;men&#x27;</span>, <span class=\"string\">&#x27;women&#x27;</span>, <span class=\"string\">&#x27;other&#x27;</span>]), <span class=\"comment\">// 这是个枚举类型字段，表示性别只能为“男”，“女”，“保密”中的其中一个，传入 ENUM 中的可以是逗号隔开的字符串，也可以是个数组：ENUM([&#x27;men&#x27;, &#x27;women&#x27;]) or ENUM(&#x27;men&#x27;, &#x27;women&#x27;, &#x27;other&#x27;)</span></span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;men&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;, &#123; <span class=\"comment\">// 用来设置字段以外的其他信息</span></span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true</span></span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;users&#x27;</span>, <span class=\"comment\">// 该模型映射的真实表名</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意：</strong>在定义模型时，字段名称可以和数据库表中的字段名称不相同，但如果你想另起一个别名，则需要在字段信息设置中加入 <code>field</code> 来关联真正的表字段名称。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userName: &#123; <span class=\"comment\">// &lt;-- 你起的别名</span></span><br><span class=\"line\">    type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    field: <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"comment\">// 关联数据库表中真正的字段名</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据查询\"><a href=\"#数据查询\" class=\"headerlink\" title=\"数据查询\"></a>数据查询</h3><h4 id=\"查询所有\"><a href=\"#查询所有\" class=\"headerlink\" title=\"查询所有\"></a>查询所有</h4><p>完成表模型的定义以后，我们就可以通过 <code>findAll</code> 来查询表数据了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询 users 表中所有数据</span></span><br><span class=\"line\">UserModel.findAll().then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回的 users 是个数组</span></span><br><span class=\"line\">    users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环的每个 user 都是个 Model 实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 该 Model 实例包含 get 方法，我们能通过它获取 username</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(user.get(<span class=\"string\">&#x27;username&#x27;</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>写完上面代码后，再次运行 <code>app.js</code> ，你就应该能够查询到数据了~<br>p.s. 查询之前别忘了在数据库中插入一些数据。</p>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>除了查询全部数据，我们还可以使用 <code>where</code> 查询指定的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这次不用 .then 形式，而采用 async + await</span></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找 username 为 &#x27;李元芳&#x27; 的唯一数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findOne(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">&#x27;李元芳&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而类似大于小于这样的查询会稍显麻烦一点。例如我们来编写查询 users 表中年龄大于某个值的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &gt; 24 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            age: &#123;</span><br><span class=\"line\">                [Sequelize.Op.gt]: <span class=\"number\">24</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h4><p>除了单一条件查询，我们还可以通过嵌套 or 或 and 运算符的集合来生成复杂条件语句。例如我们来查询 <code>年龄小于25 或者 性别为男</code> 的所有数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; Op &#125; = Sequelize;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &lt; 25 或 gender = &#x27;men&#x27; 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            [Op.or]: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    age: &#123;</span><br><span class=\"line\">                        [Sequelize.Op.lt]: <span class=\"number\">25</span>,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面几组查询语句我们可以看出，<code>where</code> 通常用 <code>attribute: value</code> 键值对获取一个对象，其中 <code>value</code> 可以是匹配等式的<strong>数据</strong>或其他运算符的<strong>键值对象</strong>。更多查询语法可在下方链接查询：</p>\n<ul>\n<li><a href=\"http://docs.sequelizejs.com/manual/querying.html\">Sequelize - Querying</a></li>\n<li><a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/querying.html\">Sequelize - Querying（中文文档）</a></li>\n</ul>\n<h4 id=\"查询限制-limit-offset\"><a href=\"#查询限制-limit-offset\" class=\"headerlink\" title=\"查询限制 limit, offset\"></a>查询限制 limit, offset</h4><p>我们还能限制查询的数量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只从表中查询两条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跳过前2条数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跳过前2条数据并获取3条：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">        limit: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查询排序\"><a href=\"#查询排序\" class=\"headerlink\" title=\"查询排序\"></a>查询排序</h4><p>我们还可以将查询数据进行排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询的结果按年龄高到低排序</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        order: [</span><br><span class=\"line\">            [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;desc&#x27;</span>]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查询记录\"><a href=\"#查询记录\" class=\"headerlink\" title=\"查询记录\"></a>查询记录</h4><p>有些时候我们可能只是想单纯的查询数据表中有多少条数据，这时可以用 <code>count()</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 查询 users 表中有多少条数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"keyword\">await</span> UserModel.count();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(count);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用 `findAndCountAll()` 方法在数据库中搜索多条记录，它能返回给我们**数据和总计数**：</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询 users 表中的前两条数据，并返回 users 表中总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAndCountAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询结果的格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    count: 总记录数,</span><br><span class=\"line\">    rows: [ </span><br><span class=\"line\">        &#123;第一条记录&#125;, &#123;第二条记录&#125;, ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个方法对我们为前端提供分页功能很方便，count是符合条件的总记录数，而rows中可以是当前页数下的记录数。</p>\n<h3 id=\"数据增加\"><a href=\"#数据增加\" class=\"headerlink\" title=\"数据增加\"></a>数据增加</h3><p>既然能查，当然就能往数据库插入数据，在 <code>sequelize</code> 中，插入数据可以用 <code>build</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一条数据（除了build外，还可以通过 new UserModel(&#123;&#125;) 的形式创建一条记录）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wangwu = UserModel.build(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">&#x27;王五&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">22</span>,</span><br><span class=\"line\">    gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// **注意：** 通过 new 或 build 出来的对象不会立即同步到数据库中，</span></span><br><span class=\"line\"><span class=\"comment\">// 需要使用后续的一些方法（例如 save ）来同步</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 你还可以修改这条数据</span></span><br><span class=\"line\">wangwu.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后别忘了保存才能成功插入数据</span></span><br><span class=\"line\">wangwu.save();</span><br></pre></td></tr></table></figure>\n\n\n<p>如果运行后没报错，去数据库刷新表吧，数据已经成功的插入到 <code>users</code> 表了~</p>\n<h3 id=\"数据修改\"><a href=\"#数据修改\" class=\"headerlink\" title=\"数据修改\"></a>数据修改</h3><p>实际开发中修改数据是再平常不过的了，比如修改一篇博客，更新自己的个人信息… 在 <code>sequelize</code> 中，我们这样修改数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询id为2的用户数据</span></span><br><span class=\"line\">UserModel.findByPk(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询到以后修改其 age 字段为 99</span></span><br><span class=\"line\">    user.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 修改后别忘了保存</span></span><br><span class=\"line\">    user.save();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意：</strong> 在 Sequelize v5 版本以前，通过id查询数据的方法名为 <code>findById</code> ，从 v5 版本开始，更改为 <code>findByPk</code> 。其实想一下这样非常合理，以前的 <code>findById</code> 太主观了，要知道不一定每个表的主键都为 id ，所以更改为 <code>findByPk</code> 后，表示通过<strong>主键（Pk -&gt; PrimaryKey）</strong>查找，<code>sequelize</code> 会自动通过你在创建表模型时定义的主键字段查找。例如我们一开始在定义 <code>User</code> 模型时，就给 <code>id</code> 字段添加了 <code>primaryKey: true,</code> 属性。</p>\n<p>除了 set + update 来更新数据以外，还可以使用 <code>update()</code> 方法做相同的事情：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xiaohong = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// update方法相当于 set + save</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> xiaohong.update(&#123;</span><br><span class=\"line\">        age: <span class=\"number\">22</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据删除\"><a href=\"#数据删除\" class=\"headerlink\" title=\"数据删除\"></a>数据删除</h3><p>如果想要删除一条数据，可以使用 <code>destroy</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> wangwu = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对查询到的数据进行删除</span></span><br><span class=\"line\">    wangwu.destroy();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sequelize&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">&quot;miaov&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他的数据库连接配置</span></span><br><span class=\"line\">  host: <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"comment\">// 主机</span></span><br><span class=\"line\">  port: <span class=\"number\">8889</span>, <span class=\"comment\">// 端口</span></span><br><span class=\"line\">  dialect: <span class=\"string\">&quot;mysql&quot;</span> <span class=\"comment\">// 数据库类型</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试连接</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sequelize.authenticate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接成功!&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接失败&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义模型（用对象的方式来描述数据库中的表）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义字段</span></span><br><span class=\"line\">    id: &#123; <span class=\"comment\">// 对字段属性的定义</span></span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>), <span class=\"comment\">// 字段类型</span></span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,            <span class=\"comment\">// 不允许为空</span></span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,         <span class=\"comment\">// id自增长</span></span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,            <span class=\"comment\">// 设为主键</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,            <span class=\"comment\">// 设置字段默认值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT(<span class=\"number\">3</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    gender: &#123;</span><br><span class=\"line\">        type: Sequelize.ENUM([<span class=\"string\">&#x27;men&#x27;</span>, <span class=\"string\">&#x27;women&#x27;</span>, <span class=\"string\">&#x27;other&#x27;</span>]),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;men&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;, &#123; <span class=\"comment\">// 用来设置字段以外的其他信息</span></span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>,  <span class=\"comment\">// 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true</span></span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;users&#x27;</span>, <span class=\"comment\">// 该模型映射的真实表名</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了方便学习，使用一个函数包裹一组代码</span></span><br><span class=\"line\"><span class=\"comment\">// 这样代码就不会运行了，从而避免干扰其他代码的执行</span></span><br><span class=\"line\"><span class=\"comment\">// 如果想要此函数中代码执行，添加 `()` 就好</span></span><br><span class=\"line\"><span class=\"comment\">// (function()&#123;...&#125;)();  &lt;-- 加上括号</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询 users 表中所有数据</span></span><br><span class=\"line\">    UserModel.findAll().then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回的 users 是个数组</span></span><br><span class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 循环的每个 user 都是个 Model 实例</span></span><br><span class=\"line\">            <span class=\"comment\">// 该 Model 实例包含 get 方法，我们能通过它获取 username</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(user.get(<span class=\"string\">&#x27;username&#x27;</span>));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新建一条数据（除了build外，还可以通过 new UserModel() 的形式创建一条记录）</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> liyuanfang = UserModel.build(&#123;</span><br><span class=\"line\">        username: <span class=\"string\">&#x27;李元芳&#x27;</span>,</span><br><span class=\"line\">        age: <span class=\"number\">09</span>,</span><br><span class=\"line\">        gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 修改数据</span></span><br><span class=\"line\">    liyuanfang.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 别忘了保存</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> liyuanfang.save();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询id为2的用户数据</span></span><br><span class=\"line\">    UserModel.findByPk(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 查询到以后修改其 age 字段为 99</span></span><br><span class=\"line\">        user.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 修改后别忘了保存</span></span><br><span class=\"line\">        user.save();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xiaohong = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// update方法相当于 set + save</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> xiaohong.update(&#123;</span><br><span class=\"line\">        age: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> wangwu = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对查询到的数据进行删除</span></span><br><span class=\"line\">    wangwu.destroy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找 username 为 &#x27;李元芳&#x27; 的唯一数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findOne(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">&#x27;李元芳&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &gt; 24 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            age: &#123;</span><br><span class=\"line\">                [Sequelize.Op.gt]: <span class=\"number\">24</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; Op &#125; = Sequelize;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &lt; 25 或 gender = &#x27;men&#x27; 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            [Op.or]: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    age: &#123;</span><br><span class=\"line\">                        [Sequelize.Op.lt]: <span class=\"number\">25</span>,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只从表中查询两条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳过前2条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳过前2条数据并获取3条</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">        limit: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询的结果按年龄高到低排序</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        order: [</span><br><span class=\"line\">            [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;desc&#x27;</span>]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询的结果按年龄高到低排序</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"keyword\">await</span> UserModel.count();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(count);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询 users 表中的前两条数据，并返回 users 表中总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAndCountAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>安装的 sequelize 和 mysql2 的版本为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;mysql2&quot;</span>: <span class=\"string\">&quot;^1.6.5&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sequelize&quot;</span>: <span class=\"string\">&quot;^5.3.1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"http://docs.sequelizejs.com/\">Sequelize Docs</a></li>\n<li><a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/\">Sequelize Docs 中文版</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>平常写前端项目时，为了更方便的获取“真实”的动态数据，也会新建几个数据库表来作支撑。但每每需要用Node搭建后端服务时，数据库的查询真的让人头疼，难倒不难，就是特别繁琐，即使封装了个查询sql用工具模块，在遇到稍复杂的查询语句时还是得写完整SQL。</p>\n<p>我又是个比较懒的人，在经历了几次痛苦折磨后，我开始google有没有谁帮我们解决了数据库表字段与对象之间的关系映射。也就是我们通常所说的 <a href=\"https://baike.baidu.com/item/ORM/3583252?fr=aladdin\">ORM</a> 。经过几番搜索，我找到了 <a href=\"http://docs.sequelizejs.com/\">Sequelize</a> 框架。在了解它之前，我们先简单介绍下什么是 <code>ORM</code> ：（我知道不少人是不会点击上面链接查看详情的 :)）</p>","more":"<h2 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h2><h3 id=\"ORM\"><a href=\"#ORM\" class=\"headerlink\" title=\"ORM\"></a>ORM</h3><p>ORM 全称 Object Relational Mapping，翻译成中文就是 <code>对象关系映射</code> 。是对 SQL 查询语句的封装，让我们可以用面向对象的方式操作数据库，来更加优雅的生成安全、可维护的 SQL 代码。说白了，就是通过对象来映射和操作数据库。</p>\n<h3 id=\"Sequelize\"><a href=\"#Sequelize\" class=\"headerlink\" title=\"Sequelize\"></a>Sequelize</h3><p>而今天的主角 <code>Sequelize</code> 则是一个基于 promise 的 Node.js 异步ORM框架。它能够支持多种数据库，包含但不限于 PostgreSQL, MySQL 和 MSSQL 。</p>\n<blockquote>\n<p>官网地址：<a href=\"http://docs.sequelizejs.com/\">http://docs.sequelizejs.com/</a><br>github：<a href=\"https://github.com/sequelize/sequelize\">https://github.com/sequelize/sequelize</a></p>\n</blockquote>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"起步\"><a href=\"#起步\" class=\"headerlink\" title=\"起步\"></a>起步</h3><p>在本地新建文件夹，例如 <code>sequelize-demo</code> ，然后在项目根目录下运行命令行命名 <code>npm init -y</code>。运行完该命令后项目tree如下：</p>\n<img src=\"/posts/1183/npminit-y.png\" class=\"\" title=\"npminit-y\">\n\n<p>接着使用 npm 安装 <code>sequelize</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i sequelize</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"连接数据库\"><a href=\"#连接数据库\" class=\"headerlink\" title=\"连接数据库\"></a>连接数据库</h3><p>完成上述步骤以后，我们在根目录下新建一个 <code>app.js</code> 文件来使用 <code>sequelize</code> ，代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入 sequelize</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sequelize&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 新建 sequelize 实例</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">&#x27;数据库名称&#x27;</span>, <span class=\"string\">&#x27;数据库用户名&#x27;</span>, <span class=\"string\">&#x27;数据库密码&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 其他的数据库连接配置</span></span><br><span class=\"line\">    host: <span class=\"string\">&#x27;127.0.0.1&#x27;</span>, <span class=\"comment\">// 主机，默认 localhost</span></span><br><span class=\"line\">    port: <span class=\"number\">8889</span>,        <span class=\"comment\">// 端口，默认 3306</span></span><br><span class=\"line\">    dialect: <span class=\"string\">&#x27;mysql&#x27;</span>,  <span class=\"comment\">// 数据库类型， 默认 mysql 【必填】</span></span><br><span class=\"line\">    timezone: <span class=\"string\">&#x27;+08:00&#x27;</span> <span class=\"comment\">// 时区，默认会根据系统当前所在时区进行设置，格式：&#x27;+08:00&#x27; 或字符串格式 &#x27;Asia/Shanghai&#x27; 参考：http://php.net/manual/zh/timezones.php 【使用场景：一般情况下默认配置就好，但如果服务器在美国，但想存储中国时区，就需要明确指定 &#x27;+08:00&#x27; 了】</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试数据库的连接（返回的是一个Promise，记得 catch 捕获错误）</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sequelize.authenticate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接成功!&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接失败&#x27;</span>);  </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>此时你可以尝试运行 <code>app.js</code> 文件，即在根目录下运行 <code>node app.js</code> 命令。正常情况下你会收到报错信息，类似这样：</p>\n<img src=\"/posts/1183/error-mysql2.png\" class=\"\" title=\"mysql2\">\n\n<p>意思是你需要安装 <code>mysql2</code> ，这是因为 <code>sequelize</code> 虽然依赖了 <code>mysql2</code> ，但却没有内置安装。所以接下来你得在项目根目录下运行如下代码来安装 <code>mysql2</code>：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i mysql2</span><br></pre></td></tr></table></figure>\n\n\n\n<p>安装完毕后再次运行 <code>app.js</code> ，就能连接数据库成功了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node app.js</span><br><span class=\"line\">Executing (default): SELECT 1+1 AS result</span><br><span class=\"line\">数据库连接成功!</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"定义模型（Model）\"><a href=\"#定义模型（Model）\" class=\"headerlink\" title=\"定义模型（Model）\"></a>定义模型（Model）</h3><blockquote>\n<p>所谓模型，就是用来描述数据库表字段信息的对象，每一个模型对象表示数据库中的一个表，后续对数据库的操作都是用过对应的模型对象来完成的。</p>\n</blockquote>\n<p>接下来我们就要定义数据的模型了。在此之前，你还需要做一些准备工作。以我为例，我在数据库中新建了一个 <code>users</code> 表，表字段和类型如下：</p>\n<img src=\"/posts/1183/table-property.png\" class=\"\" title=\"表字段\">\n\n<p>然后定义出对应此表的数据模型：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 定义模型（用对象的方式来描述数据库中的表）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 描述表中对应的字段信息</span></span><br><span class=\"line\">    id: &#123; <span class=\"comment\">// 每一个字段的信息</span></span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>), <span class=\"comment\">// 字段类型</span></span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,            <span class=\"comment\">// 不允许为空</span></span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,         <span class=\"comment\">// id自增长</span></span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,            <span class=\"comment\">// 设为主键</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,            <span class=\"comment\">// 设置字段默认值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT(<span class=\"number\">3</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    gender: &#123;</span><br><span class=\"line\">        type: Sequelize.ENUM([<span class=\"string\">&#x27;men&#x27;</span>, <span class=\"string\">&#x27;women&#x27;</span>, <span class=\"string\">&#x27;other&#x27;</span>]), <span class=\"comment\">// 这是个枚举类型字段，表示性别只能为“男”，“女”，“保密”中的其中一个，传入 ENUM 中的可以是逗号隔开的字符串，也可以是个数组：ENUM([&#x27;men&#x27;, &#x27;women&#x27;]) or ENUM(&#x27;men&#x27;, &#x27;women&#x27;, &#x27;other&#x27;)</span></span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;men&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;, &#123; <span class=\"comment\">// 用来设置字段以外的其他信息</span></span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>, <span class=\"comment\">// 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true</span></span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;users&#x27;</span>, <span class=\"comment\">// 该模型映射的真实表名</span></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意：</strong>在定义模型时，字段名称可以和数据库表中的字段名称不相同，但如果你想另起一个别名，则需要在字段信息设置中加入 <code>field</code> 来关联真正的表字段名称。例如：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">userName: &#123; <span class=\"comment\">// &lt;-- 你起的别名</span></span><br><span class=\"line\">    type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">    allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    field: <span class=\"string\">&#x27;username&#x27;</span>, <span class=\"comment\">// 关联数据库表中真正的字段名</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据查询\"><a href=\"#数据查询\" class=\"headerlink\" title=\"数据查询\"></a>数据查询</h3><h4 id=\"查询所有\"><a href=\"#查询所有\" class=\"headerlink\" title=\"查询所有\"></a>查询所有</h4><p>完成表模型的定义以后，我们就可以通过 <code>findAll</code> 来查询表数据了：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询 users 表中所有数据</span></span><br><span class=\"line\">UserModel.findAll().then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 返回的 users 是个数组</span></span><br><span class=\"line\">    users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 循环的每个 user 都是个 Model 实例</span></span><br><span class=\"line\">        <span class=\"comment\">// 该 Model 实例包含 get 方法，我们能通过它获取 username</span></span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(user.get(<span class=\"string\">&#x27;username&#x27;</span>));</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p>写完上面代码后，再次运行 <code>app.js</code> ，你就应该能够查询到数据了~<br>p.s. 查询之前别忘了在数据库中插入一些数据。</p>\n<h4 id=\"条件查询\"><a href=\"#条件查询\" class=\"headerlink\" title=\"条件查询\"></a>条件查询</h4><p>除了查询全部数据，我们还可以使用 <code>where</code> 查询指定的数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 这次不用 .then 形式，而采用 async + await</span></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找 username 为 &#x27;李元芳&#x27; 的唯一数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findOne(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">&#x27;李元芳&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>而类似大于小于这样的查询会稍显麻烦一点。例如我们来编写查询 users 表中年龄大于某个值的代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &gt; 24 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            age: &#123;</span><br><span class=\"line\">                [Sequelize.Op.gt]: <span class=\"number\">24</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"多条件查询\"><a href=\"#多条件查询\" class=\"headerlink\" title=\"多条件查询\"></a>多条件查询</h4><p>除了单一条件查询，我们还可以通过嵌套 or 或 and 运算符的集合来生成复杂条件语句。例如我们来查询 <code>年龄小于25 或者 性别为男</code> 的所有数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; Op &#125; = Sequelize;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &lt; 25 或 gender = &#x27;men&#x27; 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            [Op.or]: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    age: &#123;</span><br><span class=\"line\">                        [Sequelize.Op.lt]: <span class=\"number\">25</span>,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>从上面几组查询语句我们可以看出，<code>where</code> 通常用 <code>attribute: value</code> 键值对获取一个对象，其中 <code>value</code> 可以是匹配等式的<strong>数据</strong>或其他运算符的<strong>键值对象</strong>。更多查询语法可在下方链接查询：</p>\n<ul>\n<li><a href=\"http://docs.sequelizejs.com/manual/querying.html\">Sequelize - Querying</a></li>\n<li><a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/querying.html\">Sequelize - Querying（中文文档）</a></li>\n</ul>\n<h4 id=\"查询限制-limit-offset\"><a href=\"#查询限制-limit-offset\" class=\"headerlink\" title=\"查询限制 limit, offset\"></a>查询限制 limit, offset</h4><p>我们还能限制查询的数量：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只从表中查询两条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跳过前2条数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>跳过前2条数据并获取3条：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">        limit: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查询排序\"><a href=\"#查询排序\" class=\"headerlink\" title=\"查询排序\"></a>查询排序</h4><p>我们还可以将查询数据进行排序：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询的结果按年龄高到低排序</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        order: [</span><br><span class=\"line\">            [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;desc&#x27;</span>]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"查询记录\"><a href=\"#查询记录\" class=\"headerlink\" title=\"查询记录\"></a>查询记录</h4><p>有些时候我们可能只是想单纯的查询数据表中有多少条数据，这时可以用 <code>count()</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 查询 users 表中有多少条数据</span></span><br><span class=\"line\">  <span class=\"keyword\">let</span> count = <span class=\"keyword\">await</span> UserModel.count();</span><br><span class=\"line\">  <span class=\"built_in\">console</span>.log(count);</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 或者使用 `findAndCountAll()` 方法在数据库中搜索多条记录，它能返回给我们**数据和总计数**：</span></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询 users 表中的前两条数据，并返回 users 表中总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAndCountAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<p>查询结果的格式如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">    count: 总记录数,</span><br><span class=\"line\">    rows: [ </span><br><span class=\"line\">        &#123;第一条记录&#125;, &#123;第二条记录&#125;, ...</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>这个方法对我们为前端提供分页功能很方便，count是符合条件的总记录数，而rows中可以是当前页数下的记录数。</p>\n<h3 id=\"数据增加\"><a href=\"#数据增加\" class=\"headerlink\" title=\"数据增加\"></a>数据增加</h3><p>既然能查，当然就能往数据库插入数据，在 <code>sequelize</code> 中，插入数据可以用 <code>build</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 新建一条数据（除了build外，还可以通过 new UserModel(&#123;&#125;) 的形式创建一条记录）</span></span><br><span class=\"line\"><span class=\"keyword\">let</span> wangwu = UserModel.build(&#123;</span><br><span class=\"line\">    username: <span class=\"string\">&#x27;王五&#x27;</span>,</span><br><span class=\"line\">    age: <span class=\"number\">22</span>,</span><br><span class=\"line\">    gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// **注意：** 通过 new 或 build 出来的对象不会立即同步到数据库中，</span></span><br><span class=\"line\"><span class=\"comment\">// 需要使用后续的一些方法（例如 save ）来同步</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 你还可以修改这条数据</span></span><br><span class=\"line\">wangwu.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 最后别忘了保存才能成功插入数据</span></span><br><span class=\"line\">wangwu.save();</span><br></pre></td></tr></table></figure>\n\n\n<p>如果运行后没报错，去数据库刷新表吧，数据已经成功的插入到 <code>users</code> 表了~</p>\n<h3 id=\"数据修改\"><a href=\"#数据修改\" class=\"headerlink\" title=\"数据修改\"></a>数据修改</h3><p>实际开发中修改数据是再平常不过的了，比如修改一篇博客，更新自己的个人信息… 在 <code>sequelize</code> 中，我们这样修改数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 查询id为2的用户数据</span></span><br><span class=\"line\">UserModel.findByPk(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询到以后修改其 age 字段为 99</span></span><br><span class=\"line\">    user.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 修改后别忘了保存</span></span><br><span class=\"line\">    user.save();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n<p><strong>注意：</strong> 在 Sequelize v5 版本以前，通过id查询数据的方法名为 <code>findById</code> ，从 v5 版本开始，更改为 <code>findByPk</code> 。其实想一下这样非常合理，以前的 <code>findById</code> 太主观了，要知道不一定每个表的主键都为 id ，所以更改为 <code>findByPk</code> 后，表示通过<strong>主键（Pk -&gt; PrimaryKey）</strong>查找，<code>sequelize</code> 会自动通过你在创建表模型时定义的主键字段查找。例如我们一开始在定义 <code>User</code> 模型时，就给 <code>id</code> 字段添加了 <code>primaryKey: true,</code> 属性。</p>\n<p>除了 set + update 来更新数据以外，还可以使用 <code>update()</code> 方法做相同的事情：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xiaohong = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// update方法相当于 set + save</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> xiaohong.update(&#123;</span><br><span class=\"line\">        age: <span class=\"number\">22</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"数据删除\"><a href=\"#数据删除\" class=\"headerlink\" title=\"数据删除\"></a>数据删除</h3><p>如果想要删除一条数据，可以使用 <code>destroy</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> wangwu = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对查询到的数据进行删除</span></span><br><span class=\"line\">    wangwu.destroy();</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> Sequelize = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;sequelize&#x27;</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> sequelize = <span class=\"keyword\">new</span> Sequelize(<span class=\"string\">&quot;miaov&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, <span class=\"string\">&quot;root&quot;</span>, &#123;</span><br><span class=\"line\">  <span class=\"comment\">// 其他的数据库连接配置</span></span><br><span class=\"line\">  host: <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"comment\">// 主机</span></span><br><span class=\"line\">  port: <span class=\"number\">8889</span>, <span class=\"comment\">// 端口</span></span><br><span class=\"line\">  dialect: <span class=\"string\">&quot;mysql&quot;</span> <span class=\"comment\">// 数据库类型</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 测试连接</span></span><br><span class=\"line\"><span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">    sequelize.authenticate();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;数据库连接成功!&#x27;</span>);</span><br><span class=\"line\">&#125; <span class=\"keyword\">catch</span> (err) &#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;连接失败&#x27;</span>);    </span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 定义模型（用对象的方式来描述数据库中的表）</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> UserModel = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 定义字段</span></span><br><span class=\"line\">    id: &#123; <span class=\"comment\">// 对字段属性的定义</span></span><br><span class=\"line\">        type: Sequelize.INTEGER(<span class=\"number\">11</span>), <span class=\"comment\">// 字段类型</span></span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,            <span class=\"comment\">// 不允许为空</span></span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,         <span class=\"comment\">// id自增长</span></span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,            <span class=\"comment\">// 设为主键</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING(<span class=\"number\">50</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;&#x27;</span>,            <span class=\"comment\">// 设置字段默认值</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    age: &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT(<span class=\"number\">3</span>),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    gender: &#123;</span><br><span class=\"line\">        type: Sequelize.ENUM([<span class=\"string\">&#x27;men&#x27;</span>, <span class=\"string\">&#x27;women&#x27;</span>, <span class=\"string\">&#x27;other&#x27;</span>]),</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"string\">&#x27;men&#x27;</span>,</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">&#125;, &#123; <span class=\"comment\">// 用来设置字段以外的其他信息</span></span><br><span class=\"line\">    timestamps: <span class=\"literal\">false</span>,  <span class=\"comment\">// 是否给每条记录添加 createAt 和 updateAt 字段，并在添加新数据和更新数据的时候自动设置这两个字段的值，默认为 true</span></span><br><span class=\"line\">    tableName: <span class=\"string\">&#x27;users&#x27;</span>, <span class=\"comment\">// 该模型映射的真实表名</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 为了方便学习，使用一个函数包裹一组代码</span></span><br><span class=\"line\"><span class=\"comment\">// 这样代码就不会运行了，从而避免干扰其他代码的执行</span></span><br><span class=\"line\"><span class=\"comment\">// 如果想要此函数中代码执行，添加 `()` 就好</span></span><br><span class=\"line\"><span class=\"comment\">// (function()&#123;...&#125;)();  &lt;-- 加上括号</span></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询 users 表中所有数据</span></span><br><span class=\"line\">    UserModel.findAll().then(<span class=\"function\"><span class=\"params\">users</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 返回的 users 是个数组</span></span><br><span class=\"line\">        users.forEach(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 循环的每个 user 都是个 Model 实例</span></span><br><span class=\"line\">            <span class=\"comment\">// 该 Model 实例包含 get 方法，我们能通过它获取 username</span></span><br><span class=\"line\">            <span class=\"built_in\">console</span>.log(user.get(<span class=\"string\">&#x27;username&#x27;</span>));</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;).catch(<span class=\"function\"><span class=\"params\">err</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(err);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 新建一条数据（除了build外，还可以通过 new UserModel() 的形式创建一条记录）</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> liyuanfang = UserModel.build(&#123;</span><br><span class=\"line\">        username: <span class=\"string\">&#x27;李元芳&#x27;</span>,</span><br><span class=\"line\">        age: <span class=\"number\">09</span>,</span><br><span class=\"line\">        gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"comment\">// 修改数据</span></span><br><span class=\"line\">    liyuanfang.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">25</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 别忘了保存</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> liyuanfang.save();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询id为2的用户数据</span></span><br><span class=\"line\">    UserModel.findByPk(<span class=\"number\">2</span>).then(<span class=\"function\"><span class=\"params\">user</span> =&gt;</span> &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 查询到以后修改其 age 字段为 99</span></span><br><span class=\"line\">        user.set(<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"number\">99</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 修改后别忘了保存</span></span><br><span class=\"line\">        user.save();</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> xiaohong = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">3</span>);</span><br><span class=\"line\">    <span class=\"comment\">// update方法相当于 set + save</span></span><br><span class=\"line\">    <span class=\"keyword\">await</span> xiaohong.update(&#123;</span><br><span class=\"line\">        age: <span class=\"number\">18</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 先查询</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> wangwu = <span class=\"keyword\">await</span> UserModel.findByPk(<span class=\"number\">4</span>);</span><br><span class=\"line\">    <span class=\"comment\">// 对查询到的数据进行删除</span></span><br><span class=\"line\">    wangwu.destroy();</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找 username 为 &#x27;李元芳&#x27; 的唯一数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findOne(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            username: <span class=\"string\">&#x27;李元芳&#x27;</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &gt; 24 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            age: &#123;</span><br><span class=\"line\">                [Sequelize.Op.gt]: <span class=\"number\">24</span>,</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">let</span> &#123; Op &#125; = Sequelize;</span><br><span class=\"line\">    <span class=\"comment\">// 查找满足 age &lt; 25 或 gender = &#x27;men&#x27; 的所有数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        where: &#123;</span><br><span class=\"line\">            [Op.or]: [</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    age: &#123;</span><br><span class=\"line\">                        [Sequelize.Op.lt]: <span class=\"number\">25</span>,</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;,</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    gender: <span class=\"string\">&#x27;men&#x27;</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            ]</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">    <span class=\"comment\">// 打印出符合条件的用户的 username</span></span><br><span class=\"line\">    <span class=\"built_in\">console</span>.dir(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 只从表中查询两条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳过前2条数据</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 跳过前2条数据并获取3条</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        offset: <span class=\"number\">2</span>,</span><br><span class=\"line\">        limit: <span class=\"number\">3</span></span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询的结果按年龄高到低排序</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAll(&#123;</span><br><span class=\"line\">        order: [</span><br><span class=\"line\">            [<span class=\"string\">&#x27;age&#x27;</span>, <span class=\"string\">&#x27;desc&#x27;</span>]</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res.map(<span class=\"function\"><span class=\"params\">r</span> =&gt;</span> r.get(<span class=\"string\">&#x27;username&#x27;</span>)));</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询的结果按年龄高到低排序</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> count = <span class=\"keyword\">await</span> UserModel.count();</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(count);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">(<span class=\"keyword\">async</span> () =&gt; &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 查询 users 表中的前两条数据，并返回 users 表中总记录数</span></span><br><span class=\"line\">    <span class=\"keyword\">let</span> res = <span class=\"keyword\">await</span> UserModel.findAndCountAll(&#123;</span><br><span class=\"line\">        limit: <span class=\"number\">2</span>,</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(res);</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>安装的 sequelize 和 mysql2 的版本为：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;dependencies&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;mysql2&quot;</span>: <span class=\"string\">&quot;^1.6.5&quot;</span>,</span><br><span class=\"line\">    <span class=\"string\">&quot;sequelize&quot;</span>: <span class=\"string\">&quot;^5.3.1&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"http://docs.sequelizejs.com/\">Sequelize Docs</a></li>\n<li><a href=\"https://demopark.github.io/sequelize-docs-Zh-CN/\">Sequelize Docs 中文版</a></li>\n</ul>"},{"title":"基于sequelize的数据库迁移","abbrlink":16051,"date":"2019-03-15T02:48:13.000Z","_content":"\n## 数据库迁移\n\n有时候我们也希望能够跟踪数据库的更改，像 git 一样在各个不同时期的数据库状态之间进行切换。或者能通过一套工具将数据库迁移到本机，让我们在家也能进行测试开发，而不用依赖公司的测试环境。这些特性，作为今天的主角 `sequelize-cli` 都能提供给我们。\n\n> npm链接请 [点击这里](https://www.npmjs.com/package/sequelize-cli)。\n\n## 安装\n\n首先创建项目，项目名随意，创建完毕后cd到项目根目录，老规矩命令行 `npm init -y` 创建 `package.json` ，然后输入安装一步到位：`npm i sequelize mysql2 sequelize-cli` 。\n\n<!-- more -->\n\n**注意：** `sequelize-cli` 依赖 `sequelize`，`sequelize` 依赖 `mysql2`\n\n安装完毕后我们可以测试下是否可用，根目录命令行输入：\n\n```shell\n./node_modules/.bin/sequelize\n```\n\n看见命令行输出类似下方提示代表安装成功：\n\n```shell\nsequelize [命令]\n\n命令：\n  sequelize db:migrate                        Run pending migrations\n  sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps\n  sequelize db:migrate:status                 List the status of all migrations\n  sequelize db:migrate:undo                   Reverts a migration\n  sequelize db:migrate:undo:all               Revert all migrations ran\n  sequelize db:seed                           Run specified seeder\n  sequelize db:seed:undo                      Deletes data from the database\n  sequelize db:seed:all                       Run every seeder\n  sequelize db:seed:undo:all                  Deletes data from the database\n  sequelize db:create                         Create database specified by configuration\n  sequelize db:drop                           Drop database specified by configuration\n  sequelize init                              Initializes project\n  sequelize init:config                       Initializes configuration\n  sequelize init:migrations                   Initializes migrations\n  sequelize init:models                       Initializes models\n  sequelize init:seeders                      Initializes seeders\n  sequelize migration:generate                Generates a new migration file     [aliases: migration:create]\n  sequelize model:generate                    Generates a model and its migration    [aliases: model:create]\n  sequelize seed:generate                     Generates a new seed file               [aliases: seed:create]\n\n选项：\n  --help     显示帮助信息                                                                             [布尔]\n  --version  显示版本号                                                                               [布尔]\n```\n\n## 使用\n\n### 初始化\n\n目前我们项目的树形结构为：\n\n```shell\n.\n├── node_modules\n├── package-lock.json\n└── package.json\n```\n\n接着根目录命令行输入 `./node_modules/.bin/sequelize init` 来初始化 sequelize 项目，该命令会帮我们创建如下目录：\n\n```shell\n.\n├── config              # 包含数据库的配置文件\n├── migrations          # 包含所有迁移文件（e.g. 数据库、表的创建，字段的增加）跟数据库结构有关的操作都存放在这里\n├── models              # 包含项目中的所有模型（e.g. Users, Message）\n├── node_modules\n├── seeders             # 包含所有种子文件（e.g. 表中的数据）\n├── package-lock.json\n└── package.json\n```\n\n\n\n## config\n\n首先我们来看下 `config` 目录下的 `config.json` 文件。它里面包含了数据库的的基本配置，默认分为 `development（开发）` 、`test（测试）` 和 `production（生产）` 环境。当然你也可以删除或新增环境，比如新增一个在家编写代码所使用的 `home` 环境。\n\n### db:create\n\n`sequelize-cli` 默认读取 `development` 模式下的数据库配置来创建数据库，所以接下来就用它来配置：\n\n```js\n\"development\": {\n    \"username\": \"root\", // 数据库用户名\n    \"password\": \"root\", // 数据库密码\n    \"database\": \"database_development\", // 需要创建的数据库名\n    \"host\": \"127.0.0.1\", // 主机\n    \"port\": 8889,       // 端口号\n    \"dialect\": \"mysql\"  // 使用的数据库类型\n},\n```\n\n\n\n配置完毕后在根目录下的命令行输入 `./node_modules/.bin/sequelize db:create`\n。当你看到如下输出就代表创建数据库成功：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nDatabase sw_sequelize_development created.\n```\n\n\n\n### db:drop\n\n能添加就能删除，我们可以键入 `./node_modules/.bin/sequelize db:drop` 命令来删除数据库。当你看到命令行输出下面内容就代表删除成功：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nDatabase sw_sequelize_development dropped.\n```\n\n\n\n### 模式切换\n\n前面已经说了，`sequelize-cli` 默认读取 `development` 模式下的数据库配置。那如果我现在想切到 `test` 模式下该怎么办呢？\n\n#### 变更环境变量\n\n首先得切换服务器环境变量，MacOS下（其他系统切换命令见下方链接）使用 `export NODE_ENV=test` 来切换到 `test` 模式，然后使用 `echo $NODE_ENV` 查看是否已经切换成功，接着就可以再次执行 `./node_modules/.bin/sequelize db:create` 命令，创建 `test` 模式下的数据库了：\n\n```shell\n$ export NODE_ENV=test\n\n$ echo $NODE_ENV\ntest\n\n./node_modules/.bin/sequelize db:create\n\nSequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]\n\nLoaded configuration file \"config/config.json\".\nUsing environment \"test\".\nDatabase sw_sequelize_test created.\n```\n\n> [各系统下NodeJS环境变量修改](http://sorex.cnblogs.com/p/6200940.html)\n\n#### 还原环境变量\n\n如果想回到默认的 `development` 模式，MacOS下直接键入命令 `export NODE_ENV=` 就OK啦。\n\n## models\n\n### 创建模型\n\n我们通过 `model:generate` 或者 `model:create` 来创建模型文件，它一共需要两个参数，分别是：\n\n- –name: 模型名称（必须）\n- –attributes: 字段列表（必须）\n\n回到我们的项目，在根目录执行下面命令来创建一个 User 模型文件：\n\n```shell\n./node_modules/.bin/sequelize model:create --name User --attributes username:STRING\n```\n\n执行完毕后命令行会有类似下方输出：\n\n```shell\nSequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]\n\nNew model was created at .../你的项目名/models/user.js .\nNew migration was created at .../你的项目名/migrations/20190316035632-User.js\n```\n\n\n\n所以 `model:create` 命令执行后帮我们创建了两个文件，一个是用来定义 User 模型的文件 user.js :\n\n```js\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const User = sequelize.define('User', {\n    username: DataTypes.STRING\n  }, {});\n  User.associate = function(models) {\n    // associations can be defined here\n  };\n  return User;\n};\n```\n\n\n\n一个是 `migrations` 迁移文件夹下的 `用来创建 User 表` 的文件：\n\n```js\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    //   创建名为 Users 的数据表\n    return queryInterface.createTable('Users', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      username: {\n        type: Sequelize.STRING\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Users');\n  }\n};\n```\n\n\n\n其中 `models` 文件夹下文件，例如生成的 `user.js` 模型文件是给程序用的；`migrations` 和 `seeders` 文件夹下的文件是个 `cli` 用的。\n\n总结下来，`model:create` 命令帮我们做了两件事情：\n\n- 创建 User 模型\n- 创建跟模型对应的 Users 数据表文件，方便用此文件在数据库中创建 Users 表\n\n## migrations\n\n刚刚我们已经创建了一个 User 模型和用来创建 Users 表的脚本执行文件。下面就可以开始执行迁移了。首先我们重温何为执行迁移：\n\n> 所谓迁移，就是对数据库进行结构的创建、升级（修改）等操作\n\n### 执行迁移\n\n#### db:migrate\n\n执行迁移的命令为 `db:migrate`，我们直接在项目根目录下运行：\n\n```shell\n./node_modules/.bin/sequelize db:migrate\n```\n\n（如果在此之前你运行过 db:drop 命令来删除数据库，记得再重新执行一次 db:create，否则会导致创建表失败）。执行成功的输出类似下面文字：\n\n```shell\nSequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]\n\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\n== 20190316035632-create-user: migrating =======\n== 20190316035632-create-user: migrated (0.047s)\n```\n\n此时刷新下你的本地数据库，就会发现之前空空如也的数据库中多了个 `users` 表和 `sequelizemeta` 表：\n\n{% asset_img create-users.png create-users %}\n\n`users` 表被创建出来我们能理解，重点说一下这个 `sequelizemeta` 表，其实它是用来记录已经被执行过的迁移脚本的，避免我们重复执行已经执行过的脚本。\n\n#### db:migrate:status\n\n我们可以通过 `db:migrate:status` 命令来查看当前迁移脚本的执行状态：\n\n```shell\n./node_modules/.bin/sequelize db:migrate:status\n```\n\n执行完毕后的打印结果为：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nup 20190316035632-create-user.js\n```\n\n这个 up ，表示我们已经执行该脚本。此时我们可以删掉 `sequelizemeta` 表中的记录，然后再次执行 `db:migrate:status` ，会发现输出的 `up` 已变为 `down` ，表示我们从未执行过该脚本。由此可知 `db:migrate:status` 会通过 `sequelizemeta` 表中的记录来判断脚本是否被执行过。而当我们已经执行过某些脚本后再次执行 `db:migrate` ，那些已经执行过的脚本就不会再次重复执行了：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nNo migrations were executed, database schema was already up to date.\n```\n\n#### db:migrate:undo\n\n除了上面的新增数据表操作，我们还可以进行撤销操作。执行 `./node_modules/.bin/sequelize db:migrate:status` 命令后 `sequelize-cli` 会帮我们撤销掉上一次（最近一次）的迁移操作，比如我们的 `sequelizemeta`\n表中记录了两条迁移操作（假设创建了 user 和 message 表）：\n\n```js\n20190316035632-create-user.js\n20190316035921-create-message.js\n```\n\n那么执行 `undo` 后就会把最近的一次迁移，也就是 `*-message.js` 从表中移除，并且在数据库中删除 `message` 表。而这个删除操作，其实是执行了迁移文件下对应表的删除代码：\n\n```js\ndown: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Messages');\n}\n```\n\n#### db:migrate:undo:all\n\n当执行 `./node_modules/.bin/sequelize db:migrate:undo:all` 命令后，能帮我们撤销所有的迁移操作。\n\n#### db:migrate:undo: –name\n\n此命令能帮我们撤销具体指定的迁移脚本，例如执行下面命令会撤销名称为 `20190316035632-create-user` 的脚本操作：\n\n```shell\n./node_modules/.bin/sequelize db:migrate:undo --name 20190316035632-create-user\n```\n\n\n\n执行完毕后再来刷新我们的数据库，就会发现 `user` 表已被删除，只留下了 `message` 表。\n\n### 字段添加与删除\n\n随着业务的增长，我们很有可能需要扩充数据表的字段。例如我们需要给 `user` 表添加一个 `username` 字段，那么我们就可以键入以下命令来创建一个 `migration` :\n\n```shell\n./node_modules/.bin/sequelize migration:create --name UserAddAge\n```\n\n执行完上述操作后我们能在 `migrations` 文件夹中看到新创建的 `UserAddAge` 文件，打开后代码如下：\n\n```js\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.createTable('users', { id: Sequelize.INTEGER });\n    */\n  },\n\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.dropTable('users');\n    */\n  }\n};\n```\n\n\n\n我们要做的，就是在 `up` 和 `down` 方法中填入数据库操作逻辑的代码，`up` 方法中有注释作提示，让我们返回一个类型为 `Promise` 的对象，还给出了示例。因为我们要给数据表添加字段，所以使用 `addColumn` 方法：\n\n```js\nreturn queryInterface.addColumn(\n    'users',                        // 被添加字段的表名称\n    'age',                          // 需要添加的字段名称\n    {\n        type: Sequelize.TINYINT,\n        allowNull: false,\n        defaultValue: 0,\n    },                              // 字段属性\n)\n```\n\n这样我们就可以给 `user` 表添加上 `age` 字段了。\n\np.s. 之所以代码中填写 `users` ，是因为 `sequelize-cli` 帮我们创建表是会自动给表名称加 `s` 。\n\n------\n\n能添加就能删除，删除操作我们在 `down` 方法中编写：\n\n```js\nreturn queryInterface.removeColumn(\n    'users',\n    'age'\n);\n```\n\n`UserAddAge.js` 文件完整代码：\n\n```js\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.createTable('users', { id: Sequelize.INTEGER });\n    */\n    return queryInterface.addColumn(\n      'users', \n      'age',\n      {\n        type: Sequelize.TINYINT,\n        allowNull: false,\n        defaultValue: 0,\n      }\n    )\n  },\n\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.dropTable('users');\n    */\n    return queryInterface.removeColumn(\n      'users',\n      'age'\n    );\n  }\n};\n```\n\n\n\n编写完毕后我们运行 `./node_modules/.bin/sequelize db:migrate` 来重新执行一遍所有迁移，刷新 `user` 表后就能看见新增字段 `age` 了。\n\n最后你还可以执行 `./node_modules/.bin/sequelize db:migrate:undo` 来确认 `down` 方法正常工作，从而让 `user` 表删除刚刚添加的 `age` 字段。\n\n文档参考：[更多 QueryInterface 操作](http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html)\n\n## seeders\n\n除了数据库结构的添加修改删除操作以外，我们通常还会给各种表批量添加一些假数据。这个时候就要用到 seeders 里的种子文件了。比方说现在要给 `user` 表批量添加一些数据，则可以执行下面代码：\n\n```shell\n./node_modules/.bin/sequelize seed:create --name userTest\n```\n\n\n\n执行完毕后你会发现在 `seeders` 文件夹下多了一个类似 `20190316090425-userTest.js` 的文件。\n\n### 批量添加\n\n我们可以在里面编写代码让 `cli` 帮助我们批量添加数据：\n\n```js\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkInsert('People', [{\n        name: 'John Doe',\n        isBetaMember: false\n      }], {});\n    */\n      return queryInterface.bulkInsert('users', [\n        {\n          username: '狄仁杰',\n          age: 56\n        },\n        {\n          username: '李元芳',\n          age: 27\n        }\n      ]);\n  },\n\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkDelete('People', null, {});\n    */\n    return queryInterface.bulkDelete('users', null, {});\n  }\n};\n```\n\n\n\n种子文件的执行方式有两种：\n\n- `db:seed 种子文件名` 来运行指定种子文件\n- `db:seed:all` 来运行所有种子文件\n\n知道执行方法后我们来运行下面命令：\n\n```shell\n./node_modules/.bin/sequelize db:seed:all\n```\n\n执行成功后刷新我们的 `user` 表，就会发现数据已经被批量添加进去了。\n\n### 批量删除\n\n命令行输入并执行： `./node_modules/.bin/sequelize db:seed:undo:all` 便可以批量删除刚刚添加进 `user` 表中的数据。\n\n### 记录种子数据的存储\n\n我们知道 `migrations` 迁移是会被记录的（数据库的 `sequelizemeta` 表中），但默认情况下，种子数据的存储不会被记录下来。但官方同样提供了 [方法](http://docs.sequelizejs.com/manual/migrations.html#seed-storage) 来记录种子数据的存储。我们可以通过在配置文件中使用 `seederStorage` 来记录存储：\n\n#### JSON记录\n\n> config/config.json\n\n```json\n\"development\": {\n    ...\n    \"seederStorage\": \"json\", // 存储类型\n    \"seederStoragePath\": \"userTestData.json\" // 存储路径（当前项目根目录下）\n},\n```\n\np.s. 上方注释在 copy 到自己项目时需要删除，否则报错。\n\n接着我们执行 `./node_modules/.bin/sequelize db:seed:undo:all` 先删除数据表中数据，然后再执行 `./node_modules/.bin/sequelize db:seed:all` 重新添加一次种子数据。你就会发现项目根目录下多出来了一个叫做 `userTestData.json` 的文件，里面记录了已经执行过的种子文件名：\n\n```js\n[\n  \"20190316090425-userTest.js\"\n]\n```\n\n\n\n#### sequelize记录\n\np.s. 如果你已经用上面json记录的方式记录过种子文件的存储，再想要尝试用sequelize玩一遍的话，首先得执行一遍 `./node_modules/.bin/sequelize db:seed:undo:all` 哦。\n\n```json\n\"development\": {\n    ...\n    \"seederStorage\": \"sequelize\", // 存储类型\n    \"seederStoragePath\": \"userTestData.json\", // 存储路径（当前项目根目录下）\n    \"seederStorageTableName\": \"userTestData\" // 存储的表名\n},\n```\n\n编写完上述代码后你可以执行下面命令：\n\n```shell\n./node_modules/.bin/sequelize db:seed:all\n```\n\n执行完毕后刷新数据库，就能在数据库中发现 `userTestData` 表，里面记录了已经执行完毕的种子文件 `20190316090425-userTest.js`\n\n## 版本\n\n安装的 sequelize 和 mysql2 的版本为：\n\n```json\n\"dependencies\": {\n    \"sequelize\": \"^5.3.3\",\n    \"sequelize-cli\": \"^5.4.0\"\n}\n```\n\n\n\n## 资源\n\n- [QueryInterface 操作](http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html)\n","source":"_posts/基于sequelize的数据库迁移.md","raw":"---\ntitle: 基于sequelize的数据库迁移\ntags:\n  - Sequelize\ncategories:\n  - 后端\n  - SQL\nabbrlink: 16051\ndate: 2019-03-15 10:48:13\n---\n\n## 数据库迁移\n\n有时候我们也希望能够跟踪数据库的更改，像 git 一样在各个不同时期的数据库状态之间进行切换。或者能通过一套工具将数据库迁移到本机，让我们在家也能进行测试开发，而不用依赖公司的测试环境。这些特性，作为今天的主角 `sequelize-cli` 都能提供给我们。\n\n> npm链接请 [点击这里](https://www.npmjs.com/package/sequelize-cli)。\n\n## 安装\n\n首先创建项目，项目名随意，创建完毕后cd到项目根目录，老规矩命令行 `npm init -y` 创建 `package.json` ，然后输入安装一步到位：`npm i sequelize mysql2 sequelize-cli` 。\n\n<!-- more -->\n\n**注意：** `sequelize-cli` 依赖 `sequelize`，`sequelize` 依赖 `mysql2`\n\n安装完毕后我们可以测试下是否可用，根目录命令行输入：\n\n```shell\n./node_modules/.bin/sequelize\n```\n\n看见命令行输出类似下方提示代表安装成功：\n\n```shell\nsequelize [命令]\n\n命令：\n  sequelize db:migrate                        Run pending migrations\n  sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps\n  sequelize db:migrate:status                 List the status of all migrations\n  sequelize db:migrate:undo                   Reverts a migration\n  sequelize db:migrate:undo:all               Revert all migrations ran\n  sequelize db:seed                           Run specified seeder\n  sequelize db:seed:undo                      Deletes data from the database\n  sequelize db:seed:all                       Run every seeder\n  sequelize db:seed:undo:all                  Deletes data from the database\n  sequelize db:create                         Create database specified by configuration\n  sequelize db:drop                           Drop database specified by configuration\n  sequelize init                              Initializes project\n  sequelize init:config                       Initializes configuration\n  sequelize init:migrations                   Initializes migrations\n  sequelize init:models                       Initializes models\n  sequelize init:seeders                      Initializes seeders\n  sequelize migration:generate                Generates a new migration file     [aliases: migration:create]\n  sequelize model:generate                    Generates a model and its migration    [aliases: model:create]\n  sequelize seed:generate                     Generates a new seed file               [aliases: seed:create]\n\n选项：\n  --help     显示帮助信息                                                                             [布尔]\n  --version  显示版本号                                                                               [布尔]\n```\n\n## 使用\n\n### 初始化\n\n目前我们项目的树形结构为：\n\n```shell\n.\n├── node_modules\n├── package-lock.json\n└── package.json\n```\n\n接着根目录命令行输入 `./node_modules/.bin/sequelize init` 来初始化 sequelize 项目，该命令会帮我们创建如下目录：\n\n```shell\n.\n├── config              # 包含数据库的配置文件\n├── migrations          # 包含所有迁移文件（e.g. 数据库、表的创建，字段的增加）跟数据库结构有关的操作都存放在这里\n├── models              # 包含项目中的所有模型（e.g. Users, Message）\n├── node_modules\n├── seeders             # 包含所有种子文件（e.g. 表中的数据）\n├── package-lock.json\n└── package.json\n```\n\n\n\n## config\n\n首先我们来看下 `config` 目录下的 `config.json` 文件。它里面包含了数据库的的基本配置，默认分为 `development（开发）` 、`test（测试）` 和 `production（生产）` 环境。当然你也可以删除或新增环境，比如新增一个在家编写代码所使用的 `home` 环境。\n\n### db:create\n\n`sequelize-cli` 默认读取 `development` 模式下的数据库配置来创建数据库，所以接下来就用它来配置：\n\n```js\n\"development\": {\n    \"username\": \"root\", // 数据库用户名\n    \"password\": \"root\", // 数据库密码\n    \"database\": \"database_development\", // 需要创建的数据库名\n    \"host\": \"127.0.0.1\", // 主机\n    \"port\": 8889,       // 端口号\n    \"dialect\": \"mysql\"  // 使用的数据库类型\n},\n```\n\n\n\n配置完毕后在根目录下的命令行输入 `./node_modules/.bin/sequelize db:create`\n。当你看到如下输出就代表创建数据库成功：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nDatabase sw_sequelize_development created.\n```\n\n\n\n### db:drop\n\n能添加就能删除，我们可以键入 `./node_modules/.bin/sequelize db:drop` 命令来删除数据库。当你看到命令行输出下面内容就代表删除成功：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nDatabase sw_sequelize_development dropped.\n```\n\n\n\n### 模式切换\n\n前面已经说了，`sequelize-cli` 默认读取 `development` 模式下的数据库配置。那如果我现在想切到 `test` 模式下该怎么办呢？\n\n#### 变更环境变量\n\n首先得切换服务器环境变量，MacOS下（其他系统切换命令见下方链接）使用 `export NODE_ENV=test` 来切换到 `test` 模式，然后使用 `echo $NODE_ENV` 查看是否已经切换成功，接着就可以再次执行 `./node_modules/.bin/sequelize db:create` 命令，创建 `test` 模式下的数据库了：\n\n```shell\n$ export NODE_ENV=test\n\n$ echo $NODE_ENV\ntest\n\n./node_modules/.bin/sequelize db:create\n\nSequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]\n\nLoaded configuration file \"config/config.json\".\nUsing environment \"test\".\nDatabase sw_sequelize_test created.\n```\n\n> [各系统下NodeJS环境变量修改](http://sorex.cnblogs.com/p/6200940.html)\n\n#### 还原环境变量\n\n如果想回到默认的 `development` 模式，MacOS下直接键入命令 `export NODE_ENV=` 就OK啦。\n\n## models\n\n### 创建模型\n\n我们通过 `model:generate` 或者 `model:create` 来创建模型文件，它一共需要两个参数，分别是：\n\n- –name: 模型名称（必须）\n- –attributes: 字段列表（必须）\n\n回到我们的项目，在根目录执行下面命令来创建一个 User 模型文件：\n\n```shell\n./node_modules/.bin/sequelize model:create --name User --attributes username:STRING\n```\n\n执行完毕后命令行会有类似下方输出：\n\n```shell\nSequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]\n\nNew model was created at .../你的项目名/models/user.js .\nNew migration was created at .../你的项目名/migrations/20190316035632-User.js\n```\n\n\n\n所以 `model:create` 命令执行后帮我们创建了两个文件，一个是用来定义 User 模型的文件 user.js :\n\n```js\n'use strict';\nmodule.exports = (sequelize, DataTypes) => {\n  const User = sequelize.define('User', {\n    username: DataTypes.STRING\n  }, {});\n  User.associate = function(models) {\n    // associations can be defined here\n  };\n  return User;\n};\n```\n\n\n\n一个是 `migrations` 迁移文件夹下的 `用来创建 User 表` 的文件：\n\n```js\n'use strict';\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    //   创建名为 Users 的数据表\n    return queryInterface.createTable('Users', {\n      id: {\n        allowNull: false,\n        autoIncrement: true,\n        primaryKey: true,\n        type: Sequelize.INTEGER\n      },\n      username: {\n        type: Sequelize.STRING\n      },\n      createdAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      },\n      updatedAt: {\n        allowNull: false,\n        type: Sequelize.DATE\n      }\n    });\n  },\n  down: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Users');\n  }\n};\n```\n\n\n\n其中 `models` 文件夹下文件，例如生成的 `user.js` 模型文件是给程序用的；`migrations` 和 `seeders` 文件夹下的文件是个 `cli` 用的。\n\n总结下来，`model:create` 命令帮我们做了两件事情：\n\n- 创建 User 模型\n- 创建跟模型对应的 Users 数据表文件，方便用此文件在数据库中创建 Users 表\n\n## migrations\n\n刚刚我们已经创建了一个 User 模型和用来创建 Users 表的脚本执行文件。下面就可以开始执行迁移了。首先我们重温何为执行迁移：\n\n> 所谓迁移，就是对数据库进行结构的创建、升级（修改）等操作\n\n### 执行迁移\n\n#### db:migrate\n\n执行迁移的命令为 `db:migrate`，我们直接在项目根目录下运行：\n\n```shell\n./node_modules/.bin/sequelize db:migrate\n```\n\n（如果在此之前你运行过 db:drop 命令来删除数据库，记得再重新执行一次 db:create，否则会导致创建表失败）。执行成功的输出类似下面文字：\n\n```shell\nSequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]\n\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\n== 20190316035632-create-user: migrating =======\n== 20190316035632-create-user: migrated (0.047s)\n```\n\n此时刷新下你的本地数据库，就会发现之前空空如也的数据库中多了个 `users` 表和 `sequelizemeta` 表：\n\n{% asset_img create-users.png create-users %}\n\n`users` 表被创建出来我们能理解，重点说一下这个 `sequelizemeta` 表，其实它是用来记录已经被执行过的迁移脚本的，避免我们重复执行已经执行过的脚本。\n\n#### db:migrate:status\n\n我们可以通过 `db:migrate:status` 命令来查看当前迁移脚本的执行状态：\n\n```shell\n./node_modules/.bin/sequelize db:migrate:status\n```\n\n执行完毕后的打印结果为：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nup 20190316035632-create-user.js\n```\n\n这个 up ，表示我们已经执行该脚本。此时我们可以删掉 `sequelizemeta` 表中的记录，然后再次执行 `db:migrate:status` ，会发现输出的 `up` 已变为 `down` ，表示我们从未执行过该脚本。由此可知 `db:migrate:status` 会通过 `sequelizemeta` 表中的记录来判断脚本是否被执行过。而当我们已经执行过某些脚本后再次执行 `db:migrate` ，那些已经执行过的脚本就不会再次重复执行了：\n\n```shell\nLoaded configuration file \"config/config.json\".\nUsing environment \"development\".\nNo migrations were executed, database schema was already up to date.\n```\n\n#### db:migrate:undo\n\n除了上面的新增数据表操作，我们还可以进行撤销操作。执行 `./node_modules/.bin/sequelize db:migrate:status` 命令后 `sequelize-cli` 会帮我们撤销掉上一次（最近一次）的迁移操作，比如我们的 `sequelizemeta`\n表中记录了两条迁移操作（假设创建了 user 和 message 表）：\n\n```js\n20190316035632-create-user.js\n20190316035921-create-message.js\n```\n\n那么执行 `undo` 后就会把最近的一次迁移，也就是 `*-message.js` 从表中移除，并且在数据库中删除 `message` 表。而这个删除操作，其实是执行了迁移文件下对应表的删除代码：\n\n```js\ndown: (queryInterface, Sequelize) => {\n    return queryInterface.dropTable('Messages');\n}\n```\n\n#### db:migrate:undo:all\n\n当执行 `./node_modules/.bin/sequelize db:migrate:undo:all` 命令后，能帮我们撤销所有的迁移操作。\n\n#### db:migrate:undo: –name\n\n此命令能帮我们撤销具体指定的迁移脚本，例如执行下面命令会撤销名称为 `20190316035632-create-user` 的脚本操作：\n\n```shell\n./node_modules/.bin/sequelize db:migrate:undo --name 20190316035632-create-user\n```\n\n\n\n执行完毕后再来刷新我们的数据库，就会发现 `user` 表已被删除，只留下了 `message` 表。\n\n### 字段添加与删除\n\n随着业务的增长，我们很有可能需要扩充数据表的字段。例如我们需要给 `user` 表添加一个 `username` 字段，那么我们就可以键入以下命令来创建一个 `migration` :\n\n```shell\n./node_modules/.bin/sequelize migration:create --name UserAddAge\n```\n\n执行完上述操作后我们能在 `migrations` 文件夹中看到新创建的 `UserAddAge` 文件，打开后代码如下：\n\n```js\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.createTable('users', { id: Sequelize.INTEGER });\n    */\n  },\n\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.dropTable('users');\n    */\n  }\n};\n```\n\n\n\n我们要做的，就是在 `up` 和 `down` 方法中填入数据库操作逻辑的代码，`up` 方法中有注释作提示，让我们返回一个类型为 `Promise` 的对象，还给出了示例。因为我们要给数据表添加字段，所以使用 `addColumn` 方法：\n\n```js\nreturn queryInterface.addColumn(\n    'users',                        // 被添加字段的表名称\n    'age',                          // 需要添加的字段名称\n    {\n        type: Sequelize.TINYINT,\n        allowNull: false,\n        defaultValue: 0,\n    },                              // 字段属性\n)\n```\n\n这样我们就可以给 `user` 表添加上 `age` 字段了。\n\np.s. 之所以代码中填写 `users` ，是因为 `sequelize-cli` 帮我们创建表是会自动给表名称加 `s` 。\n\n------\n\n能添加就能删除，删除操作我们在 `down` 方法中编写：\n\n```js\nreturn queryInterface.removeColumn(\n    'users',\n    'age'\n);\n```\n\n`UserAddAge.js` 文件完整代码：\n\n```js\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.createTable('users', { id: Sequelize.INTEGER });\n    */\n    return queryInterface.addColumn(\n      'users', \n      'age',\n      {\n        type: Sequelize.TINYINT,\n        allowNull: false,\n        defaultValue: 0,\n      }\n    )\n  },\n\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.dropTable('users');\n    */\n    return queryInterface.removeColumn(\n      'users',\n      'age'\n    );\n  }\n};\n```\n\n\n\n编写完毕后我们运行 `./node_modules/.bin/sequelize db:migrate` 来重新执行一遍所有迁移，刷新 `user` 表后就能看见新增字段 `age` 了。\n\n最后你还可以执行 `./node_modules/.bin/sequelize db:migrate:undo` 来确认 `down` 方法正常工作，从而让 `user` 表删除刚刚添加的 `age` 字段。\n\n文档参考：[更多 QueryInterface 操作](http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html)\n\n## seeders\n\n除了数据库结构的添加修改删除操作以外，我们通常还会给各种表批量添加一些假数据。这个时候就要用到 seeders 里的种子文件了。比方说现在要给 `user` 表批量添加一些数据，则可以执行下面代码：\n\n```shell\n./node_modules/.bin/sequelize seed:create --name userTest\n```\n\n\n\n执行完毕后你会发现在 `seeders` 文件夹下多了一个类似 `20190316090425-userTest.js` 的文件。\n\n### 批量添加\n\n我们可以在里面编写代码让 `cli` 帮助我们批量添加数据：\n\n```js\n'use strict';\n\nmodule.exports = {\n  up: (queryInterface, Sequelize) => {\n    /*\n      Add altering commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkInsert('People', [{\n        name: 'John Doe',\n        isBetaMember: false\n      }], {});\n    */\n      return queryInterface.bulkInsert('users', [\n        {\n          username: '狄仁杰',\n          age: 56\n        },\n        {\n          username: '李元芳',\n          age: 27\n        }\n      ]);\n  },\n\n  down: (queryInterface, Sequelize) => {\n    /*\n      Add reverting commands here.\n      Return a promise to correctly handle asynchronicity.\n\n      Example:\n      return queryInterface.bulkDelete('People', null, {});\n    */\n    return queryInterface.bulkDelete('users', null, {});\n  }\n};\n```\n\n\n\n种子文件的执行方式有两种：\n\n- `db:seed 种子文件名` 来运行指定种子文件\n- `db:seed:all` 来运行所有种子文件\n\n知道执行方法后我们来运行下面命令：\n\n```shell\n./node_modules/.bin/sequelize db:seed:all\n```\n\n执行成功后刷新我们的 `user` 表，就会发现数据已经被批量添加进去了。\n\n### 批量删除\n\n命令行输入并执行： `./node_modules/.bin/sequelize db:seed:undo:all` 便可以批量删除刚刚添加进 `user` 表中的数据。\n\n### 记录种子数据的存储\n\n我们知道 `migrations` 迁移是会被记录的（数据库的 `sequelizemeta` 表中），但默认情况下，种子数据的存储不会被记录下来。但官方同样提供了 [方法](http://docs.sequelizejs.com/manual/migrations.html#seed-storage) 来记录种子数据的存储。我们可以通过在配置文件中使用 `seederStorage` 来记录存储：\n\n#### JSON记录\n\n> config/config.json\n\n```json\n\"development\": {\n    ...\n    \"seederStorage\": \"json\", // 存储类型\n    \"seederStoragePath\": \"userTestData.json\" // 存储路径（当前项目根目录下）\n},\n```\n\np.s. 上方注释在 copy 到自己项目时需要删除，否则报错。\n\n接着我们执行 `./node_modules/.bin/sequelize db:seed:undo:all` 先删除数据表中数据，然后再执行 `./node_modules/.bin/sequelize db:seed:all` 重新添加一次种子数据。你就会发现项目根目录下多出来了一个叫做 `userTestData.json` 的文件，里面记录了已经执行过的种子文件名：\n\n```js\n[\n  \"20190316090425-userTest.js\"\n]\n```\n\n\n\n#### sequelize记录\n\np.s. 如果你已经用上面json记录的方式记录过种子文件的存储，再想要尝试用sequelize玩一遍的话，首先得执行一遍 `./node_modules/.bin/sequelize db:seed:undo:all` 哦。\n\n```json\n\"development\": {\n    ...\n    \"seederStorage\": \"sequelize\", // 存储类型\n    \"seederStoragePath\": \"userTestData.json\", // 存储路径（当前项目根目录下）\n    \"seederStorageTableName\": \"userTestData\" // 存储的表名\n},\n```\n\n编写完上述代码后你可以执行下面命令：\n\n```shell\n./node_modules/.bin/sequelize db:seed:all\n```\n\n执行完毕后刷新数据库，就能在数据库中发现 `userTestData` 表，里面记录了已经执行完毕的种子文件 `20190316090425-userTest.js`\n\n## 版本\n\n安装的 sequelize 和 mysql2 的版本为：\n\n```json\n\"dependencies\": {\n    \"sequelize\": \"^5.3.3\",\n    \"sequelize-cli\": \"^5.4.0\"\n}\n```\n\n\n\n## 资源\n\n- [QueryInterface 操作](http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html)\n","slug":"基于sequelize的数据库迁移","published":1,"updated":"2020-11-22T02:57:13.978Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygp007ikhsrbt7m2do9","content":"<h2 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h2><p>有时候我们也希望能够跟踪数据库的更改，像 git 一样在各个不同时期的数据库状态之间进行切换。或者能通过一套工具将数据库迁移到本机，让我们在家也能进行测试开发，而不用依赖公司的测试环境。这些特性，作为今天的主角 <code>sequelize-cli</code> 都能提供给我们。</p>\n<blockquote>\n<p>npm链接请 <a href=\"https://www.npmjs.com/package/sequelize-cli\">点击这里</a>。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先创建项目，项目名随意，创建完毕后cd到项目根目录，老规矩命令行 <code>npm init -y</code> 创建 <code>package.json</code> ，然后输入安装一步到位：<code>npm i sequelize mysql2 sequelize-cli</code> 。</p>\n<a id=\"more\"></a>\n\n<p><strong>注意：</strong> <code>sequelize-cli</code> 依赖 <code>sequelize</code>，<code>sequelize</code> 依赖 <code>mysql2</code></p>\n<p>安装完毕后我们可以测试下是否可用，根目录命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize</span><br></pre></td></tr></table></figure>\n\n<p>看见命令行输出类似下方提示代表安装成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize [命令]</span><br><span class=\"line\"></span><br><span class=\"line\">命令：</span><br><span class=\"line\">  sequelize db:migrate                        Run pending migrations</span><br><span class=\"line\">  sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps</span><br><span class=\"line\">  sequelize db:migrate:status                 List the status of all migrations</span><br><span class=\"line\">  sequelize db:migrate:undo                   Reverts a migration</span><br><span class=\"line\">  sequelize db:migrate:undo:all               Revert all migrations ran</span><br><span class=\"line\">  sequelize db:seed                           Run specified seeder</span><br><span class=\"line\">  sequelize db:seed:undo                      Deletes data from the database</span><br><span class=\"line\">  sequelize db:seed:all                       Run every seeder</span><br><span class=\"line\">  sequelize db:seed:undo:all                  Deletes data from the database</span><br><span class=\"line\">  sequelize db:create                         Create database specified by configuration</span><br><span class=\"line\">  sequelize db:drop                           Drop database specified by configuration</span><br><span class=\"line\">  sequelize init                              Initializes project</span><br><span class=\"line\">  sequelize init:config                       Initializes configuration</span><br><span class=\"line\">  sequelize init:migrations                   Initializes migrations</span><br><span class=\"line\">  sequelize init:models                       Initializes models</span><br><span class=\"line\">  sequelize init:seeders                      Initializes seeders</span><br><span class=\"line\">  sequelize migration:generate                Generates a new migration file     [aliases: migration:create]</span><br><span class=\"line\">  sequelize model:generate                    Generates a model and its migration    [aliases: model:create]</span><br><span class=\"line\">  sequelize seed:generate                     Generates a new seed file               [aliases: seed:create]</span><br><span class=\"line\"></span><br><span class=\"line\">选项：</span><br><span class=\"line\">  --help     显示帮助信息                                                                             [布尔]</span><br><span class=\"line\">  --version  显示版本号                                                                               [布尔]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>目前我们项目的树形结构为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>接着根目录命令行输入 <code>./node_modules/.bin/sequelize init</code> 来初始化 sequelize 项目，该命令会帮我们创建如下目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── config              # 包含数据库的配置文件</span><br><span class=\"line\">├── migrations          # 包含所有迁移文件（e.g. 数据库、表的创建，字段的增加）跟数据库结构有关的操作都存放在这里</span><br><span class=\"line\">├── models              # 包含项目中的所有模型（e.g. Users, Message）</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── seeders             # 包含所有种子文件（e.g. 表中的数据）</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h2><p>首先我们来看下 <code>config</code> 目录下的 <code>config.json</code> 文件。它里面包含了数据库的的基本配置，默认分为 <code>development（开发）</code> 、<code>test（测试）</code> 和 <code>production（生产）</code> 环境。当然你也可以删除或新增环境，比如新增一个在家编写代码所使用的 <code>home</code> 环境。</p>\n<h3 id=\"db-create\"><a href=\"#db-create\" class=\"headerlink\" title=\"db:create\"></a>db:create</h3><p><code>sequelize-cli</code> 默认读取 <code>development</code> 模式下的数据库配置来创建数据库，所以接下来就用它来配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;development&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;root&quot;</span>, <span class=\"comment\">// 数据库用户名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;root&quot;</span>, <span class=\"comment\">// 数据库密码</span></span><br><span class=\"line\">    <span class=\"string\">&quot;database&quot;</span>: <span class=\"string\">&quot;database_development&quot;</span>, <span class=\"comment\">// 需要创建的数据库名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;host&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"comment\">// 主机</span></span><br><span class=\"line\">    <span class=\"string\">&quot;port&quot;</span>: <span class=\"number\">8889</span>,       <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;dialect&quot;</span>: <span class=\"string\">&quot;mysql&quot;</span>  <span class=\"comment\">// 使用的数据库类型</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置完毕后在根目录下的命令行输入 <code>./node_modules/.bin/sequelize db:create</code><br>。当你看到如下输出就代表创建数据库成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">Database sw_sequelize_development created.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"db-drop\"><a href=\"#db-drop\" class=\"headerlink\" title=\"db:drop\"></a>db:drop</h3><p>能添加就能删除，我们可以键入 <code>./node_modules/.bin/sequelize db:drop</code> 命令来删除数据库。当你看到命令行输出下面内容就代表删除成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">Database sw_sequelize_development dropped.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"模式切换\"><a href=\"#模式切换\" class=\"headerlink\" title=\"模式切换\"></a>模式切换</h3><p>前面已经说了，<code>sequelize-cli</code> 默认读取 <code>development</code> 模式下的数据库配置。那如果我现在想切到 <code>test</code> 模式下该怎么办呢？</p>\n<h4 id=\"变更环境变量\"><a href=\"#变更环境变量\" class=\"headerlink\" title=\"变更环境变量\"></a>变更环境变量</h4><p>首先得切换服务器环境变量，MacOS下（其他系统切换命令见下方链接）使用 <code>export NODE_ENV=test</code> 来切换到 <code>test</code> 模式，然后使用 <code>echo $NODE_ENV</code> 查看是否已经切换成功，接着就可以再次执行 <code>./node_modules/.bin/sequelize db:create</code> 命令，创建 <code>test</code> 模式下的数据库了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">export</span> NODE_ENV=<span class=\"built_in\">test</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$NODE_ENV</span></span></span><br><span class=\"line\">test</span><br><span class=\"line\"></span><br><span class=\"line\">./node_modules/.bin/sequelize db:create</span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;test&quot;.</span><br><span class=\"line\">Database sw_sequelize_test created.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"http://sorex.cnblogs.com/p/6200940.html\">各系统下NodeJS环境变量修改</a></p>\n</blockquote>\n<h4 id=\"还原环境变量\"><a href=\"#还原环境变量\" class=\"headerlink\" title=\"还原环境变量\"></a>还原环境变量</h4><p>如果想回到默认的 <code>development</code> 模式，MacOS下直接键入命令 <code>export NODE_ENV=</code> 就OK啦。</p>\n<h2 id=\"models\"><a href=\"#models\" class=\"headerlink\" title=\"models\"></a>models</h2><h3 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h3><p>我们通过 <code>model:generate</code> 或者 <code>model:create</code> 来创建模型文件，它一共需要两个参数，分别是：</p>\n<ul>\n<li>–name: 模型名称（必须）</li>\n<li>–attributes: 字段列表（必须）</li>\n</ul>\n<p>回到我们的项目，在根目录执行下面命令来创建一个 User 模型文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize model:create --name User --attributes username:STRING</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后命令行会有类似下方输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]</span><br><span class=\"line\"></span><br><span class=\"line\">New model was created at .../你的项目名/models/user.js .</span><br><span class=\"line\">New migration was created at .../你的项目名/migrations/20190316035632-User.js</span><br></pre></td></tr></table></figure>\n\n\n\n<p>所以 <code>model:create</code> 命令执行后帮我们创建了两个文件，一个是用来定义 User 模型的文件 user.js :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    username: DataTypes.STRING</span><br><span class=\"line\">  &#125;, &#123;&#125;);</span><br><span class=\"line\">  User.associate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">models</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// associations can be defined here</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> User;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个是 <code>migrations</code> 迁移文件夹下的 <code>用来创建 User 表</code> 的文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//   创建名为 Users 的数据表</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.createTable(<span class=\"string\">&#x27;Users&#x27;</span>, &#123;</span><br><span class=\"line\">      id: &#123;</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type: Sequelize.INTEGER</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      createdAt: &#123;</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        type: Sequelize.DATE</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      updatedAt: &#123;</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        type: Sequelize.DATE</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.dropTable(<span class=\"string\">&#x27;Users&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中 <code>models</code> 文件夹下文件，例如生成的 <code>user.js</code> 模型文件是给程序用的；<code>migrations</code> 和 <code>seeders</code> 文件夹下的文件是个 <code>cli</code> 用的。</p>\n<p>总结下来，<code>model:create</code> 命令帮我们做了两件事情：</p>\n<ul>\n<li>创建 User 模型</li>\n<li>创建跟模型对应的 Users 数据表文件，方便用此文件在数据库中创建 Users 表</li>\n</ul>\n<h2 id=\"migrations\"><a href=\"#migrations\" class=\"headerlink\" title=\"migrations\"></a>migrations</h2><p>刚刚我们已经创建了一个 User 模型和用来创建 Users 表的脚本执行文件。下面就可以开始执行迁移了。首先我们重温何为执行迁移：</p>\n<blockquote>\n<p>所谓迁移，就是对数据库进行结构的创建、升级（修改）等操作</p>\n</blockquote>\n<h3 id=\"执行迁移\"><a href=\"#执行迁移\" class=\"headerlink\" title=\"执行迁移\"></a>执行迁移</h3><h4 id=\"db-migrate\"><a href=\"#db-migrate\" class=\"headerlink\" title=\"db:migrate\"></a>db:migrate</h4><p>执行迁移的命令为 <code>db:migrate</code>，我们直接在项目根目录下运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:migrate</span><br></pre></td></tr></table></figure>\n\n<p>（如果在此之前你运行过 db:drop 命令来删除数据库，记得再重新执行一次 db:create，否则会导致创建表失败）。执行成功的输出类似下面文字：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">== 20190316035632-create-user: migrating =======</span><br><span class=\"line\">== 20190316035632-create-user: migrated (0.047s)</span><br></pre></td></tr></table></figure>\n\n<p>此时刷新下你的本地数据库，就会发现之前空空如也的数据库中多了个 <code>users</code> 表和 <code>sequelizemeta</code> 表：</p>\n<img src=\"/posts/16051/create-users.png\" class=\"\" title=\"create-users\">\n\n<p><code>users</code> 表被创建出来我们能理解，重点说一下这个 <code>sequelizemeta</code> 表，其实它是用来记录已经被执行过的迁移脚本的，避免我们重复执行已经执行过的脚本。</p>\n<h4 id=\"db-migrate-status\"><a href=\"#db-migrate-status\" class=\"headerlink\" title=\"db:migrate:status\"></a>db:migrate:status</h4><p>我们可以通过 <code>db:migrate:status</code> 命令来查看当前迁移脚本的执行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:migrate:status</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后的打印结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">up 20190316035632-create-user.js</span><br></pre></td></tr></table></figure>\n\n<p>这个 up ，表示我们已经执行该脚本。此时我们可以删掉 <code>sequelizemeta</code> 表中的记录，然后再次执行 <code>db:migrate:status</code> ，会发现输出的 <code>up</code> 已变为 <code>down</code> ，表示我们从未执行过该脚本。由此可知 <code>db:migrate:status</code> 会通过 <code>sequelizemeta</code> 表中的记录来判断脚本是否被执行过。而当我们已经执行过某些脚本后再次执行 <code>db:migrate</code> ，那些已经执行过的脚本就不会再次重复执行了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">No migrations were executed, database schema was already up to date.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"db-migrate-undo\"><a href=\"#db-migrate-undo\" class=\"headerlink\" title=\"db:migrate:undo\"></a>db:migrate:undo</h4><p>除了上面的新增数据表操作，我们还可以进行撤销操作。执行 <code>./node_modules/.bin/sequelize db:migrate:status</code> 命令后 <code>sequelize-cli</code> 会帮我们撤销掉上一次（最近一次）的迁移操作，比如我们的 <code>sequelizemeta</code><br>表中记录了两条迁移操作（假设创建了 user 和 message 表）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">20190316035632</span>-create-user.js</span><br><span class=\"line\"><span class=\"number\">20190316035921</span>-create-message.js</span><br></pre></td></tr></table></figure>\n\n<p>那么执行 <code>undo</code> 后就会把最近的一次迁移，也就是 <code>*-message.js</code> 从表中移除，并且在数据库中删除 <code>message</code> 表。而这个删除操作，其实是执行了迁移文件下对应表的删除代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.dropTable(<span class=\"string\">&#x27;Messages&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"db-migrate-undo-all\"><a href=\"#db-migrate-undo-all\" class=\"headerlink\" title=\"db:migrate:undo:all\"></a>db:migrate:undo:all</h4><p>当执行 <code>./node_modules/.bin/sequelize db:migrate:undo:all</code> 命令后，能帮我们撤销所有的迁移操作。</p>\n<h4 id=\"db-migrate-undo-–name\"><a href=\"#db-migrate-undo-–name\" class=\"headerlink\" title=\"db:migrate:undo: –name\"></a>db:migrate:undo: –name</h4><p>此命令能帮我们撤销具体指定的迁移脚本，例如执行下面命令会撤销名称为 <code>20190316035632-create-user</code> 的脚本操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:migrate:undo --name 20190316035632-create-user</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行完毕后再来刷新我们的数据库，就会发现 <code>user</code> 表已被删除，只留下了 <code>message</code> 表。</p>\n<h3 id=\"字段添加与删除\"><a href=\"#字段添加与删除\" class=\"headerlink\" title=\"字段添加与删除\"></a>字段添加与删除</h3><p>随着业务的增长，我们很有可能需要扩充数据表的字段。例如我们需要给 <code>user</code> 表添加一个 <code>username</code> 字段，那么我们就可以键入以下命令来创建一个 <code>migration</code> :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize migration:create --name UserAddAge</span><br></pre></td></tr></table></figure>\n\n<p>执行完上述操作后我们能在 <code>migrations</code> 文件夹中看到新创建的 <code>UserAddAge</code> 文件，打开后代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add altering commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.createTable(&#x27;users&#x27;, &#123; id: Sequelize.INTEGER &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add reverting commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.dropTable(&#x27;users&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们要做的，就是在 <code>up</code> 和 <code>down</code> 方法中填入数据库操作逻辑的代码，<code>up</code> 方法中有注释作提示，让我们返回一个类型为 <code>Promise</code> 的对象，还给出了示例。因为我们要给数据表添加字段，所以使用 <code>addColumn</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> queryInterface.addColumn(</span><br><span class=\"line\">    <span class=\"string\">&#x27;users&#x27;</span>,                        <span class=\"comment\">// 被添加字段的表名称</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span>,                          <span class=\"comment\">// 需要添加的字段名称</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT,</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;,                              <span class=\"comment\">// 字段属性</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以给 <code>user</code> 表添加上 <code>age</code> 字段了。</p>\n<p>p.s. 之所以代码中填写 <code>users</code> ，是因为 <code>sequelize-cli</code> 帮我们创建表是会自动给表名称加 <code>s</code> 。</p>\n<hr>\n<p>能添加就能删除，删除操作我们在 <code>down</code> 方法中编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> queryInterface.removeColumn(</span><br><span class=\"line\">    <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><code>UserAddAge.js</code> 文件完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add altering commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.createTable(&#x27;users&#x27;, &#123; id: Sequelize.INTEGER &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.addColumn(</span><br><span class=\"line\">      <span class=\"string\">&#x27;users&#x27;</span>, </span><br><span class=\"line\">      <span class=\"string\">&#x27;age&#x27;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT,</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add reverting commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.dropTable(&#x27;users&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.removeColumn(</span><br><span class=\"line\">      <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;age&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编写完毕后我们运行 <code>./node_modules/.bin/sequelize db:migrate</code> 来重新执行一遍所有迁移，刷新 <code>user</code> 表后就能看见新增字段 <code>age</code> 了。</p>\n<p>最后你还可以执行 <code>./node_modules/.bin/sequelize db:migrate:undo</code> 来确认 <code>down</code> 方法正常工作，从而让 <code>user</code> 表删除刚刚添加的 <code>age</code> 字段。</p>\n<p>文档参考：<a href=\"http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html\">更多 QueryInterface 操作</a></p>\n<h2 id=\"seeders\"><a href=\"#seeders\" class=\"headerlink\" title=\"seeders\"></a>seeders</h2><p>除了数据库结构的添加修改删除操作以外，我们通常还会给各种表批量添加一些假数据。这个时候就要用到 seeders 里的种子文件了。比方说现在要给 <code>user</code> 表批量添加一些数据，则可以执行下面代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize seed:create --name userTest</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行完毕后你会发现在 <code>seeders</code> 文件夹下多了一个类似 <code>20190316090425-userTest.js</code> 的文件。</p>\n<h3 id=\"批量添加\"><a href=\"#批量添加\" class=\"headerlink\" title=\"批量添加\"></a>批量添加</h3><p>我们可以在里面编写代码让 <code>cli</code> 帮助我们批量添加数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add altering commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.bulkInsert(&#x27;People&#x27;, [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        name: &#x27;John Doe&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">        isBetaMember: false</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;], &#123;&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> queryInterface.bulkInsert(<span class=\"string\">&#x27;users&#x27;</span>, [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          username: <span class=\"string\">&#x27;狄仁杰&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">56</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          username: <span class=\"string\">&#x27;李元芳&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">27</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add reverting commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.bulkDelete(&#x27;People&#x27;, null, &#123;&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.bulkDelete(<span class=\"string\">&#x27;users&#x27;</span>, <span class=\"literal\">null</span>, &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>种子文件的执行方式有两种：</p>\n<ul>\n<li><code>db:seed 种子文件名</code> 来运行指定种子文件</li>\n<li><code>db:seed:all</code> 来运行所有种子文件</li>\n</ul>\n<p>知道执行方法后我们来运行下面命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:seed:all</span><br></pre></td></tr></table></figure>\n\n<p>执行成功后刷新我们的 <code>user</code> 表，就会发现数据已经被批量添加进去了。</p>\n<h3 id=\"批量删除\"><a href=\"#批量删除\" class=\"headerlink\" title=\"批量删除\"></a>批量删除</h3><p>命令行输入并执行： <code>./node_modules/.bin/sequelize db:seed:undo:all</code> 便可以批量删除刚刚添加进 <code>user</code> 表中的数据。</p>\n<h3 id=\"记录种子数据的存储\"><a href=\"#记录种子数据的存储\" class=\"headerlink\" title=\"记录种子数据的存储\"></a>记录种子数据的存储</h3><p>我们知道 <code>migrations</code> 迁移是会被记录的（数据库的 <code>sequelizemeta</code> 表中），但默认情况下，种子数据的存储不会被记录下来。但官方同样提供了 <a href=\"http://docs.sequelizejs.com/manual/migrations.html#seed-storage\">方法</a> 来记录种子数据的存储。我们可以通过在配置文件中使用 <code>seederStorage</code> 来记录存储：</p>\n<h4 id=\"JSON记录\"><a href=\"#JSON记录\" class=\"headerlink\" title=\"JSON记录\"></a>JSON记录</h4><blockquote>\n<p>config/config.json</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;development&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;seederStorage&quot;: &quot;json&quot;, // 存储类型</span><br><span class=\"line\">    &quot;seederStoragePath&quot;: &quot;userTestData.json&quot; // 存储路径（当前项目根目录下）</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 上方注释在 copy 到自己项目时需要删除，否则报错。</p>\n<p>接着我们执行 <code>./node_modules/.bin/sequelize db:seed:undo:all</code> 先删除数据表中数据，然后再执行 <code>./node_modules/.bin/sequelize db:seed:all</code> 重新添加一次种子数据。你就会发现项目根目录下多出来了一个叫做 <code>userTestData.json</code> 的文件，里面记录了已经执行过的种子文件名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&quot;20190316090425-userTest.js&quot;</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"sequelize记录\"><a href=\"#sequelize记录\" class=\"headerlink\" title=\"sequelize记录\"></a>sequelize记录</h4><p>p.s. 如果你已经用上面json记录的方式记录过种子文件的存储，再想要尝试用sequelize玩一遍的话，首先得执行一遍 <code>./node_modules/.bin/sequelize db:seed:undo:all</code> 哦。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;development&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;seederStorage&quot;: &quot;sequelize&quot;, // 存储类型</span><br><span class=\"line\">    &quot;seederStoragePath&quot;: &quot;userTestData.json&quot;, // 存储路径（当前项目根目录下）</span><br><span class=\"line\">    &quot;seederStorageTableName&quot;: &quot;userTestData&quot; // 存储的表名</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>编写完上述代码后你可以执行下面命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:seed:all</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后刷新数据库，就能在数据库中发现 <code>userTestData</code> 表，里面记录了已经执行完毕的种子文件 <code>20190316090425-userTest.js</code></p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>安装的 sequelize 和 mysql2 的版本为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;sequelize&quot;: &quot;^5.3.3&quot;,</span><br><span class=\"line\">    &quot;sequelize-cli&quot;: &quot;^5.4.0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html\">QueryInterface 操作</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"数据库迁移\"><a href=\"#数据库迁移\" class=\"headerlink\" title=\"数据库迁移\"></a>数据库迁移</h2><p>有时候我们也希望能够跟踪数据库的更改，像 git 一样在各个不同时期的数据库状态之间进行切换。或者能通过一套工具将数据库迁移到本机，让我们在家也能进行测试开发，而不用依赖公司的测试环境。这些特性，作为今天的主角 <code>sequelize-cli</code> 都能提供给我们。</p>\n<blockquote>\n<p>npm链接请 <a href=\"https://www.npmjs.com/package/sequelize-cli\">点击这里</a>。</p>\n</blockquote>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><p>首先创建项目，项目名随意，创建完毕后cd到项目根目录，老规矩命令行 <code>npm init -y</code> 创建 <code>package.json</code> ，然后输入安装一步到位：<code>npm i sequelize mysql2 sequelize-cli</code> 。</p>","more":"<p><strong>注意：</strong> <code>sequelize-cli</code> 依赖 <code>sequelize</code>，<code>sequelize</code> 依赖 <code>mysql2</code></p>\n<p>安装完毕后我们可以测试下是否可用，根目录命令行输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize</span><br></pre></td></tr></table></figure>\n\n<p>看见命令行输出类似下方提示代表安装成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sequelize [命令]</span><br><span class=\"line\"></span><br><span class=\"line\">命令：</span><br><span class=\"line\">  sequelize db:migrate                        Run pending migrations</span><br><span class=\"line\">  sequelize db:migrate:schema:timestamps:add  Update migration table to have timestamps</span><br><span class=\"line\">  sequelize db:migrate:status                 List the status of all migrations</span><br><span class=\"line\">  sequelize db:migrate:undo                   Reverts a migration</span><br><span class=\"line\">  sequelize db:migrate:undo:all               Revert all migrations ran</span><br><span class=\"line\">  sequelize db:seed                           Run specified seeder</span><br><span class=\"line\">  sequelize db:seed:undo                      Deletes data from the database</span><br><span class=\"line\">  sequelize db:seed:all                       Run every seeder</span><br><span class=\"line\">  sequelize db:seed:undo:all                  Deletes data from the database</span><br><span class=\"line\">  sequelize db:create                         Create database specified by configuration</span><br><span class=\"line\">  sequelize db:drop                           Drop database specified by configuration</span><br><span class=\"line\">  sequelize init                              Initializes project</span><br><span class=\"line\">  sequelize init:config                       Initializes configuration</span><br><span class=\"line\">  sequelize init:migrations                   Initializes migrations</span><br><span class=\"line\">  sequelize init:models                       Initializes models</span><br><span class=\"line\">  sequelize init:seeders                      Initializes seeders</span><br><span class=\"line\">  sequelize migration:generate                Generates a new migration file     [aliases: migration:create]</span><br><span class=\"line\">  sequelize model:generate                    Generates a model and its migration    [aliases: model:create]</span><br><span class=\"line\">  sequelize seed:generate                     Generates a new seed file               [aliases: seed:create]</span><br><span class=\"line\"></span><br><span class=\"line\">选项：</span><br><span class=\"line\">  --help     显示帮助信息                                                                             [布尔]</span><br><span class=\"line\">  --version  显示版本号                                                                               [布尔]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><h3 id=\"初始化\"><a href=\"#初始化\" class=\"headerlink\" title=\"初始化\"></a>初始化</h3><p>目前我们项目的树形结构为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n<p>接着根目录命令行输入 <code>./node_modules/.bin/sequelize init</code> 来初始化 sequelize 项目，该命令会帮我们创建如下目录：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.</span><br><span class=\"line\">├── config              # 包含数据库的配置文件</span><br><span class=\"line\">├── migrations          # 包含所有迁移文件（e.g. 数据库、表的创建，字段的增加）跟数据库结构有关的操作都存放在这里</span><br><span class=\"line\">├── models              # 包含项目中的所有模型（e.g. Users, Message）</span><br><span class=\"line\">├── node_modules</span><br><span class=\"line\">├── seeders             # 包含所有种子文件（e.g. 表中的数据）</span><br><span class=\"line\">├── package-lock.json</span><br><span class=\"line\">└── package.json</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"config\"><a href=\"#config\" class=\"headerlink\" title=\"config\"></a>config</h2><p>首先我们来看下 <code>config</code> 目录下的 <code>config.json</code> 文件。它里面包含了数据库的的基本配置，默认分为 <code>development（开发）</code> 、<code>test（测试）</code> 和 <code>production（生产）</code> 环境。当然你也可以删除或新增环境，比如新增一个在家编写代码所使用的 <code>home</code> 环境。</p>\n<h3 id=\"db-create\"><a href=\"#db-create\" class=\"headerlink\" title=\"db:create\"></a>db:create</h3><p><code>sequelize-cli</code> 默认读取 <code>development</code> 模式下的数据库配置来创建数据库，所以接下来就用它来配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"string\">&quot;development&quot;</span>: &#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;username&quot;</span>: <span class=\"string\">&quot;root&quot;</span>, <span class=\"comment\">// 数据库用户名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;password&quot;</span>: <span class=\"string\">&quot;root&quot;</span>, <span class=\"comment\">// 数据库密码</span></span><br><span class=\"line\">    <span class=\"string\">&quot;database&quot;</span>: <span class=\"string\">&quot;database_development&quot;</span>, <span class=\"comment\">// 需要创建的数据库名</span></span><br><span class=\"line\">    <span class=\"string\">&quot;host&quot;</span>: <span class=\"string\">&quot;127.0.0.1&quot;</span>, <span class=\"comment\">// 主机</span></span><br><span class=\"line\">    <span class=\"string\">&quot;port&quot;</span>: <span class=\"number\">8889</span>,       <span class=\"comment\">// 端口号</span></span><br><span class=\"line\">    <span class=\"string\">&quot;dialect&quot;</span>: <span class=\"string\">&quot;mysql&quot;</span>  <span class=\"comment\">// 使用的数据库类型</span></span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n\n\n<p>配置完毕后在根目录下的命令行输入 <code>./node_modules/.bin/sequelize db:create</code><br>。当你看到如下输出就代表创建数据库成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">Database sw_sequelize_development created.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"db-drop\"><a href=\"#db-drop\" class=\"headerlink\" title=\"db:drop\"></a>db:drop</h3><p>能添加就能删除，我们可以键入 <code>./node_modules/.bin/sequelize db:drop</code> 命令来删除数据库。当你看到命令行输出下面内容就代表删除成功：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">Database sw_sequelize_development dropped.</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"模式切换\"><a href=\"#模式切换\" class=\"headerlink\" title=\"模式切换\"></a>模式切换</h3><p>前面已经说了，<code>sequelize-cli</code> 默认读取 <code>development</code> 模式下的数据库配置。那如果我现在想切到 <code>test</code> 模式下该怎么办呢？</p>\n<h4 id=\"变更环境变量\"><a href=\"#变更环境变量\" class=\"headerlink\" title=\"变更环境变量\"></a>变更环境变量</h4><p>首先得切换服务器环境变量，MacOS下（其他系统切换命令见下方链接）使用 <code>export NODE_ENV=test</code> 来切换到 <code>test</code> 模式，然后使用 <code>echo $NODE_ENV</code> 查看是否已经切换成功，接着就可以再次执行 <code>./node_modules/.bin/sequelize db:create</code> 命令，创建 <code>test</code> 模式下的数据库了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">export</span> NODE_ENV=<span class=\"built_in\">test</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">echo</span> <span class=\"variable\">$NODE_ENV</span></span></span><br><span class=\"line\">test</span><br><span class=\"line\"></span><br><span class=\"line\">./node_modules/.bin/sequelize db:create</span><br><span class=\"line\"></span><br><span class=\"line\">Sequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;test&quot;.</span><br><span class=\"line\">Database sw_sequelize_test created.</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p><a href=\"http://sorex.cnblogs.com/p/6200940.html\">各系统下NodeJS环境变量修改</a></p>\n</blockquote>\n<h4 id=\"还原环境变量\"><a href=\"#还原环境变量\" class=\"headerlink\" title=\"还原环境变量\"></a>还原环境变量</h4><p>如果想回到默认的 <code>development</code> 模式，MacOS下直接键入命令 <code>export NODE_ENV=</code> 就OK啦。</p>\n<h2 id=\"models\"><a href=\"#models\" class=\"headerlink\" title=\"models\"></a>models</h2><h3 id=\"创建模型\"><a href=\"#创建模型\" class=\"headerlink\" title=\"创建模型\"></a>创建模型</h3><p>我们通过 <code>model:generate</code> 或者 <code>model:create</code> 来创建模型文件，它一共需要两个参数，分别是：</p>\n<ul>\n<li>–name: 模型名称（必须）</li>\n<li>–attributes: 字段列表（必须）</li>\n</ul>\n<p>回到我们的项目，在根目录执行下面命令来创建一个 User 模型文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize model:create --name User --attributes username:STRING</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后命令行会有类似下方输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]</span><br><span class=\"line\"></span><br><span class=\"line\">New model was created at .../你的项目名/models/user.js .</span><br><span class=\"line\">New migration was created at .../你的项目名/migrations/20190316035632-User.js</span><br></pre></td></tr></table></figure>\n\n\n\n<p>所以 <code>model:create</code> 命令执行后帮我们创建了两个文件，一个是用来定义 User 模型的文件 user.js :</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = <span class=\"function\">(<span class=\"params\">sequelize, DataTypes</span>) =&gt;</span> &#123;</span><br><span class=\"line\">  <span class=\"keyword\">const</span> User = sequelize.define(<span class=\"string\">&#x27;User&#x27;</span>, &#123;</span><br><span class=\"line\">    username: DataTypes.STRING</span><br><span class=\"line\">  &#125;, &#123;&#125;);</span><br><span class=\"line\">  User.associate = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">models</span>) </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// associations can be defined here</span></span><br><span class=\"line\">  &#125;;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> User;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>一个是 <code>migrations</code> 迁移文件夹下的 <code>用来创建 User 表</code> 的文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">//   创建名为 Users 的数据表</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.createTable(<span class=\"string\">&#x27;Users&#x27;</span>, &#123;</span><br><span class=\"line\">      id: &#123;</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        autoIncrement: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        primaryKey: <span class=\"literal\">true</span>,</span><br><span class=\"line\">        type: Sequelize.INTEGER</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      username: &#123;</span><br><span class=\"line\">        type: Sequelize.STRING</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      createdAt: &#123;</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        type: Sequelize.DATE</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      updatedAt: &#123;</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        type: Sequelize.DATE</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.dropTable(<span class=\"string\">&#x27;Users&#x27;</span>);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>其中 <code>models</code> 文件夹下文件，例如生成的 <code>user.js</code> 模型文件是给程序用的；<code>migrations</code> 和 <code>seeders</code> 文件夹下的文件是个 <code>cli</code> 用的。</p>\n<p>总结下来，<code>model:create</code> 命令帮我们做了两件事情：</p>\n<ul>\n<li>创建 User 模型</li>\n<li>创建跟模型对应的 Users 数据表文件，方便用此文件在数据库中创建 Users 表</li>\n</ul>\n<h2 id=\"migrations\"><a href=\"#migrations\" class=\"headerlink\" title=\"migrations\"></a>migrations</h2><p>刚刚我们已经创建了一个 User 模型和用来创建 Users 表的脚本执行文件。下面就可以开始执行迁移了。首先我们重温何为执行迁移：</p>\n<blockquote>\n<p>所谓迁移，就是对数据库进行结构的创建、升级（修改）等操作</p>\n</blockquote>\n<h3 id=\"执行迁移\"><a href=\"#执行迁移\" class=\"headerlink\" title=\"执行迁移\"></a>执行迁移</h3><h4 id=\"db-migrate\"><a href=\"#db-migrate\" class=\"headerlink\" title=\"db:migrate\"></a>db:migrate</h4><p>执行迁移的命令为 <code>db:migrate</code>，我们直接在项目根目录下运行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:migrate</span><br></pre></td></tr></table></figure>\n\n<p>（如果在此之前你运行过 db:drop 命令来删除数据库，记得再重新执行一次 db:create，否则会导致创建表失败）。执行成功的输出类似下面文字：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Sequelize CLI [Node: 9.0.0, CLI: 5.4.0, ORM: 5.3.3]</span><br><span class=\"line\"></span><br><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">== 20190316035632-create-user: migrating =======</span><br><span class=\"line\">== 20190316035632-create-user: migrated (0.047s)</span><br></pre></td></tr></table></figure>\n\n<p>此时刷新下你的本地数据库，就会发现之前空空如也的数据库中多了个 <code>users</code> 表和 <code>sequelizemeta</code> 表：</p>\n<img src=\"/posts/16051/create-users.png\" class=\"\" title=\"create-users\">\n\n<p><code>users</code> 表被创建出来我们能理解，重点说一下这个 <code>sequelizemeta</code> 表，其实它是用来记录已经被执行过的迁移脚本的，避免我们重复执行已经执行过的脚本。</p>\n<h4 id=\"db-migrate-status\"><a href=\"#db-migrate-status\" class=\"headerlink\" title=\"db:migrate:status\"></a>db:migrate:status</h4><p>我们可以通过 <code>db:migrate:status</code> 命令来查看当前迁移脚本的执行状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:migrate:status</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后的打印结果为：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">up 20190316035632-create-user.js</span><br></pre></td></tr></table></figure>\n\n<p>这个 up ，表示我们已经执行该脚本。此时我们可以删掉 <code>sequelizemeta</code> 表中的记录，然后再次执行 <code>db:migrate:status</code> ，会发现输出的 <code>up</code> 已变为 <code>down</code> ，表示我们从未执行过该脚本。由此可知 <code>db:migrate:status</code> 会通过 <code>sequelizemeta</code> 表中的记录来判断脚本是否被执行过。而当我们已经执行过某些脚本后再次执行 <code>db:migrate</code> ，那些已经执行过的脚本就不会再次重复执行了：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Loaded configuration file &quot;config/config.json&quot;.</span><br><span class=\"line\">Using environment &quot;development&quot;.</span><br><span class=\"line\">No migrations were executed, database schema was already up to date.</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"db-migrate-undo\"><a href=\"#db-migrate-undo\" class=\"headerlink\" title=\"db:migrate:undo\"></a>db:migrate:undo</h4><p>除了上面的新增数据表操作，我们还可以进行撤销操作。执行 <code>./node_modules/.bin/sequelize db:migrate:status</code> 命令后 <code>sequelize-cli</code> 会帮我们撤销掉上一次（最近一次）的迁移操作，比如我们的 <code>sequelizemeta</code><br>表中记录了两条迁移操作（假设创建了 user 和 message 表）：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"number\">20190316035632</span>-create-user.js</span><br><span class=\"line\"><span class=\"number\">20190316035921</span>-create-message.js</span><br></pre></td></tr></table></figure>\n\n<p>那么执行 <code>undo</code> 后就会把最近的一次迁移，也就是 <code>*-message.js</code> 从表中移除，并且在数据库中删除 <code>message</code> 表。而这个删除操作，其实是执行了迁移文件下对应表的删除代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.dropTable(<span class=\"string\">&#x27;Messages&#x27;</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"db-migrate-undo-all\"><a href=\"#db-migrate-undo-all\" class=\"headerlink\" title=\"db:migrate:undo:all\"></a>db:migrate:undo:all</h4><p>当执行 <code>./node_modules/.bin/sequelize db:migrate:undo:all</code> 命令后，能帮我们撤销所有的迁移操作。</p>\n<h4 id=\"db-migrate-undo-–name\"><a href=\"#db-migrate-undo-–name\" class=\"headerlink\" title=\"db:migrate:undo: –name\"></a>db:migrate:undo: –name</h4><p>此命令能帮我们撤销具体指定的迁移脚本，例如执行下面命令会撤销名称为 <code>20190316035632-create-user</code> 的脚本操作：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:migrate:undo --name 20190316035632-create-user</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行完毕后再来刷新我们的数据库，就会发现 <code>user</code> 表已被删除，只留下了 <code>message</code> 表。</p>\n<h3 id=\"字段添加与删除\"><a href=\"#字段添加与删除\" class=\"headerlink\" title=\"字段添加与删除\"></a>字段添加与删除</h3><p>随着业务的增长，我们很有可能需要扩充数据表的字段。例如我们需要给 <code>user</code> 表添加一个 <code>username</code> 字段，那么我们就可以键入以下命令来创建一个 <code>migration</code> :</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize migration:create --name UserAddAge</span><br></pre></td></tr></table></figure>\n\n<p>执行完上述操作后我们能在 <code>migrations</code> 文件夹中看到新创建的 <code>UserAddAge</code> 文件，打开后代码如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add altering commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.createTable(&#x27;users&#x27;, &#123; id: Sequelize.INTEGER &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add reverting commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.dropTable(&#x27;users&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>我们要做的，就是在 <code>up</code> 和 <code>down</code> 方法中填入数据库操作逻辑的代码，<code>up</code> 方法中有注释作提示，让我们返回一个类型为 <code>Promise</code> 的对象，还给出了示例。因为我们要给数据表添加字段，所以使用 <code>addColumn</code> 方法：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> queryInterface.addColumn(</span><br><span class=\"line\">    <span class=\"string\">&#x27;users&#x27;</span>,                        <span class=\"comment\">// 被添加字段的表名称</span></span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span>,                          <span class=\"comment\">// 需要添加的字段名称</span></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT,</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"number\">0</span>,</span><br><span class=\"line\">    &#125;,                              <span class=\"comment\">// 字段属性</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></figure>\n\n<p>这样我们就可以给 <code>user</code> 表添加上 <code>age</code> 字段了。</p>\n<p>p.s. 之所以代码中填写 <code>users</code> ，是因为 <code>sequelize-cli</code> 帮我们创建表是会自动给表名称加 <code>s</code> 。</p>\n<hr>\n<p>能添加就能删除，删除操作我们在 <code>down</code> 方法中编写：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">return</span> queryInterface.removeColumn(</span><br><span class=\"line\">    <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">    <span class=\"string\">&#x27;age&#x27;</span></span><br><span class=\"line\">);</span><br></pre></td></tr></table></figure>\n\n<p><code>UserAddAge.js</code> 文件完整代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add altering commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.createTable(&#x27;users&#x27;, &#123; id: Sequelize.INTEGER &#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.addColumn(</span><br><span class=\"line\">      <span class=\"string\">&#x27;users&#x27;</span>, </span><br><span class=\"line\">      <span class=\"string\">&#x27;age&#x27;</span>,</span><br><span class=\"line\">      &#123;</span><br><span class=\"line\">        type: Sequelize.TINYINT,</span><br><span class=\"line\">        allowNull: <span class=\"literal\">false</span>,</span><br><span class=\"line\">        defaultValue: <span class=\"number\">0</span>,</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add reverting commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.dropTable(&#x27;users&#x27;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.removeColumn(</span><br><span class=\"line\">      <span class=\"string\">&#x27;users&#x27;</span>,</span><br><span class=\"line\">      <span class=\"string\">&#x27;age&#x27;</span></span><br><span class=\"line\">    );</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>编写完毕后我们运行 <code>./node_modules/.bin/sequelize db:migrate</code> 来重新执行一遍所有迁移，刷新 <code>user</code> 表后就能看见新增字段 <code>age</code> 了。</p>\n<p>最后你还可以执行 <code>./node_modules/.bin/sequelize db:migrate:undo</code> 来确认 <code>down</code> 方法正常工作，从而让 <code>user</code> 表删除刚刚添加的 <code>age</code> 字段。</p>\n<p>文档参考：<a href=\"http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html\">更多 QueryInterface 操作</a></p>\n<h2 id=\"seeders\"><a href=\"#seeders\" class=\"headerlink\" title=\"seeders\"></a>seeders</h2><p>除了数据库结构的添加修改删除操作以外，我们通常还会给各种表批量添加一些假数据。这个时候就要用到 seeders 里的种子文件了。比方说现在要给 <code>user</code> 表批量添加一些数据，则可以执行下面代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize seed:create --name userTest</span><br></pre></td></tr></table></figure>\n\n\n\n<p>执行完毕后你会发现在 <code>seeders</code> 文件夹下多了一个类似 <code>20190316090425-userTest.js</code> 的文件。</p>\n<h3 id=\"批量添加\"><a href=\"#批量添加\" class=\"headerlink\" title=\"批量添加\"></a>批量添加</h3><p>我们可以在里面编写代码让 <code>cli</code> 帮助我们批量添加数据：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&#x27;use strict&#x27;</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">  up: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add altering commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.bulkInsert(&#x27;People&#x27;, [&#123;</span></span><br><span class=\"line\"><span class=\"comment\">        name: &#x27;John Doe&#x27;,</span></span><br><span class=\"line\"><span class=\"comment\">        isBetaMember: false</span></span><br><span class=\"line\"><span class=\"comment\">      &#125;], &#123;&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">      <span class=\"keyword\">return</span> queryInterface.bulkInsert(<span class=\"string\">&#x27;users&#x27;</span>, [</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          username: <span class=\"string\">&#x27;狄仁杰&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">56</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">          username: <span class=\"string\">&#x27;李元芳&#x27;</span>,</span><br><span class=\"line\">          age: <span class=\"number\">27</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      ]);</span><br><span class=\"line\">  &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">  down: <span class=\"function\">(<span class=\"params\">queryInterface, Sequelize</span>) =&gt;</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">      Add reverting commands here.</span></span><br><span class=\"line\"><span class=\"comment\">      Return a promise to correctly handle asynchronicity.</span></span><br><span class=\"line\"><span class=\"comment\"></span></span><br><span class=\"line\"><span class=\"comment\">      Example:</span></span><br><span class=\"line\"><span class=\"comment\">      return queryInterface.bulkDelete(&#x27;People&#x27;, null, &#123;&#125;);</span></span><br><span class=\"line\"><span class=\"comment\">    */</span></span><br><span class=\"line\">    <span class=\"keyword\">return</span> queryInterface.bulkDelete(<span class=\"string\">&#x27;users&#x27;</span>, <span class=\"literal\">null</span>, &#123;&#125;);</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>种子文件的执行方式有两种：</p>\n<ul>\n<li><code>db:seed 种子文件名</code> 来运行指定种子文件</li>\n<li><code>db:seed:all</code> 来运行所有种子文件</li>\n</ul>\n<p>知道执行方法后我们来运行下面命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:seed:all</span><br></pre></td></tr></table></figure>\n\n<p>执行成功后刷新我们的 <code>user</code> 表，就会发现数据已经被批量添加进去了。</p>\n<h3 id=\"批量删除\"><a href=\"#批量删除\" class=\"headerlink\" title=\"批量删除\"></a>批量删除</h3><p>命令行输入并执行： <code>./node_modules/.bin/sequelize db:seed:undo:all</code> 便可以批量删除刚刚添加进 <code>user</code> 表中的数据。</p>\n<h3 id=\"记录种子数据的存储\"><a href=\"#记录种子数据的存储\" class=\"headerlink\" title=\"记录种子数据的存储\"></a>记录种子数据的存储</h3><p>我们知道 <code>migrations</code> 迁移是会被记录的（数据库的 <code>sequelizemeta</code> 表中），但默认情况下，种子数据的存储不会被记录下来。但官方同样提供了 <a href=\"http://docs.sequelizejs.com/manual/migrations.html#seed-storage\">方法</a> 来记录种子数据的存储。我们可以通过在配置文件中使用 <code>seederStorage</code> 来记录存储：</p>\n<h4 id=\"JSON记录\"><a href=\"#JSON记录\" class=\"headerlink\" title=\"JSON记录\"></a>JSON记录</h4><blockquote>\n<p>config/config.json</p>\n</blockquote>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;development&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;seederStorage&quot;: &quot;json&quot;, // 存储类型</span><br><span class=\"line\">    &quot;seederStoragePath&quot;: &quot;userTestData.json&quot; // 存储路径（当前项目根目录下）</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 上方注释在 copy 到自己项目时需要删除，否则报错。</p>\n<p>接着我们执行 <code>./node_modules/.bin/sequelize db:seed:undo:all</code> 先删除数据表中数据，然后再执行 <code>./node_modules/.bin/sequelize db:seed:all</code> 重新添加一次种子数据。你就会发现项目根目录下多出来了一个叫做 <code>userTestData.json</code> 的文件，里面记录了已经执行过的种子文件名：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[</span><br><span class=\"line\">  <span class=\"string\">&quot;20190316090425-userTest.js&quot;</span></span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"sequelize记录\"><a href=\"#sequelize记录\" class=\"headerlink\" title=\"sequelize记录\"></a>sequelize记录</h4><p>p.s. 如果你已经用上面json记录的方式记录过种子文件的存储，再想要尝试用sequelize玩一遍的话，首先得执行一遍 <code>./node_modules/.bin/sequelize db:seed:undo:all</code> 哦。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;development&quot;: &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    &quot;seederStorage&quot;: &quot;sequelize&quot;, // 存储类型</span><br><span class=\"line\">    &quot;seederStoragePath&quot;: &quot;userTestData.json&quot;, // 存储路径（当前项目根目录下）</span><br><span class=\"line\">    &quot;seederStorageTableName&quot;: &quot;userTestData&quot; // 存储的表名</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>编写完上述代码后你可以执行下面命令：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">./node_modules/.bin/sequelize db:seed:all</span><br></pre></td></tr></table></figure>\n\n<p>执行完毕后刷新数据库，就能在数据库中发现 <code>userTestData</code> 表，里面记录了已经执行完毕的种子文件 <code>20190316090425-userTest.js</code></p>\n<h2 id=\"版本\"><a href=\"#版本\" class=\"headerlink\" title=\"版本\"></a>版本</h2><p>安装的 sequelize 和 mysql2 的版本为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dependencies&quot;: &#123;</span><br><span class=\"line\">    &quot;sequelize&quot;: &quot;^5.3.3&quot;,</span><br><span class=\"line\">    &quot;sequelize-cli&quot;: &quot;^5.4.0&quot;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"资源\"><a href=\"#资源\" class=\"headerlink\" title=\"资源\"></a>资源</h2><ul>\n<li><a href=\"http://docs.sequelizejs.com/class/lib/query-interface.js~QueryInterface.html\">QueryInterface 操作</a></li>\n</ul>"},{"title":"如何使用webpack4","abbrlink":47462,"date":"2019-02-03T16:19:26.000Z","_content":"\n## 为什么要使用 webpack\n\n### 网页中引用的常见静态资源\n\n| 类型              | 静态资源                                                     |\n| :---------------- | :----------------------------------------------------------- |\n| JS                | .js .jsx .coffee .ts（TypeScript 类 C# 语言）                |\n| CSS               | .css .less .sass .scss                                       |\n| Images            | .jpg .png .gif .bmp .svg                                     |\n| 字体文件（Fonts） | .svg .ttf .eot .woff .woff2                                  |\n| 模板文件          | .ejs .jade .vue【这是在webpack中定义组件的方式，推荐这么用】 |\n\n<!-- more -->\n\n### 引入过多静态资源有什么问题？\n\n1. 网页加载速度慢， 因此我们要发起很多的二次请求\n2. 还要处理错综复杂的依赖关系\n\n### 如何解决上述两个问题\n\n1. 合并、压缩、精灵图、图片的 Base64 编码\n2. 可以使用 requireJS、也可以使用 webpack 来解决各个包之间的复杂依赖关系\n\n### 如何完美实现上述的2种解决方案\n\n1. 使用 Gulp， 基于 task 任务\n2. 使用 webpack， 基于整个项目进行构建\n   - 借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能\n\n## 简介\n\nwebpack 是基于 Node.js 开发出来的一个前端项目打包工具。\n\n## 安装 & 初步使用\n\n1. 如果第一次安装，需要全局安装 『 webpack && webpack-cli 』:\n\n   ```shell\n   npm install -g webpack webpack-cli\n   ```\n\n2. 初始化项目\n\n   ```shell\n   # 创建文件夹\n   mkdir webpack4-demo\n   # 进入\n   cd webpack4-demo\n   # 初始化\n   npm init -y\n   ```\n\n3. 以下面的目录结构创建文件\n\n   ```shell\n   ├── package.json\n   └── src\n       ├── css\n       │   └── index.css\n       ├── images\n       │   └── temp.png\n       ├── index.html\n       ├── js\n       │   ├── a.js\n       │   ├── b.js\n       │   └── index.js\n       └── main.js\n   ```\n\n   > index.css\n\n   ```css\n   body {\n      display: flex;\n   }\n   \n   ul li {\n       box-shadow: 2px 2px 2px rgba(31, 31, 31, 0.05);\n   }\n   ```\n\n   > index.html\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n      <title>Document</title>\n   </head>\n   \n   <body>\n       <ul id=\"list\">\n          <li>1</li>\n          <li>2</li>\n          <li>3</li>\n          <li>4</li>\n       </ul>\n   </body>\n   </html>\n   ```\n\n   > js/a.js\n\n   ```js\n   import b from './b'\n   import $ from 'jquery'\n   const a = {\n      init() {\n         console.log(\"我是 a 模块，现在被初始化了\")\n      },\n      binit() {\n         b.init()\n      }\n   }\n   export default a\n   ```\n\n   > js/b.js\n\n   ```js\n   const b = {\n      init() {\n         console.log(\"我是 b 模块，现在被初始化了\")\n      }\n   }\n   export default b\n   ```\n\n   > js/index.js\n\n   ```js\n   import $ from 'jquery'\n   \n   const index = {\n      // init后执行隔行变色的代码\n      init() {\n         // 设置偶数行背景色，索引从0开始，0是偶数\n         $('#list li:even').css('backgroundColor', 'lightblue')\n         // 设置奇数行背景色\n         $('#list li:odd').css('backgroundColor', 'pink')\n      }\n   }\n   \n   export default index\n   ```\n\n   > main.js\n\n   ```js\n   import a from './js/a'\n   import b from './js/b'\n   import index from './js/index'\n   import './css/index.css'\n   \n   const main = () => {\n      console.log('入口函数 main 被调用了')\n      a.init()\n      a.binit()\n      b.init()\n      index.init()\n   }\n   main()\n   ```\n\n4. 项目根文件夹下执行命令 `npm i webpack webpack-cli -D`\n\n5. 使用 `npm i jquery` 安装 jQuery 类库\n\n6. 直接在页面上引用 `main.js` 会报错，因为浏览器不认识 `import $ from 'jquery'` 这种JS语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法：\n\n   ```html\n   <ul id=\"list\">\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n      <li>4</li>\n   </ul>\n   <!-- 直接引入会报错 -->\n   <script src=\"./main.js\"></script>\n   ```\n\n7. 运行 `webpack 入口文件路径 模式` 运行 `main.js` 入口文件：\n\n   ```shell\n   webpack src/main.js --mode development # 开发环境\n   或者\n   webpack src/main.js --mode production  # 生产环境\n   ```\n\n8. 不过每次都要输入这个命令，非常麻烦，我们可以在`package.json`的`scripts`中加入两个指令成员：\n\n   ```json\n   \"scripts\": {\n      \"dev\": \"webpack src/main.js --mode development\",\n      \"build\": \"webpack src/main.js --mode production\"\n   },\n   ```\n\n   以后只需要在命令行执行 `npm run dev` 便相当于执行 `webpack --mode development` ，执行 `npm run build` 便相当于执行 `webpack --mode production`。\n\n## 使用配置文件简化打包命令\n\n1. 在项目根目录中创建 `webpack.config.js`\n\n2. 由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以我们需要在 `webpack.config.js` 中配置这两个路径：\n\n   ```js\n   // 导入处理路径的模块\n   const path = require('path')\n   \n   // 导出一个配置对象，将来 webpack 在启动的时候，\n   // 会默认来查找 webpack.config.js ，\n   // 并读取这个文件中导出的配置对象，来进行打包处理\n   module.exports = {\n      // 配置入口文件，表示要使用 webpack 打包哪个文件\n      // 若不配置 webpack 将自动查找 src 目录下的 index.js 文件\n      entry: {\n         main: path.join(__dirname, './src/main.js')\n      },\n      output: {\n         filename: \"[name].bundle.[hash].js\", //输出文件名，[name]表示入口文件js名，[hash]会在后面生成随机hash值\n         path: path.join(__dirname, \"./dist\") //输出文件路径\n      }\n   }\n   ```\n\n3. 由于此时已经配置了入口文件，`package.json` 中的脚本命令就可简化为：\n\n   ```json\n   \"dev\": \"webpack --mode development\",\n   \"build\": \"webpack --mode production\"\n   ```\n\n## 实现 webpack 实时打包构建\n\nwebpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的插件，叫做 `webpack-dev-server` ，在 webpack 中进行配置之前需要单独安装它作为项目依赖。\n\ndevServer 作为 webpack 配置选项中的一项，以下是它的一些配置选项:\n\n- `contentBase` ：设置服务器所读取文件的目录，当前我们设置为”./dist”\n- `port` ：设置端口号，如果省略，默认为`8080`\n- `inline` ：设置为`true`，当源文件改变时会自动刷新页面\n- `historyApiFallback` ：设置为`true`，所有的跳转将指向`index.html`\n\n1. 由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 `webpack-dev-server` 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。\n\n2. 运行 `npm i webpack-dev-server -D` 安装到开发依赖\n\n3. 安装完成之后，修改之前在 `package.json` 中添加的 dev 指令：\n\n   ```json\n   \"dev\": \"webpack-dev-server --mode development\"\n   ```\n\n4. 运行指令 `npm run dev` ，发现可以进行实时打包，但是 dist 目录下并没有生成 `main.bundle.js` 文件，这是因为 `webpack-dev-server` 将打包好的文件放在了内存中。\n\n   - 把 `bundle.js` 放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快\n\n   - 这个时候访问 webpack-dev-server 启动的 `http://localhost:8080/` 网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 `main.bundle.js` 文件，需要修改 index.html 中 script 的 src 属性为:`<script src=\"../main.bundle.js\"></script>`\n\n   - 为了能在访问 `http://localhost:8080/` 的时候直接访问到 index 首页，可以使用 `--contentBase src` 指令来修改dev指令，指定启动的根目录：\n\n     ```json\n     \"dev\": \"webpack-dev-server --mode development --contentBase src\",\n     ```\n\n## 插件（Plugins）\n\n插件（Plugins）是用来拓展 webpack 功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders 和 Plugins 常常被弄混，但是它们其实是完全不同的东西，可以这么来说，loaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n### 使用 `html-webpack-plugin` 插件配置启动页面\n\n由于使用 `--contentBase` 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐使用 `html-webpack-plugin` 插件配置启动页面。\n\n1. 运行 `npm i html-webpack-plugin -D` 安装到开发依赖\n\n2. 修改 `webpack.config.js` 配置文件如下：\n\n   ```js\n   // 导入处理路径的模块\n   const path = require('path')\n   // 导入自动生成HTMl文件的插件\n   const htmlWebpackPlugin = require('html-webpack-plugin')\n   \n   // 导出一个配置对象，将来 webpack 在启动的时候，\n   // 会默认来查找 webpack.config.js ，\n   // 并读取这个文件中导出的配置对象，来进行打包处理\n   module.exports = {\n       // 配置入口文件，表示要使用 webpack 打包哪个文件\n       // 若不配置 webpack 将自动查找 src 目录下的 index.js 文件\n       entry: {\n           main: path.join(__dirname, './src/main.js')\n       },\n       output: {\n           filename: \"[name].bundle.js\", //输出文件名，[name]表示入口文件js名\n           path: path.join(__dirname, \"./dist\") //输出文件路径\n       },\n       plugins: [ // 添加plugins节点配置插件\n           new htmlWebpackPlugin({\n               template: path.join(__dirname, './src/index.html'), //模板路径\n               filename: 'index.html', //自动生成的HTML文件的名称\n               minify: { // 压缩HTML文件\n                  removeComments: true, // 移除HTML中的注释\n                  collapseWhitespace: true, // 删除空白符与换行符\n                  minifyCSS: true // 压缩内联css\n               },\n           })\n       ]\n   }\n   ```\n\n3. 撤销 `package.json` 中 `script` 节点中的 dev 指令为：\n   `dev\": \"webpack-dev-server --mode development\"`\n\n4. 将 index.html 中 script 标签注释掉，因为 `html-webpack-plugin` 插件会自动把 main.bundle.js 注入到 index.html 页面中。\n\n### 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n\n#### 方式1：\n\n修改 `package.json` 的 script 节点如下，其中 `--open` 表示自动打开浏览器， `--port 4321` 表示打开的端口号为 4321 ，`--hot` 表示启用浏览器热更新：\n\n```json\n\"dev\": \"webpack-dev-server --open --port 4321 --hot  --mode development\",\n```\n\n#### 方式2：(个人推荐)\n\n1. 修改 `webpack.config.js` 文件，新增 `devServer` 节点如下：\n\n   ```js\n   devServer: {\n        inline: true, //打包后加入一个 websocket 客户端\n        hot: true, // 启用热更新 的 第1步\n        open: true, // 自动打开浏览器\n        contentBase: path.resolve(__dirname, 'dist'), // 指定托管的根目录，不注释的话，无法访问 src 以外的资源，比如 node_modules\n        host: 'localhost', // 主机地址\n        port: 4321, // 设置启动时候的运行端口\n        compress: true // 开发服务器是否启动gzip等压缩\n    },\n   ```\n\n2. 在头部引入 `webpack` 模块：\n\n   ```js\n   // 启用热更新的 第2步\n   const webpack = require('webpack')\n   ```\n\n3. 在 `plugins` 节点下新增：\n\n   ```js\n   // 启用热更新的第 3 步\n   new webpack.HotModuleReplacementPlugin()\n   ```\n\n## Loaders\n\nloaders 是 webpack 最强大的功能之一，通过不同的 loader ，webpack 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，例如把 `scss` 转为 `css` ，将 ES6 、ES7 等语法转化为当前浏览器能识别的语法，将 JSX 转化为 js 等多项功能。\n\nloaders 需要单独安装并且需要在 `webpack.config.js` 中的 `modules` 配置项下进行配置，Loaders的配置包括以下几方面：\n\n- `test`：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `options`：为loaders提供额外的设置选项（可选）\n\n### 打包 css 文件\n\n1. 运行`npm i style-loader css-loader --D`\n\n2. 修改 `webpack.config.js` 这个配置文件：\n\n   ```js\n   module: { // 用来配置第三方loader模块的\n       rules: [ // 文件的匹配规则\n           {\n               test: /\\.css$/,\n               use: ['style-loader', 'css-loader']\n           } //处理css文件的规则\n       ]\n   },\n   ```\n\n3. 注意：`use` 表示使用哪些模块来处理 `test` 所匹配到的文件；`use` 中相关 loader 模块的调用顺序是从后向前调用的。\n\n### 打包 less 文件\n\n1. 如果你习惯使用 less ，可以执行命令 `npm i less-loader less -D` 来安装 less-loader 。\n\n2. 修改 `webpack.config.js` 配置文件：\n\n   ```js\n   {\n       test: /\\.less$/,\n       use: ['style-loader', 'css-loader', 'less-loader']\n   }, //配置处理 .less 文件的第三方 loader 规则\n   ```\n\n### 打包 sass 文件\n\n1. 例如我平常习惯用 scss，所以会安装 sass-loader ：执行命令 `npm i sass-loader node-sass --D`\n\n2. 在 `webpack.config.js` 中添加处理 sass 文件的 loader 模块：\n\n   ```js\n   {\n      test: /\\.scss$/,\n      use: ['style-loader', 'css-loader', 'sass-loader']\n   },\n   // 配置处理 .scss 文件的 第三方 loader 规则（npm i sass-loader后还需要 npm i node-sass，否则编译报错）\n   ```\n\n### 处理 css 中的图片路径\n\n> 预备工作：\n>\n> 1. 在 src/css/index.css 文件中给 body 添加：background-image: url(“../images/temp.png”);\n> 2. 此时保存会编译报错，因为 webpack 无法处理 css 中的路径（此案例中为——图片资源）\n\n1. 运行 `npm i url-loader file-loader --D`\n\n2. 在 `webpack.config.js` 中添加处理 url 路径的 loader 模块：\n\n   ```js\n   {\n       test: /\\.(jpg|png|bmp|gif|jpeg)$/,\n       use:[{\n          loader:'url-loader',\n          options:{\n             outputPath:'images/',//输出到images文件夹\n             //是把小于500B的文件打成 Base64 的格式，写入JS\n             // 如果不小于，url-loader 就会使用 file-loader 处理图片\n             // 所以必须安装file-loader\n             limit:500\n          }\n       }]\n   }, // 配置图片路径\n   ```\n\n### 处理 Bootstrap 字体的加载\n\n**重要(更新)**：webpack4后的 bootstrap 字体加载已经不能使用下面该方法，如何使用可以参考这篇博客：[webpack 4.X版本的简单使用(处理js/css/less/scss/url(图片)/字体文件)](https://blog.csdn.net/hyt941026/article/details/82870466)\n\n> 预备工作：\n>\n> index.html 写入\n>\n> \n>\n> 来展示字体图片\n>\n> \n>\n> main.js 导入 import ‘bootstrap/dist/css/bootstrap.css’\n>\n> 此时报错\n\n在 `webpack.config.js` 中添加处理字体文件的 loader 模块：\n\n```js\n{\n    test: /\\.(ttf|eot|svg|woff|woff2)$/,\n    use: 'url-loader'\n}, // 处理 字体文件的 loader\n```\n\n### 提取css文件（插件！）\n\n先安装 mini-css-extract-plugin 包：\n\n```shell\nnpm install mini-css-extract-plugin -D\n```\n\n然后在 `webpack.config.js` 中修改对css文件处理的配置：\n\n```js\n// 提取css\nvar MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\n\nrules: [\n    {\n        test: /\\.css$/,\n        use: [\n            process.env.NODE_ENV === 'development' ? 'style-loader' : MiniCssExtractPlugin.loader,\n            'css-loader'] //处理css\n    },\n    ...\n]\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: 'style.css'\n    }),\n    ...\n]\n```\n\n### 添加浏览器css前缀\n\n首先下载 loader ：\n\n```shell\nnpm i postcss-loader autoprefixer -D\n```\n\n然后根目录添加 `postcss.config.js`\n\n```js\nmodule.exports = {\n    plugins: {\n        'autoprefixer': {\n            browsers: 'last 5 version' // 代表意思为每个主流浏览器的最后5个版本\n        }\n    }\n}\n```\n\n最后在 `webpack.config.js` 中添加配置：\n\n```js\nrules: [\n    {\n        test: /\\.css$/,\n        use: [\n            process.env.NODE_ENV === 'development' ? 'style-loader' : MiniCssExtractPlugin.loader,\n            {\n                loader: 'css-loader',\n                options: {\n                    importLoaders: 1\n                }\n            },\n            \"postcss-loader\"\n        ] //处理css\n    },\n    ...\n]\n```\n\n### 使用 babel 处理高级 JS 语法\n\n1. 在 main.js 文件中添加 ES6 代码：\n\n   ```js\n   // class 关键字，是ES6中提供的新语法，是用来 实现 ES6 中面向对象编程的方式\n   class Person {\n       // 使用 static 关键字，可以定义静态属性\n       // 所谓的静态属性，就是 可以直接通过 类名， 直接访问的属性\n       // 实例属性： 只能通过类的实例，来访问的属性，叫做实例属性\n       static info = {\n           name: 'zs',\n           age: 20\n       }\n   }\n   \n   // 访问 Person 类身上的  info 静态属性\n   console.log(Person.info)\n   // 在 webpack 中，默认只能处理 一部分 ES6 的新语法，一些更高级的ES6语法或者 ES7 语法，webpack 是处理不了的；这时候，就需要 借助于第三方的 loader，来帮助webpack 处理这些高级的语法，当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中\n   // 通过 Babel ，可以帮我们将 高级的语法转换为 低级的语法\n   ```\n\n2. 运行如下两套命令，安装两套包，去安装 Babel 相关的loader功能：\n\n   ```shell\n   // 【相当于转换工具】\n   npm i -D @babel/core babel-loader @babel/plugin-transform-runtime @babel/runtime @babel/plugin-proposal-class-properties\n   // 【相当于字典】\n   npm i -D @babel/preset-env\n   \n   // =====> 「转换工具」根据「字典」将 es6 转换\n   ```\n\n3. 打开 webpack 的配置文件，在 module 节点下的 rules 数组中，添加一个新的匹配规则：\n\n   ```js\n   {\n       test: /\\.js$/,\n       use: 'babel-loader',\n       exclude: /node_modules/\n   } // 配置 Babel 来转换高级的ES语法\n   ```\n\n   > 2.2\n   >\n   > 注意： 在配置 babel 的 loader 规则的时候，必须 把 node_modules 目录，通过 exclude 选项排除掉：原因有俩：\n   >\n   > 2.2.1\n   >\n   > 如果 不排除 node_modules， 则Babel 会把 node_modules 中所有的 第三方 JS 文件，都打包编译，这样，会非常消耗CPU，同时，打包速度非常慢；\n   >\n   > 2.2.2\n   >\n   > 哪怕，最终，Babel 把 所有 node_modules 中的JS转换完毕了，但是，项目也无法正常运行！\n\n4. 在项目的根目录中，新建一个叫做 `.babelrc` 的 Babel 配置文件，这个配置文件，属于 JSON 格式，所以，在写 `.babelrc` 配置的时候，必须符合 JSON 语法规范： 不能写注释，字符串必须用双引号：\n\n   ```js\n   {\n       \"presets\": [\n           [\"@babel/preset-env\", {\n               \"modules\": false,\n               \"targets\": {\n                   \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <= 8\"]\n               },\n               \"useBuiltIns\": \"usage\"\n           }]\n       ],\n       \"plugins\": [\n           \"@babel/plugin-transform-runtime\",\n           \"@babel/plugin-proposal-class-properties\"\n       ]\n   }\n   ```\n\n#### [webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’问题](https://www.cnblogs.com/soyxiaobi/p/9554565.html)\n\n> **官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel**\n\n两种解决方案:\n\n1. 回退低版本\n\n```shell\nnpm install -D babel-loader@7 babel-core babel-preset-env\n```\n\n1. 更新到最高版本:\n\n```shell\nnpm install -D babel-loader @babel/core @babel/preset-env webpack\n```\n\n## 压缩和优化css文件\n\n下载 `optimize-css-assets-webpack-plugin` 插件：\n\n```shell\nnpm i optimize-css-assets-webpack-plugin -D\n```\n\n在 `webpack.config.js` 中引入插件并添加配置：\n\n```js\n// 压缩css\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n\nplugins: [\n    new OptimizeCssAssetsPlugin({\n        assetNameRegExp: /\\.css$/g, //一个正则表达式，指示应优化/最小化的资产的名称。提供的正则表达式针对配置中ExtractTextPlugin实例导出的文件的文件名运行，而不是源CSS文件的文件名。默认为/\\.css$/g\n        cssProcessor: require('cssnano'), //用于优化\\最小化CSS的CSS处理器，默认为cssnano\n        cssProcessorOptions: {\n            safe: true,\n            discardComments: {\n                removeAll: true\n            }\n        }, //传递给cssProcessor的选项，默认为{}\n        canPrint: true //一个布尔值，指示插件是否可以将消息打印到控制台，默认为true\n    }),\n]\n```\n\n## 压缩和优化js文件\n\n```js\nyarn add webpack-parallel-uglify-plugin -D\nconst WebpackParallelUglifyPlugin = require('webpack-parallel-uglify-plugin')\nplugins: [\nnew WebpackParallelUglifyPlugin({\n      uglifyJS: {\n        output: {\n          beautify: false, //不需要格式化\n          comments: false //不保留注释\n        },\n        compress: {\n          warnings: false, // 在UglifyJs删除没有用到的代码时不输出警告\n          drop_console: true, // 删除所有的 `console` 语句，可以兼容ie浏览器\n          collapse_vars: true, // 内嵌定义了但是只用到一次的变量\n          reduce_vars: true // 提取出出现多次但是没有定义成变量去引用的静态值\n        }\n      }\n    })\n]\n```\n\n## 提取公共文件\n\n我们可看到 `src/js/a.js` 和 `src/main.js` 都引入了 `src/js/b.js` 文件，为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。和之前的 webpack 配置不一样：\n\n```js\n//之前配置\n// new webpack.optimize.SplitChunksPlugin({\n//     name: 'common', // 如果还要提取公共代码,在新建一个实例\n//     minChunks: 2, //重复两次之后就提取出来\n//     chunks: ['index', 'a'] // 指定提取范围\n// }),\n//现在配置\noptimization: {\n    splitChunks: {\n        cacheGroups: {\n            commons: {  // 抽离自己写的公共代码\n                chunks: \"initial\",\n                name: \"common\", // 打包后的文件名，任意命名\n                minChunks: 2,//最小引用2次\n                minSize: 0 // 只要超出0字节就生成一个新包\n            },\n            vendor: {   // 抽离第三方插件\n                test: /node_modules/,   // 指定是node_modules下的第三方包\n                chunks: 'initial',\n                name: 'vendor',  // 打包后的文件名，任意命名\n                // 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包\n                priority: 10\n            },\n        }\n    }\n},\n```\n\n## Source Maps 调试配置\n\n作为开发，代码调试当然少不了，那么问题来了，经过打包后的文件，你是不容易找到出错的地方的，`Source Map`就是用来解决这个问题的。\n\n通过如下配置，我们会在打包时生成对应于打包文件的 `.map` 文件，使得编译后的代码可读性更高，更易于调试。\n\n```js\n// webpack.config.js\n...\nmodule.exports = {\n    ...\n    devtool: 'source-map' // 会生成对于调试的完整的.map文件，但同时也会减慢打包速度\n}\n```\n\n配置好后，我们再次运行 `npm run build` 进行打包，这时我们会发现在 `dist` 文件夹中多出了一个 `bundle.js.map`\n\n如果我们的代码有 bug ，在浏览器的调试工具中会提示错误出现的位置，这就是 `devtool: 'source-map'` 配置项的作用。\n\n## 开发环境 VS 生产环境\n\n### npm run dev\n\n**npm run dev** 是我们开发环境下打包的文件，当然由于 devServer 帮我们把文件放到内存中了，所以并不会输出打包后的 dist 文件夹。\n\n### npm run build\n\n通过 **npm run build** 之后会生成一个dist目录文件夹，里面有我们打包后的文件。\n\n## 清理`/dist`文件夹(CleanwebpackPlugin)\n\n你可能已经注意到，在我们删掉 `/dist` 文件夹之前，由于前面的代码示例遗留，导致我们的 `/dist` 文件夹比较杂乱。`webpack` 会生成文件，然后将这些文件放置在 `/dist` 文件夹中，但是 `webpack` 无法追踪到哪些文件是实际在项目中用到的。\n\n通常，在每次构建前清理 `/dist` 文件夹，是比较推荐的做法，因此只会生成用到的文件，这时候就用到 `CleanWebpackPlugin` 插件了。\n\n```js\nnpm i clean-webpack-plugin -D\n// webpack.config.js\n...\nconst CleanWebpackPlugin = require('clean-webpack-plugin'); // 引入CleanWebpackPlugin插件\n\nmodule.exports = {\n    ...\n    plugins: [\n        ...\n        new CleanWebpackPlugin(),  // 以前括号里面要传入数组([dist])来指定要删除的目录，新版 CleanWebpackPlugin 不需要传任何参数了\n    ]\n}\n```\n\n插件的使用方法都是一样的，首先引入，然后new一个实例，实例可传入参数。\n\n现在我们运行 `npm run build` 后就会发现，webpack 会先将 `/dist` 文件夹删除，然后再生产新的 `/dist` 文件夹。\n\n## webpack4.x 相关资源\n\n- **[webpack4.x最详细入门讲解](https://www.cnblogs.com/BetterMan-/p/9867642.html)**\n- [从基础到实战 手摸手带你掌握新版Webpack4.0详解 教你看文档](https://segmentfault.com/a/1190000018866232)\n\n## webpack3 与 webpack4 使用差异\n\n- [webpack4.x开发环境配置](https://blog.csdn.net/u012443286/article/details/79504289)\n","source":"_posts/如何使用webpack4.md","raw":"---\ntitle: 如何使用webpack4\ntags:\n  - Webpack\ncategories:\n  - 前端\n  - 构建工具\nabbrlink: 47462\ndate: 2019-02-04 00:19:26\n---\n\n## 为什么要使用 webpack\n\n### 网页中引用的常见静态资源\n\n| 类型              | 静态资源                                                     |\n| :---------------- | :----------------------------------------------------------- |\n| JS                | .js .jsx .coffee .ts（TypeScript 类 C# 语言）                |\n| CSS               | .css .less .sass .scss                                       |\n| Images            | .jpg .png .gif .bmp .svg                                     |\n| 字体文件（Fonts） | .svg .ttf .eot .woff .woff2                                  |\n| 模板文件          | .ejs .jade .vue【这是在webpack中定义组件的方式，推荐这么用】 |\n\n<!-- more -->\n\n### 引入过多静态资源有什么问题？\n\n1. 网页加载速度慢， 因此我们要发起很多的二次请求\n2. 还要处理错综复杂的依赖关系\n\n### 如何解决上述两个问题\n\n1. 合并、压缩、精灵图、图片的 Base64 编码\n2. 可以使用 requireJS、也可以使用 webpack 来解决各个包之间的复杂依赖关系\n\n### 如何完美实现上述的2种解决方案\n\n1. 使用 Gulp， 基于 task 任务\n2. 使用 webpack， 基于整个项目进行构建\n   - 借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能\n\n## 简介\n\nwebpack 是基于 Node.js 开发出来的一个前端项目打包工具。\n\n## 安装 & 初步使用\n\n1. 如果第一次安装，需要全局安装 『 webpack && webpack-cli 』:\n\n   ```shell\n   npm install -g webpack webpack-cli\n   ```\n\n2. 初始化项目\n\n   ```shell\n   # 创建文件夹\n   mkdir webpack4-demo\n   # 进入\n   cd webpack4-demo\n   # 初始化\n   npm init -y\n   ```\n\n3. 以下面的目录结构创建文件\n\n   ```shell\n   ├── package.json\n   └── src\n       ├── css\n       │   └── index.css\n       ├── images\n       │   └── temp.png\n       ├── index.html\n       ├── js\n       │   ├── a.js\n       │   ├── b.js\n       │   └── index.js\n       └── main.js\n   ```\n\n   > index.css\n\n   ```css\n   body {\n      display: flex;\n   }\n   \n   ul li {\n       box-shadow: 2px 2px 2px rgba(31, 31, 31, 0.05);\n   }\n   ```\n\n   > index.html\n\n   ```html\n   <!DOCTYPE html>\n   <html lang=\"en\">\n   <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n      <title>Document</title>\n   </head>\n   \n   <body>\n       <ul id=\"list\">\n          <li>1</li>\n          <li>2</li>\n          <li>3</li>\n          <li>4</li>\n       </ul>\n   </body>\n   </html>\n   ```\n\n   > js/a.js\n\n   ```js\n   import b from './b'\n   import $ from 'jquery'\n   const a = {\n      init() {\n         console.log(\"我是 a 模块，现在被初始化了\")\n      },\n      binit() {\n         b.init()\n      }\n   }\n   export default a\n   ```\n\n   > js/b.js\n\n   ```js\n   const b = {\n      init() {\n         console.log(\"我是 b 模块，现在被初始化了\")\n      }\n   }\n   export default b\n   ```\n\n   > js/index.js\n\n   ```js\n   import $ from 'jquery'\n   \n   const index = {\n      // init后执行隔行变色的代码\n      init() {\n         // 设置偶数行背景色，索引从0开始，0是偶数\n         $('#list li:even').css('backgroundColor', 'lightblue')\n         // 设置奇数行背景色\n         $('#list li:odd').css('backgroundColor', 'pink')\n      }\n   }\n   \n   export default index\n   ```\n\n   > main.js\n\n   ```js\n   import a from './js/a'\n   import b from './js/b'\n   import index from './js/index'\n   import './css/index.css'\n   \n   const main = () => {\n      console.log('入口函数 main 被调用了')\n      a.init()\n      a.binit()\n      b.init()\n      index.init()\n   }\n   main()\n   ```\n\n4. 项目根文件夹下执行命令 `npm i webpack webpack-cli -D`\n\n5. 使用 `npm i jquery` 安装 jQuery 类库\n\n6. 直接在页面上引用 `main.js` 会报错，因为浏览器不认识 `import $ from 'jquery'` 这种JS语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法：\n\n   ```html\n   <ul id=\"list\">\n      <li>1</li>\n      <li>2</li>\n      <li>3</li>\n      <li>4</li>\n   </ul>\n   <!-- 直接引入会报错 -->\n   <script src=\"./main.js\"></script>\n   ```\n\n7. 运行 `webpack 入口文件路径 模式` 运行 `main.js` 入口文件：\n\n   ```shell\n   webpack src/main.js --mode development # 开发环境\n   或者\n   webpack src/main.js --mode production  # 生产环境\n   ```\n\n8. 不过每次都要输入这个命令，非常麻烦，我们可以在`package.json`的`scripts`中加入两个指令成员：\n\n   ```json\n   \"scripts\": {\n      \"dev\": \"webpack src/main.js --mode development\",\n      \"build\": \"webpack src/main.js --mode production\"\n   },\n   ```\n\n   以后只需要在命令行执行 `npm run dev` 便相当于执行 `webpack --mode development` ，执行 `npm run build` 便相当于执行 `webpack --mode production`。\n\n## 使用配置文件简化打包命令\n\n1. 在项目根目录中创建 `webpack.config.js`\n\n2. 由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以我们需要在 `webpack.config.js` 中配置这两个路径：\n\n   ```js\n   // 导入处理路径的模块\n   const path = require('path')\n   \n   // 导出一个配置对象，将来 webpack 在启动的时候，\n   // 会默认来查找 webpack.config.js ，\n   // 并读取这个文件中导出的配置对象，来进行打包处理\n   module.exports = {\n      // 配置入口文件，表示要使用 webpack 打包哪个文件\n      // 若不配置 webpack 将自动查找 src 目录下的 index.js 文件\n      entry: {\n         main: path.join(__dirname, './src/main.js')\n      },\n      output: {\n         filename: \"[name].bundle.[hash].js\", //输出文件名，[name]表示入口文件js名，[hash]会在后面生成随机hash值\n         path: path.join(__dirname, \"./dist\") //输出文件路径\n      }\n   }\n   ```\n\n3. 由于此时已经配置了入口文件，`package.json` 中的脚本命令就可简化为：\n\n   ```json\n   \"dev\": \"webpack --mode development\",\n   \"build\": \"webpack --mode production\"\n   ```\n\n## 实现 webpack 实时打包构建\n\nwebpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的插件，叫做 `webpack-dev-server` ，在 webpack 中进行配置之前需要单独安装它作为项目依赖。\n\ndevServer 作为 webpack 配置选项中的一项，以下是它的一些配置选项:\n\n- `contentBase` ：设置服务器所读取文件的目录，当前我们设置为”./dist”\n- `port` ：设置端口号，如果省略，默认为`8080`\n- `inline` ：设置为`true`，当源文件改变时会自动刷新页面\n- `historyApiFallback` ：设置为`true`，所有的跳转将指向`index.html`\n\n1. 由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 `webpack-dev-server` 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。\n\n2. 运行 `npm i webpack-dev-server -D` 安装到开发依赖\n\n3. 安装完成之后，修改之前在 `package.json` 中添加的 dev 指令：\n\n   ```json\n   \"dev\": \"webpack-dev-server --mode development\"\n   ```\n\n4. 运行指令 `npm run dev` ，发现可以进行实时打包，但是 dist 目录下并没有生成 `main.bundle.js` 文件，这是因为 `webpack-dev-server` 将打包好的文件放在了内存中。\n\n   - 把 `bundle.js` 放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快\n\n   - 这个时候访问 webpack-dev-server 启动的 `http://localhost:8080/` 网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 `main.bundle.js` 文件，需要修改 index.html 中 script 的 src 属性为:`<script src=\"../main.bundle.js\"></script>`\n\n   - 为了能在访问 `http://localhost:8080/` 的时候直接访问到 index 首页，可以使用 `--contentBase src` 指令来修改dev指令，指定启动的根目录：\n\n     ```json\n     \"dev\": \"webpack-dev-server --mode development --contentBase src\",\n     ```\n\n## 插件（Plugins）\n\n插件（Plugins）是用来拓展 webpack 功能的，它们会在整个构建过程中生效，执行相关的任务。\nLoaders 和 Plugins 常常被弄混，但是它们其实是完全不同的东西，可以这么来说，loaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。\n\n### 使用 `html-webpack-plugin` 插件配置启动页面\n\n由于使用 `--contentBase` 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐使用 `html-webpack-plugin` 插件配置启动页面。\n\n1. 运行 `npm i html-webpack-plugin -D` 安装到开发依赖\n\n2. 修改 `webpack.config.js` 配置文件如下：\n\n   ```js\n   // 导入处理路径的模块\n   const path = require('path')\n   // 导入自动生成HTMl文件的插件\n   const htmlWebpackPlugin = require('html-webpack-plugin')\n   \n   // 导出一个配置对象，将来 webpack 在启动的时候，\n   // 会默认来查找 webpack.config.js ，\n   // 并读取这个文件中导出的配置对象，来进行打包处理\n   module.exports = {\n       // 配置入口文件，表示要使用 webpack 打包哪个文件\n       // 若不配置 webpack 将自动查找 src 目录下的 index.js 文件\n       entry: {\n           main: path.join(__dirname, './src/main.js')\n       },\n       output: {\n           filename: \"[name].bundle.js\", //输出文件名，[name]表示入口文件js名\n           path: path.join(__dirname, \"./dist\") //输出文件路径\n       },\n       plugins: [ // 添加plugins节点配置插件\n           new htmlWebpackPlugin({\n               template: path.join(__dirname, './src/index.html'), //模板路径\n               filename: 'index.html', //自动生成的HTML文件的名称\n               minify: { // 压缩HTML文件\n                  removeComments: true, // 移除HTML中的注释\n                  collapseWhitespace: true, // 删除空白符与换行符\n                  minifyCSS: true // 压缩内联css\n               },\n           })\n       ]\n   }\n   ```\n\n3. 撤销 `package.json` 中 `script` 节点中的 dev 指令为：\n   `dev\": \"webpack-dev-server --mode development\"`\n\n4. 将 index.html 中 script 标签注释掉，因为 `html-webpack-plugin` 插件会自动把 main.bundle.js 注入到 index.html 页面中。\n\n### 实现自动打开浏览器、热更新和配置浏览器的默认端口号\n\n#### 方式1：\n\n修改 `package.json` 的 script 节点如下，其中 `--open` 表示自动打开浏览器， `--port 4321` 表示打开的端口号为 4321 ，`--hot` 表示启用浏览器热更新：\n\n```json\n\"dev\": \"webpack-dev-server --open --port 4321 --hot  --mode development\",\n```\n\n#### 方式2：(个人推荐)\n\n1. 修改 `webpack.config.js` 文件，新增 `devServer` 节点如下：\n\n   ```js\n   devServer: {\n        inline: true, //打包后加入一个 websocket 客户端\n        hot: true, // 启用热更新 的 第1步\n        open: true, // 自动打开浏览器\n        contentBase: path.resolve(__dirname, 'dist'), // 指定托管的根目录，不注释的话，无法访问 src 以外的资源，比如 node_modules\n        host: 'localhost', // 主机地址\n        port: 4321, // 设置启动时候的运行端口\n        compress: true // 开发服务器是否启动gzip等压缩\n    },\n   ```\n\n2. 在头部引入 `webpack` 模块：\n\n   ```js\n   // 启用热更新的 第2步\n   const webpack = require('webpack')\n   ```\n\n3. 在 `plugins` 节点下新增：\n\n   ```js\n   // 启用热更新的第 3 步\n   new webpack.HotModuleReplacementPlugin()\n   ```\n\n## Loaders\n\nloaders 是 webpack 最强大的功能之一，通过不同的 loader ，webpack 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，例如把 `scss` 转为 `css` ，将 ES6 、ES7 等语法转化为当前浏览器能识别的语法，将 JSX 转化为 js 等多项功能。\n\nloaders 需要单独安装并且需要在 `webpack.config.js` 中的 `modules` 配置项下进行配置，Loaders的配置包括以下几方面：\n\n- `test`：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）\n- `loader`：loader的名称（必须）\n- `include/exclude`：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；\n- `options`：为loaders提供额外的设置选项（可选）\n\n### 打包 css 文件\n\n1. 运行`npm i style-loader css-loader --D`\n\n2. 修改 `webpack.config.js` 这个配置文件：\n\n   ```js\n   module: { // 用来配置第三方loader模块的\n       rules: [ // 文件的匹配规则\n           {\n               test: /\\.css$/,\n               use: ['style-loader', 'css-loader']\n           } //处理css文件的规则\n       ]\n   },\n   ```\n\n3. 注意：`use` 表示使用哪些模块来处理 `test` 所匹配到的文件；`use` 中相关 loader 模块的调用顺序是从后向前调用的。\n\n### 打包 less 文件\n\n1. 如果你习惯使用 less ，可以执行命令 `npm i less-loader less -D` 来安装 less-loader 。\n\n2. 修改 `webpack.config.js` 配置文件：\n\n   ```js\n   {\n       test: /\\.less$/,\n       use: ['style-loader', 'css-loader', 'less-loader']\n   }, //配置处理 .less 文件的第三方 loader 规则\n   ```\n\n### 打包 sass 文件\n\n1. 例如我平常习惯用 scss，所以会安装 sass-loader ：执行命令 `npm i sass-loader node-sass --D`\n\n2. 在 `webpack.config.js` 中添加处理 sass 文件的 loader 模块：\n\n   ```js\n   {\n      test: /\\.scss$/,\n      use: ['style-loader', 'css-loader', 'sass-loader']\n   },\n   // 配置处理 .scss 文件的 第三方 loader 规则（npm i sass-loader后还需要 npm i node-sass，否则编译报错）\n   ```\n\n### 处理 css 中的图片路径\n\n> 预备工作：\n>\n> 1. 在 src/css/index.css 文件中给 body 添加：background-image: url(“../images/temp.png”);\n> 2. 此时保存会编译报错，因为 webpack 无法处理 css 中的路径（此案例中为——图片资源）\n\n1. 运行 `npm i url-loader file-loader --D`\n\n2. 在 `webpack.config.js` 中添加处理 url 路径的 loader 模块：\n\n   ```js\n   {\n       test: /\\.(jpg|png|bmp|gif|jpeg)$/,\n       use:[{\n          loader:'url-loader',\n          options:{\n             outputPath:'images/',//输出到images文件夹\n             //是把小于500B的文件打成 Base64 的格式，写入JS\n             // 如果不小于，url-loader 就会使用 file-loader 处理图片\n             // 所以必须安装file-loader\n             limit:500\n          }\n       }]\n   }, // 配置图片路径\n   ```\n\n### 处理 Bootstrap 字体的加载\n\n**重要(更新)**：webpack4后的 bootstrap 字体加载已经不能使用下面该方法，如何使用可以参考这篇博客：[webpack 4.X版本的简单使用(处理js/css/less/scss/url(图片)/字体文件)](https://blog.csdn.net/hyt941026/article/details/82870466)\n\n> 预备工作：\n>\n> index.html 写入\n>\n> \n>\n> 来展示字体图片\n>\n> \n>\n> main.js 导入 import ‘bootstrap/dist/css/bootstrap.css’\n>\n> 此时报错\n\n在 `webpack.config.js` 中添加处理字体文件的 loader 模块：\n\n```js\n{\n    test: /\\.(ttf|eot|svg|woff|woff2)$/,\n    use: 'url-loader'\n}, // 处理 字体文件的 loader\n```\n\n### 提取css文件（插件！）\n\n先安装 mini-css-extract-plugin 包：\n\n```shell\nnpm install mini-css-extract-plugin -D\n```\n\n然后在 `webpack.config.js` 中修改对css文件处理的配置：\n\n```js\n// 提取css\nvar MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\n\nrules: [\n    {\n        test: /\\.css$/,\n        use: [\n            process.env.NODE_ENV === 'development' ? 'style-loader' : MiniCssExtractPlugin.loader,\n            'css-loader'] //处理css\n    },\n    ...\n]\nplugins: [\n    new MiniCssExtractPlugin({\n        filename: 'style.css'\n    }),\n    ...\n]\n```\n\n### 添加浏览器css前缀\n\n首先下载 loader ：\n\n```shell\nnpm i postcss-loader autoprefixer -D\n```\n\n然后根目录添加 `postcss.config.js`\n\n```js\nmodule.exports = {\n    plugins: {\n        'autoprefixer': {\n            browsers: 'last 5 version' // 代表意思为每个主流浏览器的最后5个版本\n        }\n    }\n}\n```\n\n最后在 `webpack.config.js` 中添加配置：\n\n```js\nrules: [\n    {\n        test: /\\.css$/,\n        use: [\n            process.env.NODE_ENV === 'development' ? 'style-loader' : MiniCssExtractPlugin.loader,\n            {\n                loader: 'css-loader',\n                options: {\n                    importLoaders: 1\n                }\n            },\n            \"postcss-loader\"\n        ] //处理css\n    },\n    ...\n]\n```\n\n### 使用 babel 处理高级 JS 语法\n\n1. 在 main.js 文件中添加 ES6 代码：\n\n   ```js\n   // class 关键字，是ES6中提供的新语法，是用来 实现 ES6 中面向对象编程的方式\n   class Person {\n       // 使用 static 关键字，可以定义静态属性\n       // 所谓的静态属性，就是 可以直接通过 类名， 直接访问的属性\n       // 实例属性： 只能通过类的实例，来访问的属性，叫做实例属性\n       static info = {\n           name: 'zs',\n           age: 20\n       }\n   }\n   \n   // 访问 Person 类身上的  info 静态属性\n   console.log(Person.info)\n   // 在 webpack 中，默认只能处理 一部分 ES6 的新语法，一些更高级的ES6语法或者 ES7 语法，webpack 是处理不了的；这时候，就需要 借助于第三方的 loader，来帮助webpack 处理这些高级的语法，当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中\n   // 通过 Babel ，可以帮我们将 高级的语法转换为 低级的语法\n   ```\n\n2. 运行如下两套命令，安装两套包，去安装 Babel 相关的loader功能：\n\n   ```shell\n   // 【相当于转换工具】\n   npm i -D @babel/core babel-loader @babel/plugin-transform-runtime @babel/runtime @babel/plugin-proposal-class-properties\n   // 【相当于字典】\n   npm i -D @babel/preset-env\n   \n   // =====> 「转换工具」根据「字典」将 es6 转换\n   ```\n\n3. 打开 webpack 的配置文件，在 module 节点下的 rules 数组中，添加一个新的匹配规则：\n\n   ```js\n   {\n       test: /\\.js$/,\n       use: 'babel-loader',\n       exclude: /node_modules/\n   } // 配置 Babel 来转换高级的ES语法\n   ```\n\n   > 2.2\n   >\n   > 注意： 在配置 babel 的 loader 规则的时候，必须 把 node_modules 目录，通过 exclude 选项排除掉：原因有俩：\n   >\n   > 2.2.1\n   >\n   > 如果 不排除 node_modules， 则Babel 会把 node_modules 中所有的 第三方 JS 文件，都打包编译，这样，会非常消耗CPU，同时，打包速度非常慢；\n   >\n   > 2.2.2\n   >\n   > 哪怕，最终，Babel 把 所有 node_modules 中的JS转换完毕了，但是，项目也无法正常运行！\n\n4. 在项目的根目录中，新建一个叫做 `.babelrc` 的 Babel 配置文件，这个配置文件，属于 JSON 格式，所以，在写 `.babelrc` 配置的时候，必须符合 JSON 语法规范： 不能写注释，字符串必须用双引号：\n\n   ```js\n   {\n       \"presets\": [\n           [\"@babel/preset-env\", {\n               \"modules\": false,\n               \"targets\": {\n                   \"browsers\": [\"> 1%\", \"last 2 versions\", \"not ie <= 8\"]\n               },\n               \"useBuiltIns\": \"usage\"\n           }]\n       ],\n       \"plugins\": [\n           \"@babel/plugin-transform-runtime\",\n           \"@babel/plugin-proposal-class-properties\"\n       ]\n   }\n   ```\n\n#### [webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’问题](https://www.cnblogs.com/soyxiaobi/p/9554565.html)\n\n> **官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel**\n\n两种解决方案:\n\n1. 回退低版本\n\n```shell\nnpm install -D babel-loader@7 babel-core babel-preset-env\n```\n\n1. 更新到最高版本:\n\n```shell\nnpm install -D babel-loader @babel/core @babel/preset-env webpack\n```\n\n## 压缩和优化css文件\n\n下载 `optimize-css-assets-webpack-plugin` 插件：\n\n```shell\nnpm i optimize-css-assets-webpack-plugin -D\n```\n\n在 `webpack.config.js` 中引入插件并添加配置：\n\n```js\n// 压缩css\nconst OptimizeCssAssetsPlugin = require('optimize-css-assets-webpack-plugin')\n\nplugins: [\n    new OptimizeCssAssetsPlugin({\n        assetNameRegExp: /\\.css$/g, //一个正则表达式，指示应优化/最小化的资产的名称。提供的正则表达式针对配置中ExtractTextPlugin实例导出的文件的文件名运行，而不是源CSS文件的文件名。默认为/\\.css$/g\n        cssProcessor: require('cssnano'), //用于优化\\最小化CSS的CSS处理器，默认为cssnano\n        cssProcessorOptions: {\n            safe: true,\n            discardComments: {\n                removeAll: true\n            }\n        }, //传递给cssProcessor的选项，默认为{}\n        canPrint: true //一个布尔值，指示插件是否可以将消息打印到控制台，默认为true\n    }),\n]\n```\n\n## 压缩和优化js文件\n\n```js\nyarn add webpack-parallel-uglify-plugin -D\nconst WebpackParallelUglifyPlugin = require('webpack-parallel-uglify-plugin')\nplugins: [\nnew WebpackParallelUglifyPlugin({\n      uglifyJS: {\n        output: {\n          beautify: false, //不需要格式化\n          comments: false //不保留注释\n        },\n        compress: {\n          warnings: false, // 在UglifyJs删除没有用到的代码时不输出警告\n          drop_console: true, // 删除所有的 `console` 语句，可以兼容ie浏览器\n          collapse_vars: true, // 内嵌定义了但是只用到一次的变量\n          reduce_vars: true // 提取出出现多次但是没有定义成变量去引用的静态值\n        }\n      }\n    })\n]\n```\n\n## 提取公共文件\n\n我们可看到 `src/js/a.js` 和 `src/main.js` 都引入了 `src/js/b.js` 文件，为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。和之前的 webpack 配置不一样：\n\n```js\n//之前配置\n// new webpack.optimize.SplitChunksPlugin({\n//     name: 'common', // 如果还要提取公共代码,在新建一个实例\n//     minChunks: 2, //重复两次之后就提取出来\n//     chunks: ['index', 'a'] // 指定提取范围\n// }),\n//现在配置\noptimization: {\n    splitChunks: {\n        cacheGroups: {\n            commons: {  // 抽离自己写的公共代码\n                chunks: \"initial\",\n                name: \"common\", // 打包后的文件名，任意命名\n                minChunks: 2,//最小引用2次\n                minSize: 0 // 只要超出0字节就生成一个新包\n            },\n            vendor: {   // 抽离第三方插件\n                test: /node_modules/,   // 指定是node_modules下的第三方包\n                chunks: 'initial',\n                name: 'vendor',  // 打包后的文件名，任意命名\n                // 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包\n                priority: 10\n            },\n        }\n    }\n},\n```\n\n## Source Maps 调试配置\n\n作为开发，代码调试当然少不了，那么问题来了，经过打包后的文件，你是不容易找到出错的地方的，`Source Map`就是用来解决这个问题的。\n\n通过如下配置，我们会在打包时生成对应于打包文件的 `.map` 文件，使得编译后的代码可读性更高，更易于调试。\n\n```js\n// webpack.config.js\n...\nmodule.exports = {\n    ...\n    devtool: 'source-map' // 会生成对于调试的完整的.map文件，但同时也会减慢打包速度\n}\n```\n\n配置好后，我们再次运行 `npm run build` 进行打包，这时我们会发现在 `dist` 文件夹中多出了一个 `bundle.js.map`\n\n如果我们的代码有 bug ，在浏览器的调试工具中会提示错误出现的位置，这就是 `devtool: 'source-map'` 配置项的作用。\n\n## 开发环境 VS 生产环境\n\n### npm run dev\n\n**npm run dev** 是我们开发环境下打包的文件，当然由于 devServer 帮我们把文件放到内存中了，所以并不会输出打包后的 dist 文件夹。\n\n### npm run build\n\n通过 **npm run build** 之后会生成一个dist目录文件夹，里面有我们打包后的文件。\n\n## 清理`/dist`文件夹(CleanwebpackPlugin)\n\n你可能已经注意到，在我们删掉 `/dist` 文件夹之前，由于前面的代码示例遗留，导致我们的 `/dist` 文件夹比较杂乱。`webpack` 会生成文件，然后将这些文件放置在 `/dist` 文件夹中，但是 `webpack` 无法追踪到哪些文件是实际在项目中用到的。\n\n通常，在每次构建前清理 `/dist` 文件夹，是比较推荐的做法，因此只会生成用到的文件，这时候就用到 `CleanWebpackPlugin` 插件了。\n\n```js\nnpm i clean-webpack-plugin -D\n// webpack.config.js\n...\nconst CleanWebpackPlugin = require('clean-webpack-plugin'); // 引入CleanWebpackPlugin插件\n\nmodule.exports = {\n    ...\n    plugins: [\n        ...\n        new CleanWebpackPlugin(),  // 以前括号里面要传入数组([dist])来指定要删除的目录，新版 CleanWebpackPlugin 不需要传任何参数了\n    ]\n}\n```\n\n插件的使用方法都是一样的，首先引入，然后new一个实例，实例可传入参数。\n\n现在我们运行 `npm run build` 后就会发现，webpack 会先将 `/dist` 文件夹删除，然后再生产新的 `/dist` 文件夹。\n\n## webpack4.x 相关资源\n\n- **[webpack4.x最详细入门讲解](https://www.cnblogs.com/BetterMan-/p/9867642.html)**\n- [从基础到实战 手摸手带你掌握新版Webpack4.0详解 教你看文档](https://segmentfault.com/a/1190000018866232)\n\n## webpack3 与 webpack4 使用差异\n\n- [webpack4.x开发环境配置](https://blog.csdn.net/u012443286/article/details/79504289)\n","slug":"如何使用webpack4","published":1,"updated":"2020-11-21T16:25:13.930Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygq007jkhsrfi2048e3","content":"<h2 id=\"为什么要使用-webpack\"><a href=\"#为什么要使用-webpack\" class=\"headerlink\" title=\"为什么要使用 webpack\"></a>为什么要使用 webpack</h2><h3 id=\"网页中引用的常见静态资源\"><a href=\"#网页中引用的常见静态资源\" class=\"headerlink\" title=\"网页中引用的常见静态资源\"></a>网页中引用的常见静态资源</h3><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">静态资源</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">JS</td>\n<td align=\"left\">.js .jsx .coffee .ts（TypeScript 类 C# 语言）</td>\n</tr>\n<tr>\n<td align=\"left\">CSS</td>\n<td align=\"left\">.css .less .sass .scss</td>\n</tr>\n<tr>\n<td align=\"left\">Images</td>\n<td align=\"left\">.jpg .png .gif .bmp .svg</td>\n</tr>\n<tr>\n<td align=\"left\">字体文件（Fonts）</td>\n<td align=\"left\">.svg .ttf .eot .woff .woff2</td>\n</tr>\n<tr>\n<td align=\"left\">模板文件</td>\n<td align=\"left\">.ejs .jade .vue【这是在webpack中定义组件的方式，推荐这么用】</td>\n</tr>\n</tbody></table>\n<a id=\"more\"></a>\n\n<h3 id=\"引入过多静态资源有什么问题？\"><a href=\"#引入过多静态资源有什么问题？\" class=\"headerlink\" title=\"引入过多静态资源有什么问题？\"></a>引入过多静态资源有什么问题？</h3><ol>\n<li>网页加载速度慢， 因此我们要发起很多的二次请求</li>\n<li>还要处理错综复杂的依赖关系</li>\n</ol>\n<h3 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h3><ol>\n<li>合并、压缩、精灵图、图片的 Base64 编码</li>\n<li>可以使用 requireJS、也可以使用 webpack 来解决各个包之间的复杂依赖关系</li>\n</ol>\n<h3 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h3><ol>\n<li>使用 Gulp， 基于 task 任务</li>\n<li>使用 webpack， 基于整个项目进行构建<ul>\n<li>借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>webpack 是基于 Node.js 开发出来的一个前端项目打包工具。</p>\n<h2 id=\"安装-amp-初步使用\"><a href=\"#安装-amp-初步使用\" class=\"headerlink\" title=\"安装 &amp; 初步使用\"></a>安装 &amp; 初步使用</h2><ol>\n<li><p>如果第一次安装，需要全局安装 『 webpack &amp;&amp; webpack-cli 』:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建文件夹</span></span><br><span class=\"line\">mkdir webpack4-demo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入</span></span><br><span class=\"line\">cd webpack4-demo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化</span></span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下面的目录结构创建文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── package.json</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── css</span><br><span class=\"line\">    │   └── index.css</span><br><span class=\"line\">    ├── images</span><br><span class=\"line\">    │   └── temp.png</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    ├── js</span><br><span class=\"line\">    │   ├── a.js</span><br><span class=\"line\">    │   ├── b.js</span><br><span class=\"line\">    │   └── index.js</span><br><span class=\"line\">    └── main.js</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>index.css</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">0.05</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>index.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>js/a.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> b <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是 a 模块，现在被初始化了&quot;</span>)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">binit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      b.init()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> a</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>js/b.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是 b 模块，现在被初始化了&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> b</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>js/index.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> index = &#123;</span><br><span class=\"line\">   <span class=\"comment\">// init后执行隔行变色的代码</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置偶数行背景色，索引从0开始，0是偶数</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#list li:even&#x27;</span>).css(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;lightblue&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 设置奇数行背景色</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#list li:odd&#x27;</span>).css(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;pink&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> index</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>main.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./js/a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> b <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./js/b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./js/index&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./css/index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> main = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;入口函数 main 被调用了&#x27;</span>)</span><br><span class=\"line\">   a.init()</span><br><span class=\"line\">   a.binit()</span><br><span class=\"line\">   b.init()</span><br><span class=\"line\">   index.init()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目根文件夹下执行命令 <code>npm i webpack webpack-cli -D</code></p>\n</li>\n<li><p>使用 <code>npm i jquery</code> 安装 jQuery 类库</p>\n</li>\n<li><p>直接在页面上引用 <code>main.js</code> 会报错，因为浏览器不认识 <code>import $ from &#39;jquery&#39;</code> 这种JS语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接引入会报错 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 <code>webpack 入口文件路径 模式</code> 运行 <code>main.js</code> 入口文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack src/main.js --mode development # 开发环境</span><br><span class=\"line\">或者</span><br><span class=\"line\">webpack src/main.js --mode production  # 生产环境</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不过每次都要输入这个命令，非常麻烦，我们可以在<code>package.json</code>的<code>scripts</code>中加入两个指令成员：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;dev&quot;: &quot;webpack src/main.js --mode development&quot;,</span><br><span class=\"line\">   &quot;build&quot;: &quot;webpack src/main.js --mode production&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>以后只需要在命令行执行 <code>npm run dev</code> 便相当于执行 <code>webpack --mode development</code> ，执行 <code>npm run build</code> 便相当于执行 <code>webpack --mode production</code>。</p>\n</li>\n</ol>\n<h2 id=\"使用配置文件简化打包命令\"><a href=\"#使用配置文件简化打包命令\" class=\"headerlink\" title=\"使用配置文件简化打包命令\"></a>使用配置文件简化打包命令</h2><ol>\n<li><p>在项目根目录中创建 <code>webpack.config.js</code></p>\n</li>\n<li><p>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以我们需要在 <code>webpack.config.js</code> 中配置这两个路径：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入处理路径的模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出一个配置对象，将来 webpack 在启动的时候，</span></span><br><span class=\"line\"><span class=\"comment\">// 会默认来查找 webpack.config.js ，</span></span><br><span class=\"line\"><span class=\"comment\">// 并读取这个文件中导出的配置对象，来进行打包处理</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 配置入口文件，表示要使用 webpack 打包哪个文件</span></span><br><span class=\"line\">   <span class=\"comment\">// 若不配置 webpack 将自动查找 src 目录下的 index.js 文件</span></span><br><span class=\"line\">   entry: &#123;</span><br><span class=\"line\">      main: path.join(__dirname, <span class=\"string\">&#x27;./src/main.js&#x27;</span>)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].bundle.[hash].js&quot;</span>, <span class=\"comment\">//输出文件名，[name]表示入口文件js名，[hash]会在后面生成随机hash值</span></span><br><span class=\"line\">      path: path.join(__dirname, <span class=\"string\">&quot;./dist&quot;</span>) <span class=\"comment\">//输出文件路径</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于此时已经配置了入口文件，<code>package.json</code> 中的脚本命令就可简化为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack --mode development&quot;,</span><br><span class=\"line\">&quot;build&quot;: &quot;webpack --mode production&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"实现-webpack-实时打包构建\"><a href=\"#实现-webpack-实时打包构建\" class=\"headerlink\" title=\"实现 webpack 实时打包构建\"></a>实现 webpack 实时打包构建</h2><p>webpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的插件，叫做 <code>webpack-dev-server</code> ，在 webpack 中进行配置之前需要单独安装它作为项目依赖。</p>\n<p>devServer 作为 webpack 配置选项中的一项，以下是它的一些配置选项:</p>\n<ul>\n<li><code>contentBase</code> ：设置服务器所读取文件的目录，当前我们设置为”./dist”</li>\n<li><code>port</code> ：设置端口号，如果省略，默认为<code>8080</code></li>\n<li><code>inline</code> ：设置为<code>true</code>，当源文件改变时会自动刷新页面</li>\n<li><code>historyApiFallback</code> ：设置为<code>true</code>，所有的跳转将指向<code>index.html</code></li>\n</ul>\n<ol>\n<li><p>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 <code>webpack-dev-server</code> 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</p>\n</li>\n<li><p>运行 <code>npm i webpack-dev-server -D</code> 安装到开发依赖</p>\n</li>\n<li><p>安装完成之后，修改之前在 <code>package.json</code> 中添加的 dev 指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --mode development&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行指令 <code>npm run dev</code> ，发现可以进行实时打包，但是 dist 目录下并没有生成 <code>main.bundle.js</code> 文件，这是因为 <code>webpack-dev-server</code> 将打包好的文件放在了内存中。</p>\n<ul>\n<li><p>把 <code>bundle.js</code> 放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</p>\n</li>\n<li><p>这个时候访问 webpack-dev-server 启动的 <code>http://localhost:8080/</code> 网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 <code>main.bundle.js</code> 文件，需要修改 index.html 中 script 的 src 属性为:<code>&lt;script src=&quot;../main.bundle.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>为了能在访问 <code>http://localhost:8080/</code> 的时候直接访问到 index 首页，可以使用 <code>--contentBase src</code> 指令来修改dev指令，指定启动的根目录：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --mode development --contentBase src&quot;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h2><p>插件（Plugins）是用来拓展 webpack 功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders 和 Plugins 常常被弄混，但是它们其实是完全不同的东西，可以这么来说，loaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<h3 id=\"使用-html-webpack-plugin-插件配置启动页面\"><a href=\"#使用-html-webpack-plugin-插件配置启动页面\" class=\"headerlink\" title=\"使用 html-webpack-plugin 插件配置启动页面\"></a>使用 <code>html-webpack-plugin</code> 插件配置启动页面</h3><p>由于使用 <code>--contentBase</code> 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐使用 <code>html-webpack-plugin</code> 插件配置启动页面。</p>\n<ol>\n<li><p>运行 <code>npm i html-webpack-plugin -D</code> 安装到开发依赖</p>\n</li>\n<li><p>修改 <code>webpack.config.js</code> 配置文件如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入处理路径的模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 导入自动生成HTMl文件的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出一个配置对象，将来 webpack 在启动的时候，</span></span><br><span class=\"line\"><span class=\"comment\">// 会默认来查找 webpack.config.js ，</span></span><br><span class=\"line\"><span class=\"comment\">// 并读取这个文件中导出的配置对象，来进行打包处理</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置入口文件，表示要使用 webpack 打包哪个文件</span></span><br><span class=\"line\">    <span class=\"comment\">// 若不配置 webpack 将自动查找 src 目录下的 index.js 文件</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        main: path.join(__dirname, <span class=\"string\">&#x27;./src/main.js&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">&quot;[name].bundle.js&quot;</span>, <span class=\"comment\">//输出文件名，[name]表示入口文件js名</span></span><br><span class=\"line\">        path: path.join(__dirname, <span class=\"string\">&quot;./dist&quot;</span>) <span class=\"comment\">//输出文件路径</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [ <span class=\"comment\">// 添加plugins节点配置插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.join(__dirname, <span class=\"string\">&#x27;./src/index.html&#x27;</span>), <span class=\"comment\">//模板路径</span></span><br><span class=\"line\">            filename: <span class=\"string\">&#x27;index.html&#x27;</span>, <span class=\"comment\">//自动生成的HTML文件的名称</span></span><br><span class=\"line\">            minify: &#123; <span class=\"comment\">// 压缩HTML文件</span></span><br><span class=\"line\">               removeComments: <span class=\"literal\">true</span>, <span class=\"comment\">// 移除HTML中的注释</span></span><br><span class=\"line\">               collapseWhitespace: <span class=\"literal\">true</span>, <span class=\"comment\">// 删除空白符与换行符</span></span><br><span class=\"line\">               minifyCSS: <span class=\"literal\">true</span> <span class=\"comment\">// 压缩内联css</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销 <code>package.json</code> 中 <code>script</code> 节点中的 dev 指令为：<br><code>dev&quot;: &quot;webpack-dev-server --mode development&quot;</code></p>\n</li>\n<li><p>将 index.html 中 script 标签注释掉，因为 <code>html-webpack-plugin</code> 插件会自动把 main.bundle.js 注入到 index.html 页面中。</p>\n</li>\n</ol>\n<h3 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h3><h4 id=\"方式1：\"><a href=\"#方式1：\" class=\"headerlink\" title=\"方式1：\"></a>方式1：</h4><p>修改 <code>package.json</code> 的 script 节点如下，其中 <code>--open</code> 表示自动打开浏览器， <code>--port 4321</code> 表示打开的端口号为 4321 ，<code>--hot</code> 表示启用浏览器热更新：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --open --port 4321 --hot  --mode development&quot;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式2：-个人推荐\"><a href=\"#方式2：-个人推荐\" class=\"headerlink\" title=\"方式2：(个人推荐)\"></a>方式2：(个人推荐)</h4><ol>\n<li><p>修改 <code>webpack.config.js</code> 文件，新增 <code>devServer</code> 节点如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">     inline: <span class=\"literal\">true</span>, <span class=\"comment\">//打包后加入一个 websocket 客户端</span></span><br><span class=\"line\">     hot: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用热更新 的 第1步</span></span><br><span class=\"line\">     open: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">     contentBase: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>), <span class=\"comment\">// 指定托管的根目录，不注释的话，无法访问 src 以外的资源，比如 node_modules</span></span><br><span class=\"line\">     host: <span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"comment\">// 主机地址</span></span><br><span class=\"line\">     port: <span class=\"number\">4321</span>, <span class=\"comment\">// 设置启动时候的运行端口</span></span><br><span class=\"line\">     compress: <span class=\"literal\">true</span> <span class=\"comment\">// 开发服务器是否启动gzip等压缩</span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在头部引入 <code>webpack</code> 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启用热更新的 第2步</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>plugins</code> 节点下新增：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启用热更新的第 3 步</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h2><p>loaders 是 webpack 最强大的功能之一，通过不同的 loader ，webpack 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，例如把 <code>scss</code> 转为 <code>css</code> ，将 ES6 、ES7 等语法转化为当前浏览器能识别的语法，将 JSX 转化为 js 等多项功能。</p>\n<p>loaders 需要单独安装并且需要在 <code>webpack.config.js</code> 中的 <code>modules</code> 配置项下进行配置，Loaders的配置包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>options</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<h3 id=\"打包-css-文件\"><a href=\"#打包-css-文件\" class=\"headerlink\" title=\"打包 css 文件\"></a>打包 css 文件</h3><ol>\n<li><p>运行<code>npm i style-loader css-loader --D</code></p>\n</li>\n<li><p>修改 <code>webpack.config.js</code> 这个配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123; <span class=\"comment\">// 用来配置第三方loader模块的</span></span><br><span class=\"line\">    rules: [ <span class=\"comment\">// 文件的匹配规则</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">        &#125; <span class=\"comment\">//处理css文件的规则</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：<code>use</code> 表示使用哪些模块来处理 <code>test</code> 所匹配到的文件；<code>use</code> 中相关 loader 模块的调用顺序是从后向前调用的。</p>\n</li>\n</ol>\n<h3 id=\"打包-less-文件\"><a href=\"#打包-less-文件\" class=\"headerlink\" title=\"打包 less 文件\"></a>打包 less 文件</h3><ol>\n<li><p>如果你习惯使用 less ，可以执行命令 <code>npm i less-loader less -D</code> 来安装 less-loader 。</p>\n</li>\n<li><p>修改 <code>webpack.config.js</code> 配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">    use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>]</span><br><span class=\"line\">&#125;, <span class=\"comment\">//配置处理 .less 文件的第三方 loader 规则</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"打包-sass-文件\"><a href=\"#打包-sass-文件\" class=\"headerlink\" title=\"打包 sass 文件\"></a>打包 sass 文件</h3><ol>\n<li><p>例如我平常习惯用 scss，所以会安装 sass-loader ：执行命令 <code>npm i sass-loader node-sass --D</code></p>\n</li>\n<li><p>在 <code>webpack.config.js</code> 中添加处理 sass 文件的 loader 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">   use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;sass-loader&#x27;</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 配置处理 .scss 文件的 第三方 loader 规则（npm i sass-loader后还需要 npm i node-sass，否则编译报错）</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"处理-css-中的图片路径\"><a href=\"#处理-css-中的图片路径\" class=\"headerlink\" title=\"处理 css 中的图片路径\"></a>处理 css 中的图片路径</h3><blockquote>\n<p>预备工作：</p>\n<ol>\n<li>在 src/css/index.css 文件中给 body 添加：background-image: url(“../images/temp.png”);</li>\n<li>此时保存会编译报错，因为 webpack 无法处理 css 中的路径（此案例中为——图片资源）</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>运行 <code>npm i url-loader file-loader --D</code></p>\n</li>\n<li><p>在 <code>webpack.config.js</code> 中添加处理 url 路径的 loader 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(jpg|png|bmp|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use:[&#123;</span><br><span class=\"line\">       loader:<span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">       options:&#123;</span><br><span class=\"line\">          outputPath:<span class=\"string\">&#x27;images/&#x27;</span>,<span class=\"comment\">//输出到images文件夹</span></span><br><span class=\"line\">          <span class=\"comment\">//是把小于500B的文件打成 Base64 的格式，写入JS</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果不小于，url-loader 就会使用 file-loader 处理图片</span></span><br><span class=\"line\">          <span class=\"comment\">// 所以必须安装file-loader</span></span><br><span class=\"line\">          limit:<span class=\"number\">500</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;, <span class=\"comment\">// 配置图片路径</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"处理-Bootstrap-字体的加载\"><a href=\"#处理-Bootstrap-字体的加载\" class=\"headerlink\" title=\"处理 Bootstrap 字体的加载\"></a>处理 Bootstrap 字体的加载</h3><p>**重要(更新)**：webpack4后的 bootstrap 字体加载已经不能使用下面该方法，如何使用可以参考这篇博客：<a href=\"https://blog.csdn.net/hyt941026/article/details/82870466\">webpack 4.X版本的简单使用(处理js/css/less/scss/url(图片)/字体文件)</a></p>\n<blockquote>\n<p>预备工作：</p>\n<p>index.html 写入</p>\n<p>来展示字体图片</p>\n<p>main.js 导入 import ‘bootstrap/dist/css/bootstrap.css’</p>\n<p>此时报错</p>\n</blockquote>\n<p>在 <code>webpack.config.js</code> 中添加处理字体文件的 loader 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(ttf|eot|svg|woff|woff2)$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;url-loader&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"comment\">// 处理 字体文件的 loader</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提取css文件（插件！）\"><a href=\"#提取css文件（插件！）\" class=\"headerlink\" title=\"提取css文件（插件！）\"></a>提取css文件（插件！）</h3><p>先安装 mini-css-extract-plugin 包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>webpack.config.js</code> 中修改对css文件处理的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            process.env.NODE_ENV === <span class=\"string\">&#x27;development&#x27;</span> ? <span class=\"string\">&#x27;style-loader&#x27;</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">            <span class=\"string\">&#x27;css-loader&#x27;</span>] <span class=\"comment\">//处理css</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        filename: <span class=\"string\">&#x27;style.css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加浏览器css前缀\"><a href=\"#添加浏览器css前缀\" class=\"headerlink\" title=\"添加浏览器css前缀\"></a>添加浏览器css前缀</h3><p>首先下载 loader ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n\n<p>然后根目录添加 <code>postcss.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;autoprefixer&#x27;</span>: &#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">&#x27;last 5 version&#x27;</span> <span class=\"comment\">// 代表意思为每个主流浏览器的最后5个版本</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后在 <code>webpack.config.js</code> 中添加配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            process.env.NODE_ENV === <span class=\"string\">&#x27;development&#x27;</span> ? <span class=\"string\">&#x27;style-loader&#x27;</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    importLoaders: <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;postcss-loader&quot;</span></span><br><span class=\"line\">        ] <span class=\"comment\">//处理css</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-babel-处理高级-JS-语法\"><a href=\"#使用-babel-处理高级-JS-语法\" class=\"headerlink\" title=\"使用 babel 处理高级 JS 语法\"></a>使用 babel 处理高级 JS 语法</h3><ol>\n<li><p>在 main.js 文件中添加 ES6 代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class 关键字，是ES6中提供的新语法，是用来 实现 ES6 中面向对象编程的方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 static 关键字，可以定义静态属性</span></span><br><span class=\"line\">    <span class=\"comment\">// 所谓的静态属性，就是 可以直接通过 类名， 直接访问的属性</span></span><br><span class=\"line\">    <span class=\"comment\">// 实例属性： 只能通过类的实例，来访问的属性，叫做实例属性</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> info = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;zs&#x27;</span>,</span><br><span class=\"line\">        age: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问 Person 类身上的  info 静态属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.info)</span><br><span class=\"line\"><span class=\"comment\">// 在 webpack 中，默认只能处理 一部分 ES6 的新语法，一些更高级的ES6语法或者 ES7 语法，webpack 是处理不了的；这时候，就需要 借助于第三方的 loader，来帮助webpack 处理这些高级的语法，当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 Babel ，可以帮我们将 高级的语法转换为 低级的语法</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行如下两套命令，安装两套包，去安装 Babel 相关的loader功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 【相当于转换工具】</span><br><span class=\"line\">npm i -D @babel/core babel-loader @babel/plugin-transform-runtime @babel/runtime @babel/plugin-proposal-class-properties</span><br><span class=\"line\">// 【相当于字典】</span><br><span class=\"line\">npm i -D @babel/preset-env</span><br><span class=\"line\"></span><br><span class=\"line\">// =====&gt; 「转换工具」根据「字典」将 es6 转换</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开 webpack 的配置文件，在 module 节点下的 rules 数组中，添加一个新的匹配规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 配置 Babel 来转换高级的ES语法</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.2</p>\n<p>注意： 在配置 babel 的 loader 规则的时候，必须 把 node_modules 目录，通过 exclude 选项排除掉：原因有俩：</p>\n<p>2.2.1</p>\n<p>如果 不排除 node_modules， 则Babel 会把 node_modules 中所有的 第三方 JS 文件，都打包编译，这样，会非常消耗CPU，同时，打包速度非常慢；</p>\n<p>2.2.2</p>\n<p>哪怕，最终，Babel 把 所有 node_modules 中的JS转换完毕了，但是，项目也无法正常运行！</p>\n</blockquote>\n</li>\n<li><p>在项目的根目录中，新建一个叫做 <code>.babelrc</code> 的 Babel 配置文件，这个配置文件，属于 JSON 格式，所以，在写 <code>.babelrc</code> 配置的时候，必须符合 JSON 语法规范： 不能写注释，字符串必须用双引号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">        [<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;browsers&quot;</span>: [<span class=\"string\">&quot;&gt; 1%&quot;</span>, <span class=\"string\">&quot;last 2 versions&quot;</span>, <span class=\"string\">&quot;not ie &lt;= 8&quot;</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"webpack-config-js配置遇到Error-Cannot-find-module-‘-babel-core’问题\"><a href=\"#webpack-config-js配置遇到Error-Cannot-find-module-‘-babel-core’问题\" class=\"headerlink\" title=\"webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’问题\"></a><a href=\"https://www.cnblogs.com/soyxiaobi/p/9554565.html\">webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’问题</a></h4><blockquote>\n<p><strong>官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</strong></p>\n</blockquote>\n<p>两种解决方案:</p>\n<ol>\n<li>回退低版本</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-loader@7 babel-core babel-preset-env</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>更新到最高版本:</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-loader @babel/core @babel/preset-env webpack</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩和优化css文件\"><a href=\"#压缩和优化css文件\" class=\"headerlink\" title=\"压缩和优化css文件\"></a>压缩和优化css文件</h2><p>下载 <code>optimize-css-assets-webpack-plugin</code> 插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>webpack.config.js</code> 中引入插件并添加配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 压缩css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">        assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>, <span class=\"comment\">//一个正则表达式，指示应优化/最小化的资产的名称。提供的正则表达式针对配置中ExtractTextPlugin实例导出的文件的文件名运行，而不是源CSS文件的文件名。默认为/\\.css$/g</span></span><br><span class=\"line\">        cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>), <span class=\"comment\">//用于优化\\最小化CSS的CSS处理器，默认为cssnano</span></span><br><span class=\"line\">        cssProcessorOptions: &#123;</span><br><span class=\"line\">            safe: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            discardComments: &#123;</span><br><span class=\"line\">                removeAll: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"comment\">//传递给cssProcessor的选项，默认为&#123;&#125;</span></span><br><span class=\"line\">        canPrint: <span class=\"literal\">true</span> <span class=\"comment\">//一个布尔值，指示插件是否可以将消息打印到控制台，默认为true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩和优化js文件\"><a href=\"#压缩和优化js文件\" class=\"headerlink\" title=\"压缩和优化js文件\"></a>压缩和优化js文件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-parallel-uglify-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> WebpackParallelUglifyPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-parallel-uglify-plugin&#x27;</span>)</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"keyword\">new</span> WebpackParallelUglifyPlugin(&#123;</span><br><span class=\"line\">      uglifyJS: &#123;</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">          beautify: <span class=\"literal\">false</span>, <span class=\"comment\">//不需要格式化</span></span><br><span class=\"line\">          comments: <span class=\"literal\">false</span> <span class=\"comment\">//不保留注释</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">          warnings: <span class=\"literal\">false</span>, <span class=\"comment\">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class=\"line\">          drop_console: <span class=\"literal\">true</span>, <span class=\"comment\">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class=\"line\">          collapse_vars: <span class=\"literal\">true</span>, <span class=\"comment\">// 内嵌定义了但是只用到一次的变量</span></span><br><span class=\"line\">          reduce_vars: <span class=\"literal\">true</span> <span class=\"comment\">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提取公共文件\"><a href=\"#提取公共文件\" class=\"headerlink\" title=\"提取公共文件\"></a>提取公共文件</h2><p>我们可看到 <code>src/js/a.js</code> 和 <code>src/main.js</code> 都引入了 <code>src/js/b.js</code> 文件，为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。和之前的 webpack 配置不一样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//之前配置</span></span><br><span class=\"line\"><span class=\"comment\">// new webpack.optimize.SplitChunksPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: &#x27;common&#x27;, // 如果还要提取公共代码,在新建一个实例</span></span><br><span class=\"line\"><span class=\"comment\">//     minChunks: 2, //重复两次之后就提取出来</span></span><br><span class=\"line\"><span class=\"comment\">//     chunks: [&#x27;index&#x27;, &#x27;a&#x27;] // 指定提取范围</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//现在配置</span></span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">        cacheGroups: &#123;</span><br><span class=\"line\">            commons: &#123;  <span class=\"comment\">// 抽离自己写的公共代码</span></span><br><span class=\"line\">                chunks: <span class=\"string\">&quot;initial&quot;</span>,</span><br><span class=\"line\">                name: <span class=\"string\">&quot;common&quot;</span>, <span class=\"comment\">// 打包后的文件名，任意命名</span></span><br><span class=\"line\">                minChunks: <span class=\"number\">2</span>,<span class=\"comment\">//最小引用2次</span></span><br><span class=\"line\">                minSize: <span class=\"number\">0</span> <span class=\"comment\">// 只要超出0字节就生成一个新包</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            vendor: &#123;   <span class=\"comment\">// 抽离第三方插件</span></span><br><span class=\"line\">                test: <span class=\"regexp\">/node_modules/</span>,   <span class=\"comment\">// 指定是node_modules下的第三方包</span></span><br><span class=\"line\">                chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                name: <span class=\"string\">&#x27;vendor&#x27;</span>,  <span class=\"comment\">// 打包后的文件名，任意命名</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包</span></span><br><span class=\"line\">                priority: <span class=\"number\">10</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Source-Maps-调试配置\"><a href=\"#Source-Maps-调试配置\" class=\"headerlink\" title=\"Source Maps 调试配置\"></a>Source Maps 调试配置</h2><p>作为开发，代码调试当然少不了，那么问题来了，经过打包后的文件，你是不容易找到出错的地方的，<code>Source Map</code>就是用来解决这个问题的。</p>\n<p>通过如下配置，我们会在打包时生成对应于打包文件的 <code>.map</code> 文件，使得编译后的代码可读性更高，更易于调试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    devtool: <span class=\"string\">&#x27;source-map&#x27;</span> <span class=\"comment\">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，我们再次运行 <code>npm run build</code> 进行打包，这时我们会发现在 <code>dist</code> 文件夹中多出了一个 <code>bundle.js.map</code></p>\n<p>如果我们的代码有 bug ，在浏览器的调试工具中会提示错误出现的位置，这就是 <code>devtool: &#39;source-map&#39;</code> 配置项的作用。</p>\n<h2 id=\"开发环境-VS-生产环境\"><a href=\"#开发环境-VS-生产环境\" class=\"headerlink\" title=\"开发环境 VS 生产环境\"></a>开发环境 VS 生产环境</h2><h3 id=\"npm-run-dev\"><a href=\"#npm-run-dev\" class=\"headerlink\" title=\"npm run dev\"></a>npm run dev</h3><p><strong>npm run dev</strong> 是我们开发环境下打包的文件，当然由于 devServer 帮我们把文件放到内存中了，所以并不会输出打包后的 dist 文件夹。</p>\n<h3 id=\"npm-run-build\"><a href=\"#npm-run-build\" class=\"headerlink\" title=\"npm run build\"></a>npm run build</h3><p>通过 <strong>npm run build</strong> 之后会生成一个dist目录文件夹，里面有我们打包后的文件。</p>\n<h2 id=\"清理-dist文件夹-CleanwebpackPlugin\"><a href=\"#清理-dist文件夹-CleanwebpackPlugin\" class=\"headerlink\" title=\"清理/dist文件夹(CleanwebpackPlugin)\"></a>清理<code>/dist</code>文件夹(CleanwebpackPlugin)</h2><p>你可能已经注意到，在我们删掉 <code>/dist</code> 文件夹之前，由于前面的代码示例遗留，导致我们的 <code>/dist</code> 文件夹比较杂乱。<code>webpack</code> 会生成文件，然后将这些文件放置在 <code>/dist</code> 文件夹中，但是 <code>webpack</code> 无法追踪到哪些文件是实际在项目中用到的。</p>\n<p>通常，在每次构建前清理 <code>/dist</code> 文件夹，是比较推荐的做法，因此只会生成用到的文件，这时候就用到 <code>CleanWebpackPlugin</code> 插件了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i clean-webpack-plugin -D</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>); <span class=\"comment\">// 引入CleanWebpackPlugin插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(),  <span class=\"comment\">// 以前括号里面要传入数组([dist])来指定要删除的目录，新版 CleanWebpackPlugin 不需要传任何参数了</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插件的使用方法都是一样的，首先引入，然后new一个实例，实例可传入参数。</p>\n<p>现在我们运行 <code>npm run build</code> 后就会发现，webpack 会先将 <code>/dist</code> 文件夹删除，然后再生产新的 <code>/dist</code> 文件夹。</p>\n<h2 id=\"webpack4-x-相关资源\"><a href=\"#webpack4-x-相关资源\" class=\"headerlink\" title=\"webpack4.x 相关资源\"></a>webpack4.x 相关资源</h2><ul>\n<li><strong><a href=\"https://www.cnblogs.com/BetterMan-/p/9867642.html\">webpack4.x最详细入门讲解</a></strong></li>\n<li><a href=\"https://segmentfault.com/a/1190000018866232\">从基础到实战 手摸手带你掌握新版Webpack4.0详解 教你看文档</a></li>\n</ul>\n<h2 id=\"webpack3-与-webpack4-使用差异\"><a href=\"#webpack3-与-webpack4-使用差异\" class=\"headerlink\" title=\"webpack3 与 webpack4 使用差异\"></a>webpack3 与 webpack4 使用差异</h2><ul>\n<li><a href=\"https://blog.csdn.net/u012443286/article/details/79504289\">webpack4.x开发环境配置</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"为什么要使用-webpack\"><a href=\"#为什么要使用-webpack\" class=\"headerlink\" title=\"为什么要使用 webpack\"></a>为什么要使用 webpack</h2><h3 id=\"网页中引用的常见静态资源\"><a href=\"#网页中引用的常见静态资源\" class=\"headerlink\" title=\"网页中引用的常见静态资源\"></a>网页中引用的常见静态资源</h3><table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">静态资源</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"left\">JS</td>\n<td align=\"left\">.js .jsx .coffee .ts（TypeScript 类 C# 语言）</td>\n</tr>\n<tr>\n<td align=\"left\">CSS</td>\n<td align=\"left\">.css .less .sass .scss</td>\n</tr>\n<tr>\n<td align=\"left\">Images</td>\n<td align=\"left\">.jpg .png .gif .bmp .svg</td>\n</tr>\n<tr>\n<td align=\"left\">字体文件（Fonts）</td>\n<td align=\"left\">.svg .ttf .eot .woff .woff2</td>\n</tr>\n<tr>\n<td align=\"left\">模板文件</td>\n<td align=\"left\">.ejs .jade .vue【这是在webpack中定义组件的方式，推荐这么用】</td>\n</tr>\n</tbody></table>","more":"<h3 id=\"引入过多静态资源有什么问题？\"><a href=\"#引入过多静态资源有什么问题？\" class=\"headerlink\" title=\"引入过多静态资源有什么问题？\"></a>引入过多静态资源有什么问题？</h3><ol>\n<li>网页加载速度慢， 因此我们要发起很多的二次请求</li>\n<li>还要处理错综复杂的依赖关系</li>\n</ol>\n<h3 id=\"如何解决上述两个问题\"><a href=\"#如何解决上述两个问题\" class=\"headerlink\" title=\"如何解决上述两个问题\"></a>如何解决上述两个问题</h3><ol>\n<li>合并、压缩、精灵图、图片的 Base64 编码</li>\n<li>可以使用 requireJS、也可以使用 webpack 来解决各个包之间的复杂依赖关系</li>\n</ol>\n<h3 id=\"如何完美实现上述的2种解决方案\"><a href=\"#如何完美实现上述的2种解决方案\" class=\"headerlink\" title=\"如何完美实现上述的2种解决方案\"></a>如何完美实现上述的2种解决方案</h3><ol>\n<li>使用 Gulp， 基于 task 任务</li>\n<li>使用 webpack， 基于整个项目进行构建<ul>\n<li>借助于 webpack 这个前端自动化构建工具，可以完美实现资源的合并、打包、压缩、混淆等诸多功能</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h2><p>webpack 是基于 Node.js 开发出来的一个前端项目打包工具。</p>\n<h2 id=\"安装-amp-初步使用\"><a href=\"#安装-amp-初步使用\" class=\"headerlink\" title=\"安装 &amp; 初步使用\"></a>安装 &amp; 初步使用</h2><ol>\n<li><p>如果第一次安装，需要全局安装 『 webpack &amp;&amp; webpack-cli 』:</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -g webpack webpack-cli</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化项目</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 创建文件夹</span></span><br><span class=\"line\">mkdir webpack4-demo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 进入</span></span><br><span class=\"line\">cd webpack4-demo</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 初始化</span></span><br><span class=\"line\">npm init -y</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>以下面的目录结构创建文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">├── package.json</span><br><span class=\"line\">└── src</span><br><span class=\"line\">    ├── css</span><br><span class=\"line\">    │   └── index.css</span><br><span class=\"line\">    ├── images</span><br><span class=\"line\">    │   └── temp.png</span><br><span class=\"line\">    ├── index.html</span><br><span class=\"line\">    ├── js</span><br><span class=\"line\">    │   ├── a.js</span><br><span class=\"line\">    │   ├── b.js</span><br><span class=\"line\">    │   └── index.js</span><br><span class=\"line\">    └── main.js</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>index.css</p>\n</blockquote>\n<figure class=\"highlight css\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"selector-tag\">body</span> &#123;</span><br><span class=\"line\">   <span class=\"attribute\">display</span>: flex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"selector-tag\">ul</span> <span class=\"selector-tag\">li</span> &#123;</span><br><span class=\"line\">    <span class=\"attribute\">box-shadow</span>: <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"number\">2px</span> <span class=\"built_in\">rgba</span>(<span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">31</span>, <span class=\"number\">0.05</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>index.html</p>\n</blockquote>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">&lt;!DOCTYPE <span class=\"meta-keyword\">html</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">html</span> <span class=\"attr\">lang</span>=<span class=\"string\">&quot;en&quot;</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">charset</span>=<span class=\"string\">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">name</span>=<span class=\"string\">&quot;viewport&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">meta</span> <span class=\"attr\">http-equiv</span>=<span class=\"string\">&quot;X-UA-Compatible&quot;</span> <span class=\"attr\">content</span>=<span class=\"string\">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">title</span>&gt;</span>Document<span class=\"tag\">&lt;/<span class=\"name\">title</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">head</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">       <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">body</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">html</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>js/a.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> b <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> a = &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是 a 模块，现在被初始化了&quot;</span>)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">binit</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      b.init()</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> a</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>js/b.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">const</span> b = &#123;</span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"built_in\">console</span>.log(<span class=\"string\">&quot;我是 b 模块，现在被初始化了&quot;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> b</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>js/index.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> $ <span class=\"keyword\">from</span> <span class=\"string\">&#x27;jquery&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> index = &#123;</span><br><span class=\"line\">   <span class=\"comment\">// init后执行隔行变色的代码</span></span><br><span class=\"line\">   <span class=\"function\"><span class=\"title\">init</span>(<span class=\"params\"></span>)</span> &#123;</span><br><span class=\"line\">      <span class=\"comment\">// 设置偶数行背景色，索引从0开始，0是偶数</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#list li:even&#x27;</span>).css(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;lightblue&#x27;</span>)</span><br><span class=\"line\">      <span class=\"comment\">// 设置奇数行背景色</span></span><br><span class=\"line\">      $(<span class=\"string\">&#x27;#list li:odd&#x27;</span>).css(<span class=\"string\">&#x27;backgroundColor&#x27;</span>, <span class=\"string\">&#x27;pink&#x27;</span>)</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">export</span> <span class=\"keyword\">default</span> index</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>main.js</p>\n</blockquote>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> a <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./js/a&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> b <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./js/b&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> index <span class=\"keyword\">from</span> <span class=\"string\">&#x27;./js/index&#x27;</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> <span class=\"string\">&#x27;./css/index.css&#x27;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">const</span> main = <span class=\"function\">() =&gt;</span> &#123;</span><br><span class=\"line\">   <span class=\"built_in\">console</span>.log(<span class=\"string\">&#x27;入口函数 main 被调用了&#x27;</span>)</span><br><span class=\"line\">   a.init()</span><br><span class=\"line\">   a.binit()</span><br><span class=\"line\">   b.init()</span><br><span class=\"line\">   index.init()</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">main()</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>项目根文件夹下执行命令 <code>npm i webpack webpack-cli -D</code></p>\n</li>\n<li><p>使用 <code>npm i jquery</code> 安装 jQuery 类库</p>\n</li>\n<li><p>直接在页面上引用 <code>main.js</code> 会报错，因为浏览器不认识 <code>import $ from &#39;jquery&#39;</code> 这种JS语法，需要使用 webpack 进行处理，webpack 默认会把这种高级的语法转换为低级的浏览器能识别的语法：</p>\n<figure class=\"highlight html\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">ul</span> <span class=\"attr\">id</span>=<span class=\"string\">&quot;list&quot;</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>2<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>3<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\">   <span class=\"tag\">&lt;<span class=\"name\">li</span>&gt;</span>4<span class=\"tag\">&lt;/<span class=\"name\">li</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">ul</span>&gt;</span></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 直接引入会报错 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">script</span> <span class=\"attr\">src</span>=<span class=\"string\">&quot;./main.js&quot;</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">script</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行 <code>webpack 入口文件路径 模式</code> 运行 <code>main.js</code> 入口文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">webpack src/main.js --mode development # 开发环境</span><br><span class=\"line\">或者</span><br><span class=\"line\">webpack src/main.js --mode production  # 生产环境</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>不过每次都要输入这个命令，非常麻烦，我们可以在<code>package.json</code>的<code>scripts</code>中加入两个指令成员：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;scripts&quot;: &#123;</span><br><span class=\"line\">   &quot;dev&quot;: &quot;webpack src/main.js --mode development&quot;,</span><br><span class=\"line\">   &quot;build&quot;: &quot;webpack src/main.js --mode production&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<p>以后只需要在命令行执行 <code>npm run dev</code> 便相当于执行 <code>webpack --mode development</code> ，执行 <code>npm run build</code> 便相当于执行 <code>webpack --mode production</code>。</p>\n</li>\n</ol>\n<h2 id=\"使用配置文件简化打包命令\"><a href=\"#使用配置文件简化打包命令\" class=\"headerlink\" title=\"使用配置文件简化打包命令\"></a>使用配置文件简化打包命令</h2><ol>\n<li><p>在项目根目录中创建 <code>webpack.config.js</code></p>\n</li>\n<li><p>由于运行 webpack 命令的时候，webpack 需要指定入口文件和输出文件的路径，所以我们需要在 <code>webpack.config.js</code> 中配置这两个路径：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入处理路径的模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出一个配置对象，将来 webpack 在启动的时候，</span></span><br><span class=\"line\"><span class=\"comment\">// 会默认来查找 webpack.config.js ，</span></span><br><span class=\"line\"><span class=\"comment\">// 并读取这个文件中导出的配置对象，来进行打包处理</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">   <span class=\"comment\">// 配置入口文件，表示要使用 webpack 打包哪个文件</span></span><br><span class=\"line\">   <span class=\"comment\">// 若不配置 webpack 将自动查找 src 目录下的 index.js 文件</span></span><br><span class=\"line\">   entry: &#123;</span><br><span class=\"line\">      main: path.join(__dirname, <span class=\"string\">&#x27;./src/main.js&#x27;</span>)</span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   output: &#123;</span><br><span class=\"line\">      filename: <span class=\"string\">&quot;[name].bundle.[hash].js&quot;</span>, <span class=\"comment\">//输出文件名，[name]表示入口文件js名，[hash]会在后面生成随机hash值</span></span><br><span class=\"line\">      path: path.join(__dirname, <span class=\"string\">&quot;./dist&quot;</span>) <span class=\"comment\">//输出文件路径</span></span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于此时已经配置了入口文件，<code>package.json</code> 中的脚本命令就可简化为：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack --mode development&quot;,</span><br><span class=\"line\">&quot;build&quot;: &quot;webpack --mode production&quot;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"实现-webpack-实时打包构建\"><a href=\"#实现-webpack-实时打包构建\" class=\"headerlink\" title=\"实现 webpack 实时打包构建\"></a>实现 webpack 实时打包构建</h2><p>webpack 提供了一个可选的本地开发服务器，这个本地服务器基于 node.js 构建，它是一个单独的插件，叫做 <code>webpack-dev-server</code> ，在 webpack 中进行配置之前需要单独安装它作为项目依赖。</p>\n<p>devServer 作为 webpack 配置选项中的一项，以下是它的一些配置选项:</p>\n<ul>\n<li><code>contentBase</code> ：设置服务器所读取文件的目录，当前我们设置为”./dist”</li>\n<li><code>port</code> ：设置端口号，如果省略，默认为<code>8080</code></li>\n<li><code>inline</code> ：设置为<code>true</code>，当源文件改变时会自动刷新页面</li>\n<li><code>historyApiFallback</code> ：设置为<code>true</code>，所有的跳转将指向<code>index.html</code></li>\n</ul>\n<ol>\n<li><p>由于每次重新修改代码之后，都需要手动运行 webpack 打包的命令，比较麻烦，所以使用 <code>webpack-dev-server</code> 来实现代码实时打包编译，当修改代码之后，会自动进行打包构建。</p>\n</li>\n<li><p>运行 <code>npm i webpack-dev-server -D</code> 安装到开发依赖</p>\n</li>\n<li><p>安装完成之后，修改之前在 <code>package.json</code> 中添加的 dev 指令：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --mode development&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行指令 <code>npm run dev</code> ，发现可以进行实时打包，但是 dist 目录下并没有生成 <code>main.bundle.js</code> 文件，这是因为 <code>webpack-dev-server</code> 将打包好的文件放在了内存中。</p>\n<ul>\n<li><p>把 <code>bundle.js</code> 放在内存中的好处是：由于需要实时打包编译，所以放在内存中速度会非常快</p>\n</li>\n<li><p>这个时候访问 webpack-dev-server 启动的 <code>http://localhost:8080/</code> 网站，发现是一个文件夹的面板，需要点击到 src 目录下，才能打开我们的 index 首页，此时引用不到 <code>main.bundle.js</code> 文件，需要修改 index.html 中 script 的 src 属性为:<code>&lt;script src=&quot;../main.bundle.js&quot;&gt;&lt;/script&gt;</code></p>\n</li>\n<li><p>为了能在访问 <code>http://localhost:8080/</code> 的时候直接访问到 index 首页，可以使用 <code>--contentBase src</code> 指令来修改dev指令，指定启动的根目录：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --mode development --contentBase src&quot;,</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"插件（Plugins）\"><a href=\"#插件（Plugins）\" class=\"headerlink\" title=\"插件（Plugins）\"></a>插件（Plugins）</h2><p>插件（Plugins）是用来拓展 webpack 功能的，它们会在整个构建过程中生效，执行相关的任务。<br>Loaders 和 Plugins 常常被弄混，但是它们其实是完全不同的东西，可以这么来说，loaders 是在打包构建过程中用来处理源文件的（JSX，Scss，Less..），一次处理一个，插件并不直接操作单个文件，它直接对整个构建过程其作用。</p>\n<h3 id=\"使用-html-webpack-plugin-插件配置启动页面\"><a href=\"#使用-html-webpack-plugin-插件配置启动页面\" class=\"headerlink\" title=\"使用 html-webpack-plugin 插件配置启动页面\"></a>使用 <code>html-webpack-plugin</code> 插件配置启动页面</h3><p>由于使用 <code>--contentBase</code> 指令的过程比较繁琐，需要指定启动的目录，同时还需要修改 index.html 中 script 标签的 src 属性，所以推荐使用 <code>html-webpack-plugin</code> 插件配置启动页面。</p>\n<ol>\n<li><p>运行 <code>npm i html-webpack-plugin -D</code> 安装到开发依赖</p>\n</li>\n<li><p>修改 <code>webpack.config.js</code> 配置文件如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 导入处理路径的模块</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> path = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;path&#x27;</span>)</span><br><span class=\"line\"><span class=\"comment\">// 导入自动生成HTMl文件的插件</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> htmlWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;html-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 导出一个配置对象，将来 webpack 在启动的时候，</span></span><br><span class=\"line\"><span class=\"comment\">// 会默认来查找 webpack.config.js ，</span></span><br><span class=\"line\"><span class=\"comment\">// 并读取这个文件中导出的配置对象，来进行打包处理</span></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 配置入口文件，表示要使用 webpack 打包哪个文件</span></span><br><span class=\"line\">    <span class=\"comment\">// 若不配置 webpack 将自动查找 src 目录下的 index.js 文件</span></span><br><span class=\"line\">    entry: &#123;</span><br><span class=\"line\">        main: path.join(__dirname, <span class=\"string\">&#x27;./src/main.js&#x27;</span>)</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    output: &#123;</span><br><span class=\"line\">        filename: <span class=\"string\">&quot;[name].bundle.js&quot;</span>, <span class=\"comment\">//输出文件名，[name]表示入口文件js名</span></span><br><span class=\"line\">        path: path.join(__dirname, <span class=\"string\">&quot;./dist&quot;</span>) <span class=\"comment\">//输出文件路径</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    plugins: [ <span class=\"comment\">// 添加plugins节点配置插件</span></span><br><span class=\"line\">        <span class=\"keyword\">new</span> htmlWebpackPlugin(&#123;</span><br><span class=\"line\">            template: path.join(__dirname, <span class=\"string\">&#x27;./src/index.html&#x27;</span>), <span class=\"comment\">//模板路径</span></span><br><span class=\"line\">            filename: <span class=\"string\">&#x27;index.html&#x27;</span>, <span class=\"comment\">//自动生成的HTML文件的名称</span></span><br><span class=\"line\">            minify: &#123; <span class=\"comment\">// 压缩HTML文件</span></span><br><span class=\"line\">               removeComments: <span class=\"literal\">true</span>, <span class=\"comment\">// 移除HTML中的注释</span></span><br><span class=\"line\">               collapseWhitespace: <span class=\"literal\">true</span>, <span class=\"comment\">// 删除空白符与换行符</span></span><br><span class=\"line\">               minifyCSS: <span class=\"literal\">true</span> <span class=\"comment\">// 压缩内联css</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;)</span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>撤销 <code>package.json</code> 中 <code>script</code> 节点中的 dev 指令为：<br><code>dev&quot;: &quot;webpack-dev-server --mode development&quot;</code></p>\n</li>\n<li><p>将 index.html 中 script 标签注释掉，因为 <code>html-webpack-plugin</code> 插件会自动把 main.bundle.js 注入到 index.html 页面中。</p>\n</li>\n</ol>\n<h3 id=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"><a href=\"#实现自动打开浏览器、热更新和配置浏览器的默认端口号\" class=\"headerlink\" title=\"实现自动打开浏览器、热更新和配置浏览器的默认端口号\"></a>实现自动打开浏览器、热更新和配置浏览器的默认端口号</h3><h4 id=\"方式1：\"><a href=\"#方式1：\" class=\"headerlink\" title=\"方式1：\"></a>方式1：</h4><p>修改 <code>package.json</code> 的 script 节点如下，其中 <code>--open</code> 表示自动打开浏览器， <code>--port 4321</code> 表示打开的端口号为 4321 ，<code>--hot</code> 表示启用浏览器热更新：</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;dev&quot;: &quot;webpack-dev-server --open --port 4321 --hot  --mode development&quot;,</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"方式2：-个人推荐\"><a href=\"#方式2：-个人推荐\" class=\"headerlink\" title=\"方式2：(个人推荐)\"></a>方式2：(个人推荐)</h4><ol>\n<li><p>修改 <code>webpack.config.js</code> 文件，新增 <code>devServer</code> 节点如下：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">devServer: &#123;</span><br><span class=\"line\">     inline: <span class=\"literal\">true</span>, <span class=\"comment\">//打包后加入一个 websocket 客户端</span></span><br><span class=\"line\">     hot: <span class=\"literal\">true</span>, <span class=\"comment\">// 启用热更新 的 第1步</span></span><br><span class=\"line\">     open: <span class=\"literal\">true</span>, <span class=\"comment\">// 自动打开浏览器</span></span><br><span class=\"line\">     contentBase: path.resolve(__dirname, <span class=\"string\">&#x27;dist&#x27;</span>), <span class=\"comment\">// 指定托管的根目录，不注释的话，无法访问 src 以外的资源，比如 node_modules</span></span><br><span class=\"line\">     host: <span class=\"string\">&#x27;localhost&#x27;</span>, <span class=\"comment\">// 主机地址</span></span><br><span class=\"line\">     port: <span class=\"number\">4321</span>, <span class=\"comment\">// 设置启动时候的运行端口</span></span><br><span class=\"line\">     compress: <span class=\"literal\">true</span> <span class=\"comment\">// 开发服务器是否启动gzip等压缩</span></span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在头部引入 <code>webpack</code> 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启用热更新的 第2步</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> webpack = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack&#x27;</span>)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>在 <code>plugins</code> 节点下新增：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 启用热更新的第 3 步</span></span><br><span class=\"line\"><span class=\"keyword\">new</span> webpack.HotModuleReplacementPlugin()</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h2 id=\"Loaders\"><a href=\"#Loaders\" class=\"headerlink\" title=\"Loaders\"></a>Loaders</h2><p>loaders 是 webpack 最强大的功能之一，通过不同的 loader ，webpack 有能力调用外部的脚本或工具，实现对不同格式的文件的处理，例如把 <code>scss</code> 转为 <code>css</code> ，将 ES6 、ES7 等语法转化为当前浏览器能识别的语法，将 JSX 转化为 js 等多项功能。</p>\n<p>loaders 需要单独安装并且需要在 <code>webpack.config.js</code> 中的 <code>modules</code> 配置项下进行配置，Loaders的配置包括以下几方面：</p>\n<ul>\n<li><code>test</code>：一个用以匹配 loaders 所处理文件的拓展名的正则表达式（必须）</li>\n<li><code>loader</code>：loader的名称（必须）</li>\n<li><code>include/exclude</code>：手动添加必须处理的文件（文件夹）或屏蔽不需要处理的文件（文件夹）（可选）；</li>\n<li><code>options</code>：为loaders提供额外的设置选项（可选）</li>\n</ul>\n<h3 id=\"打包-css-文件\"><a href=\"#打包-css-文件\" class=\"headerlink\" title=\"打包 css 文件\"></a>打包 css 文件</h3><ol>\n<li><p>运行<code>npm i style-loader css-loader --D</code></p>\n</li>\n<li><p>修改 <code>webpack.config.js</code> 这个配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>: &#123; <span class=\"comment\">// 用来配置第三方loader模块的</span></span><br><span class=\"line\">    rules: [ <span class=\"comment\">// 文件的匹配规则</span></span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">            use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>]</span><br><span class=\"line\">        &#125; <span class=\"comment\">//处理css文件的规则</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>注意：<code>use</code> 表示使用哪些模块来处理 <code>test</code> 所匹配到的文件；<code>use</code> 中相关 loader 模块的调用顺序是从后向前调用的。</p>\n</li>\n</ol>\n<h3 id=\"打包-less-文件\"><a href=\"#打包-less-文件\" class=\"headerlink\" title=\"打包 less 文件\"></a>打包 less 文件</h3><ol>\n<li><p>如果你习惯使用 less ，可以执行命令 <code>npm i less-loader less -D</code> 来安装 less-loader 。</p>\n</li>\n<li><p>修改 <code>webpack.config.js</code> 配置文件：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.less$/</span>,</span><br><span class=\"line\">    use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;less-loader&#x27;</span>]</span><br><span class=\"line\">&#125;, <span class=\"comment\">//配置处理 .less 文件的第三方 loader 规则</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"打包-sass-文件\"><a href=\"#打包-sass-文件\" class=\"headerlink\" title=\"打包 sass 文件\"></a>打包 sass 文件</h3><ol>\n<li><p>例如我平常习惯用 scss，所以会安装 sass-loader ：执行命令 <code>npm i sass-loader node-sass --D</code></p>\n</li>\n<li><p>在 <code>webpack.config.js</code> 中添加处理 sass 文件的 loader 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">   test: <span class=\"regexp\">/\\.scss$/</span>,</span><br><span class=\"line\">   use: [<span class=\"string\">&#x27;style-loader&#x27;</span>, <span class=\"string\">&#x27;css-loader&#x27;</span>, <span class=\"string\">&#x27;sass-loader&#x27;</span>]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"><span class=\"comment\">// 配置处理 .scss 文件的 第三方 loader 规则（npm i sass-loader后还需要 npm i node-sass，否则编译报错）</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"处理-css-中的图片路径\"><a href=\"#处理-css-中的图片路径\" class=\"headerlink\" title=\"处理 css 中的图片路径\"></a>处理 css 中的图片路径</h3><blockquote>\n<p>预备工作：</p>\n<ol>\n<li>在 src/css/index.css 文件中给 body 添加：background-image: url(“../images/temp.png”);</li>\n<li>此时保存会编译报错，因为 webpack 无法处理 css 中的路径（此案例中为——图片资源）</li>\n</ol>\n</blockquote>\n<ol>\n<li><p>运行 <code>npm i url-loader file-loader --D</code></p>\n</li>\n<li><p>在 <code>webpack.config.js</code> 中添加处理 url 路径的 loader 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(jpg|png|bmp|gif|jpeg)$/</span>,</span><br><span class=\"line\">    use:[&#123;</span><br><span class=\"line\">       loader:<span class=\"string\">&#x27;url-loader&#x27;</span>,</span><br><span class=\"line\">       options:&#123;</span><br><span class=\"line\">          outputPath:<span class=\"string\">&#x27;images/&#x27;</span>,<span class=\"comment\">//输出到images文件夹</span></span><br><span class=\"line\">          <span class=\"comment\">//是把小于500B的文件打成 Base64 的格式，写入JS</span></span><br><span class=\"line\">          <span class=\"comment\">// 如果不小于，url-loader 就会使用 file-loader 处理图片</span></span><br><span class=\"line\">          <span class=\"comment\">// 所以必须安装file-loader</span></span><br><span class=\"line\">          limit:<span class=\"number\">500</span></span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;]</span><br><span class=\"line\">&#125;, <span class=\"comment\">// 配置图片路径</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h3 id=\"处理-Bootstrap-字体的加载\"><a href=\"#处理-Bootstrap-字体的加载\" class=\"headerlink\" title=\"处理 Bootstrap 字体的加载\"></a>处理 Bootstrap 字体的加载</h3><p>**重要(更新)**：webpack4后的 bootstrap 字体加载已经不能使用下面该方法，如何使用可以参考这篇博客：<a href=\"https://blog.csdn.net/hyt941026/article/details/82870466\">webpack 4.X版本的简单使用(处理js/css/less/scss/url(图片)/字体文件)</a></p>\n<blockquote>\n<p>预备工作：</p>\n<p>index.html 写入</p>\n<p>来展示字体图片</p>\n<p>main.js 导入 import ‘bootstrap/dist/css/bootstrap.css’</p>\n<p>此时报错</p>\n</blockquote>\n<p>在 <code>webpack.config.js</code> 中添加处理字体文件的 loader 模块：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.(ttf|eot|svg|woff|woff2)$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;url-loader&#x27;</span></span><br><span class=\"line\">&#125;, <span class=\"comment\">// 处理 字体文件的 loader</span></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"提取css文件（插件！）\"><a href=\"#提取css文件（插件！）\" class=\"headerlink\" title=\"提取css文件（插件！）\"></a>提取css文件（插件！）</h3><p>先安装 mini-css-extract-plugin 包：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install mini-css-extract-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>然后在 <code>webpack.config.js</code> 中修改对css文件处理的配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 提取css</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> MiniCssExtractPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&quot;mini-css-extract-plugin&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            process.env.NODE_ENV === <span class=\"string\">&#x27;development&#x27;</span> ? <span class=\"string\">&#x27;style-loader&#x27;</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">            <span class=\"string\">&#x27;css-loader&#x27;</span>] <span class=\"comment\">//处理css</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> MiniCssExtractPlugin(&#123;</span><br><span class=\"line\">        filename: <span class=\"string\">&#x27;style.css&#x27;</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"添加浏览器css前缀\"><a href=\"#添加浏览器css前缀\" class=\"headerlink\" title=\"添加浏览器css前缀\"></a>添加浏览器css前缀</h3><p>首先下载 loader ：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i postcss-loader autoprefixer -D</span><br></pre></td></tr></table></figure>\n\n<p>然后根目录添加 <code>postcss.config.js</code></p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    plugins: &#123;</span><br><span class=\"line\">        <span class=\"string\">&#x27;autoprefixer&#x27;</span>: &#123;</span><br><span class=\"line\">            browsers: <span class=\"string\">&#x27;last 5 version&#x27;</span> <span class=\"comment\">// 代表意思为每个主流浏览器的最后5个版本</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>最后在 <code>webpack.config.js</code> 中添加配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">rules: [</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        test: <span class=\"regexp\">/\\.css$/</span>,</span><br><span class=\"line\">        use: [</span><br><span class=\"line\">            process.env.NODE_ENV === <span class=\"string\">&#x27;development&#x27;</span> ? <span class=\"string\">&#x27;style-loader&#x27;</span> : MiniCssExtractPlugin.loader,</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                loader: <span class=\"string\">&#x27;css-loader&#x27;</span>,</span><br><span class=\"line\">                options: &#123;</span><br><span class=\"line\">                    importLoaders: <span class=\"number\">1</span></span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;postcss-loader&quot;</span></span><br><span class=\"line\">        ] <span class=\"comment\">//处理css</span></span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    ...</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"使用-babel-处理高级-JS-语法\"><a href=\"#使用-babel-处理高级-JS-语法\" class=\"headerlink\" title=\"使用 babel 处理高级 JS 语法\"></a>使用 babel 处理高级 JS 语法</h3><ol>\n<li><p>在 main.js 文件中添加 ES6 代码：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// class 关键字，是ES6中提供的新语法，是用来 实现 ES6 中面向对象编程的方式</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 使用 static 关键字，可以定义静态属性</span></span><br><span class=\"line\">    <span class=\"comment\">// 所谓的静态属性，就是 可以直接通过 类名， 直接访问的属性</span></span><br><span class=\"line\">    <span class=\"comment\">// 实例属性： 只能通过类的实例，来访问的属性，叫做实例属性</span></span><br><span class=\"line\">    <span class=\"keyword\">static</span> info = &#123;</span><br><span class=\"line\">        name: <span class=\"string\">&#x27;zs&#x27;</span>,</span><br><span class=\"line\">        age: <span class=\"number\">20</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 访问 Person 类身上的  info 静态属性</span></span><br><span class=\"line\"><span class=\"built_in\">console</span>.log(Person.info)</span><br><span class=\"line\"><span class=\"comment\">// 在 webpack 中，默认只能处理 一部分 ES6 的新语法，一些更高级的ES6语法或者 ES7 语法，webpack 是处理不了的；这时候，就需要 借助于第三方的 loader，来帮助webpack 处理这些高级的语法，当第三方loader 把 高级语法转为 低级的语法之后，会把结果交给 webpack 去打包到 bundle.js 中</span></span><br><span class=\"line\"><span class=\"comment\">// 通过 Babel ，可以帮我们将 高级的语法转换为 低级的语法</span></span><br></pre></td></tr></table></figure>\n</li>\n<li><p>运行如下两套命令，安装两套包，去安装 Babel 相关的loader功能：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 【相当于转换工具】</span><br><span class=\"line\">npm i -D @babel/core babel-loader @babel/plugin-transform-runtime @babel/runtime @babel/plugin-proposal-class-properties</span><br><span class=\"line\">// 【相当于字典】</span><br><span class=\"line\">npm i -D @babel/preset-env</span><br><span class=\"line\"></span><br><span class=\"line\">// =====&gt; 「转换工具」根据「字典」将 es6 转换</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>打开 webpack 的配置文件，在 module 节点下的 rules 数组中，添加一个新的匹配规则：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    test: <span class=\"regexp\">/\\.js$/</span>,</span><br><span class=\"line\">    use: <span class=\"string\">&#x27;babel-loader&#x27;</span>,</span><br><span class=\"line\">    exclude: <span class=\"regexp\">/node_modules/</span></span><br><span class=\"line\">&#125; <span class=\"comment\">// 配置 Babel 来转换高级的ES语法</span></span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>2.2</p>\n<p>注意： 在配置 babel 的 loader 规则的时候，必须 把 node_modules 目录，通过 exclude 选项排除掉：原因有俩：</p>\n<p>2.2.1</p>\n<p>如果 不排除 node_modules， 则Babel 会把 node_modules 中所有的 第三方 JS 文件，都打包编译，这样，会非常消耗CPU，同时，打包速度非常慢；</p>\n<p>2.2.2</p>\n<p>哪怕，最终，Babel 把 所有 node_modules 中的JS转换完毕了，但是，项目也无法正常运行！</p>\n</blockquote>\n</li>\n<li><p>在项目的根目录中，新建一个叫做 <code>.babelrc</code> 的 Babel 配置文件，这个配置文件，属于 JSON 格式，所以，在写 <code>.babelrc</code> 配置的时候，必须符合 JSON 语法规范： 不能写注释，字符串必须用双引号：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    <span class=\"string\">&quot;presets&quot;</span>: [</span><br><span class=\"line\">        [<span class=\"string\">&quot;@babel/preset-env&quot;</span>, &#123;</span><br><span class=\"line\">            <span class=\"string\">&quot;modules&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">            <span class=\"string\">&quot;targets&quot;</span>: &#123;</span><br><span class=\"line\">                <span class=\"string\">&quot;browsers&quot;</span>: [<span class=\"string\">&quot;&gt; 1%&quot;</span>, <span class=\"string\">&quot;last 2 versions&quot;</span>, <span class=\"string\">&quot;not ie &lt;= 8&quot;</span>]</span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            <span class=\"string\">&quot;useBuiltIns&quot;</span>: <span class=\"string\">&quot;usage&quot;</span></span><br><span class=\"line\">        &#125;]</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    <span class=\"string\">&quot;plugins&quot;</span>: [</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/plugin-transform-runtime&quot;</span>,</span><br><span class=\"line\">        <span class=\"string\">&quot;@babel/plugin-proposal-class-properties&quot;</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h4 id=\"webpack-config-js配置遇到Error-Cannot-find-module-‘-babel-core’问题\"><a href=\"#webpack-config-js配置遇到Error-Cannot-find-module-‘-babel-core’问题\" class=\"headerlink\" title=\"webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’问题\"></a><a href=\"https://www.cnblogs.com/soyxiaobi/p/9554565.html\">webpack.config.js配置遇到Error: Cannot find module ‘@babel/core’问题</a></h4><blockquote>\n<p><strong>官方默认babel-loader | babel 对应的版本需要一致: 即babel-loader需要搭配最新版本babel</strong></p>\n</blockquote>\n<p>两种解决方案:</p>\n<ol>\n<li>回退低版本</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-loader@7 babel-core babel-preset-env</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>更新到最高版本:</li>\n</ol>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm install -D babel-loader @babel/core @babel/preset-env webpack</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩和优化css文件\"><a href=\"#压缩和优化css文件\" class=\"headerlink\" title=\"压缩和优化css文件\"></a>压缩和优化css文件</h2><p>下载 <code>optimize-css-assets-webpack-plugin</code> 插件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i optimize-css-assets-webpack-plugin -D</span><br></pre></td></tr></table></figure>\n\n<p>在 <code>webpack.config.js</code> 中引入插件并添加配置：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 压缩css</span></span><br><span class=\"line\"><span class=\"keyword\">const</span> OptimizeCssAssetsPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;optimize-css-assets-webpack-plugin&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">plugins: [</span><br><span class=\"line\">    <span class=\"keyword\">new</span> OptimizeCssAssetsPlugin(&#123;</span><br><span class=\"line\">        assetNameRegExp: <span class=\"regexp\">/\\.css$/g</span>, <span class=\"comment\">//一个正则表达式，指示应优化/最小化的资产的名称。提供的正则表达式针对配置中ExtractTextPlugin实例导出的文件的文件名运行，而不是源CSS文件的文件名。默认为/\\.css$/g</span></span><br><span class=\"line\">        cssProcessor: <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;cssnano&#x27;</span>), <span class=\"comment\">//用于优化\\最小化CSS的CSS处理器，默认为cssnano</span></span><br><span class=\"line\">        cssProcessorOptions: &#123;</span><br><span class=\"line\">            safe: <span class=\"literal\">true</span>,</span><br><span class=\"line\">            discardComments: &#123;</span><br><span class=\"line\">                removeAll: <span class=\"literal\">true</span></span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;, <span class=\"comment\">//传递给cssProcessor的选项，默认为&#123;&#125;</span></span><br><span class=\"line\">        canPrint: <span class=\"literal\">true</span> <span class=\"comment\">//一个布尔值，指示插件是否可以将消息打印到控制台，默认为true</span></span><br><span class=\"line\">    &#125;),</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"压缩和优化js文件\"><a href=\"#压缩和优化js文件\" class=\"headerlink\" title=\"压缩和优化js文件\"></a>压缩和优化js文件</h2><figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yarn add webpack-parallel-uglify-plugin -D</span><br><span class=\"line\"><span class=\"keyword\">const</span> WebpackParallelUglifyPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;webpack-parallel-uglify-plugin&#x27;</span>)</span><br><span class=\"line\">plugins: [</span><br><span class=\"line\"><span class=\"keyword\">new</span> WebpackParallelUglifyPlugin(&#123;</span><br><span class=\"line\">      uglifyJS: &#123;</span><br><span class=\"line\">        output: &#123;</span><br><span class=\"line\">          beautify: <span class=\"literal\">false</span>, <span class=\"comment\">//不需要格式化</span></span><br><span class=\"line\">          comments: <span class=\"literal\">false</span> <span class=\"comment\">//不保留注释</span></span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        compress: &#123;</span><br><span class=\"line\">          warnings: <span class=\"literal\">false</span>, <span class=\"comment\">// 在UglifyJs删除没有用到的代码时不输出警告</span></span><br><span class=\"line\">          drop_console: <span class=\"literal\">true</span>, <span class=\"comment\">// 删除所有的 `console` 语句，可以兼容ie浏览器</span></span><br><span class=\"line\">          collapse_vars: <span class=\"literal\">true</span>, <span class=\"comment\">// 内嵌定义了但是只用到一次的变量</span></span><br><span class=\"line\">          reduce_vars: <span class=\"literal\">true</span> <span class=\"comment\">// 提取出出现多次但是没有定义成变量去引用的静态值</span></span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"提取公共文件\"><a href=\"#提取公共文件\" class=\"headerlink\" title=\"提取公共文件\"></a>提取公共文件</h2><p>我们可看到 <code>src/js/a.js</code> 和 <code>src/main.js</code> 都引入了 <code>src/js/b.js</code> 文件，为什么要提取公共代码，简单来说，就是减少代码冗余，提高加载速度。和之前的 webpack 配置不一样：</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//之前配置</span></span><br><span class=\"line\"><span class=\"comment\">// new webpack.optimize.SplitChunksPlugin(&#123;</span></span><br><span class=\"line\"><span class=\"comment\">//     name: &#x27;common&#x27;, // 如果还要提取公共代码,在新建一个实例</span></span><br><span class=\"line\"><span class=\"comment\">//     minChunks: 2, //重复两次之后就提取出来</span></span><br><span class=\"line\"><span class=\"comment\">//     chunks: [&#x27;index&#x27;, &#x27;a&#x27;] // 指定提取范围</span></span><br><span class=\"line\"><span class=\"comment\">// &#125;),</span></span><br><span class=\"line\"><span class=\"comment\">//现在配置</span></span><br><span class=\"line\">optimization: &#123;</span><br><span class=\"line\">    splitChunks: &#123;</span><br><span class=\"line\">        cacheGroups: &#123;</span><br><span class=\"line\">            commons: &#123;  <span class=\"comment\">// 抽离自己写的公共代码</span></span><br><span class=\"line\">                chunks: <span class=\"string\">&quot;initial&quot;</span>,</span><br><span class=\"line\">                name: <span class=\"string\">&quot;common&quot;</span>, <span class=\"comment\">// 打包后的文件名，任意命名</span></span><br><span class=\"line\">                minChunks: <span class=\"number\">2</span>,<span class=\"comment\">//最小引用2次</span></span><br><span class=\"line\">                minSize: <span class=\"number\">0</span> <span class=\"comment\">// 只要超出0字节就生成一个新包</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">            vendor: &#123;   <span class=\"comment\">// 抽离第三方插件</span></span><br><span class=\"line\">                test: <span class=\"regexp\">/node_modules/</span>,   <span class=\"comment\">// 指定是node_modules下的第三方包</span></span><br><span class=\"line\">                chunks: <span class=\"string\">&#x27;initial&#x27;</span>,</span><br><span class=\"line\">                name: <span class=\"string\">&#x27;vendor&#x27;</span>,  <span class=\"comment\">// 打包后的文件名，任意命名</span></span><br><span class=\"line\">                <span class=\"comment\">// 设置优先级，防止和自定义的公共代码提取时被覆盖，不进行打包</span></span><br><span class=\"line\">                priority: <span class=\"number\">10</span></span><br><span class=\"line\">            &#125;,</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Source-Maps-调试配置\"><a href=\"#Source-Maps-调试配置\" class=\"headerlink\" title=\"Source Maps 调试配置\"></a>Source Maps 调试配置</h2><p>作为开发，代码调试当然少不了，那么问题来了，经过打包后的文件，你是不容易找到出错的地方的，<code>Source Map</code>就是用来解决这个问题的。</p>\n<p>通过如下配置，我们会在打包时生成对应于打包文件的 <code>.map</code> 文件，使得编译后的代码可读性更高，更易于调试。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    devtool: <span class=\"string\">&#x27;source-map&#x27;</span> <span class=\"comment\">// 会生成对于调试的完整的.map文件，但同时也会减慢打包速度</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>配置好后，我们再次运行 <code>npm run build</code> 进行打包，这时我们会发现在 <code>dist</code> 文件夹中多出了一个 <code>bundle.js.map</code></p>\n<p>如果我们的代码有 bug ，在浏览器的调试工具中会提示错误出现的位置，这就是 <code>devtool: &#39;source-map&#39;</code> 配置项的作用。</p>\n<h2 id=\"开发环境-VS-生产环境\"><a href=\"#开发环境-VS-生产环境\" class=\"headerlink\" title=\"开发环境 VS 生产环境\"></a>开发环境 VS 生产环境</h2><h3 id=\"npm-run-dev\"><a href=\"#npm-run-dev\" class=\"headerlink\" title=\"npm run dev\"></a>npm run dev</h3><p><strong>npm run dev</strong> 是我们开发环境下打包的文件，当然由于 devServer 帮我们把文件放到内存中了，所以并不会输出打包后的 dist 文件夹。</p>\n<h3 id=\"npm-run-build\"><a href=\"#npm-run-build\" class=\"headerlink\" title=\"npm run build\"></a>npm run build</h3><p>通过 <strong>npm run build</strong> 之后会生成一个dist目录文件夹，里面有我们打包后的文件。</p>\n<h2 id=\"清理-dist文件夹-CleanwebpackPlugin\"><a href=\"#清理-dist文件夹-CleanwebpackPlugin\" class=\"headerlink\" title=\"清理/dist文件夹(CleanwebpackPlugin)\"></a>清理<code>/dist</code>文件夹(CleanwebpackPlugin)</h2><p>你可能已经注意到，在我们删掉 <code>/dist</code> 文件夹之前，由于前面的代码示例遗留，导致我们的 <code>/dist</code> 文件夹比较杂乱。<code>webpack</code> 会生成文件，然后将这些文件放置在 <code>/dist</code> 文件夹中，但是 <code>webpack</code> 无法追踪到哪些文件是实际在项目中用到的。</p>\n<p>通常，在每次构建前清理 <code>/dist</code> 文件夹，是比较推荐的做法，因此只会生成用到的文件，这时候就用到 <code>CleanWebpackPlugin</code> 插件了。</p>\n<figure class=\"highlight js\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm i clean-webpack-plugin -D</span><br><span class=\"line\"><span class=\"comment\">// webpack.config.js</span></span><br><span class=\"line\">...</span><br><span class=\"line\"><span class=\"keyword\">const</span> CleanWebpackPlugin = <span class=\"built_in\">require</span>(<span class=\"string\">&#x27;clean-webpack-plugin&#x27;</span>); <span class=\"comment\">// 引入CleanWebpackPlugin插件</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"built_in\">module</span>.exports = &#123;</span><br><span class=\"line\">    ...</span><br><span class=\"line\">    plugins: [</span><br><span class=\"line\">        ...</span><br><span class=\"line\">        <span class=\"keyword\">new</span> CleanWebpackPlugin(),  <span class=\"comment\">// 以前括号里面要传入数组([dist])来指定要删除的目录，新版 CleanWebpackPlugin 不需要传任何参数了</span></span><br><span class=\"line\">    ]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>插件的使用方法都是一样的，首先引入，然后new一个实例，实例可传入参数。</p>\n<p>现在我们运行 <code>npm run build</code> 后就会发现，webpack 会先将 <code>/dist</code> 文件夹删除，然后再生产新的 <code>/dist</code> 文件夹。</p>\n<h2 id=\"webpack4-x-相关资源\"><a href=\"#webpack4-x-相关资源\" class=\"headerlink\" title=\"webpack4.x 相关资源\"></a>webpack4.x 相关资源</h2><ul>\n<li><strong><a href=\"https://www.cnblogs.com/BetterMan-/p/9867642.html\">webpack4.x最详细入门讲解</a></strong></li>\n<li><a href=\"https://segmentfault.com/a/1190000018866232\">从基础到实战 手摸手带你掌握新版Webpack4.0详解 教你看文档</a></li>\n</ul>\n<h2 id=\"webpack3-与-webpack4-使用差异\"><a href=\"#webpack3-与-webpack4-使用差异\" class=\"headerlink\" title=\"webpack3 与 webpack4 使用差异\"></a>webpack3 与 webpack4 使用差异</h2><ul>\n<li><a href=\"https://blog.csdn.net/u012443286/article/details/79504289\">webpack4.x开发环境配置</a></li>\n</ul>"},{"title":"<大话数据结构>笔记","abbrlink":51696,"date":"2019-01-08T16:01:26.000Z","_content":"\n## 前言\n\n之前对算法和数据结构没有一个系统的学习，从今天开始抽空啃啃书吧。就从这本程杰老师的《大话数据结构》起步。\n\np.s. 原笔记是存放在幕布上的，文字版看着不舒服可以 [点击这里](https://mubu.com/doc/bnO4e_64Ti) 看思维导图版。\n\n<!-- more -->\n\n- 数据结构绪论\n\n  - 基本概念和术语\n    - 数据\n      - 定义：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的集合符号。\n      - 总结：数据即符号，必备条件：\n        - 可以输入到计算机中\n        - 能被计算机程序处理\n      - 举例：\n        - MP3是声音数据\n        - 图片是图像数据\n      - \\#数据对象\n        - 定义：是性质相同的数据元素的集合，是数据的子集\n        - 举例：\n          - 人（都有姓名、生日等相同的数据项）\n        - \\#数据元素\n          - 定义：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被成为记录。\n          - 举例：\n            - 人类中的人\n            - 畜类中的牛马羊\n          - \\#数据项\n            - 定义：一个数据元素可以由若干个数据项组成\n            - 举例：\n              - 人的姓名、年龄、性别\n    - 数据结构\n      - 定义：是相互之间存在一种或多种特定关系的数据元素的集合\n      - \\#逻辑结构\n        - 定义：指数据对象中数据元素之间的相互关系\n        - 类型\n          - \\#集合结构\n            - 同属于一个集合的数据元素\n              - {% asset_img e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986 %}\n          - \\#线性结构\n            - 数据元素之间是一对一的关系\n              - {% asset_img 5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg 5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986 %}\n          - \\#树形结构\n            - 数据元素之间存在一对多的层次关系\n              - {% asset_img 7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg 7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986 %}\n          - \\#图形结构\n            - 数据元素是多对多的关系\n              - {% asset_img c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986 %}\n        - 用示意图表示数据逻辑结构时的注意点：\n          - 每个数据元素是一个结点，用圆圈表示\n          - 元素之间的逻辑关系用连线表示，如果此关系是有方向的，那么用箭头连线表示\n      - \\#物理结构\n        - 定义：是指数据的逻辑结构在计算机中的存储形式\n        - \\#顺序存储结构\n          - 定义：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的\n            - {% asset_img b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986 %}\n        - \\#链式存储结构\n          - 定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。\n            - {% asset_img 0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg 0987f1e7-fdea-4404-bce6-c377ed05532d-3051986 %}\n          - 注意：数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置\n\n- 算法\n\n  - 基本特性：输入、输出、有穷性、确定性和可行性\n  - 设计要求：正确性、可读性、健壮性、高效和低存储量\n  - 度量方法：事后统计（不科学、不准确）、事前分析估算 ✅\n  - 时间复杂度\n    - 概念\n      - 计算公式：T(n) = O(f(n))\n        - T(n)： 语句总的执行次数\n        - n： 问题规模\n        - f(n)： 问题规模 n 的某个函数\n      - 表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同\n    - 大O记法\n      - 定义：用大写O()来体现时间复杂度，简称为大O记法\n      - 推导大O阶方法：\n        - \\1. 用常数 1 取代运行时间中的所有加法常数\n        - \\2. 在修改后的运行次数函数中，只保留最高阶项\n        - \\3. 如果最高阶项存在且不是 1，则去除与这个项相乘的常数\n        - \\4. 得到的结果就是大 O 阶\n    - 常数阶\n      - 举例：高斯算法\n        - {% asset_img e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986 %}\n        - 此算法运行次数函数是 f(n)=3\n        - 推导：把常数项 3 改为 1 => 它没有最高阶 => 复杂度：O(1)\n    - 线性阶\n      - {% asset_img 69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg 69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986 %}\n      - 推导：循环体中代码需要执行 n 次 => 复杂度：O(n)\n    - 对数阶\n      - {% asset_img 972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg 972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986 %}\n      - 推导：每次 count 乘以 2 后，就距离 n 更近一分。换句话说，有多少个 2 相乘后大于 n，则会退出循环。由 2^x=n 得到 x=log(2)n。所以此循环复杂度：O(logn)\n    - 平方阶\n      - 举例1\n        - {% asset_img 7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg 7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986 %}\n        - 推导：两层循环，每层循环 n 次 => 复杂度：O(n^2)\n        - 如果把外层 n 改为 m，则复杂度：O(m✘n)\n      - 举例2\n        - {% asset_img 3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg 3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986 %}\n        - 复杂度：O(n^2)\n    - 常见时间复杂度\n      - {% asset_img f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg f30d6524-ce51-470e-9f30-f624a72b6131-3051986 %}\n      - 常见时间复杂度所耗费的时间从小到大：\n        - {% asset_img 621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg 621fb24b-7010-4e37-a761-0f178a4c0091-3051986 %}\n      - \n  - 空间复杂度\n    - 概念\n      - 计算公式：S(n) = O(f(n))\n        - S(n)：计算算法所耗的存储空间\n        - n： 问题规模\n        - f(n)： 问题规模 n 所占存储空间的函数\n  - 当不用限定词地使用“复杂度”时，指的都是时间复杂度\n  - 心得\n    - 明白算法的时间复杂度估算很重要，不要以“CPU越来越快，不用考虑算法优劣”为借口。愚公移山固然可敬，但发明炸药和推土机更加实在和聪明\n\n- 线性表\n\n  - 定义：零个或多个数据元素的有限序列\n    - 关键点：\n      - 是一个*有顺序*的序列\n      - 若元素存在多个，则第一个无前驱，最后一个无后继，中间部分都有且只有一个前驱和后继\n      - 线性表是有限的\n  - 举例：\n    - 幼儿园小朋友按次序排队，各自都知道他前面人是谁，方便清点人数，知道谁不在\n    - 一年的星座列表\n  - 顺序存储结构\n    - 定义：用一段地址连续的存储单元一次存储线性表的数据元素\n      - {% asset_img 0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg 0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986 %}\n    - 三个重要属性：\n      - 存储空间的起始位置\n      - 线性表的最大存储容量\n      - 线性表的当前长度\n    - 数据长度与线性表长度区别\n      - 数据长度：（例如一个数组的长度）是存放线性表的存储空间的长度，一般不变\n      - 线性表长度：是线性表中数据元素的个数，随着插入与删除，这个量是可变的\n      - 在任意时刻，线性表长度应该 小于等于 数据长度\n    - 时间复杂度：\n      - 插入或删除最后一个元素为 O(1)\n      - 插入或删除第一个元素为O(n)\n    - 优缺点\n      - 优点：\n        - 无需为了表示表中元素之间的逻辑关系而增加额外的存储空间\n        - 可以快速地存取表中任意位置的元素\n      - 缺点：\n        - 插入和删除操作需要移动大量元素\n        - 当线性表长度变化较大时，难以确定存储空间的容量\n        - 造成存储空间的“碎片”\n  - 链式存储结构\n    - 定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。\n      - {% asset_img 90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg 90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986 %}\n    - 与顺序结构不同，在链式结构中，除了要存储数据信息外，还要存储它后继元素的存储地址\n    - 单链表\n      - 定义：一个链式结构的，每个结点中只包含一个指针域的链表叫做单链表\n        - {% asset_img 43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg 43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986 %}\n      - 单链表结构与顺序存储结构的优缺点\n        - 对比：\n          - 存储分配方式：\n            - 顺序存储结构用一段连续的存储单元依次存储线性表的数据元素\n            - 单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素\n          - 时间性能：\n            - 查找：\n              - 顺序存储结构 O(1)\n              - 单链表 O(n)\n            - 插入与删除：\n              - 顺序存储结构需要移动表长一半的元素，时间为 O(n)\n              - 单链表在找出某位置的指针后，插入和删除时间仅为 O(1)\n            - 空间性能：\n              - 顺序存储结构需要预分配存储空间，分大了浪费，分小了容易溢出\n              - 单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制\n        - 结论：\n          - 若线性表需要频繁查找，很少进行插入和删除操作，宜采用顺序存储结构\n          - 若需要频繁插入和删除，宜采用单链表结构\n          - 当线性表中的元素个数变化较大或根本不知道多大时，宜采用单链表结构，这样不用考虑存储空间的大小问题。\n          - 若事先知道大致长度，比如一年12个月，一周7天，宜采用顺序存储结构\n        - 实际应用：\n          - 用户注册的个人信息，除了注册时插入数据外，绝大多数情况都是读取，所以宜采用顺序存储结构\n          - 游戏中玩家的武器装备列表，随着游戏推进，玩家可能随时增加或删除，所以宜采用单链表结构\n    - 静态链表\n      - 背景：有些编程高级语言（e.g. Basic, Fortran）没有指针，这样链表结构就没法实现。\n      - 解决方案：用数组来代替指针，来描述单链表\n      - 实现：让数组元素都由两个数据域组成，data和cur。data用来存储数据元素，cur（游标）相当于单链表中的next指针，存放该元素的后继在数组中的下标。\n      - 定义：这种用数组描述的链表叫做静态链表。这种描述方法起名为游标实现法。\n        - {% asset_img bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986 %}\n      - 举例：\n        - 将 “甲乙丙丁戊己庚”存入静态链表：\n          - {% asset_img 60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg 60412d31-4595-4bee-a252-ccdcac7e333a-3051986 %}\n        - 优缺点：\n          - 优点：\n            - 再插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n          - 缺点：\n            - 没有解决连续存储分配带来的表长难以确定的问题\n            - 失去了顺序存储结构随机存储的特性\n    - 循环链表\n      - 定义：将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。\n    - 双向链表\n      - 定义：双向链表是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。\n\n- 栈与队列\n\n  - 栈\n\n    - 定义：栈是限定仅在表尾进行插入和删除操作的线性表\n    - 描述：我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表，简称 LIFO 结构。\n    - 举例：浏览器的前进后退，Photoshop 的前进撤销。\n    - 栈的顺序存储结构\n      - 操作：\n        - 栈的插入操作（push 压），叫作进栈，也称压栈、入栈。类似子弹入弹夹。\n          - {% asset_img 8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg 8f921c05-7deb-4104-96cb-f293de081246-3051986 %}\n        - 栈的删除操作（pop 弹），叫作出栈，也称弹栈。类似子弹出夹。\n          - {% asset_img 6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg 6e22676a-6c14-446d-b330-2c459da99634-3051986 %}\n      - 两栈共享空间\n        - 理解：两个相同类型的栈，为它们各自开辟了数组空间，极有可能第一个栈满，再进栈就溢出了，而另一个栈还有很多存储空间空闲。所以我们完全可以用一个数组来存储两个栈。\n          - {% asset_img 55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg 55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986 %}\n        - 做法：数组的两个端点，让一个栈的栈底为数组的始端（下标0），另一个栈为栈的末端（n-1）。两栈如果增加元素，就是两端向中间延伸。\n        - 关键思路：\n          - \\1. 两个top是数组两端的栈顶指针，只要它俩不见面，两个栈就都可以一直使用。\n          - \\2. 栈1为空时，就是top1等于-1时；当top2等于n时，即是栈2为空时。\n          - \\3. 何时栈满：top1等于n-1时栈1满；top2等于0时，栈2满，所以推导出，top1+1==top2为栈满\n    - 栈的链式存储结构\n      - 栈顶存放位置：\n        - 由于单链表有头指针，而栈顶指针也是必须的，所以把它俩合二为一，将栈顶放在单链表的头部。\n      - 不需要头结点：\n        - 都已经有了栈顶在头部，所以单链表的头结点也失去了意义，所以不需要头结点。\n      - 示意图：\n        - {% asset_img aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986 %}\n    - 栈的应用\n      - \\#递归\n      - \\#四则运算表达式求值\n\n  - 队列\n\n    - 定义：队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表\n\n    - 描述：队列是一种先进先出（First In First Out）的线性表，简称 FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。\n\n    - 举例：键盘的输入，记事本上的输出。\n\n    - 队列的顺序存储结构\n\n      - 缺点：\n\n        - 由于从队头出，导致后面元素都得向前移动，时间复杂度 O(n)\n\n          {% asset_img ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986 %}\n\n      - 解决：\n\n        - 循环队列\n          - 让头尾相接\n\n    - 队列的链式存储结构\n\n    - 顺序存储和链式存储的选择\n\n      - 可以确定队列长度最大值时，建议循环队列\n      - 无法预估队列长度时，使用链队列\n\n- 串\n\n  - 定义：是由零个或多个字符组成的有限序列，又名字符串\n  - 算法\n    - 朴素的模式匹配算法\n      - 从头开始依次往后比较【不推荐】\n    - KMP模式匹配算法\n\n- 数\n\n  - 定义：\n\n    - 树是 n(n>=0) 个结点的有限集。n=0 时称为空树。在任意一棵非空树中：\n      - \\1. 有且仅有一个特定的称为根（Root）的结点\n      - \\2. 当 n > 1 时，其余结点可分为 m(m > 0) 个互不相交的有限集 T1、T2 … 、Tm，其中每一个集合本身又是一棵树，并且称为根的子树（SubTree）\n    - {% asset_img aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986 %}\n\n  - 结点分类\n\n    - 定义：结点拥有的子树数称为结点的度。度为 0 的结点称为叶结点或终端结点；度不为 0 的结点称为非终端结点或分支结点。除根结点外，分支结点也称为内部结点。树的度是树内各结点的度的最大值。下面树结点的度的最大值是结点 D 的度，为 3，所以树的度也为 3 。\n      - {% asset_img e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg e31ad7c9-0003-435a-bf98-3c7c03764720-3051986 %}\n\n  - 结点间关系\n\n    - {% asset_img 63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg 63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986 %}\n\n  - 树的其他相关概念\n\n    - 结点的层次\n\n      - 从根开始定义起，根为第一层。\n\n        - 树中结点的最大层次称为树的深度或高度，下图树深度为 4\n\n          {% asset_img 5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg 5fd0623d-6956-447b-9125-48a3eaf0a977-3051986 %}\n\n    - 树与线性表结构的对比\n\n      - {% asset_img a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986 %}\n\n    - 阿萨德\n\n  - 二叉树\n\n    - 定义：二叉树是 n(n>=0)个结点的有限集合，该集合或为空集（称为空二叉树），或由一个根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。\n\n      - {% asset_img 1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg 1d2f3500-70e1-4aed-adbb-4007c27125af-3051986 %}\n\n    - 特点：\n\n      - 每个结点最多有两棵子树\n      - 左子树和右子树是有顺序的，次序不能任意颠倒\n      - 即使树中某结点只有一棵树，也要区分左右子树\n\n    - 特殊二叉树\n\n      - \\#斜树\n\n        - 定义：\n          - 所有结点都在左子树的二叉树叫左斜树\n            - {% asset_img 34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg 34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986 %}\n          - 所有结点都在右子树的二叉树叫右斜树\n            - {% asset_img 3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg 3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986 %}\n        - 这种特殊树和线性表结构一样，所以线性表结构可以理解为是树的一种特殊形式\n\n      - \\#满二叉树\n\n        - {% asset_img e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986 %}\n\n      - \\#完全二叉树\n\n        - 定义：对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i (i <= i <= n) 的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中的位置完全相同，则这课二叉树称为完全二叉树。\n\n          - {% asset_img d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986 %}\n\n        - 如何判定：在看树时，心中默默给每个结点按照满*二叉树*的结构*逐层顺序*编号，如果编号出现空挡，就说明不是完全二叉树，否则就是。\n\n          - 下面几个都不是：\n\n            - 9跟11之间有空挡\n\n              {% asset_img d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986 %}\n\n            - 5跟8，9之间有空挡\n\n              {% asset_img 821f0e91-4700-495e-a657-a372965a7027-3051986.jpg 821f0e91-4700-495e-a657-a372965a7027-3051986 %}\n\n            - 9跟12之间有空挡\n\n              {% asset_img 130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg 130be6af-5ac2-403e-a196-60a3534664eb-3051986 %}\n\n    - 存储结构\n\n      - 二叉树顺序存储结构（适用于完全二叉树）\n      - 二叉链表\n\n    - 遍历二叉树\n\n      - \\#二叉树遍历方法\n\n        - 前序遍历\n\n          - 遍历顺序：ABDGHCEIF\n\n            {% asset_img bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986 %}\n\n        - 中序遍历\n\n          - 遍历顺序：GDHBAEICF\n\n            {% asset_img 53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg 53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986 %}\n\n        - 后序遍历\n\n          - 遍历顺序：GHDBIEFCA\n\n            {% asset_img 76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg 76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986 %}\n\n        - 层序遍历\n\n          - 遍历顺序：ABCDEFGHI\n\n            {% asset_img ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986 %}\n\n- 图\n","source":"_posts/大话数据结构-笔记.md","raw":"---\ntitle: <大话数据结构>笔记\nabbrlink: 51696\ndate: 2019-01-09 00:01:26\ncategories:\n  - 后端\n  - 算法\n---\n\n## 前言\n\n之前对算法和数据结构没有一个系统的学习，从今天开始抽空啃啃书吧。就从这本程杰老师的《大话数据结构》起步。\n\np.s. 原笔记是存放在幕布上的，文字版看着不舒服可以 [点击这里](https://mubu.com/doc/bnO4e_64Ti) 看思维导图版。\n\n<!-- more -->\n\n- 数据结构绪论\n\n  - 基本概念和术语\n    - 数据\n      - 定义：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的集合符号。\n      - 总结：数据即符号，必备条件：\n        - 可以输入到计算机中\n        - 能被计算机程序处理\n      - 举例：\n        - MP3是声音数据\n        - 图片是图像数据\n      - \\#数据对象\n        - 定义：是性质相同的数据元素的集合，是数据的子集\n        - 举例：\n          - 人（都有姓名、生日等相同的数据项）\n        - \\#数据元素\n          - 定义：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被成为记录。\n          - 举例：\n            - 人类中的人\n            - 畜类中的牛马羊\n          - \\#数据项\n            - 定义：一个数据元素可以由若干个数据项组成\n            - 举例：\n              - 人的姓名、年龄、性别\n    - 数据结构\n      - 定义：是相互之间存在一种或多种特定关系的数据元素的集合\n      - \\#逻辑结构\n        - 定义：指数据对象中数据元素之间的相互关系\n        - 类型\n          - \\#集合结构\n            - 同属于一个集合的数据元素\n              - {% asset_img e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986 %}\n          - \\#线性结构\n            - 数据元素之间是一对一的关系\n              - {% asset_img 5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg 5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986 %}\n          - \\#树形结构\n            - 数据元素之间存在一对多的层次关系\n              - {% asset_img 7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg 7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986 %}\n          - \\#图形结构\n            - 数据元素是多对多的关系\n              - {% asset_img c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986 %}\n        - 用示意图表示数据逻辑结构时的注意点：\n          - 每个数据元素是一个结点，用圆圈表示\n          - 元素之间的逻辑关系用连线表示，如果此关系是有方向的，那么用箭头连线表示\n      - \\#物理结构\n        - 定义：是指数据的逻辑结构在计算机中的存储形式\n        - \\#顺序存储结构\n          - 定义：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的\n            - {% asset_img b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986 %}\n        - \\#链式存储结构\n          - 定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。\n            - {% asset_img 0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg 0987f1e7-fdea-4404-bce6-c377ed05532d-3051986 %}\n          - 注意：数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置\n\n- 算法\n\n  - 基本特性：输入、输出、有穷性、确定性和可行性\n  - 设计要求：正确性、可读性、健壮性、高效和低存储量\n  - 度量方法：事后统计（不科学、不准确）、事前分析估算 ✅\n  - 时间复杂度\n    - 概念\n      - 计算公式：T(n) = O(f(n))\n        - T(n)： 语句总的执行次数\n        - n： 问题规模\n        - f(n)： 问题规模 n 的某个函数\n      - 表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同\n    - 大O记法\n      - 定义：用大写O()来体现时间复杂度，简称为大O记法\n      - 推导大O阶方法：\n        - \\1. 用常数 1 取代运行时间中的所有加法常数\n        - \\2. 在修改后的运行次数函数中，只保留最高阶项\n        - \\3. 如果最高阶项存在且不是 1，则去除与这个项相乘的常数\n        - \\4. 得到的结果就是大 O 阶\n    - 常数阶\n      - 举例：高斯算法\n        - {% asset_img e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986 %}\n        - 此算法运行次数函数是 f(n)=3\n        - 推导：把常数项 3 改为 1 => 它没有最高阶 => 复杂度：O(1)\n    - 线性阶\n      - {% asset_img 69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg 69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986 %}\n      - 推导：循环体中代码需要执行 n 次 => 复杂度：O(n)\n    - 对数阶\n      - {% asset_img 972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg 972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986 %}\n      - 推导：每次 count 乘以 2 后，就距离 n 更近一分。换句话说，有多少个 2 相乘后大于 n，则会退出循环。由 2^x=n 得到 x=log(2)n。所以此循环复杂度：O(logn)\n    - 平方阶\n      - 举例1\n        - {% asset_img 7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg 7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986 %}\n        - 推导：两层循环，每层循环 n 次 => 复杂度：O(n^2)\n        - 如果把外层 n 改为 m，则复杂度：O(m✘n)\n      - 举例2\n        - {% asset_img 3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg 3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986 %}\n        - 复杂度：O(n^2)\n    - 常见时间复杂度\n      - {% asset_img f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg f30d6524-ce51-470e-9f30-f624a72b6131-3051986 %}\n      - 常见时间复杂度所耗费的时间从小到大：\n        - {% asset_img 621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg 621fb24b-7010-4e37-a761-0f178a4c0091-3051986 %}\n      - \n  - 空间复杂度\n    - 概念\n      - 计算公式：S(n) = O(f(n))\n        - S(n)：计算算法所耗的存储空间\n        - n： 问题规模\n        - f(n)： 问题规模 n 所占存储空间的函数\n  - 当不用限定词地使用“复杂度”时，指的都是时间复杂度\n  - 心得\n    - 明白算法的时间复杂度估算很重要，不要以“CPU越来越快，不用考虑算法优劣”为借口。愚公移山固然可敬，但发明炸药和推土机更加实在和聪明\n\n- 线性表\n\n  - 定义：零个或多个数据元素的有限序列\n    - 关键点：\n      - 是一个*有顺序*的序列\n      - 若元素存在多个，则第一个无前驱，最后一个无后继，中间部分都有且只有一个前驱和后继\n      - 线性表是有限的\n  - 举例：\n    - 幼儿园小朋友按次序排队，各自都知道他前面人是谁，方便清点人数，知道谁不在\n    - 一年的星座列表\n  - 顺序存储结构\n    - 定义：用一段地址连续的存储单元一次存储线性表的数据元素\n      - {% asset_img 0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg 0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986 %}\n    - 三个重要属性：\n      - 存储空间的起始位置\n      - 线性表的最大存储容量\n      - 线性表的当前长度\n    - 数据长度与线性表长度区别\n      - 数据长度：（例如一个数组的长度）是存放线性表的存储空间的长度，一般不变\n      - 线性表长度：是线性表中数据元素的个数，随着插入与删除，这个量是可变的\n      - 在任意时刻，线性表长度应该 小于等于 数据长度\n    - 时间复杂度：\n      - 插入或删除最后一个元素为 O(1)\n      - 插入或删除第一个元素为O(n)\n    - 优缺点\n      - 优点：\n        - 无需为了表示表中元素之间的逻辑关系而增加额外的存储空间\n        - 可以快速地存取表中任意位置的元素\n      - 缺点：\n        - 插入和删除操作需要移动大量元素\n        - 当线性表长度变化较大时，难以确定存储空间的容量\n        - 造成存储空间的“碎片”\n  - 链式存储结构\n    - 定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。\n      - {% asset_img 90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg 90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986 %}\n    - 与顺序结构不同，在链式结构中，除了要存储数据信息外，还要存储它后继元素的存储地址\n    - 单链表\n      - 定义：一个链式结构的，每个结点中只包含一个指针域的链表叫做单链表\n        - {% asset_img 43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg 43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986 %}\n      - 单链表结构与顺序存储结构的优缺点\n        - 对比：\n          - 存储分配方式：\n            - 顺序存储结构用一段连续的存储单元依次存储线性表的数据元素\n            - 单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素\n          - 时间性能：\n            - 查找：\n              - 顺序存储结构 O(1)\n              - 单链表 O(n)\n            - 插入与删除：\n              - 顺序存储结构需要移动表长一半的元素，时间为 O(n)\n              - 单链表在找出某位置的指针后，插入和删除时间仅为 O(1)\n            - 空间性能：\n              - 顺序存储结构需要预分配存储空间，分大了浪费，分小了容易溢出\n              - 单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制\n        - 结论：\n          - 若线性表需要频繁查找，很少进行插入和删除操作，宜采用顺序存储结构\n          - 若需要频繁插入和删除，宜采用单链表结构\n          - 当线性表中的元素个数变化较大或根本不知道多大时，宜采用单链表结构，这样不用考虑存储空间的大小问题。\n          - 若事先知道大致长度，比如一年12个月，一周7天，宜采用顺序存储结构\n        - 实际应用：\n          - 用户注册的个人信息，除了注册时插入数据外，绝大多数情况都是读取，所以宜采用顺序存储结构\n          - 游戏中玩家的武器装备列表，随着游戏推进，玩家可能随时增加或删除，所以宜采用单链表结构\n    - 静态链表\n      - 背景：有些编程高级语言（e.g. Basic, Fortran）没有指针，这样链表结构就没法实现。\n      - 解决方案：用数组来代替指针，来描述单链表\n      - 实现：让数组元素都由两个数据域组成，data和cur。data用来存储数据元素，cur（游标）相当于单链表中的next指针，存放该元素的后继在数组中的下标。\n      - 定义：这种用数组描述的链表叫做静态链表。这种描述方法起名为游标实现法。\n        - {% asset_img bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986 %}\n      - 举例：\n        - 将 “甲乙丙丁戊己庚”存入静态链表：\n          - {% asset_img 60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg 60412d31-4595-4bee-a252-ccdcac7e333a-3051986 %}\n        - 优缺点：\n          - 优点：\n            - 再插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。\n          - 缺点：\n            - 没有解决连续存储分配带来的表长难以确定的问题\n            - 失去了顺序存储结构随机存储的特性\n    - 循环链表\n      - 定义：将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。\n    - 双向链表\n      - 定义：双向链表是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。\n\n- 栈与队列\n\n  - 栈\n\n    - 定义：栈是限定仅在表尾进行插入和删除操作的线性表\n    - 描述：我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表，简称 LIFO 结构。\n    - 举例：浏览器的前进后退，Photoshop 的前进撤销。\n    - 栈的顺序存储结构\n      - 操作：\n        - 栈的插入操作（push 压），叫作进栈，也称压栈、入栈。类似子弹入弹夹。\n          - {% asset_img 8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg 8f921c05-7deb-4104-96cb-f293de081246-3051986 %}\n        - 栈的删除操作（pop 弹），叫作出栈，也称弹栈。类似子弹出夹。\n          - {% asset_img 6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg 6e22676a-6c14-446d-b330-2c459da99634-3051986 %}\n      - 两栈共享空间\n        - 理解：两个相同类型的栈，为它们各自开辟了数组空间，极有可能第一个栈满，再进栈就溢出了，而另一个栈还有很多存储空间空闲。所以我们完全可以用一个数组来存储两个栈。\n          - {% asset_img 55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg 55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986 %}\n        - 做法：数组的两个端点，让一个栈的栈底为数组的始端（下标0），另一个栈为栈的末端（n-1）。两栈如果增加元素，就是两端向中间延伸。\n        - 关键思路：\n          - \\1. 两个top是数组两端的栈顶指针，只要它俩不见面，两个栈就都可以一直使用。\n          - \\2. 栈1为空时，就是top1等于-1时；当top2等于n时，即是栈2为空时。\n          - \\3. 何时栈满：top1等于n-1时栈1满；top2等于0时，栈2满，所以推导出，top1+1==top2为栈满\n    - 栈的链式存储结构\n      - 栈顶存放位置：\n        - 由于单链表有头指针，而栈顶指针也是必须的，所以把它俩合二为一，将栈顶放在单链表的头部。\n      - 不需要头结点：\n        - 都已经有了栈顶在头部，所以单链表的头结点也失去了意义，所以不需要头结点。\n      - 示意图：\n        - {% asset_img aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986 %}\n    - 栈的应用\n      - \\#递归\n      - \\#四则运算表达式求值\n\n  - 队列\n\n    - 定义：队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表\n\n    - 描述：队列是一种先进先出（First In First Out）的线性表，简称 FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。\n\n    - 举例：键盘的输入，记事本上的输出。\n\n    - 队列的顺序存储结构\n\n      - 缺点：\n\n        - 由于从队头出，导致后面元素都得向前移动，时间复杂度 O(n)\n\n          {% asset_img ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986 %}\n\n      - 解决：\n\n        - 循环队列\n          - 让头尾相接\n\n    - 队列的链式存储结构\n\n    - 顺序存储和链式存储的选择\n\n      - 可以确定队列长度最大值时，建议循环队列\n      - 无法预估队列长度时，使用链队列\n\n- 串\n\n  - 定义：是由零个或多个字符组成的有限序列，又名字符串\n  - 算法\n    - 朴素的模式匹配算法\n      - 从头开始依次往后比较【不推荐】\n    - KMP模式匹配算法\n\n- 数\n\n  - 定义：\n\n    - 树是 n(n>=0) 个结点的有限集。n=0 时称为空树。在任意一棵非空树中：\n      - \\1. 有且仅有一个特定的称为根（Root）的结点\n      - \\2. 当 n > 1 时，其余结点可分为 m(m > 0) 个互不相交的有限集 T1、T2 … 、Tm，其中每一个集合本身又是一棵树，并且称为根的子树（SubTree）\n    - {% asset_img aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986 %}\n\n  - 结点分类\n\n    - 定义：结点拥有的子树数称为结点的度。度为 0 的结点称为叶结点或终端结点；度不为 0 的结点称为非终端结点或分支结点。除根结点外，分支结点也称为内部结点。树的度是树内各结点的度的最大值。下面树结点的度的最大值是结点 D 的度，为 3，所以树的度也为 3 。\n      - {% asset_img e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg e31ad7c9-0003-435a-bf98-3c7c03764720-3051986 %}\n\n  - 结点间关系\n\n    - {% asset_img 63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg 63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986 %}\n\n  - 树的其他相关概念\n\n    - 结点的层次\n\n      - 从根开始定义起，根为第一层。\n\n        - 树中结点的最大层次称为树的深度或高度，下图树深度为 4\n\n          {% asset_img 5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg 5fd0623d-6956-447b-9125-48a3eaf0a977-3051986 %}\n\n    - 树与线性表结构的对比\n\n      - {% asset_img a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986 %}\n\n    - 阿萨德\n\n  - 二叉树\n\n    - 定义：二叉树是 n(n>=0)个结点的有限集合，该集合或为空集（称为空二叉树），或由一个根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。\n\n      - {% asset_img 1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg 1d2f3500-70e1-4aed-adbb-4007c27125af-3051986 %}\n\n    - 特点：\n\n      - 每个结点最多有两棵子树\n      - 左子树和右子树是有顺序的，次序不能任意颠倒\n      - 即使树中某结点只有一棵树，也要区分左右子树\n\n    - 特殊二叉树\n\n      - \\#斜树\n\n        - 定义：\n          - 所有结点都在左子树的二叉树叫左斜树\n            - {% asset_img 34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg 34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986 %}\n          - 所有结点都在右子树的二叉树叫右斜树\n            - {% asset_img 3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg 3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986 %}\n        - 这种特殊树和线性表结构一样，所以线性表结构可以理解为是树的一种特殊形式\n\n      - \\#满二叉树\n\n        - {% asset_img e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986 %}\n\n      - \\#完全二叉树\n\n        - 定义：对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i (i <= i <= n) 的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中的位置完全相同，则这课二叉树称为完全二叉树。\n\n          - {% asset_img d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986 %}\n\n        - 如何判定：在看树时，心中默默给每个结点按照满*二叉树*的结构*逐层顺序*编号，如果编号出现空挡，就说明不是完全二叉树，否则就是。\n\n          - 下面几个都不是：\n\n            - 9跟11之间有空挡\n\n              {% asset_img d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986 %}\n\n            - 5跟8，9之间有空挡\n\n              {% asset_img 821f0e91-4700-495e-a657-a372965a7027-3051986.jpg 821f0e91-4700-495e-a657-a372965a7027-3051986 %}\n\n            - 9跟12之间有空挡\n\n              {% asset_img 130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg 130be6af-5ac2-403e-a196-60a3534664eb-3051986 %}\n\n    - 存储结构\n\n      - 二叉树顺序存储结构（适用于完全二叉树）\n      - 二叉链表\n\n    - 遍历二叉树\n\n      - \\#二叉树遍历方法\n\n        - 前序遍历\n\n          - 遍历顺序：ABDGHCEIF\n\n            {% asset_img bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986 %}\n\n        - 中序遍历\n\n          - 遍历顺序：GDHBAEICF\n\n            {% asset_img 53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg 53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986 %}\n\n        - 后序遍历\n\n          - 遍历顺序：GHDBIEFCA\n\n            {% asset_img 76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg 76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986 %}\n\n        - 层序遍历\n\n          - 遍历顺序：ABCDEFGHI\n\n            {% asset_img ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986 %}\n\n- 图\n","slug":"大话数据结构-笔记","published":1,"updated":"2020-11-21T16:29:35.316Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygq007lkhsrc4ts7zzu","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前对算法和数据结构没有一个系统的学习，从今天开始抽空啃啃书吧。就从这本程杰老师的《大话数据结构》起步。</p>\n<p>p.s. 原笔记是存放在幕布上的，文字版看着不舒服可以 <a href=\"https://mubu.com/doc/bnO4e_64Ti\">点击这里</a> 看思维导图版。</p>\n<a id=\"more\"></a>\n\n<ul>\n<li><p>数据结构绪论</p>\n<ul>\n<li>基本概念和术语<ul>\n<li>数据<ul>\n<li>定义：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的集合符号。</li>\n<li>总结：数据即符号，必备条件：<ul>\n<li>可以输入到计算机中</li>\n<li>能被计算机程序处理</li>\n</ul>\n</li>\n<li>举例：<ul>\n<li>MP3是声音数据</li>\n<li>图片是图像数据</li>\n</ul>\n</li>\n<li>#数据对象<ul>\n<li>定义：是性质相同的数据元素的集合，是数据的子集</li>\n<li>举例：<ul>\n<li>人（都有姓名、生日等相同的数据项）</li>\n</ul>\n</li>\n<li>#数据元素<ul>\n<li>定义：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被成为记录。</li>\n<li>举例：<ul>\n<li>人类中的人</li>\n<li>畜类中的牛马羊</li>\n</ul>\n</li>\n<li>#数据项<ul>\n<li>定义：一个数据元素可以由若干个数据项组成</li>\n<li>举例：<ul>\n<li>人的姓名、年龄、性别</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据结构<ul>\n<li>定义：是相互之间存在一种或多种特定关系的数据元素的集合</li>\n<li>#逻辑结构<ul>\n<li>定义：指数据对象中数据元素之间的相互关系</li>\n<li>类型<ul>\n<li>#集合结构<ul>\n<li>同属于一个集合的数据元素<ul>\n<li><img src=\"/posts/51696/e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg\" class=\"\" title=\"e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#线性结构<ul>\n<li>数据元素之间是一对一的关系<ul>\n<li><img src=\"/posts/51696/5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg\" class=\"\" title=\"5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#树形结构<ul>\n<li>数据元素之间存在一对多的层次关系<ul>\n<li><img src=\"/posts/51696/7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg\" class=\"\" title=\"7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#图形结构<ul>\n<li>数据元素是多对多的关系<ul>\n<li><img src=\"/posts/51696/c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg\" class=\"\" title=\"c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>用示意图表示数据逻辑结构时的注意点：<ul>\n<li>每个数据元素是一个结点，用圆圈表示</li>\n<li>元素之间的逻辑关系用连线表示，如果此关系是有方向的，那么用箭头连线表示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#物理结构<ul>\n<li>定义：是指数据的逻辑结构在计算机中的存储形式</li>\n<li>#顺序存储结构<ul>\n<li>定义：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的<ul>\n<li><img src=\"/posts/51696/b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg\" class=\"\" title=\"b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#链式存储结构<ul>\n<li>定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。<ul>\n<li><img src=\"/posts/51696/0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg\" class=\"\" title=\"0987f1e7-fdea-4404-bce6-c377ed05532d-3051986\"></li>\n</ul>\n</li>\n<li>注意：数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>算法</p>\n<ul>\n<li>基本特性：输入、输出、有穷性、确定性和可行性</li>\n<li>设计要求：正确性、可读性、健壮性、高效和低存储量</li>\n<li>度量方法：事后统计（不科学、不准确）、事前分析估算 ✅</li>\n<li>时间复杂度<ul>\n<li>概念<ul>\n<li>计算公式：T(n) = O(f(n))<ul>\n<li>T(n)： 语句总的执行次数</li>\n<li>n： 问题规模</li>\n<li>f(n)： 问题规模 n 的某个函数</li>\n</ul>\n</li>\n<li>表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同</li>\n</ul>\n</li>\n<li>大O记法<ul>\n<li>定义：用大写O()来体现时间复杂度，简称为大O记法</li>\n<li>推导大O阶方法：<ul>\n<li>\\1. 用常数 1 取代运行时间中的所有加法常数</li>\n<li>\\2. 在修改后的运行次数函数中，只保留最高阶项</li>\n<li>\\3. 如果最高阶项存在且不是 1，则去除与这个项相乘的常数</li>\n<li>\\4. 得到的结果就是大 O 阶</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常数阶<ul>\n<li>举例：高斯算法<ul>\n<li><img src=\"/posts/51696/e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg\" class=\"\" title=\"e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986\"></li>\n<li>此算法运行次数函数是 f(n)=3</li>\n<li>推导：把常数项 3 改为 1 =&gt; 它没有最高阶 =&gt; 复杂度：O(1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线性阶<ul>\n<li><img src=\"/posts/51696/69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg\" class=\"\" title=\"69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986\"></li>\n<li>推导：循环体中代码需要执行 n 次 =&gt; 复杂度：O(n)</li>\n</ul>\n</li>\n<li>对数阶<ul>\n<li><img src=\"/posts/51696/972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg\" class=\"\" title=\"972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986\"></li>\n<li>推导：每次 count 乘以 2 后，就距离 n 更近一分。换句话说，有多少个 2 相乘后大于 n，则会退出循环。由 2^x=n 得到 x=log(2)n。所以此循环复杂度：O(logn)</li>\n</ul>\n</li>\n<li>平方阶<ul>\n<li>举例1<ul>\n<li><img src=\"/posts/51696/7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg\" class=\"\" title=\"7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986\"></li>\n<li>推导：两层循环，每层循环 n 次 =&gt; 复杂度：O(n^2)</li>\n<li>如果把外层 n 改为 m，则复杂度：O(m✘n)</li>\n</ul>\n</li>\n<li>举例2<ul>\n<li><img src=\"/posts/51696/3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg\" class=\"\" title=\"3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986\"></li>\n<li>复杂度：O(n^2)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常见时间复杂度<ul>\n<li><img src=\"/posts/51696/f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg\" class=\"\" title=\"f30d6524-ce51-470e-9f30-f624a72b6131-3051986\"></li>\n<li>常见时间复杂度所耗费的时间从小到大：<ul>\n<li><img src=\"/posts/51696/621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg\" class=\"\" title=\"621fb24b-7010-4e37-a761-0f178a4c0091-3051986\"></li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>空间复杂度<ul>\n<li>概念<ul>\n<li>计算公式：S(n) = O(f(n))<ul>\n<li>S(n)：计算算法所耗的存储空间</li>\n<li>n： 问题规模</li>\n<li>f(n)： 问题规模 n 所占存储空间的函数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>当不用限定词地使用“复杂度”时，指的都是时间复杂度</li>\n<li>心得<ul>\n<li>明白算法的时间复杂度估算很重要，不要以“CPU越来越快，不用考虑算法优劣”为借口。愚公移山固然可敬，但发明炸药和推土机更加实在和聪明</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>线性表</p>\n<ul>\n<li>定义：零个或多个数据元素的有限序列<ul>\n<li>关键点：<ul>\n<li>是一个<em>有顺序</em>的序列</li>\n<li>若元素存在多个，则第一个无前驱，最后一个无后继，中间部分都有且只有一个前驱和后继</li>\n<li>线性表是有限的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>举例：<ul>\n<li>幼儿园小朋友按次序排队，各自都知道他前面人是谁，方便清点人数，知道谁不在</li>\n<li>一年的星座列表</li>\n</ul>\n</li>\n<li>顺序存储结构<ul>\n<li>定义：用一段地址连续的存储单元一次存储线性表的数据元素<ul>\n<li><img src=\"/posts/51696/0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg\" class=\"\" title=\"0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986\"></li>\n</ul>\n</li>\n<li>三个重要属性：<ul>\n<li>存储空间的起始位置</li>\n<li>线性表的最大存储容量</li>\n<li>线性表的当前长度</li>\n</ul>\n</li>\n<li>数据长度与线性表长度区别<ul>\n<li>数据长度：（例如一个数组的长度）是存放线性表的存储空间的长度，一般不变</li>\n<li>线性表长度：是线性表中数据元素的个数，随着插入与删除，这个量是可变的</li>\n<li>在任意时刻，线性表长度应该 小于等于 数据长度</li>\n</ul>\n</li>\n<li>时间复杂度：<ul>\n<li>插入或删除最后一个元素为 O(1)</li>\n<li>插入或删除第一个元素为O(n)</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>优点：<ul>\n<li>无需为了表示表中元素之间的逻辑关系而增加额外的存储空间</li>\n<li>可以快速地存取表中任意位置的元素</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>插入和删除操作需要移动大量元素</li>\n<li>当线性表长度变化较大时，难以确定存储空间的容量</li>\n<li>造成存储空间的“碎片”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>链式存储结构<ul>\n<li>定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。<ul>\n<li><img src=\"/posts/51696/90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg\" class=\"\" title=\"90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986\"></li>\n</ul>\n</li>\n<li>与顺序结构不同，在链式结构中，除了要存储数据信息外，还要存储它后继元素的存储地址</li>\n<li>单链表<ul>\n<li>定义：一个链式结构的，每个结点中只包含一个指针域的链表叫做单链表<ul>\n<li><img src=\"/posts/51696/43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg\" class=\"\" title=\"43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986\"></li>\n</ul>\n</li>\n<li>单链表结构与顺序存储结构的优缺点<ul>\n<li>对比：<ul>\n<li>存储分配方式：<ul>\n<li>顺序存储结构用一段连续的存储单元依次存储线性表的数据元素</li>\n<li>单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素</li>\n</ul>\n</li>\n<li>时间性能：<ul>\n<li>查找：<ul>\n<li>顺序存储结构 O(1)</li>\n<li>单链表 O(n)</li>\n</ul>\n</li>\n<li>插入与删除：<ul>\n<li>顺序存储结构需要移动表长一半的元素，时间为 O(n)</li>\n<li>单链表在找出某位置的指针后，插入和删除时间仅为 O(1)</li>\n</ul>\n</li>\n<li>空间性能：<ul>\n<li>顺序存储结构需要预分配存储空间，分大了浪费，分小了容易溢出</li>\n<li>单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>结论：<ul>\n<li>若线性表需要频繁查找，很少进行插入和删除操作，宜采用顺序存储结构</li>\n<li>若需要频繁插入和删除，宜采用单链表结构</li>\n<li>当线性表中的元素个数变化较大或根本不知道多大时，宜采用单链表结构，这样不用考虑存储空间的大小问题。</li>\n<li>若事先知道大致长度，比如一年12个月，一周7天，宜采用顺序存储结构</li>\n</ul>\n</li>\n<li>实际应用：<ul>\n<li>用户注册的个人信息，除了注册时插入数据外，绝大多数情况都是读取，所以宜采用顺序存储结构</li>\n<li>游戏中玩家的武器装备列表，随着游戏推进，玩家可能随时增加或删除，所以宜采用单链表结构</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>静态链表<ul>\n<li>背景：有些编程高级语言（e.g. Basic, Fortran）没有指针，这样链表结构就没法实现。</li>\n<li>解决方案：用数组来代替指针，来描述单链表</li>\n<li>实现：让数组元素都由两个数据域组成，data和cur。data用来存储数据元素，cur（游标）相当于单链表中的next指针，存放该元素的后继在数组中的下标。</li>\n<li>定义：这种用数组描述的链表叫做静态链表。这种描述方法起名为游标实现法。<ul>\n<li><img src=\"/posts/51696/bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg\" class=\"\" title=\"bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986\"></li>\n</ul>\n</li>\n<li>举例：<ul>\n<li>将 “甲乙丙丁戊己庚”存入静态链表：<ul>\n<li><img src=\"/posts/51696/60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg\" class=\"\" title=\"60412d31-4595-4bee-a252-ccdcac7e333a-3051986\"></li>\n</ul>\n</li>\n<li>优缺点：<ul>\n<li>优点：<ul>\n<li>再插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>没有解决连续存储分配带来的表长难以确定的问题</li>\n<li>失去了顺序存储结构随机存储的特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>循环链表<ul>\n<li>定义：将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。</li>\n</ul>\n</li>\n<li>双向链表<ul>\n<li>定义：双向链表是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>栈与队列</p>\n<ul>\n<li><p>栈</p>\n<ul>\n<li>定义：栈是限定仅在表尾进行插入和删除操作的线性表</li>\n<li>描述：我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表，简称 LIFO 结构。</li>\n<li>举例：浏览器的前进后退，Photoshop 的前进撤销。</li>\n<li>栈的顺序存储结构<ul>\n<li>操作：<ul>\n<li>栈的插入操作（push 压），叫作进栈，也称压栈、入栈。类似子弹入弹夹。<ul>\n<li><img src=\"/posts/51696/8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg\" class=\"\" title=\"8f921c05-7deb-4104-96cb-f293de081246-3051986\"></li>\n</ul>\n</li>\n<li>栈的删除操作（pop 弹），叫作出栈，也称弹栈。类似子弹出夹。<ul>\n<li><img src=\"/posts/51696/6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg\" class=\"\" title=\"6e22676a-6c14-446d-b330-2c459da99634-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>两栈共享空间<ul>\n<li>理解：两个相同类型的栈，为它们各自开辟了数组空间，极有可能第一个栈满，再进栈就溢出了，而另一个栈还有很多存储空间空闲。所以我们完全可以用一个数组来存储两个栈。<ul>\n<li><img src=\"/posts/51696/55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg\" class=\"\" title=\"55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986\"></li>\n</ul>\n</li>\n<li>做法：数组的两个端点，让一个栈的栈底为数组的始端（下标0），另一个栈为栈的末端（n-1）。两栈如果增加元素，就是两端向中间延伸。</li>\n<li>关键思路：<ul>\n<li>\\1. 两个top是数组两端的栈顶指针，只要它俩不见面，两个栈就都可以一直使用。</li>\n<li>\\2. 栈1为空时，就是top1等于-1时；当top2等于n时，即是栈2为空时。</li>\n<li>\\3. 何时栈满：top1等于n-1时栈1满；top2等于0时，栈2满，所以推导出，top1+1==top2为栈满</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>栈的链式存储结构<ul>\n<li>栈顶存放位置：<ul>\n<li>由于单链表有头指针，而栈顶指针也是必须的，所以把它俩合二为一，将栈顶放在单链表的头部。</li>\n</ul>\n</li>\n<li>不需要头结点：<ul>\n<li>都已经有了栈顶在头部，所以单链表的头结点也失去了意义，所以不需要头结点。</li>\n</ul>\n</li>\n<li>示意图：<ul>\n<li><img src=\"/posts/51696/aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg\" class=\"\" title=\"aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>栈的应用<ul>\n<li>#递归</li>\n<li>#四则运算表达式求值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>队列</p>\n<ul>\n<li><p>定义：队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表</p>\n</li>\n<li><p>描述：队列是一种先进先出（First In First Out）的线性表，简称 FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。</p>\n</li>\n<li><p>举例：键盘的输入，记事本上的输出。</p>\n</li>\n<li><p>队列的顺序存储结构</p>\n<ul>\n<li><p>缺点：</p>\n<ul>\n<li><p>由于从队头出，导致后面元素都得向前移动，时间复杂度 O(n)</p>\n<img src=\"/posts/51696/ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg\" class=\"\" title=\"ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986\">\n</li>\n</ul>\n</li>\n<li><p>解决：</p>\n<ul>\n<li>循环队列<ul>\n<li>让头尾相接</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>队列的链式存储结构</p>\n</li>\n<li><p>顺序存储和链式存储的选择</p>\n<ul>\n<li>可以确定队列长度最大值时，建议循环队列</li>\n<li>无法预估队列长度时，使用链队列</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>串</p>\n<ul>\n<li>定义：是由零个或多个字符组成的有限序列，又名字符串</li>\n<li>算法<ul>\n<li>朴素的模式匹配算法<ul>\n<li>从头开始依次往后比较【不推荐】</li>\n</ul>\n</li>\n<li>KMP模式匹配算法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数</p>\n<ul>\n<li><p>定义：</p>\n<ul>\n<li>树是 n(n&gt;=0) 个结点的有限集。n=0 时称为空树。在任意一棵非空树中：<ul>\n<li>\\1. 有且仅有一个特定的称为根（Root）的结点</li>\n<li>\\2. 当 n &gt; 1 时，其余结点可分为 m(m &gt; 0) 个互不相交的有限集 T1、T2 … 、Tm，其中每一个集合本身又是一棵树，并且称为根的子树（SubTree）</li>\n</ul>\n</li>\n<li><img src=\"/posts/51696/aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg\" class=\"\" title=\"aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986\">\n</li>\n</ul>\n</li>\n<li><p>结点分类</p>\n<ul>\n<li>定义：结点拥有的子树数称为结点的度。度为 0 的结点称为叶结点或终端结点；度不为 0 的结点称为非终端结点或分支结点。除根结点外，分支结点也称为内部结点。树的度是树内各结点的度的最大值。下面树结点的度的最大值是结点 D 的度，为 3，所以树的度也为 3 。<ul>\n<li><img src=\"/posts/51696/e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg\" class=\"\" title=\"e31ad7c9-0003-435a-bf98-3c7c03764720-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结点间关系</p>\n<ul>\n<li><img src=\"/posts/51696/63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg\" class=\"\" title=\"63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986\">\n</li>\n</ul>\n</li>\n<li><p>树的其他相关概念</p>\n<ul>\n<li><p>结点的层次</p>\n<ul>\n<li><p>从根开始定义起，根为第一层。</p>\n<ul>\n<li><p>树中结点的最大层次称为树的深度或高度，下图树深度为 4</p>\n<img src=\"/posts/51696/5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg\" class=\"\" title=\"5fd0623d-6956-447b-9125-48a3eaf0a977-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>树与线性表结构的对比</p>\n<ul>\n<li><img src=\"/posts/51696/a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg\" class=\"\" title=\"a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986\">\n</li>\n</ul>\n</li>\n<li><p>阿萨德</p>\n</li>\n</ul>\n</li>\n<li><p>二叉树</p>\n<ul>\n<li><p>定义：二叉树是 n(n&gt;=0)个结点的有限集合，该集合或为空集（称为空二叉树），或由一个根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。</p>\n<ul>\n<li><img src=\"/posts/51696/1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg\" class=\"\" title=\"1d2f3500-70e1-4aed-adbb-4007c27125af-3051986\">\n</li>\n</ul>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>每个结点最多有两棵子树</li>\n<li>左子树和右子树是有顺序的，次序不能任意颠倒</li>\n<li>即使树中某结点只有一棵树，也要区分左右子树</li>\n</ul>\n</li>\n<li><p>特殊二叉树</p>\n<ul>\n<li><p>#斜树</p>\n<ul>\n<li>定义：<ul>\n<li>所有结点都在左子树的二叉树叫左斜树<ul>\n<li><img src=\"/posts/51696/34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg\" class=\"\" title=\"34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986\"></li>\n</ul>\n</li>\n<li>所有结点都在右子树的二叉树叫右斜树<ul>\n<li><img src=\"/posts/51696/3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg\" class=\"\" title=\"3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>这种特殊树和线性表结构一样，所以线性表结构可以理解为是树的一种特殊形式</li>\n</ul>\n</li>\n<li><p>#满二叉树</p>\n<ul>\n<li><img src=\"/posts/51696/e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg\" class=\"\" title=\"e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986\">\n</li>\n</ul>\n</li>\n<li><p>#完全二叉树</p>\n<ul>\n<li><p>定义：对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i (i &lt;= i &lt;= n) 的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中的位置完全相同，则这课二叉树称为完全二叉树。</p>\n<ul>\n<li><img src=\"/posts/51696/d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg\" class=\"\" title=\"d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986\">\n</li>\n</ul>\n</li>\n<li><p>如何判定：在看树时，心中默默给每个结点按照满<em>二叉树</em>的结构<em>逐层顺序</em>编号，如果编号出现空挡，就说明不是完全二叉树，否则就是。</p>\n<ul>\n<li><p>下面几个都不是：</p>\n<ul>\n<li><p>9跟11之间有空挡</p>\n<img src=\"/posts/51696/d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg\" class=\"\" title=\"d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986\">\n</li>\n<li><p>5跟8，9之间有空挡</p>\n<img src=\"/posts/51696/821f0e91-4700-495e-a657-a372965a7027-3051986.jpg\" class=\"\" title=\"821f0e91-4700-495e-a657-a372965a7027-3051986\">\n</li>\n<li><p>9跟12之间有空挡</p>\n<img src=\"/posts/51696/130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg\" class=\"\" title=\"130be6af-5ac2-403e-a196-60a3534664eb-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>存储结构</p>\n<ul>\n<li>二叉树顺序存储结构（适用于完全二叉树）</li>\n<li>二叉链表</li>\n</ul>\n</li>\n<li><p>遍历二叉树</p>\n<ul>\n<li><p>#二叉树遍历方法</p>\n<ul>\n<li><p>前序遍历</p>\n<ul>\n<li><p>遍历顺序：ABDGHCEIF</p>\n<img src=\"/posts/51696/bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg\" class=\"\" title=\"bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986\">\n</li>\n</ul>\n</li>\n<li><p>中序遍历</p>\n<ul>\n<li><p>遍历顺序：GDHBAEICF</p>\n<img src=\"/posts/51696/53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg\" class=\"\" title=\"53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986\">\n</li>\n</ul>\n</li>\n<li><p>后序遍历</p>\n<ul>\n<li><p>遍历顺序：GHDBIEFCA</p>\n<img src=\"/posts/51696/76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg\" class=\"\" title=\"76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986\">\n</li>\n</ul>\n</li>\n<li><p>层序遍历</p>\n<ul>\n<li><p>遍历顺序：ABCDEFGHI</p>\n<img src=\"/posts/51696/ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg\" class=\"\" title=\"ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>之前对算法和数据结构没有一个系统的学习，从今天开始抽空啃啃书吧。就从这本程杰老师的《大话数据结构》起步。</p>\n<p>p.s. 原笔记是存放在幕布上的，文字版看着不舒服可以 <a href=\"https://mubu.com/doc/bnO4e_64Ti\">点击这里</a> 看思维导图版。</p>","more":"<ul>\n<li><p>数据结构绪论</p>\n<ul>\n<li>基本概念和术语<ul>\n<li>数据<ul>\n<li>定义：是描述客观事物的符号，是计算机中可以操作的对象，是能被计算机识别，并输入给计算机处理的集合符号。</li>\n<li>总结：数据即符号，必备条件：<ul>\n<li>可以输入到计算机中</li>\n<li>能被计算机程序处理</li>\n</ul>\n</li>\n<li>举例：<ul>\n<li>MP3是声音数据</li>\n<li>图片是图像数据</li>\n</ul>\n</li>\n<li>#数据对象<ul>\n<li>定义：是性质相同的数据元素的集合，是数据的子集</li>\n<li>举例：<ul>\n<li>人（都有姓名、生日等相同的数据项）</li>\n</ul>\n</li>\n<li>#数据元素<ul>\n<li>定义：是组成数据的、有一定意义的基本单位，在计算机中通常作为整体处理。也被成为记录。</li>\n<li>举例：<ul>\n<li>人类中的人</li>\n<li>畜类中的牛马羊</li>\n</ul>\n</li>\n<li>#数据项<ul>\n<li>定义：一个数据元素可以由若干个数据项组成</li>\n<li>举例：<ul>\n<li>人的姓名、年龄、性别</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>数据结构<ul>\n<li>定义：是相互之间存在一种或多种特定关系的数据元素的集合</li>\n<li>#逻辑结构<ul>\n<li>定义：指数据对象中数据元素之间的相互关系</li>\n<li>类型<ul>\n<li>#集合结构<ul>\n<li>同属于一个集合的数据元素<ul>\n<li><img src=\"/posts/51696/e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg\" class=\"\" title=\"e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#线性结构<ul>\n<li>数据元素之间是一对一的关系<ul>\n<li><img src=\"/posts/51696/5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg\" class=\"\" title=\"5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#树形结构<ul>\n<li>数据元素之间存在一对多的层次关系<ul>\n<li><img src=\"/posts/51696/7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg\" class=\"\" title=\"7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#图形结构<ul>\n<li>数据元素是多对多的关系<ul>\n<li><img src=\"/posts/51696/c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg\" class=\"\" title=\"c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>用示意图表示数据逻辑结构时的注意点：<ul>\n<li>每个数据元素是一个结点，用圆圈表示</li>\n<li>元素之间的逻辑关系用连线表示，如果此关系是有方向的，那么用箭头连线表示</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#物理结构<ul>\n<li>定义：是指数据的逻辑结构在计算机中的存储形式</li>\n<li>#顺序存储结构<ul>\n<li>定义：是把数据元素存放在地址连续的存储单元里，其数据间的逻辑关系和物理关系是一致的<ul>\n<li><img src=\"/posts/51696/b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg\" class=\"\" title=\"b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>#链式存储结构<ul>\n<li>定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。<ul>\n<li><img src=\"/posts/51696/0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg\" class=\"\" title=\"0987f1e7-fdea-4404-bce6-c377ed05532d-3051986\"></li>\n</ul>\n</li>\n<li>注意：数据元素的存储关系并不能反映其逻辑关系，因此需要用一个指针存放数据元素的地址，这样通过地址就可以找到相关联数据元素的位置</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>算法</p>\n<ul>\n<li>基本特性：输入、输出、有穷性、确定性和可行性</li>\n<li>设计要求：正确性、可读性、健壮性、高效和低存储量</li>\n<li>度量方法：事后统计（不科学、不准确）、事前分析估算 ✅</li>\n<li>时间复杂度<ul>\n<li>概念<ul>\n<li>计算公式：T(n) = O(f(n))<ul>\n<li>T(n)： 语句总的执行次数</li>\n<li>n： 问题规模</li>\n<li>f(n)： 问题规模 n 的某个函数</li>\n</ul>\n</li>\n<li>表示随问题规模 n 的增大，算法执行时间的增长率和 f(n) 的增长率相同</li>\n</ul>\n</li>\n<li>大O记法<ul>\n<li>定义：用大写O()来体现时间复杂度，简称为大O记法</li>\n<li>推导大O阶方法：<ul>\n<li>\\1. 用常数 1 取代运行时间中的所有加法常数</li>\n<li>\\2. 在修改后的运行次数函数中，只保留最高阶项</li>\n<li>\\3. 如果最高阶项存在且不是 1，则去除与这个项相乘的常数</li>\n<li>\\4. 得到的结果就是大 O 阶</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常数阶<ul>\n<li>举例：高斯算法<ul>\n<li><img src=\"/posts/51696/e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg\" class=\"\" title=\"e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986\"></li>\n<li>此算法运行次数函数是 f(n)=3</li>\n<li>推导：把常数项 3 改为 1 =&gt; 它没有最高阶 =&gt; 复杂度：O(1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>线性阶<ul>\n<li><img src=\"/posts/51696/69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg\" class=\"\" title=\"69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986\"></li>\n<li>推导：循环体中代码需要执行 n 次 =&gt; 复杂度：O(n)</li>\n</ul>\n</li>\n<li>对数阶<ul>\n<li><img src=\"/posts/51696/972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg\" class=\"\" title=\"972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986\"></li>\n<li>推导：每次 count 乘以 2 后，就距离 n 更近一分。换句话说，有多少个 2 相乘后大于 n，则会退出循环。由 2^x=n 得到 x=log(2)n。所以此循环复杂度：O(logn)</li>\n</ul>\n</li>\n<li>平方阶<ul>\n<li>举例1<ul>\n<li><img src=\"/posts/51696/7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg\" class=\"\" title=\"7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986\"></li>\n<li>推导：两层循环，每层循环 n 次 =&gt; 复杂度：O(n^2)</li>\n<li>如果把外层 n 改为 m，则复杂度：O(m✘n)</li>\n</ul>\n</li>\n<li>举例2<ul>\n<li><img src=\"/posts/51696/3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg\" class=\"\" title=\"3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986\"></li>\n<li>复杂度：O(n^2)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>常见时间复杂度<ul>\n<li><img src=\"/posts/51696/f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg\" class=\"\" title=\"f30d6524-ce51-470e-9f30-f624a72b6131-3051986\"></li>\n<li>常见时间复杂度所耗费的时间从小到大：<ul>\n<li><img src=\"/posts/51696/621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg\" class=\"\" title=\"621fb24b-7010-4e37-a761-0f178a4c0091-3051986\"></li>\n</ul>\n</li>\n<li></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>空间复杂度<ul>\n<li>概念<ul>\n<li>计算公式：S(n) = O(f(n))<ul>\n<li>S(n)：计算算法所耗的存储空间</li>\n<li>n： 问题规模</li>\n<li>f(n)： 问题规模 n 所占存储空间的函数</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>当不用限定词地使用“复杂度”时，指的都是时间复杂度</li>\n<li>心得<ul>\n<li>明白算法的时间复杂度估算很重要，不要以“CPU越来越快，不用考虑算法优劣”为借口。愚公移山固然可敬，但发明炸药和推土机更加实在和聪明</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>线性表</p>\n<ul>\n<li>定义：零个或多个数据元素的有限序列<ul>\n<li>关键点：<ul>\n<li>是一个<em>有顺序</em>的序列</li>\n<li>若元素存在多个，则第一个无前驱，最后一个无后继，中间部分都有且只有一个前驱和后继</li>\n<li>线性表是有限的</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>举例：<ul>\n<li>幼儿园小朋友按次序排队，各自都知道他前面人是谁，方便清点人数，知道谁不在</li>\n<li>一年的星座列表</li>\n</ul>\n</li>\n<li>顺序存储结构<ul>\n<li>定义：用一段地址连续的存储单元一次存储线性表的数据元素<ul>\n<li><img src=\"/posts/51696/0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg\" class=\"\" title=\"0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986\"></li>\n</ul>\n</li>\n<li>三个重要属性：<ul>\n<li>存储空间的起始位置</li>\n<li>线性表的最大存储容量</li>\n<li>线性表的当前长度</li>\n</ul>\n</li>\n<li>数据长度与线性表长度区别<ul>\n<li>数据长度：（例如一个数组的长度）是存放线性表的存储空间的长度，一般不变</li>\n<li>线性表长度：是线性表中数据元素的个数，随着插入与删除，这个量是可变的</li>\n<li>在任意时刻，线性表长度应该 小于等于 数据长度</li>\n</ul>\n</li>\n<li>时间复杂度：<ul>\n<li>插入或删除最后一个元素为 O(1)</li>\n<li>插入或删除第一个元素为O(n)</li>\n</ul>\n</li>\n<li>优缺点<ul>\n<li>优点：<ul>\n<li>无需为了表示表中元素之间的逻辑关系而增加额外的存储空间</li>\n<li>可以快速地存取表中任意位置的元素</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>插入和删除操作需要移动大量元素</li>\n<li>当线性表长度变化较大时，难以确定存储空间的容量</li>\n<li>造成存储空间的“碎片”</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>链式存储结构<ul>\n<li>定义：是把数据元素存放在任意的存储单元里，这组存储单元可以使连续的，也可以是不连续的。<ul>\n<li><img src=\"/posts/51696/90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg\" class=\"\" title=\"90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986\"></li>\n</ul>\n</li>\n<li>与顺序结构不同，在链式结构中，除了要存储数据信息外，还要存储它后继元素的存储地址</li>\n<li>单链表<ul>\n<li>定义：一个链式结构的，每个结点中只包含一个指针域的链表叫做单链表<ul>\n<li><img src=\"/posts/51696/43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg\" class=\"\" title=\"43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986\"></li>\n</ul>\n</li>\n<li>单链表结构与顺序存储结构的优缺点<ul>\n<li>对比：<ul>\n<li>存储分配方式：<ul>\n<li>顺序存储结构用一段连续的存储单元依次存储线性表的数据元素</li>\n<li>单链表采用链式存储结构，用一组任意的存储单元存放线性表的元素</li>\n</ul>\n</li>\n<li>时间性能：<ul>\n<li>查找：<ul>\n<li>顺序存储结构 O(1)</li>\n<li>单链表 O(n)</li>\n</ul>\n</li>\n<li>插入与删除：<ul>\n<li>顺序存储结构需要移动表长一半的元素，时间为 O(n)</li>\n<li>单链表在找出某位置的指针后，插入和删除时间仅为 O(1)</li>\n</ul>\n</li>\n<li>空间性能：<ul>\n<li>顺序存储结构需要预分配存储空间，分大了浪费，分小了容易溢出</li>\n<li>单链表不需要分配存储空间，只要有就可以分配，元素个数也不受限制</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>结论：<ul>\n<li>若线性表需要频繁查找，很少进行插入和删除操作，宜采用顺序存储结构</li>\n<li>若需要频繁插入和删除，宜采用单链表结构</li>\n<li>当线性表中的元素个数变化较大或根本不知道多大时，宜采用单链表结构，这样不用考虑存储空间的大小问题。</li>\n<li>若事先知道大致长度，比如一年12个月，一周7天，宜采用顺序存储结构</li>\n</ul>\n</li>\n<li>实际应用：<ul>\n<li>用户注册的个人信息，除了注册时插入数据外，绝大多数情况都是读取，所以宜采用顺序存储结构</li>\n<li>游戏中玩家的武器装备列表，随着游戏推进，玩家可能随时增加或删除，所以宜采用单链表结构</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>静态链表<ul>\n<li>背景：有些编程高级语言（e.g. Basic, Fortran）没有指针，这样链表结构就没法实现。</li>\n<li>解决方案：用数组来代替指针，来描述单链表</li>\n<li>实现：让数组元素都由两个数据域组成，data和cur。data用来存储数据元素，cur（游标）相当于单链表中的next指针，存放该元素的后继在数组中的下标。</li>\n<li>定义：这种用数组描述的链表叫做静态链表。这种描述方法起名为游标实现法。<ul>\n<li><img src=\"/posts/51696/bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg\" class=\"\" title=\"bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986\"></li>\n</ul>\n</li>\n<li>举例：<ul>\n<li>将 “甲乙丙丁戊己庚”存入静态链表：<ul>\n<li><img src=\"/posts/51696/60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg\" class=\"\" title=\"60412d31-4595-4bee-a252-ccdcac7e333a-3051986\"></li>\n</ul>\n</li>\n<li>优缺点：<ul>\n<li>优点：<ul>\n<li>再插入和删除操作时，只需要修改游标，不需要移动元素，从而改进了在顺序存储结构中的插入和删除操作需要移动大量元素的缺点。</li>\n</ul>\n</li>\n<li>缺点：<ul>\n<li>没有解决连续存储分配带来的表长难以确定的问题</li>\n<li>失去了顺序存储结构随机存储的特性</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>循环链表<ul>\n<li>定义：将单链表中终端节点的指针端由空指针改为指向头结点，就使整个单链表形成一个环，这种头尾相接的单链表称为单循环链表，简称循环链表。</li>\n</ul>\n</li>\n<li>双向链表<ul>\n<li>定义：双向链表是在单链表的每个结点中，再设置一个指向其前驱结点的指针域。所以在双向链表中的结点都有两个指针域，一个指向直接后继，另一个指向直接前驱。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>栈与队列</p>\n<ul>\n<li><p>栈</p>\n<ul>\n<li>定义：栈是限定仅在表尾进行插入和删除操作的线性表</li>\n<li>描述：我们把允许插入和删除的一端称为栈顶，另一端称为栈底，不含任何数据元素的栈称为空栈。栈又称为后进先出（Last In First Out）的线性表，简称 LIFO 结构。</li>\n<li>举例：浏览器的前进后退，Photoshop 的前进撤销。</li>\n<li>栈的顺序存储结构<ul>\n<li>操作：<ul>\n<li>栈的插入操作（push 压），叫作进栈，也称压栈、入栈。类似子弹入弹夹。<ul>\n<li><img src=\"/posts/51696/8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg\" class=\"\" title=\"8f921c05-7deb-4104-96cb-f293de081246-3051986\"></li>\n</ul>\n</li>\n<li>栈的删除操作（pop 弹），叫作出栈，也称弹栈。类似子弹出夹。<ul>\n<li><img src=\"/posts/51696/6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg\" class=\"\" title=\"6e22676a-6c14-446d-b330-2c459da99634-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>两栈共享空间<ul>\n<li>理解：两个相同类型的栈，为它们各自开辟了数组空间，极有可能第一个栈满，再进栈就溢出了，而另一个栈还有很多存储空间空闲。所以我们完全可以用一个数组来存储两个栈。<ul>\n<li><img src=\"/posts/51696/55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg\" class=\"\" title=\"55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986\"></li>\n</ul>\n</li>\n<li>做法：数组的两个端点，让一个栈的栈底为数组的始端（下标0），另一个栈为栈的末端（n-1）。两栈如果增加元素，就是两端向中间延伸。</li>\n<li>关键思路：<ul>\n<li>\\1. 两个top是数组两端的栈顶指针，只要它俩不见面，两个栈就都可以一直使用。</li>\n<li>\\2. 栈1为空时，就是top1等于-1时；当top2等于n时，即是栈2为空时。</li>\n<li>\\3. 何时栈满：top1等于n-1时栈1满；top2等于0时，栈2满，所以推导出，top1+1==top2为栈满</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>栈的链式存储结构<ul>\n<li>栈顶存放位置：<ul>\n<li>由于单链表有头指针，而栈顶指针也是必须的，所以把它俩合二为一，将栈顶放在单链表的头部。</li>\n</ul>\n</li>\n<li>不需要头结点：<ul>\n<li>都已经有了栈顶在头部，所以单链表的头结点也失去了意义，所以不需要头结点。</li>\n</ul>\n</li>\n<li>示意图：<ul>\n<li><img src=\"/posts/51696/aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg\" class=\"\" title=\"aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>栈的应用<ul>\n<li>#递归</li>\n<li>#四则运算表达式求值</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>队列</p>\n<ul>\n<li><p>定义：队列是只允许在一端进行插入操作、而在另一端进行删除操作的线性表</p>\n</li>\n<li><p>描述：队列是一种先进先出（First In First Out）的线性表，简称 FIFO。允许插入的一端称为队尾，允许删除的一端称为队头。</p>\n</li>\n<li><p>举例：键盘的输入，记事本上的输出。</p>\n</li>\n<li><p>队列的顺序存储结构</p>\n<ul>\n<li><p>缺点：</p>\n<ul>\n<li><p>由于从队头出，导致后面元素都得向前移动，时间复杂度 O(n)</p>\n<img src=\"/posts/51696/ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg\" class=\"\" title=\"ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986\">\n</li>\n</ul>\n</li>\n<li><p>解决：</p>\n<ul>\n<li>循环队列<ul>\n<li>让头尾相接</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>队列的链式存储结构</p>\n</li>\n<li><p>顺序存储和链式存储的选择</p>\n<ul>\n<li>可以确定队列长度最大值时，建议循环队列</li>\n<li>无法预估队列长度时，使用链队列</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>串</p>\n<ul>\n<li>定义：是由零个或多个字符组成的有限序列，又名字符串</li>\n<li>算法<ul>\n<li>朴素的模式匹配算法<ul>\n<li>从头开始依次往后比较【不推荐】</li>\n</ul>\n</li>\n<li>KMP模式匹配算法</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>数</p>\n<ul>\n<li><p>定义：</p>\n<ul>\n<li>树是 n(n&gt;=0) 个结点的有限集。n=0 时称为空树。在任意一棵非空树中：<ul>\n<li>\\1. 有且仅有一个特定的称为根（Root）的结点</li>\n<li>\\2. 当 n &gt; 1 时，其余结点可分为 m(m &gt; 0) 个互不相交的有限集 T1、T2 … 、Tm，其中每一个集合本身又是一棵树，并且称为根的子树（SubTree）</li>\n</ul>\n</li>\n<li><img src=\"/posts/51696/aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg\" class=\"\" title=\"aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986\">\n</li>\n</ul>\n</li>\n<li><p>结点分类</p>\n<ul>\n<li>定义：结点拥有的子树数称为结点的度。度为 0 的结点称为叶结点或终端结点；度不为 0 的结点称为非终端结点或分支结点。除根结点外，分支结点也称为内部结点。树的度是树内各结点的度的最大值。下面树结点的度的最大值是结点 D 的度，为 3，所以树的度也为 3 。<ul>\n<li><img src=\"/posts/51696/e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg\" class=\"\" title=\"e31ad7c9-0003-435a-bf98-3c7c03764720-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>结点间关系</p>\n<ul>\n<li><img src=\"/posts/51696/63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg\" class=\"\" title=\"63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986\">\n</li>\n</ul>\n</li>\n<li><p>树的其他相关概念</p>\n<ul>\n<li><p>结点的层次</p>\n<ul>\n<li><p>从根开始定义起，根为第一层。</p>\n<ul>\n<li><p>树中结点的最大层次称为树的深度或高度，下图树深度为 4</p>\n<img src=\"/posts/51696/5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg\" class=\"\" title=\"5fd0623d-6956-447b-9125-48a3eaf0a977-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>树与线性表结构的对比</p>\n<ul>\n<li><img src=\"/posts/51696/a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg\" class=\"\" title=\"a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986\">\n</li>\n</ul>\n</li>\n<li><p>阿萨德</p>\n</li>\n</ul>\n</li>\n<li><p>二叉树</p>\n<ul>\n<li><p>定义：二叉树是 n(n&gt;=0)个结点的有限集合，该集合或为空集（称为空二叉树），或由一个根节点和两棵互不相交的、分别称为根节点的左子树和右子树的二叉树组成。</p>\n<ul>\n<li><img src=\"/posts/51696/1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg\" class=\"\" title=\"1d2f3500-70e1-4aed-adbb-4007c27125af-3051986\">\n</li>\n</ul>\n</li>\n<li><p>特点：</p>\n<ul>\n<li>每个结点最多有两棵子树</li>\n<li>左子树和右子树是有顺序的，次序不能任意颠倒</li>\n<li>即使树中某结点只有一棵树，也要区分左右子树</li>\n</ul>\n</li>\n<li><p>特殊二叉树</p>\n<ul>\n<li><p>#斜树</p>\n<ul>\n<li>定义：<ul>\n<li>所有结点都在左子树的二叉树叫左斜树<ul>\n<li><img src=\"/posts/51696/34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg\" class=\"\" title=\"34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986\"></li>\n</ul>\n</li>\n<li>所有结点都在右子树的二叉树叫右斜树<ul>\n<li><img src=\"/posts/51696/3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg\" class=\"\" title=\"3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986\"></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>这种特殊树和线性表结构一样，所以线性表结构可以理解为是树的一种特殊形式</li>\n</ul>\n</li>\n<li><p>#满二叉树</p>\n<ul>\n<li><img src=\"/posts/51696/e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg\" class=\"\" title=\"e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986\">\n</li>\n</ul>\n</li>\n<li><p>#完全二叉树</p>\n<ul>\n<li><p>定义：对一棵具有 n 个结点的二叉树按层序编号，如果编号为 i (i &lt;= i &lt;= n) 的结点与同样深度的满二叉树中编号为 i 的结点在二叉树中的位置完全相同，则这课二叉树称为完全二叉树。</p>\n<ul>\n<li><img src=\"/posts/51696/d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg\" class=\"\" title=\"d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986\">\n</li>\n</ul>\n</li>\n<li><p>如何判定：在看树时，心中默默给每个结点按照满<em>二叉树</em>的结构<em>逐层顺序</em>编号，如果编号出现空挡，就说明不是完全二叉树，否则就是。</p>\n<ul>\n<li><p>下面几个都不是：</p>\n<ul>\n<li><p>9跟11之间有空挡</p>\n<img src=\"/posts/51696/d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg\" class=\"\" title=\"d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986\">\n</li>\n<li><p>5跟8，9之间有空挡</p>\n<img src=\"/posts/51696/821f0e91-4700-495e-a657-a372965a7027-3051986.jpg\" class=\"\" title=\"821f0e91-4700-495e-a657-a372965a7027-3051986\">\n</li>\n<li><p>9跟12之间有空挡</p>\n<img src=\"/posts/51696/130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg\" class=\"\" title=\"130be6af-5ac2-403e-a196-60a3534664eb-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>存储结构</p>\n<ul>\n<li>二叉树顺序存储结构（适用于完全二叉树）</li>\n<li>二叉链表</li>\n</ul>\n</li>\n<li><p>遍历二叉树</p>\n<ul>\n<li><p>#二叉树遍历方法</p>\n<ul>\n<li><p>前序遍历</p>\n<ul>\n<li><p>遍历顺序：ABDGHCEIF</p>\n<img src=\"/posts/51696/bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg\" class=\"\" title=\"bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986\">\n</li>\n</ul>\n</li>\n<li><p>中序遍历</p>\n<ul>\n<li><p>遍历顺序：GDHBAEICF</p>\n<img src=\"/posts/51696/53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg\" class=\"\" title=\"53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986\">\n</li>\n</ul>\n</li>\n<li><p>后序遍历</p>\n<ul>\n<li><p>遍历顺序：GHDBIEFCA</p>\n<img src=\"/posts/51696/76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg\" class=\"\" title=\"76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986\">\n</li>\n</ul>\n</li>\n<li><p>层序遍历</p>\n<ul>\n<li><p>遍历顺序：ABCDEFGHI</p>\n<img src=\"/posts/51696/ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg\" class=\"\" title=\"ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986\">\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>图</p>\n</li>\n</ul>"},{"title":"阿里云云服务器ECS购买与使用（笔记）","abbrlink":40394,"date":"2019-06-12T07:54:50.000Z","_content":"\n## 购买\n\n进入阿里云下拉菜单选择 ecs ：\n\n{% asset_img ecs_config.png ecs_config %}\n\n我购买的配置如下：\n\n{% asset_img ecs_config.png ecs_config %}\n\n购买后实例就运行了，远程连接后安装一系列包和软件：\n\n## 如何安装\n\n[阿里云服务器 ECS LAMP 环境安装（Ubuntu）](https://www.cnblogs.com/87hbteo/p/7802104.html)\n[阿里云 ECS 云服务器外网 IP 无法访问](https://blog.csdn.net/KascLiyuan/article/details/73438093)\n\n## 域名解析\n\n[阿里云如何解析域名](https://jingyan.baidu.com/article/48b558e3f25e6d7f38c09aec.html)\n\n<!-- more -->\n\n## Github Page 自定义域名\n\n- [创建 Github Page 并设置自定义域名](https://www.jianshu.com/p/8ac6c7c037c5)\n- [添加 CNAME 文件到你的存储库中](http://wiki.jikexueyuan.com/project/github-pages-basics/cname-file.html)\n\n## Ubuntu 安装 nodejs\n\n- [https://blog.5udou.cn/blog/A-Li-Yun-UbuntuDa-Jian-NodeJsHuan-Jing-75](https://evestorm.github.io/posts/58410/阿里云Ubuntu搭建NodeJs环境)\n\n## ubuntu 图形界面下无法用 root 登录解决办法\n\n先按照 [这个教程](https://www.linuxidc.com/Linux/2017-01/139094.htm) 走，但最后不重启。然后转到 [这个教程](https://blog.csdn.net/qq_39591507/article/details/81288644)，执行第三步，也就是下面这段：\n\n> 进入/etc/pam.d 文件夹下，修改 gdm-autologin 和 gdm-passwd 文件内容(首先修改文件权限，参考步骤 2 的操作)\n>\n> gdm-autologin 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行\n>\n> gdm-passwd 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行\n\n做完后重启然后点击登录其他用户，输入 root 和密码 root（这个密码在上面第一个教程中已经自己设置了）就好。\n\n## 安装 LAMP 环境\n\n[在 ubuntu16.04 中一键创建 LAMP 环境](https://blog.csdn.net/qq_27366789/article/details/81990291)\n\n### 编辑文件\n\n- 退出 mysql 命令行：`exit`\n- vi 编辑文件 按下 i 表示编辑 按下 esc 退出编辑模式 按下 `:wq` 保存退出\n\n### mysql 操作\n\n登录 mysql -u root -p\n\n-u 表示选择登陆的用户名， -p 表示登陆的用户密码，现在是 mysql 数据库是没有密码的，Enter password:处直接回车，就能够进入 mysql 数据库。\n\n#### 导入导出\n\n[ubuntu 下 mysql 数据库的导入导出](https://blog.csdn.net/hewenjing8168/article/details/80821447)\n\n## 安装 图形化 mysql-workbench\n\n[安装 mysql 服务，及安装图形化管理界面](https://blog.csdn.net/qq_37638061/article/details/80246799)\n\n## 打开 mysql 图形化后无法连接数据库\n\n[Unbuntu 下 Mysql 连接 MysqlWorkBench 出现错误](https://blog.csdn.net/chexiansheng/article/details/89193955)\n\n## 在 ubuntu 下搭建 ftp 服务器\n\n- [如何在 Ubuntu 18.04 上为用户目录设置 vsftpd](https://www.howtoing.com/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04)\n  执行完上面操作后，会发现下面两个问题，按方法调整就好：\n- [使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”](https://blog.51cto.com/zhkao/1758125)\n- [ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。](https://blog.csdn.net/wbryfl/article/details/82729189)\n\n### 介绍\n\nFTP 是文件传输协议的缩写，是一种曾经广泛用于在客户端和服务器之间移动文件的网络协议。 它已被更快，更安全，更方便的文件传输方式所取代。 许多休闲互联网用户希望通过`https`直接从他们的网络浏览器下载，命令行用户更有可能使用安全协议，如`scp`或[SFTP](https://www.howtoing.com/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/) 。\n\nFTP 仍然用于支持具有特定需求的遗留应用程序和工作流。 如果您可以选择使用哪种协议，请考虑探索更现代的选项。 但是，当您确实需要 FTP 时，vsftpd 是一个很好的选择。 vsftpd 针对安全性，性能和稳定性进行了优化，可以很好地防范其他 FTP 服务器中存在的许多安全问题，并且是许多 Linux 发行版的默认设置。\n\n在本教程中，您将配置 vsftpd 以允许用户使用具有 SSL / TLS 保护的登录凭据的 FTP 将文件上载到其主目录。\n\n### 先决条件\n\n要学习本教程，您需要：\n\n- **Ubuntu 18.04 服务器和具有 sudo 权限的非 root 用户** ：您可以在[使用 Ubuntu 18.04](https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/)指南的[初始服务器设置中](https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/)了解有关如何使用这些权限设置用户的更多信息。\n\n### 第 1 步 - 安装 vsftpd\n\n让我们首先更新我们的包列表并安装`vsftpd`守护进程：\n\n```shell\nsudo apt update\nsudo apt install vsftpd\n```\n\n安装完成后，让我们复制配置文件，这样我们就可以从空白配置开始，将原件保存为备份：\n\n```shell\nsudo cp /etc/vsftpd.conf /etc/vsftpd.conf.orig\n```\n\n通过备份配置，我们已准备好配置防火墙。\n\n### 第 2 步 - 打开防火墙\n\n**注意：** 最后我们还得打开 80 和 8080 端口！！！\n\n让我们检查防火墙状态以查看它是否已启用。 如果是，我们将确保允许 FTP 流量，因此防火墙规则不会阻止我们的测试。\n\n检查防火墙状态：\n\n```shell\nsudo ufw status\n```\n\n在这种情况下，只允许 SSH 通过：\n\n```shell\nOutputStatus: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n```\n\n您可能有其他规则或根本没有防火墙规则。 由于在这种情况下只允许 SSH 流量，因此我们需要为 FTP 流量添加规则。\n\n让我们打开端口`20`和`21`用于 FTP，端口`990`用于启用 TLS，端口`40000-50000`用于我们计划在配置文件中设置的被动端口范围：\n\n```shell\nsudo ufw allow 20/tcp\nsudo ufw allow 21/tcp\nsudo ufw allow 990/tcp\nsudo ufw allow 40000:50000/tcp\nsudo ufw status\n```\n\n我们的防火墙规则现在应如下所示：\n\n```shell\nOutputStatus: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n990/tcp                    ALLOW       Anywhere\n20/tcp                     ALLOW       Anywhere\n21/tcp                     ALLOW       Anywhere\n40000:50000/tcp            ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n20/tcp (v6)                ALLOW       Anywhere (v6)\n21/tcp (v6)                ALLOW       Anywhere (v6)\n990/tcp (v6)               ALLOW       Anywhere (v6)\n40000:50000/tcp (v6)       ALLOW       Anywhere (v6)\n```\n\np.s. 如何删除一个 rule：`sudo ufw delete allow 80/tcp`\n\n安装了`vsftpd`并打开了必要的端口后，我们继续创建一个专用的 FTP 用户。\n\n### 第 3 步 - 准备用户目录\n\n我们将创建一个专用的 FTP 用户，但您可能已经有一个需要 FTP 访问的用户。 我们将注意保留现有用户对以下说明中的数据的访问权限。 即便如此，我们建议您在配置和测试设置之前先与新用户联系。\n\n首先，添加一个测试用户：\n\n```shell\nsudo adduser sammy\n```\n\n出现提示时分配密码。 随意通过其他提示按`ENTER` 。\n\n当用户被限制在特定目录时，FTP 通常更安全。 `vsftpd`用[`chroot`](https://www.howtoing.com/how-to-configure-chroot-environments-for-testing-on-an-ubuntu-12-04-vps/#what-is-a-chroot-environment) jails 完成了这个。 为本地用户启用`chroot` ，默认情况下它们仅限于其主目录。 但是，由于`vsftpd`保护目录的方式，用户不能写入。 这对于只应通过 FTP 连接的新用户来说很好，但如果现有用户也具有 shell 访问权限，则可能需要写入其主文件夹。\n\n在这个例子中，不是从主目录中删除写权限，而是创建一个`ftp`目录作为`chroot`和一个可写`files`目录来保存实际文件。\n\n创建`ftp`文件夹：\n\n```shell\nsudo mkdir /home/sammy/ftp\n```\n\n设置所有权：\n\n```shell\nsudo chown nobody:nogroup /home/sammy/ftp\n```\n\n删除写权限：\n\n```shell\nsudo chmod a-w /home/sammy/ftp\n```\n\n验证权限：\n\n```shell\nsudo ls -la /home/sammy/ftp\nOutputtotal 8\n4 dr-xr-xr-x  2 nobody nogroup 4096 Aug 24 21:29 .\n4 drwxr-xr-x  3 sammy  sammy   4096 Aug 24 21:29 ..\n```\n\n接下来，让我们创建文件上传目录并为用户分配所有权：\n\n```shell\nsudo mkdir /home/sammy/ftp/files\nsudo chown sammy:sammy /home/sammy/ftp/files\n```\n\n对`ftp`目录的权限检查应返回以下内容：\n\n```shell\nsudo ls -la /home/sammy/ftp\nOutputtotal 12\ndr-xr-xr-x 3 nobody nogroup 4096 Aug 26 14:01 .\ndrwxr-xr-x 3 sammy  sammy   4096 Aug 26 13:59 ..\ndrwxr-xr-x 2 sammy  sammy   4096 Aug 26 14:01 files\n```\n\n最后，让我们添加一个`test.txt`文件，以便在测试时使用：\n\n```shell\necho \"vsftpd test file\" | sudo tee /home/sammy/ftp/files/test.txt\n```\n\n现在我们已经保护了`ftp`目录并允许用户访问`files`目录，让我们修改我们的配置。\n\n### 第 4 步 - 配置 FTP 访问\n\n我们计划允许具有本地 shell 帐户的单个用户与 FTP 连接。 这两个关键设置已在`vsftpd.conf`设置。 首先打开配置文件，验证配置中的设置是否与以下设置相匹配：\n\n```shell\nsudo nano /etc/vsftpd.conf\n```\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n. . .\n```\n\n接下来，让我们通过取消注释`write_enable`设置来允许用户上传文件：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nwrite_enable=YES\n. . .\n```\n\n我们还将取消注释`chroot`以防止 FTP 连接的用户访问目录树之外的任何文件或命令：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nchroot_local_user=YES\n. . .\n```\n\n我们还添加一个`user_sub_token`以在`local_root directory`路径中插入用户名，这样我们的配置将适用于此用户和任何其他未来用户。 在文件中的任何位置添加这些设置：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nuser_sub_token=$USER\nlocal_root=/home/$USER/ftp\n```\n\n我们还限制了可用于被动 FTP 的端口范围，以确保有足够的连接可用：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\npasv_min_port=40000\npasv_max_port=50000\n```\n\n**注意：**在第 2 步中，我们打开了我们在此处为被动端口范围设置的端口。 如果更改值，请务必更新防火墙设置。\n\n要根据具体情况允许 FTP 访问，让我们设置配置，以便用户只有在明确添加到列表时才能访问，而不是默认情况下：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nuserlist_enable=YES\nuserlist_file=/etc/vsftpd.userlist\nuserlist_deny=NO\n```\n\n`userlist_deny`切换逻辑：当它设置为`YES` ，列表中的用户被拒绝 FTP 访问。 当它设置为`NO` ，只允许列表中的用户访问。\n\n完成更改后，保存文件并退出编辑器。\n\n最后，让我们将用户添加到`/etc/vsftpd.userlist` 。 使用`-a`标志追加到文件：\n\n```shell\necho \"sammy\" | sudo tee -a /etc/vsftpd.userlist\n```\n\n检查它是否按预期添加：\n\n```shell\ncat /etc/vsftpd.userlist\nOutputsammy\n```\n\n重新启动守护程序以加载配置更改：\n\n```shell\nsudo systemctl restart vsftpd\n```\n\n配置到位后，我们继续测试 FTP 访问。\n\n### 第 5 步 - 测试 FTP 访问\n\n我们已将服务器配置为仅允许用户`sammy`通过 FTP 连接。 让我们确保它按预期工作。\n\n**匿名用户应该无法连接** ：我们已禁用匿名访问。 让我们通过尝试匿名连接来测试它。 如果我们的配置设置正确，则应拒绝匿名用户的权限。 请务必将`203.0.113.0`替换为服务器的公共 IP 地址：\n\n```shell\nftp -p 203.0.113.0\nOutputConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): anonymous\n530 Permission denied.\nftp: Login failed.\nftp>\n```\n\n关闭连接：\n\n```shell\nbye\n```\n\n**除了 sammy 之外的用户应该无法连接** ：接下来，让我们尝试连接我们的 sudo 用户。 他们也应该被拒绝访问，并且应该在他们被允许输入密码之前发生：\n\n```shell\nftp -p 203.0.113.0\nOutputConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): sudo_user\n530 Permission denied.\nftp: Login failed.\nftp>\n```\n\n关闭连接：\n\n```shell\nbye\n```\n\n**用户 sammy 应该能够连接，读取和写入文件** ：让我们确保我们的指定用户可以连接：\n\n```shell\nftp -p 203.0.113.0\nOutputConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): sammy\n331 Please specify the password.\nPassword: your_user's_password\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp>\n```\n\n让我们切换到`files`目录并使用`get`命令将我们之前创建的测试文件传输到本地机器：\n\n```shell\ncd files\nget test.txt\nOutput227 Entering Passive Mode (203,0,113,0,169,12).\n150 Opening BINARY mode data connection for test.txt (16 bytes).\n226 Transfer complete.\n16 bytes received in 0.0101 seconds (1588 bytes/s)\nftp>\n```\n\n接下来，让我们使用新名称上传文件以测试写入权限：\n\n```shell\nput test.txt upload.txt\nOutput227 Entering Passive Mode (203,0,113,0,164,71).\n150 Ok to send data.\n226 Transfer complete.\n16 bytes sent in 0.000894 seconds (17897 bytes/s)\n```\n\n关闭连接：\n\n```shell\nbye\n```\n\n现在我们已经测试了我们的配置，让我们采取措施进一步保护我们的服务器。\n\n### 第 6 步 - 保护交易\n\n由于 FTP 不会加密传输中的任何数据，包括用户凭据，因此我们将启用 TLS / SSL 来提供加密。 第一步是创建用于`vsftpd`的 SSL 证书。\n\n让我们使用`openssl`创建一个新证书，并使用`-days`标志使其有效一年。 在同一个命令中，我们将添加一个私有的 2048 位 RSA 密钥。 通过将`-keyout`和`-out`标志都设置为相同的值，私钥和证书将位于同一文件中：\n\n```shell\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n```\n\n系统将提示您提供证书的地址信息。 将您自己的信息替换为以下突出显示的值：\n\n```shell\nOutputGenerating a 2048 bit RSA private key\n............................................................................+++\n...........+++\nwriting new private key to '/etc/ssl/private/vsftpd.pem'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:NY\nLocality Name (eg, city) []:New York City\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:DigitalOcean\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []: your_server_ip\nEmail Address []:\n```\n\n有关证书标志的更多详细信息，请参阅[OpenSSL Essentials：使用 SSL 证书，私钥和 CSR](https://www.howtoing.com/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs/)\n\n创建证书后，再次打开`vsftpd`配置文件：\n\n```shell\nsudo nano /etc/vsftpd.conf\n```\n\n在文件的底部，您将看到以`rsa_`开头的两行。 评论它们，看起来像这样：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\n# rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\n# rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\n. . .\n```\n\n在它们下面，添加以下指向我们刚刚创建的证书和私钥的行：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nrsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\n. . .\n```\n\n之后，我们将强制使用 SSL，这将阻止无法处理 TLS 的客户端连接。 这对于确保所有流量都已加密是必要的，但它可能会强制您的 FTP 用户更改客户端。 将`ssl_enable`更改为`YES` ：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nssl_enable=YES\n. . .\n```\n\n之后，添加以下行以显式拒绝 SSL 上的匿名连接，并要求 SSL 进行数据传输和登录：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\n. . .\n```\n\n在此之后，通过添加以下行将服务器配置为使用 TLS（SSL 的首选后继者）：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\n. . .\n```\n\n最后，我们将添加两个选项。 首先，我们不会要求重用 SSL，因为它可能会破坏许多 FTP 客户端。 我们将需要“高”加密密码套件，目前这意味着密钥长度等于或大于 128 位：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n. . .\n```\n\n完成的文件部分应如下所示：\n\n/etc/vsftpd.conf 文件\n\n```shell\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\n#rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\n#rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nrsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\n```\n\n完成后，保存并关闭文件。\n\n重新启动服务器以使更改生效：\n\n```shell\nsudo systemctl restart vsftpd\n```\n\n此时，我们将无法再使用不安全的命令行客户端进行连接。 如果我们尝试过，我们会看到类似的东西：\n\n```shell\nftp -p 203.0.113.0\nConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): sammy\n530 Non-anonymous sessions must use encryption.\nftp: Login failed.\n421 Service not available, remote server has closed connection\nftp>\n```\n\n接下来，让我们验证我们是否可以使用支持 TLS 的客户端进行连接。\n\n### 第 7 步 - 使用 FileZilla 测试 TLS\n\n大多数现代 FTP 客户端都可以配置为使用 TLS 加密。 我们将演示如何与[FileZilla](https://filezilla-project.org/)连接，因为它支持跨平台。 请参阅其他客户的文档。\n\n首次打开 FileZilla 时，在主页上方找到站点管理器图标，这是最上一行最左侧的图标。 点击它：\n\n{% asset_img filezilla_site_manager_vsftpd_18_04.png filezilla_site_manager_vsftpd_18_04 %}\n\n将打开一个新窗口。 单击右下角的“ **新建站点”**按钮：\n\n{% asset_img new-site.png new-site %}\n\n在“ **我的网站”**下，将出现一个带有“ **新网站** ”字样的新图标。 您可以立即命名或稍后返回并使用“ **重命名”**按钮。\n\n使用名称或 IP 地址填写**主机**字段。 在“ **加密”**下拉菜单下，选择“ **要求显式 FTP over TLS”** 。\n\n对于**登录类型** ，选择**询问密码** 。 在“ **用户”**字段中填写您的 FTP 用户：\n\n{% asset_img ite-config2.png 常规设置选项卡 %}\n\n单击界面底部的“连接”。 系统将要求您输入用户密码：\n\n{% asset_img user-pass.png 密码对话 %}\n\n单击**确定**以进行连接。 您现在应该使用 TLS / SSL 加密与您的服务器连接。\n\n成功后，您将看到一个如下所示的服务器证书：\n\n{% asset_img filezilla_certificate_vsftpd_three.png filezilla_certificate_vsftpd_three %}\n\n当您接受证书后，双击`files`夹并将`upload.txt`拖到左侧以确认您能够下载文件：\n\n[![下载test.txt](阿里云云服务器ECS购买与使用（笔记）/filezilla_file_test_vsftpd_18_04.png)](https://www.howtoing.com/wp-content/uploads/articles/vsftpd_18_04/vsftpd_images/filezilla_file_test_vsftpd_18_04.png)\n{% asset_img filezilla_file_test_vsftpd_18_04.png 下载test.txt %}\n\n完成后，右键单击本地副本，将其重命名为`upload-tls.txt`并将其拖回服务器以确认您可以上传文件：\n\n{% asset_img filezilla_file_upload_vsftpd_18_04.png 重命名和上传 %}\n\n您现在已确认可以安全地成功传输启用了 SSL / TLS 的文件。\n\n### 第 8 步 - 禁用 Shell 访问（可选）\n\n如果由于客户端要求而无法使用 TLS，则可以通过禁用 FTP 用户以任何其他方式登录的方式来获得一些安全性。 防止它的一种相对简单的方法是创建一个自定义 shell。 这不会提供任何加密，但会限制受感染帐户对 FTP 可访问的文件的访问。\n\n首先，在`bin`目录中打开一个名为`ftponly`的文件：\n\n```shell\nsudo nano /bin/ftponly\n```\n\n添加一条消息，告诉用户他们无法登录的原因：\n\n/斌/ ftponly\n\n```shell\n#!/bin/sh\necho \"This account is limited to FTP access only.\"\n```\n\n保存文件并退出编辑器。\n\n更改权限以使文件可执行：\n\n```shell\nsudo chmod a+x /bin/ftponly\n```\n\n打开有效 shell 列表：\n\n```shell\nsudo nano /etc/shells\n```\n\n在底部添加：\n\n/ etc / shells 中\n\n```shell\n. . .\n/bin/ftponly\n```\n\n使用以下命令更新用户的 shell：\n\n```shell\nsudo usermod sammy -s /bin/ftponly\n```\n\n现在尝试以`sammy`身份登录您的服务器：\n\n```shell\nssh sammy@your_server_ip\n```\n\n你应该看到类似的东西：\n\n```shell\nOutputThis account is limited to FTP access only.\nConnection to 203.0.113.0 closed.\n```\n\n这确认用户不能再`ssh`到服务器并且仅限于 FTP 访问。\n\n### 结论\n\n在本教程中，我们介绍了为具有本地帐户的用户设置 FTP。 如果您需要使用外部身份验证源，您可能需要了解`vsftpd`对虚拟用户的支持。 这通过使用 PAM（可插入身份验证模块）提供了丰富的选项，如果您管理其他系统（如 LDAP 或 Kerberos）中的用户，这是一个不错的选择。\n\n### 执行完上面操作后的问题解决\n\n#### 使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”\n\n1、提示“不安全的服务器，不支持 FTPover TLS\n\n解决方法：在站点管理器中，加密方式选择：\n\n{% asset_img wKioL1b6SymwbfP7AAA1YkH4slo366.png wKioL1b6SymwbfP7AAA1YkH4slo366 %}\n\n2、提示“服务器不支持非 ASCII 字符”\n\n解决方法：在站点管理器中字符集选择：自定义字符集：GBK\n\n{% asset_img wKiom1b6SWvwBjm7AAA9pZvVBTE386.png wKiom1b6SWvwBjm7AAA9pZvVBTE386 %}\n\nOK,正常了\n\n#### ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\n\n设置 filezilla 客户端的连接参数\n\n1. 选中某一连接项\n2. 高级——加密——只使用普通 ftp\n3. 传输设置——传输模式——主动\n4. 重新连接\n\n## ubuntu 下 Apache 虚拟站点配置\n\nhttps://www.linuxidc.com/Linux/2017-05/143590.htm\n\n## apache 配置二级域名\n\n[apache2 服务器 mod_rewrite 模块 开启方法[linux, ubuntu\\]](https://www.cnblogs.com/wwufengg/articles/apache2-mod_rewrite.html)\n\n开启重写，p.s. 上面教程中说要把 `/etc/apache2/sites-enabled/000-default` 中的 `AllowOverride None 修改为： AllowOverride All` ，然而我的 Apache2 是新版（2.4），所以得转到 `/etc/apache2/` 。将名为 `apache2.conf` 的文件中的 [下面代码从 NONE 改为 ALL](http://www.kbase101.com/question/9571.html) ：\n\n```xml\n<Directory /var/www/>\n    Options Indexes FollowSymLinks\n    AllowOverride All\n    Require all granted\n</Directory>\n```\n\n目标二级域名：mall.evelance.cn\n\n阿里云控制台配置：在阿里云的控制台中找到域名管理，然后选择顶级域名 evelance.cn 后面的“解析”字样。在新打开的页面中我们可以看到一个提供域名解析的界面，选择解析类型为 A 类解析，然后输入 mall（我们想要的二级域名的头），然后在地址里面输入我们刚才查看到的 ECS 的公网 ip，然后点击确认，之后我们的解析就会生效了。\n\nubuntu 服务器配置：\n\n进入 /etc/apache2/site-available/ ，复制默认的虚拟主机配置文件：\n\n```shell\nsudo cp 000-default.conf mall.evelance.cn.conf\n```\n\n修改配置：\n\n```xml\n<VirtualHost *:80>\n    ServerAdmin xxx@qq.com\n    ServerName mall.evelance.com\n    DocumentRoot /home/www/mall\n\n    <Directory \"/home/www/mall\">\n        Options FollowSymLinks\n        AllowOverride All\n        #Require all denied\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n</VirtualHost>\n```\n\n在 sites-enabled 目录下建立符号链接：\n\n```shell\ncd /etc/apache2/sites-enabled\n#建立对应的软链接\nsudo ln -s /etc/apache2/sites-available/mall.evelance.cn.conf /etc/apache2/sites-enabled/mall.evelance.cn.conf\n```\n\n在对应目录放入项目代码：\n\n把项目文件放进 /home/www/mall 中，并赋予文件夹权限：\n\n```shell\nsudo chmod -R 777 /home/www/mall\n```\n\n激活配置，重启 apache：\n\n返回上级目录 `cd ../site-enable/`，输入 `cd sites-available/`\n\n输入 `a2ensite mall.evelance.cn.conf` ，如果提示已经激活过了，输入下面代码：\n\n```shell\na2dissite mall.evelance.cn.conf\nservice apache2 reload\na2ensite mall.evelance.cn.conf\nservice apache2 reload\n```\n\n参考：\n\n- [ECS 简单配置多个二级域名](https://blog.csdn.net/carolcoral/article/details/77857264)\n\n### 域名解析\n\n登录阿里云，进入控制台，选择云解析 DNS。选择右侧的解析管理，进行二级域名的添加：\n\n- 记录类型：A\n- 主机记录：[mall].evelance.cn\n- 解析线路：默认\n- 记录值：你的公共 IP\n- TTL：10 分钟\n\n参考：[阿里云添加二级域名的操作](https://blog.csdn.net/wangjia55/article/details/81127647)\n\n### 支持 https\n\n1. [在阿里云里申请免费 Https 证书 SSL](https://www.cnblogs.com/lxf1117/p/6650647.html)\n2. [ubuntu apache2 配置安装 ssl 证书](https://yq.aliyun.com/articles/697838)\n3. [阿里云 Ubuntu16.04 apache2 ssl 证书下载与安装（必须有域名）](https://www.cnblogs.com/wpl-php/p/10287125.html)\n4. 完成上述配置后，别忘了让防火墙允许 443 端口。`sudo ufw allow 443/tcp`\n","source":"_posts/阿里云云服务器ECS购买与使用（笔记）.md","raw":"---\ntitle: 阿里云云服务器ECS购买与使用（笔记）\ntags:\n  - 笔记\n  - 阿里云\ncategories:\n  - 后端\n  - 服务器\nabbrlink: 40394\ndate: 2019-06-12 15:54:50\n---\n\n## 购买\n\n进入阿里云下拉菜单选择 ecs ：\n\n{% asset_img ecs_config.png ecs_config %}\n\n我购买的配置如下：\n\n{% asset_img ecs_config.png ecs_config %}\n\n购买后实例就运行了，远程连接后安装一系列包和软件：\n\n## 如何安装\n\n[阿里云服务器 ECS LAMP 环境安装（Ubuntu）](https://www.cnblogs.com/87hbteo/p/7802104.html)\n[阿里云 ECS 云服务器外网 IP 无法访问](https://blog.csdn.net/KascLiyuan/article/details/73438093)\n\n## 域名解析\n\n[阿里云如何解析域名](https://jingyan.baidu.com/article/48b558e3f25e6d7f38c09aec.html)\n\n<!-- more -->\n\n## Github Page 自定义域名\n\n- [创建 Github Page 并设置自定义域名](https://www.jianshu.com/p/8ac6c7c037c5)\n- [添加 CNAME 文件到你的存储库中](http://wiki.jikexueyuan.com/project/github-pages-basics/cname-file.html)\n\n## Ubuntu 安装 nodejs\n\n- [https://blog.5udou.cn/blog/A-Li-Yun-UbuntuDa-Jian-NodeJsHuan-Jing-75](https://evestorm.github.io/posts/58410/阿里云Ubuntu搭建NodeJs环境)\n\n## ubuntu 图形界面下无法用 root 登录解决办法\n\n先按照 [这个教程](https://www.linuxidc.com/Linux/2017-01/139094.htm) 走，但最后不重启。然后转到 [这个教程](https://blog.csdn.net/qq_39591507/article/details/81288644)，执行第三步，也就是下面这段：\n\n> 进入/etc/pam.d 文件夹下，修改 gdm-autologin 和 gdm-passwd 文件内容(首先修改文件权限，参考步骤 2 的操作)\n>\n> gdm-autologin 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行\n>\n> gdm-passwd 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行\n\n做完后重启然后点击登录其他用户，输入 root 和密码 root（这个密码在上面第一个教程中已经自己设置了）就好。\n\n## 安装 LAMP 环境\n\n[在 ubuntu16.04 中一键创建 LAMP 环境](https://blog.csdn.net/qq_27366789/article/details/81990291)\n\n### 编辑文件\n\n- 退出 mysql 命令行：`exit`\n- vi 编辑文件 按下 i 表示编辑 按下 esc 退出编辑模式 按下 `:wq` 保存退出\n\n### mysql 操作\n\n登录 mysql -u root -p\n\n-u 表示选择登陆的用户名， -p 表示登陆的用户密码，现在是 mysql 数据库是没有密码的，Enter password:处直接回车，就能够进入 mysql 数据库。\n\n#### 导入导出\n\n[ubuntu 下 mysql 数据库的导入导出](https://blog.csdn.net/hewenjing8168/article/details/80821447)\n\n## 安装 图形化 mysql-workbench\n\n[安装 mysql 服务，及安装图形化管理界面](https://blog.csdn.net/qq_37638061/article/details/80246799)\n\n## 打开 mysql 图形化后无法连接数据库\n\n[Unbuntu 下 Mysql 连接 MysqlWorkBench 出现错误](https://blog.csdn.net/chexiansheng/article/details/89193955)\n\n## 在 ubuntu 下搭建 ftp 服务器\n\n- [如何在 Ubuntu 18.04 上为用户目录设置 vsftpd](https://www.howtoing.com/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04)\n  执行完上面操作后，会发现下面两个问题，按方法调整就好：\n- [使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”](https://blog.51cto.com/zhkao/1758125)\n- [ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。](https://blog.csdn.net/wbryfl/article/details/82729189)\n\n### 介绍\n\nFTP 是文件传输协议的缩写，是一种曾经广泛用于在客户端和服务器之间移动文件的网络协议。 它已被更快，更安全，更方便的文件传输方式所取代。 许多休闲互联网用户希望通过`https`直接从他们的网络浏览器下载，命令行用户更有可能使用安全协议，如`scp`或[SFTP](https://www.howtoing.com/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/) 。\n\nFTP 仍然用于支持具有特定需求的遗留应用程序和工作流。 如果您可以选择使用哪种协议，请考虑探索更现代的选项。 但是，当您确实需要 FTP 时，vsftpd 是一个很好的选择。 vsftpd 针对安全性，性能和稳定性进行了优化，可以很好地防范其他 FTP 服务器中存在的许多安全问题，并且是许多 Linux 发行版的默认设置。\n\n在本教程中，您将配置 vsftpd 以允许用户使用具有 SSL / TLS 保护的登录凭据的 FTP 将文件上载到其主目录。\n\n### 先决条件\n\n要学习本教程，您需要：\n\n- **Ubuntu 18.04 服务器和具有 sudo 权限的非 root 用户** ：您可以在[使用 Ubuntu 18.04](https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/)指南的[初始服务器设置中](https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/)了解有关如何使用这些权限设置用户的更多信息。\n\n### 第 1 步 - 安装 vsftpd\n\n让我们首先更新我们的包列表并安装`vsftpd`守护进程：\n\n```shell\nsudo apt update\nsudo apt install vsftpd\n```\n\n安装完成后，让我们复制配置文件，这样我们就可以从空白配置开始，将原件保存为备份：\n\n```shell\nsudo cp /etc/vsftpd.conf /etc/vsftpd.conf.orig\n```\n\n通过备份配置，我们已准备好配置防火墙。\n\n### 第 2 步 - 打开防火墙\n\n**注意：** 最后我们还得打开 80 和 8080 端口！！！\n\n让我们检查防火墙状态以查看它是否已启用。 如果是，我们将确保允许 FTP 流量，因此防火墙规则不会阻止我们的测试。\n\n检查防火墙状态：\n\n```shell\nsudo ufw status\n```\n\n在这种情况下，只允许 SSH 通过：\n\n```shell\nOutputStatus: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n```\n\n您可能有其他规则或根本没有防火墙规则。 由于在这种情况下只允许 SSH 流量，因此我们需要为 FTP 流量添加规则。\n\n让我们打开端口`20`和`21`用于 FTP，端口`990`用于启用 TLS，端口`40000-50000`用于我们计划在配置文件中设置的被动端口范围：\n\n```shell\nsudo ufw allow 20/tcp\nsudo ufw allow 21/tcp\nsudo ufw allow 990/tcp\nsudo ufw allow 40000:50000/tcp\nsudo ufw status\n```\n\n我们的防火墙规则现在应如下所示：\n\n```shell\nOutputStatus: active\n\nTo                         Action      From\n--                         ------      ----\nOpenSSH                    ALLOW       Anywhere\n990/tcp                    ALLOW       Anywhere\n20/tcp                     ALLOW       Anywhere\n21/tcp                     ALLOW       Anywhere\n40000:50000/tcp            ALLOW       Anywhere\nOpenSSH (v6)               ALLOW       Anywhere (v6)\n20/tcp (v6)                ALLOW       Anywhere (v6)\n21/tcp (v6)                ALLOW       Anywhere (v6)\n990/tcp (v6)               ALLOW       Anywhere (v6)\n40000:50000/tcp (v6)       ALLOW       Anywhere (v6)\n```\n\np.s. 如何删除一个 rule：`sudo ufw delete allow 80/tcp`\n\n安装了`vsftpd`并打开了必要的端口后，我们继续创建一个专用的 FTP 用户。\n\n### 第 3 步 - 准备用户目录\n\n我们将创建一个专用的 FTP 用户，但您可能已经有一个需要 FTP 访问的用户。 我们将注意保留现有用户对以下说明中的数据的访问权限。 即便如此，我们建议您在配置和测试设置之前先与新用户联系。\n\n首先，添加一个测试用户：\n\n```shell\nsudo adduser sammy\n```\n\n出现提示时分配密码。 随意通过其他提示按`ENTER` 。\n\n当用户被限制在特定目录时，FTP 通常更安全。 `vsftpd`用[`chroot`](https://www.howtoing.com/how-to-configure-chroot-environments-for-testing-on-an-ubuntu-12-04-vps/#what-is-a-chroot-environment) jails 完成了这个。 为本地用户启用`chroot` ，默认情况下它们仅限于其主目录。 但是，由于`vsftpd`保护目录的方式，用户不能写入。 这对于只应通过 FTP 连接的新用户来说很好，但如果现有用户也具有 shell 访问权限，则可能需要写入其主文件夹。\n\n在这个例子中，不是从主目录中删除写权限，而是创建一个`ftp`目录作为`chroot`和一个可写`files`目录来保存实际文件。\n\n创建`ftp`文件夹：\n\n```shell\nsudo mkdir /home/sammy/ftp\n```\n\n设置所有权：\n\n```shell\nsudo chown nobody:nogroup /home/sammy/ftp\n```\n\n删除写权限：\n\n```shell\nsudo chmod a-w /home/sammy/ftp\n```\n\n验证权限：\n\n```shell\nsudo ls -la /home/sammy/ftp\nOutputtotal 8\n4 dr-xr-xr-x  2 nobody nogroup 4096 Aug 24 21:29 .\n4 drwxr-xr-x  3 sammy  sammy   4096 Aug 24 21:29 ..\n```\n\n接下来，让我们创建文件上传目录并为用户分配所有权：\n\n```shell\nsudo mkdir /home/sammy/ftp/files\nsudo chown sammy:sammy /home/sammy/ftp/files\n```\n\n对`ftp`目录的权限检查应返回以下内容：\n\n```shell\nsudo ls -la /home/sammy/ftp\nOutputtotal 12\ndr-xr-xr-x 3 nobody nogroup 4096 Aug 26 14:01 .\ndrwxr-xr-x 3 sammy  sammy   4096 Aug 26 13:59 ..\ndrwxr-xr-x 2 sammy  sammy   4096 Aug 26 14:01 files\n```\n\n最后，让我们添加一个`test.txt`文件，以便在测试时使用：\n\n```shell\necho \"vsftpd test file\" | sudo tee /home/sammy/ftp/files/test.txt\n```\n\n现在我们已经保护了`ftp`目录并允许用户访问`files`目录，让我们修改我们的配置。\n\n### 第 4 步 - 配置 FTP 访问\n\n我们计划允许具有本地 shell 帐户的单个用户与 FTP 连接。 这两个关键设置已在`vsftpd.conf`设置。 首先打开配置文件，验证配置中的设置是否与以下设置相匹配：\n\n```shell\nsudo nano /etc/vsftpd.conf\n```\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\n# Allow anonymous FTP? (Disabled by default).\nanonymous_enable=NO\n#\n# Uncomment this to allow local users to log in.\nlocal_enable=YES\n. . .\n```\n\n接下来，让我们通过取消注释`write_enable`设置来允许用户上传文件：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nwrite_enable=YES\n. . .\n```\n\n我们还将取消注释`chroot`以防止 FTP 连接的用户访问目录树之外的任何文件或命令：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nchroot_local_user=YES\n. . .\n```\n\n我们还添加一个`user_sub_token`以在`local_root directory`路径中插入用户名，这样我们的配置将适用于此用户和任何其他未来用户。 在文件中的任何位置添加这些设置：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nuser_sub_token=$USER\nlocal_root=/home/$USER/ftp\n```\n\n我们还限制了可用于被动 FTP 的端口范围，以确保有足够的连接可用：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\npasv_min_port=40000\npasv_max_port=50000\n```\n\n**注意：**在第 2 步中，我们打开了我们在此处为被动端口范围设置的端口。 如果更改值，请务必更新防火墙设置。\n\n要根据具体情况允许 FTP 访问，让我们设置配置，以便用户只有在明确添加到列表时才能访问，而不是默认情况下：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nuserlist_enable=YES\nuserlist_file=/etc/vsftpd.userlist\nuserlist_deny=NO\n```\n\n`userlist_deny`切换逻辑：当它设置为`YES` ，列表中的用户被拒绝 FTP 访问。 当它设置为`NO` ，只允许列表中的用户访问。\n\n完成更改后，保存文件并退出编辑器。\n\n最后，让我们将用户添加到`/etc/vsftpd.userlist` 。 使用`-a`标志追加到文件：\n\n```shell\necho \"sammy\" | sudo tee -a /etc/vsftpd.userlist\n```\n\n检查它是否按预期添加：\n\n```shell\ncat /etc/vsftpd.userlist\nOutputsammy\n```\n\n重新启动守护程序以加载配置更改：\n\n```shell\nsudo systemctl restart vsftpd\n```\n\n配置到位后，我们继续测试 FTP 访问。\n\n### 第 5 步 - 测试 FTP 访问\n\n我们已将服务器配置为仅允许用户`sammy`通过 FTP 连接。 让我们确保它按预期工作。\n\n**匿名用户应该无法连接** ：我们已禁用匿名访问。 让我们通过尝试匿名连接来测试它。 如果我们的配置设置正确，则应拒绝匿名用户的权限。 请务必将`203.0.113.0`替换为服务器的公共 IP 地址：\n\n```shell\nftp -p 203.0.113.0\nOutputConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): anonymous\n530 Permission denied.\nftp: Login failed.\nftp>\n```\n\n关闭连接：\n\n```shell\nbye\n```\n\n**除了 sammy 之外的用户应该无法连接** ：接下来，让我们尝试连接我们的 sudo 用户。 他们也应该被拒绝访问，并且应该在他们被允许输入密码之前发生：\n\n```shell\nftp -p 203.0.113.0\nOutputConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): sudo_user\n530 Permission denied.\nftp: Login failed.\nftp>\n```\n\n关闭连接：\n\n```shell\nbye\n```\n\n**用户 sammy 应该能够连接，读取和写入文件** ：让我们确保我们的指定用户可以连接：\n\n```shell\nftp -p 203.0.113.0\nOutputConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): sammy\n331 Please specify the password.\nPassword: your_user's_password\n230 Login successful.\nRemote system type is UNIX.\nUsing binary mode to transfer files.\nftp>\n```\n\n让我们切换到`files`目录并使用`get`命令将我们之前创建的测试文件传输到本地机器：\n\n```shell\ncd files\nget test.txt\nOutput227 Entering Passive Mode (203,0,113,0,169,12).\n150 Opening BINARY mode data connection for test.txt (16 bytes).\n226 Transfer complete.\n16 bytes received in 0.0101 seconds (1588 bytes/s)\nftp>\n```\n\n接下来，让我们使用新名称上传文件以测试写入权限：\n\n```shell\nput test.txt upload.txt\nOutput227 Entering Passive Mode (203,0,113,0,164,71).\n150 Ok to send data.\n226 Transfer complete.\n16 bytes sent in 0.000894 seconds (17897 bytes/s)\n```\n\n关闭连接：\n\n```shell\nbye\n```\n\n现在我们已经测试了我们的配置，让我们采取措施进一步保护我们的服务器。\n\n### 第 6 步 - 保护交易\n\n由于 FTP 不会加密传输中的任何数据，包括用户凭据，因此我们将启用 TLS / SSL 来提供加密。 第一步是创建用于`vsftpd`的 SSL 证书。\n\n让我们使用`openssl`创建一个新证书，并使用`-days`标志使其有效一年。 在同一个命令中，我们将添加一个私有的 2048 位 RSA 密钥。 通过将`-keyout`和`-out`标志都设置为相同的值，私钥和证书将位于同一文件中：\n\n```shell\nsudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem\n```\n\n系统将提示您提供证书的地址信息。 将您自己的信息替换为以下突出显示的值：\n\n```shell\nOutputGenerating a 2048 bit RSA private key\n............................................................................+++\n...........+++\nwriting new private key to '/etc/ssl/private/vsftpd.pem'\n-----\nYou are about to be asked to enter information that will be incorporated\ninto your certificate request.\nWhat you are about to enter is what is called a Distinguished Name or a DN.\nThere are quite a few fields but you can leave some blank\nFor some fields there will be a default value,\nIf you enter '.', the field will be left blank.\n-----\nCountry Name (2 letter code) [AU]:US\nState or Province Name (full name) [Some-State]:NY\nLocality Name (eg, city) []:New York City\nOrganization Name (eg, company) [Internet Widgits Pty Ltd]:DigitalOcean\nOrganizational Unit Name (eg, section) []:\nCommon Name (e.g. server FQDN or YOUR name) []: your_server_ip\nEmail Address []:\n```\n\n有关证书标志的更多详细信息，请参阅[OpenSSL Essentials：使用 SSL 证书，私钥和 CSR](https://www.howtoing.com/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs/)\n\n创建证书后，再次打开`vsftpd`配置文件：\n\n```shell\nsudo nano /etc/vsftpd.conf\n```\n\n在文件的底部，您将看到以`rsa_`开头的两行。 评论它们，看起来像这样：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\n# rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\n# rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\n. . .\n```\n\n在它们下面，添加以下指向我们刚刚创建的证书和私钥的行：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nrsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\n. . .\n```\n\n之后，我们将强制使用 SSL，这将阻止无法处理 TLS 的客户端连接。 这对于确保所有流量都已加密是必要的，但它可能会强制您的 FTP 用户更改客户端。 将`ssl_enable`更改为`YES` ：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nssl_enable=YES\n. . .\n```\n\n之后，添加以下行以显式拒绝 SSL 上的匿名连接，并要求 SSL 进行数据传输和登录：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\n. . .\n```\n\n在此之后，通过添加以下行将服务器配置为使用 TLS（SSL 的首选后继者）：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\n. . .\n```\n\n最后，我们将添加两个选项。 首先，我们不会要求重用 SSL，因为它可能会破坏许多 FTP 客户端。 我们将需要“高”加密密码套件，目前这意味着密钥长度等于或大于 128 位：\n\n/etc/vsftpd.conf 文件\n\n```shell\n. . .\nrequire_ssl_reuse=NO\nssl_ciphers=HIGH\n. . .\n```\n\n完成的文件部分应如下所示：\n\n/etc/vsftpd.conf 文件\n\n```shell\n# This option specifies the location of the RSA certificate to use for SSL\n# encrypted connections.\n#rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem\n#rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key\nrsa_cert_file=/etc/ssl/private/vsftpd.pem\nrsa_private_key_file=/etc/ssl/private/vsftpd.pem\nssl_enable=YES\nallow_anon_ssl=NO\nforce_local_data_ssl=YES\nforce_local_logins_ssl=YES\nssl_tlsv1=YES\nssl_sslv2=NO\nssl_sslv3=NO\n```\n\n完成后，保存并关闭文件。\n\n重新启动服务器以使更改生效：\n\n```shell\nsudo systemctl restart vsftpd\n```\n\n此时，我们将无法再使用不安全的命令行客户端进行连接。 如果我们尝试过，我们会看到类似的东西：\n\n```shell\nftp -p 203.0.113.0\nConnected to 203.0.113.0.\n220 (vsFTPd 3.0.3)\nName (203.0.113.0:default): sammy\n530 Non-anonymous sessions must use encryption.\nftp: Login failed.\n421 Service not available, remote server has closed connection\nftp>\n```\n\n接下来，让我们验证我们是否可以使用支持 TLS 的客户端进行连接。\n\n### 第 7 步 - 使用 FileZilla 测试 TLS\n\n大多数现代 FTP 客户端都可以配置为使用 TLS 加密。 我们将演示如何与[FileZilla](https://filezilla-project.org/)连接，因为它支持跨平台。 请参阅其他客户的文档。\n\n首次打开 FileZilla 时，在主页上方找到站点管理器图标，这是最上一行最左侧的图标。 点击它：\n\n{% asset_img filezilla_site_manager_vsftpd_18_04.png filezilla_site_manager_vsftpd_18_04 %}\n\n将打开一个新窗口。 单击右下角的“ **新建站点”**按钮：\n\n{% asset_img new-site.png new-site %}\n\n在“ **我的网站”**下，将出现一个带有“ **新网站** ”字样的新图标。 您可以立即命名或稍后返回并使用“ **重命名”**按钮。\n\n使用名称或 IP 地址填写**主机**字段。 在“ **加密”**下拉菜单下，选择“ **要求显式 FTP over TLS”** 。\n\n对于**登录类型** ，选择**询问密码** 。 在“ **用户”**字段中填写您的 FTP 用户：\n\n{% asset_img ite-config2.png 常规设置选项卡 %}\n\n单击界面底部的“连接”。 系统将要求您输入用户密码：\n\n{% asset_img user-pass.png 密码对话 %}\n\n单击**确定**以进行连接。 您现在应该使用 TLS / SSL 加密与您的服务器连接。\n\n成功后，您将看到一个如下所示的服务器证书：\n\n{% asset_img filezilla_certificate_vsftpd_three.png filezilla_certificate_vsftpd_three %}\n\n当您接受证书后，双击`files`夹并将`upload.txt`拖到左侧以确认您能够下载文件：\n\n[![下载test.txt](阿里云云服务器ECS购买与使用（笔记）/filezilla_file_test_vsftpd_18_04.png)](https://www.howtoing.com/wp-content/uploads/articles/vsftpd_18_04/vsftpd_images/filezilla_file_test_vsftpd_18_04.png)\n{% asset_img filezilla_file_test_vsftpd_18_04.png 下载test.txt %}\n\n完成后，右键单击本地副本，将其重命名为`upload-tls.txt`并将其拖回服务器以确认您可以上传文件：\n\n{% asset_img filezilla_file_upload_vsftpd_18_04.png 重命名和上传 %}\n\n您现在已确认可以安全地成功传输启用了 SSL / TLS 的文件。\n\n### 第 8 步 - 禁用 Shell 访问（可选）\n\n如果由于客户端要求而无法使用 TLS，则可以通过禁用 FTP 用户以任何其他方式登录的方式来获得一些安全性。 防止它的一种相对简单的方法是创建一个自定义 shell。 这不会提供任何加密，但会限制受感染帐户对 FTP 可访问的文件的访问。\n\n首先，在`bin`目录中打开一个名为`ftponly`的文件：\n\n```shell\nsudo nano /bin/ftponly\n```\n\n添加一条消息，告诉用户他们无法登录的原因：\n\n/斌/ ftponly\n\n```shell\n#!/bin/sh\necho \"This account is limited to FTP access only.\"\n```\n\n保存文件并退出编辑器。\n\n更改权限以使文件可执行：\n\n```shell\nsudo chmod a+x /bin/ftponly\n```\n\n打开有效 shell 列表：\n\n```shell\nsudo nano /etc/shells\n```\n\n在底部添加：\n\n/ etc / shells 中\n\n```shell\n. . .\n/bin/ftponly\n```\n\n使用以下命令更新用户的 shell：\n\n```shell\nsudo usermod sammy -s /bin/ftponly\n```\n\n现在尝试以`sammy`身份登录您的服务器：\n\n```shell\nssh sammy@your_server_ip\n```\n\n你应该看到类似的东西：\n\n```shell\nOutputThis account is limited to FTP access only.\nConnection to 203.0.113.0 closed.\n```\n\n这确认用户不能再`ssh`到服务器并且仅限于 FTP 访问。\n\n### 结论\n\n在本教程中，我们介绍了为具有本地帐户的用户设置 FTP。 如果您需要使用外部身份验证源，您可能需要了解`vsftpd`对虚拟用户的支持。 这通过使用 PAM（可插入身份验证模块）提供了丰富的选项，如果您管理其他系统（如 LDAP 或 Kerberos）中的用户，这是一个不错的选择。\n\n### 执行完上面操作后的问题解决\n\n#### 使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”\n\n1、提示“不安全的服务器，不支持 FTPover TLS\n\n解决方法：在站点管理器中，加密方式选择：\n\n{% asset_img wKioL1b6SymwbfP7AAA1YkH4slo366.png wKioL1b6SymwbfP7AAA1YkH4slo366 %}\n\n2、提示“服务器不支持非 ASCII 字符”\n\n解决方法：在站点管理器中字符集选择：自定义字符集：GBK\n\n{% asset_img wKiom1b6SWvwBjm7AAA9pZvVBTE386.png wKiom1b6SWvwBjm7AAA9pZvVBTE386 %}\n\nOK,正常了\n\n#### ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\n\n设置 filezilla 客户端的连接参数\n\n1. 选中某一连接项\n2. 高级——加密——只使用普通 ftp\n3. 传输设置——传输模式——主动\n4. 重新连接\n\n## ubuntu 下 Apache 虚拟站点配置\n\nhttps://www.linuxidc.com/Linux/2017-05/143590.htm\n\n## apache 配置二级域名\n\n[apache2 服务器 mod_rewrite 模块 开启方法[linux, ubuntu\\]](https://www.cnblogs.com/wwufengg/articles/apache2-mod_rewrite.html)\n\n开启重写，p.s. 上面教程中说要把 `/etc/apache2/sites-enabled/000-default` 中的 `AllowOverride None 修改为： AllowOverride All` ，然而我的 Apache2 是新版（2.4），所以得转到 `/etc/apache2/` 。将名为 `apache2.conf` 的文件中的 [下面代码从 NONE 改为 ALL](http://www.kbase101.com/question/9571.html) ：\n\n```xml\n<Directory /var/www/>\n    Options Indexes FollowSymLinks\n    AllowOverride All\n    Require all granted\n</Directory>\n```\n\n目标二级域名：mall.evelance.cn\n\n阿里云控制台配置：在阿里云的控制台中找到域名管理，然后选择顶级域名 evelance.cn 后面的“解析”字样。在新打开的页面中我们可以看到一个提供域名解析的界面，选择解析类型为 A 类解析，然后输入 mall（我们想要的二级域名的头），然后在地址里面输入我们刚才查看到的 ECS 的公网 ip，然后点击确认，之后我们的解析就会生效了。\n\nubuntu 服务器配置：\n\n进入 /etc/apache2/site-available/ ，复制默认的虚拟主机配置文件：\n\n```shell\nsudo cp 000-default.conf mall.evelance.cn.conf\n```\n\n修改配置：\n\n```xml\n<VirtualHost *:80>\n    ServerAdmin xxx@qq.com\n    ServerName mall.evelance.com\n    DocumentRoot /home/www/mall\n\n    <Directory \"/home/www/mall\">\n        Options FollowSymLinks\n        AllowOverride All\n        #Require all denied\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n\n</VirtualHost>\n```\n\n在 sites-enabled 目录下建立符号链接：\n\n```shell\ncd /etc/apache2/sites-enabled\n#建立对应的软链接\nsudo ln -s /etc/apache2/sites-available/mall.evelance.cn.conf /etc/apache2/sites-enabled/mall.evelance.cn.conf\n```\n\n在对应目录放入项目代码：\n\n把项目文件放进 /home/www/mall 中，并赋予文件夹权限：\n\n```shell\nsudo chmod -R 777 /home/www/mall\n```\n\n激活配置，重启 apache：\n\n返回上级目录 `cd ../site-enable/`，输入 `cd sites-available/`\n\n输入 `a2ensite mall.evelance.cn.conf` ，如果提示已经激活过了，输入下面代码：\n\n```shell\na2dissite mall.evelance.cn.conf\nservice apache2 reload\na2ensite mall.evelance.cn.conf\nservice apache2 reload\n```\n\n参考：\n\n- [ECS 简单配置多个二级域名](https://blog.csdn.net/carolcoral/article/details/77857264)\n\n### 域名解析\n\n登录阿里云，进入控制台，选择云解析 DNS。选择右侧的解析管理，进行二级域名的添加：\n\n- 记录类型：A\n- 主机记录：[mall].evelance.cn\n- 解析线路：默认\n- 记录值：你的公共 IP\n- TTL：10 分钟\n\n参考：[阿里云添加二级域名的操作](https://blog.csdn.net/wangjia55/article/details/81127647)\n\n### 支持 https\n\n1. [在阿里云里申请免费 Https 证书 SSL](https://www.cnblogs.com/lxf1117/p/6650647.html)\n2. [ubuntu apache2 配置安装 ssl 证书](https://yq.aliyun.com/articles/697838)\n3. [阿里云 Ubuntu16.04 apache2 ssl 证书下载与安装（必须有域名）](https://www.cnblogs.com/wpl-php/p/10287125.html)\n4. 完成上述配置后，别忘了让防火墙允许 443 端口。`sudo ufw allow 443/tcp`\n","slug":"阿里云云服务器ECS购买与使用（笔记）","published":1,"updated":"2020-12-02T02:30:00.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cki7dxygr007nkhsrdnnse8vb","content":"<h2 id=\"购买\"><a href=\"#购买\" class=\"headerlink\" title=\"购买\"></a>购买</h2><p>进入阿里云下拉菜单选择 ecs ：</p>\n<img src=\"/posts/40394/ecs_config.png\" class=\"\" title=\"ecs_config\">\n\n<p>我购买的配置如下：</p>\n<img src=\"/posts/40394/ecs_config.png\" class=\"\" title=\"ecs_config\">\n\n<p>购买后实例就运行了，远程连接后安装一系列包和软件：</p>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><p><a href=\"https://www.cnblogs.com/87hbteo/p/7802104.html\">阿里云服务器 ECS LAMP 环境安装（Ubuntu）</a><br><a href=\"https://blog.csdn.net/KascLiyuan/article/details/73438093\">阿里云 ECS 云服务器外网 IP 无法访问</a></p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p><a href=\"https://jingyan.baidu.com/article/48b558e3f25e6d7f38c09aec.html\">阿里云如何解析域名</a></p>\n<a id=\"more\"></a>\n\n<h2 id=\"Github-Page-自定义域名\"><a href=\"#Github-Page-自定义域名\" class=\"headerlink\" title=\"Github Page 自定义域名\"></a>Github Page 自定义域名</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/8ac6c7c037c5\">创建 Github Page 并设置自定义域名</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/github-pages-basics/cname-file.html\">添加 CNAME 文件到你的存储库中</a></li>\n</ul>\n<h2 id=\"Ubuntu-安装-nodejs\"><a href=\"#Ubuntu-安装-nodejs\" class=\"headerlink\" title=\"Ubuntu 安装 nodejs\"></a>Ubuntu 安装 nodejs</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/58410/%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu%E6%90%AD%E5%BB%BANodeJs%E7%8E%AF%E5%A2%83\">https://blog.5udou.cn/blog/A-Li-Yun-UbuntuDa-Jian-NodeJsHuan-Jing-75</a></li>\n</ul>\n<h2 id=\"ubuntu-图形界面下无法用-root-登录解决办法\"><a href=\"#ubuntu-图形界面下无法用-root-登录解决办法\" class=\"headerlink\" title=\"ubuntu 图形界面下无法用 root 登录解决办法\"></a>ubuntu 图形界面下无法用 root 登录解决办法</h2><p>先按照 <a href=\"https://www.linuxidc.com/Linux/2017-01/139094.htm\">这个教程</a> 走，但最后不重启。然后转到 <a href=\"https://blog.csdn.net/qq_39591507/article/details/81288644\">这个教程</a>，执行第三步，也就是下面这段：</p>\n<blockquote>\n<p>进入/etc/pam.d 文件夹下，修改 gdm-autologin 和 gdm-passwd 文件内容(首先修改文件权限，参考步骤 2 的操作)</p>\n<p>gdm-autologin 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行</p>\n<p>gdm-passwd 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行</p>\n</blockquote>\n<p>做完后重启然后点击登录其他用户，输入 root 和密码 root（这个密码在上面第一个教程中已经自己设置了）就好。</p>\n<h2 id=\"安装-LAMP-环境\"><a href=\"#安装-LAMP-环境\" class=\"headerlink\" title=\"安装 LAMP 环境\"></a>安装 LAMP 环境</h2><p><a href=\"https://blog.csdn.net/qq_27366789/article/details/81990291\">在 ubuntu16.04 中一键创建 LAMP 环境</a></p>\n<h3 id=\"编辑文件\"><a href=\"#编辑文件\" class=\"headerlink\" title=\"编辑文件\"></a>编辑文件</h3><ul>\n<li>退出 mysql 命令行：<code>exit</code></li>\n<li>vi 编辑文件 按下 i 表示编辑 按下 esc 退出编辑模式 按下 <code>:wq</code> 保存退出</li>\n</ul>\n<h3 id=\"mysql-操作\"><a href=\"#mysql-操作\" class=\"headerlink\" title=\"mysql 操作\"></a>mysql 操作</h3><p>登录 mysql -u root -p</p>\n<p>-u 表示选择登陆的用户名， -p 表示登陆的用户密码，现在是 mysql 数据库是没有密码的，Enter password:处直接回车，就能够进入 mysql 数据库。</p>\n<h4 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h4><p><a href=\"https://blog.csdn.net/hewenjing8168/article/details/80821447\">ubuntu 下 mysql 数据库的导入导出</a></p>\n<h2 id=\"安装-图形化-mysql-workbench\"><a href=\"#安装-图形化-mysql-workbench\" class=\"headerlink\" title=\"安装 图形化 mysql-workbench\"></a>安装 图形化 mysql-workbench</h2><p><a href=\"https://blog.csdn.net/qq_37638061/article/details/80246799\">安装 mysql 服务，及安装图形化管理界面</a></p>\n<h2 id=\"打开-mysql-图形化后无法连接数据库\"><a href=\"#打开-mysql-图形化后无法连接数据库\" class=\"headerlink\" title=\"打开 mysql 图形化后无法连接数据库\"></a>打开 mysql 图形化后无法连接数据库</h2><p><a href=\"https://blog.csdn.net/chexiansheng/article/details/89193955\">Unbuntu 下 Mysql 连接 MysqlWorkBench 出现错误</a></p>\n<h2 id=\"在-ubuntu-下搭建-ftp-服务器\"><a href=\"#在-ubuntu-下搭建-ftp-服务器\" class=\"headerlink\" title=\"在 ubuntu 下搭建 ftp 服务器\"></a>在 ubuntu 下搭建 ftp 服务器</h2><ul>\n<li><a href=\"https://www.howtoing.com/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04\">如何在 Ubuntu 18.04 上为用户目录设置 vsftpd</a><br>执行完上面操作后，会发现下面两个问题，按方法调整就好：</li>\n<li><a href=\"https://blog.51cto.com/zhkao/1758125\">使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”</a></li>\n<li><a href=\"https://blog.csdn.net/wbryfl/article/details/82729189\">ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。</a></li>\n</ul>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>FTP 是文件传输协议的缩写，是一种曾经广泛用于在客户端和服务器之间移动文件的网络协议。 它已被更快，更安全，更方便的文件传输方式所取代。 许多休闲互联网用户希望通过<code>https</code>直接从他们的网络浏览器下载，命令行用户更有可能使用安全协议，如<code>scp</code>或<a href=\"https://www.howtoing.com/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/\">SFTP</a> 。</p>\n<p>FTP 仍然用于支持具有特定需求的遗留应用程序和工作流。 如果您可以选择使用哪种协议，请考虑探索更现代的选项。 但是，当您确实需要 FTP 时，vsftpd 是一个很好的选择。 vsftpd 针对安全性，性能和稳定性进行了优化，可以很好地防范其他 FTP 服务器中存在的许多安全问题，并且是许多 Linux 发行版的默认设置。</p>\n<p>在本教程中，您将配置 vsftpd 以允许用户使用具有 SSL / TLS 保护的登录凭据的 FTP 将文件上载到其主目录。</p>\n<h3 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h3><p>要学习本教程，您需要：</p>\n<ul>\n<li><strong>Ubuntu 18.04 服务器和具有 sudo 权限的非 root 用户</strong> ：您可以在<a href=\"https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/\">使用 Ubuntu 18.04</a>指南的<a href=\"https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/\">初始服务器设置中</a>了解有关如何使用这些权限设置用户的更多信息。</li>\n</ul>\n<h3 id=\"第-1-步-安装-vsftpd\"><a href=\"#第-1-步-安装-vsftpd\" class=\"headerlink\" title=\"第 1 步 - 安装 vsftpd\"></a>第 1 步 - 安装 vsftpd</h3><p>让我们首先更新我们的包列表并安装<code>vsftpd</code>守护进程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，让我们复制配置文件，这样我们就可以从空白配置开始，将原件保存为备份：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.orig</span><br></pre></td></tr></table></figure>\n\n<p>通过备份配置，我们已准备好配置防火墙。</p>\n<h3 id=\"第-2-步-打开防火墙\"><a href=\"#第-2-步-打开防火墙\" class=\"headerlink\" title=\"第 2 步 - 打开防火墙\"></a>第 2 步 - 打开防火墙</h3><p><strong>注意：</strong> 最后我们还得打开 80 和 8080 端口！！！</p>\n<p>让我们检查防火墙状态以查看它是否已启用。 如果是，我们将确保允许 FTP 流量，因此防火墙规则不会阻止我们的测试。</p>\n<p>检查防火墙状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，只允许 SSH 通过：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStatus: active</span><br><span class=\"line\"></span><br><span class=\"line\">To                         Action      From</span><br><span class=\"line\">--                         ------      ----</span><br><span class=\"line\">OpenSSH                    ALLOW       Anywhere</span><br><span class=\"line\">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure>\n\n<p>您可能有其他规则或根本没有防火墙规则。 由于在这种情况下只允许 SSH 流量，因此我们需要为 FTP 流量添加规则。</p>\n<p>让我们打开端口<code>20</code>和<code>21</code>用于 FTP，端口<code>990</code>用于启用 TLS，端口<code>40000-50000</code>用于我们计划在配置文件中设置的被动端口范围：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 20/tcp</span><br><span class=\"line\">sudo ufw allow 21/tcp</span><br><span class=\"line\">sudo ufw allow 990/tcp</span><br><span class=\"line\">sudo ufw allow 40000:50000/tcp</span><br><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<p>我们的防火墙规则现在应如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStatus: active</span><br><span class=\"line\"></span><br><span class=\"line\">To                         Action      From</span><br><span class=\"line\">--                         ------      ----</span><br><span class=\"line\">OpenSSH                    ALLOW       Anywhere</span><br><span class=\"line\">990/tcp                    ALLOW       Anywhere</span><br><span class=\"line\">20/tcp                     ALLOW       Anywhere</span><br><span class=\"line\">21/tcp                     ALLOW       Anywhere</span><br><span class=\"line\">40000:50000/tcp            ALLOW       Anywhere</span><br><span class=\"line\">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br><span class=\"line\">20/tcp (v6)                ALLOW       Anywhere (v6)</span><br><span class=\"line\">21/tcp (v6)                ALLOW       Anywhere (v6)</span><br><span class=\"line\">990/tcp (v6)               ALLOW       Anywhere (v6)</span><br><span class=\"line\">40000:50000/tcp (v6)       ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 如何删除一个 rule：<code>sudo ufw delete allow 80/tcp</code></p>\n<p>安装了<code>vsftpd</code>并打开了必要的端口后，我们继续创建一个专用的 FTP 用户。</p>\n<h3 id=\"第-3-步-准备用户目录\"><a href=\"#第-3-步-准备用户目录\" class=\"headerlink\" title=\"第 3 步 - 准备用户目录\"></a>第 3 步 - 准备用户目录</h3><p>我们将创建一个专用的 FTP 用户，但您可能已经有一个需要 FTP 访问的用户。 我们将注意保留现有用户对以下说明中的数据的访问权限。 即便如此，我们建议您在配置和测试设置之前先与新用户联系。</p>\n<p>首先，添加一个测试用户：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser sammy</span><br></pre></td></tr></table></figure>\n\n<p>出现提示时分配密码。 随意通过其他提示按<code>ENTER</code> 。</p>\n<p>当用户被限制在特定目录时，FTP 通常更安全。 <code>vsftpd</code>用<a href=\"https://www.howtoing.com/how-to-configure-chroot-environments-for-testing-on-an-ubuntu-12-04-vps/#what-is-a-chroot-environment\"><code>chroot</code></a> jails 完成了这个。 为本地用户启用<code>chroot</code> ，默认情况下它们仅限于其主目录。 但是，由于<code>vsftpd</code>保护目录的方式，用户不能写入。 这对于只应通过 FTP 连接的新用户来说很好，但如果现有用户也具有 shell 访问权限，则可能需要写入其主文件夹。</p>\n<p>在这个例子中，不是从主目录中删除写权限，而是创建一个<code>ftp</code>目录作为<code>chroot</code>和一个可写<code>files</code>目录来保存实际文件。</p>\n<p>创建<code>ftp</code>文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/sammy/ftp</span><br></pre></td></tr></table></figure>\n\n<p>设置所有权：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown nobody:nogroup /home/sammy/ftp</span><br></pre></td></tr></table></figure>\n\n<p>删除写权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a-w /home/sammy/ftp</span><br></pre></td></tr></table></figure>\n\n<p>验证权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ls -la /home/sammy/ftp</span><br><span class=\"line\">Outputtotal 8</span><br><span class=\"line\">4 dr-xr-xr-x  2 nobody nogroup 4096 Aug 24 21:29 .</span><br><span class=\"line\">4 drwxr-xr-x  3 sammy  sammy   4096 Aug 24 21:29 ..</span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们创建文件上传目录并为用户分配所有权：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/sammy/ftp/files</span><br><span class=\"line\">sudo chown sammy:sammy /home/sammy/ftp/files</span><br></pre></td></tr></table></figure>\n\n<p>对<code>ftp</code>目录的权限检查应返回以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ls -la /home/sammy/ftp</span><br><span class=\"line\">Outputtotal 12</span><br><span class=\"line\">dr-xr-xr-x 3 nobody nogroup 4096 Aug 26 14:01 .</span><br><span class=\"line\">drwxr-xr-x 3 sammy  sammy   4096 Aug 26 13:59 ..</span><br><span class=\"line\">drwxr-xr-x 2 sammy  sammy   4096 Aug 26 14:01 files</span><br></pre></td></tr></table></figure>\n\n<p>最后，让我们添加一个<code>test.txt</code>文件，以便在测试时使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;vsftpd test file&quot; | sudo tee /home/sammy/ftp/files/test.txt</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经保护了<code>ftp</code>目录并允许用户访问<code>files</code>目录，让我们修改我们的配置。</p>\n<h3 id=\"第-4-步-配置-FTP-访问\"><a href=\"#第-4-步-配置-FTP-访问\" class=\"headerlink\" title=\"第 4 步 - 配置 FTP 访问\"></a>第 4 步 - 配置 FTP 访问</h3><p>我们计划允许具有本地 shell 帐户的单个用户与 FTP 连接。 这两个关键设置已在<code>vsftpd.conf</code>设置。 首先打开配置文件，验证配置中的设置是否与以下设置相匹配：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们通过取消注释<code>write_enable</code>设置来允许用户上传文件：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>我们还将取消注释<code>chroot</code>以防止 FTP 连接的用户访问目录树之外的任何文件或命令：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>我们还添加一个<code>user_sub_token</code>以在<code>local_root directory</code>路径中插入用户名，这样我们的配置将适用于此用户和任何其他未来用户。 在文件中的任何位置添加这些设置：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">user_sub_token=$USER</span><br><span class=\"line\">local_root=/home/$USER/ftp</span><br></pre></td></tr></table></figure>\n\n<p>我们还限制了可用于被动 FTP 的端口范围，以确保有足够的连接可用：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">pasv_min_port=40000</span><br><span class=\"line\">pasv_max_port=50000</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>在第 2 步中，我们打开了我们在此处为被动端口范围设置的端口。 如果更改值，请务必更新防火墙设置。</p>\n<p>要根据具体情况允许 FTP 访问，让我们设置配置，以便用户只有在明确添加到列表时才能访问，而不是默认情况下：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">userlist_enable=YES</span><br><span class=\"line\">userlist_file=/etc/vsftpd.userlist</span><br><span class=\"line\">userlist_deny=NO</span><br></pre></td></tr></table></figure>\n\n<p><code>userlist_deny</code>切换逻辑：当它设置为<code>YES</code> ，列表中的用户被拒绝 FTP 访问。 当它设置为<code>NO</code> ，只允许列表中的用户访问。</p>\n<p>完成更改后，保存文件并退出编辑器。</p>\n<p>最后，让我们将用户添加到<code>/etc/vsftpd.userlist</code> 。 使用<code>-a</code>标志追加到文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;sammy&quot; | sudo tee -a /etc/vsftpd.userlist</span><br></pre></td></tr></table></figure>\n\n<p>检查它是否按预期添加：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/vsftpd.userlist</span><br><span class=\"line\">Outputsammy</span><br></pre></td></tr></table></figure>\n\n<p>重新启动守护程序以加载配置更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>配置到位后，我们继续测试 FTP 访问。</p>\n<h3 id=\"第-5-步-测试-FTP-访问\"><a href=\"#第-5-步-测试-FTP-访问\" class=\"headerlink\" title=\"第 5 步 - 测试 FTP 访问\"></a>第 5 步 - 测试 FTP 访问</h3><p>我们已将服务器配置为仅允许用户<code>sammy</code>通过 FTP 连接。 让我们确保它按预期工作。</p>\n<p><strong>匿名用户应该无法连接</strong> ：我们已禁用匿名访问。 让我们通过尝试匿名连接来测试它。 如果我们的配置设置正确，则应拒绝匿名用户的权限。 请务必将<code>203.0.113.0</code>替换为服务器的公共 IP 地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">OutputConnected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): anonymous</span><br><span class=\"line\">530 Permission denied.</span><br><span class=\"line\">ftp: Login failed.</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p><strong>除了 sammy 之外的用户应该无法连接</strong> ：接下来，让我们尝试连接我们的 sudo 用户。 他们也应该被拒绝访问，并且应该在他们被允许输入密码之前发生：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">OutputConnected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): sudo_user</span><br><span class=\"line\">530 Permission denied.</span><br><span class=\"line\">ftp: Login failed.</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户 sammy 应该能够连接，读取和写入文件</strong> ：让我们确保我们的指定用户可以连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">OutputConnected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): sammy</span><br><span class=\"line\">331 Please specify the password.</span><br><span class=\"line\">Password: your_user&#x27;s_password</span><br><span class=\"line\">230 Login successful.</span><br><span class=\"line\">Remote system type is UNIX.</span><br><span class=\"line\">Using binary mode to transfer files.</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>让我们切换到<code>files</code>目录并使用<code>get</code>命令将我们之前创建的测试文件传输到本地机器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd files</span><br><span class=\"line\">get test.txt</span><br><span class=\"line\">Output227 Entering Passive Mode (203,0,113,0,169,12).</span><br><span class=\"line\">150 Opening BINARY mode data connection for test.txt (16 bytes).</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">16 bytes received in 0.0101 seconds (1588 bytes/s)</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们使用新名称上传文件以测试写入权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">put test.txt upload.txt</span><br><span class=\"line\">Output227 Entering Passive Mode (203,0,113,0,164,71).</span><br><span class=\"line\">150 Ok to send data.</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">16 bytes sent in 0.000894 seconds (17897 bytes/s)</span><br></pre></td></tr></table></figure>\n\n<p>关闭连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经测试了我们的配置，让我们采取措施进一步保护我们的服务器。</p>\n<h3 id=\"第-6-步-保护交易\"><a href=\"#第-6-步-保护交易\" class=\"headerlink\" title=\"第 6 步 - 保护交易\"></a>第 6 步 - 保护交易</h3><p>由于 FTP 不会加密传输中的任何数据，包括用户凭据，因此我们将启用 TLS / SSL 来提供加密。 第一步是创建用于<code>vsftpd</code>的 SSL 证书。</p>\n<p>让我们使用<code>openssl</code>创建一个新证书，并使用<code>-days</code>标志使其有效一年。 在同一个命令中，我们将添加一个私有的 2048 位 RSA 密钥。 通过将<code>-keyout</code>和<code>-out</code>标志都设置为相同的值，私钥和证书将位于同一文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</span><br></pre></td></tr></table></figure>\n\n<p>系统将提示您提供证书的地址信息。 将您自己的信息替换为以下突出显示的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputGenerating a 2048 bit RSA private key</span><br><span class=\"line\">............................................................................+++</span><br><span class=\"line\">...........+++</span><br><span class=\"line\">writing new private key to &#x27;/etc/ssl/private/vsftpd.pem&#x27;</span><br><span class=\"line\">-----</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:US</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:NY</span><br><span class=\"line\">Locality Name (eg, city) []:New York City</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:DigitalOcean</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []: your_server_ip</span><br><span class=\"line\">Email Address []:</span><br></pre></td></tr></table></figure>\n\n<p>有关证书标志的更多详细信息，请参阅<a href=\"https://www.howtoing.com/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs/\">OpenSSL Essentials：使用 SSL 证书，私钥和 CSR</a></p>\n<p>创建证书后，再次打开<code>vsftpd</code>配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>在文件的底部，您将看到以<code>rsa_</code>开头的两行。 评论它们，看起来像这样：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span></span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>在它们下面，添加以下指向我们刚刚创建的证书和私钥的行：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们将强制使用 SSL，这将阻止无法处理 TLS 的客户端连接。 这对于确保所有流量都已加密是必要的，但它可能会强制您的 FTP 用户更改客户端。 将<code>ssl_enable</code>更改为<code>YES</code> ：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">ssl_enable=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>之后，添加以下行以显式拒绝 SSL 上的匿名连接，并要求 SSL 进行数据传输和登录：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">allow_anon_ssl=NO</span><br><span class=\"line\">force_local_data_ssl=YES</span><br><span class=\"line\">force_local_logins_ssl=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>在此之后，通过添加以下行将服务器配置为使用 TLS（SSL 的首选后继者）：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">ssl_tlsv1=YES</span><br><span class=\"line\">ssl_sslv2=NO</span><br><span class=\"line\">ssl_sslv3=NO</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们将添加两个选项。 首先，我们不会要求重用 SSL，因为它可能会破坏许多 FTP 客户端。 我们将需要“高”加密密码套件，目前这意味着密钥长度等于或大于 128 位：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">require_ssl_reuse=NO</span><br><span class=\"line\">ssl_ciphers=HIGH</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>完成的文件部分应如下所示：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This option specifies the location of the RSA certificate to use <span class=\"keyword\">for</span> SSL</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> encrypted connections.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">ssl_enable=YES</span><br><span class=\"line\">allow_anon_ssl=NO</span><br><span class=\"line\">force_local_data_ssl=YES</span><br><span class=\"line\">force_local_logins_ssl=YES</span><br><span class=\"line\">ssl_tlsv1=YES</span><br><span class=\"line\">ssl_sslv2=NO</span><br><span class=\"line\">ssl_sslv3=NO</span><br></pre></td></tr></table></figure>\n\n<p>完成后，保存并关闭文件。</p>\n<p>重新启动服务器以使更改生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>此时，我们将无法再使用不安全的命令行客户端进行连接。 如果我们尝试过，我们会看到类似的东西：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">Connected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): sammy</span><br><span class=\"line\">530 Non-anonymous sessions must use encryption.</span><br><span class=\"line\">ftp: Login failed.</span><br><span class=\"line\">421 Service not available, remote server has closed connection</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们验证我们是否可以使用支持 TLS 的客户端进行连接。</p>\n<h3 id=\"第-7-步-使用-FileZilla-测试-TLS\"><a href=\"#第-7-步-使用-FileZilla-测试-TLS\" class=\"headerlink\" title=\"第 7 步 - 使用 FileZilla 测试 TLS\"></a>第 7 步 - 使用 FileZilla 测试 TLS</h3><p>大多数现代 FTP 客户端都可以配置为使用 TLS 加密。 我们将演示如何与<a href=\"https://filezilla-project.org/\">FileZilla</a>连接，因为它支持跨平台。 请参阅其他客户的文档。</p>\n<p>首次打开 FileZilla 时，在主页上方找到站点管理器图标，这是最上一行最左侧的图标。 点击它：</p>\n<img src=\"/posts/40394/filezilla_site_manager_vsftpd_18_04.png\" class=\"\" title=\"filezilla_site_manager_vsftpd_18_04\">\n\n<p>将打开一个新窗口。 单击右下角的“ <strong>新建站点”</strong>按钮：</p>\n<img src=\"/posts/40394/new-site.png\" class=\"\" title=\"new-site\">\n\n<p>在“ <strong>我的网站”</strong>下，将出现一个带有“ <strong>新网站</strong> ”字样的新图标。 您可以立即命名或稍后返回并使用“ <strong>重命名”</strong>按钮。</p>\n<p>使用名称或 IP 地址填写<strong>主机</strong>字段。 在“ <strong>加密”</strong>下拉菜单下，选择“ <strong>要求显式 FTP over TLS”</strong> 。</p>\n<p>对于<strong>登录类型</strong> ，选择<strong>询问密码</strong> 。 在“ <strong>用户”</strong>字段中填写您的 FTP 用户：</p>\n\n\n<p>单击界面底部的“连接”。 系统将要求您输入用户密码：</p>\n<img src=\"/posts/40394/user-pass.png\" class=\"\" title=\"密码对话\">\n\n<p>单击<strong>确定</strong>以进行连接。 您现在应该使用 TLS / SSL 加密与您的服务器连接。</p>\n<p>成功后，您将看到一个如下所示的服务器证书：</p>\n<img src=\"/posts/40394/filezilla_certificate_vsftpd_three.png\" class=\"\" title=\"filezilla_certificate_vsftpd_three\">\n\n<p>当您接受证书后，双击<code>files</code>夹并将<code>upload.txt</code>拖到左侧以确认您能够下载文件：</p>\n<p><a href=\"https://www.howtoing.com/wp-content/uploads/articles/vsftpd_18_04/vsftpd_images/filezilla_file_test_vsftpd_18_04.png\"><img src=\"%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8ECS%E8%B4%AD%E4%B9%B0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/filezilla_file_test_vsftpd_18_04.png\" alt=\"下载test.txt\"></a></p>\n<img src=\"/posts/40394/filezilla_file_test_vsftpd_18_04.png\" class=\"\" title=\"下载test.txt\">\n\n<p>完成后，右键单击本地副本，将其重命名为<code>upload-tls.txt</code>并将其拖回服务器以确认您可以上传文件：</p>\n<img src=\"/posts/40394/filezilla_file_upload_vsftpd_18_04.png\" class=\"\" title=\"重命名和上传\">\n\n<p>您现在已确认可以安全地成功传输启用了 SSL / TLS 的文件。</p>\n<h3 id=\"第-8-步-禁用-Shell-访问（可选）\"><a href=\"#第-8-步-禁用-Shell-访问（可选）\" class=\"headerlink\" title=\"第 8 步 - 禁用 Shell 访问（可选）\"></a>第 8 步 - 禁用 Shell 访问（可选）</h3><p>如果由于客户端要求而无法使用 TLS，则可以通过禁用 FTP 用户以任何其他方式登录的方式来获得一些安全性。 防止它的一种相对简单的方法是创建一个自定义 shell。 这不会提供任何加密，但会限制受感染帐户对 FTP 可访问的文件的访问。</p>\n<p>首先，在<code>bin</code>目录中打开一个名为<code>ftponly</code>的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>添加一条消息，告诉用户他们无法登录的原因：</p>\n<p>/斌/ ftponly</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">echo &quot;This account is limited to FTP access only.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>保存文件并退出编辑器。</p>\n<p>更改权限以使文件可执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x /bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>打开有效 shell 列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/shells</span><br></pre></td></tr></table></figure>\n\n<p>在底部添加：</p>\n<p>/ etc / shells 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">/bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令更新用户的 shell：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod sammy -s /bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>现在尝试以<code>sammy</code>身份登录您的服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh sammy@your_server_ip</span><br></pre></td></tr></table></figure>\n\n<p>你应该看到类似的东西：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputThis account is limited to FTP access only.</span><br><span class=\"line\">Connection to 203.0.113.0 closed.</span><br></pre></td></tr></table></figure>\n\n<p>这确认用户不能再<code>ssh</code>到服务器并且仅限于 FTP 访问。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在本教程中，我们介绍了为具有本地帐户的用户设置 FTP。 如果您需要使用外部身份验证源，您可能需要了解<code>vsftpd</code>对虚拟用户的支持。 这通过使用 PAM（可插入身份验证模块）提供了丰富的选项，如果您管理其他系统（如 LDAP 或 Kerberos）中的用户，这是一个不错的选择。</p>\n<h3 id=\"执行完上面操作后的问题解决\"><a href=\"#执行完上面操作后的问题解决\" class=\"headerlink\" title=\"执行完上面操作后的问题解决\"></a>执行完上面操作后的问题解决</h3><h4 id=\"使用-FileZilla-FTP-下载时提示“不安全的服务器，不支持-FTPover-TLS”-和“服务器不支持非-ASCII-字符”\"><a href=\"#使用-FileZilla-FTP-下载时提示“不安全的服务器，不支持-FTPover-TLS”-和“服务器不支持非-ASCII-字符”\" class=\"headerlink\" title=\"使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”\"></a>使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”</h4><p>1、提示“不安全的服务器，不支持 FTPover TLS</p>\n<p>解决方法：在站点管理器中，加密方式选择：</p>\n\n\n<p>2、提示“服务器不支持非 ASCII 字符”</p>\n<p>解决方法：在站点管理器中字符集选择：自定义字符集：GBK</p>\n<img src=\"/posts/40394/wKiom1b6SWvwBjm7AAA9pZvVBTE386.png\" class=\"\" title=\"wKiom1b6SWvwBjm7AAA9pZvVBTE386\">\n\n<p>OK,正常了</p>\n<h4 id=\"ftp-连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\"><a href=\"#ftp-连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\" class=\"headerlink\" title=\"ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\"></a>ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。</h4><p>设置 filezilla 客户端的连接参数</p>\n<ol>\n<li>选中某一连接项</li>\n<li>高级——加密——只使用普通 ftp</li>\n<li>传输设置——传输模式——主动</li>\n<li>重新连接</li>\n</ol>\n<h2 id=\"ubuntu-下-Apache-虚拟站点配置\"><a href=\"#ubuntu-下-Apache-虚拟站点配置\" class=\"headerlink\" title=\"ubuntu 下 Apache 虚拟站点配置\"></a>ubuntu 下 Apache 虚拟站点配置</h2><p><a href=\"https://www.linuxidc.com/Linux/2017-05/143590.htm\">https://www.linuxidc.com/Linux/2017-05/143590.htm</a></p>\n<h2 id=\"apache-配置二级域名\"><a href=\"#apache-配置二级域名\" class=\"headerlink\" title=\"apache 配置二级域名\"></a>apache 配置二级域名</h2><p>[apache2 服务器 mod_rewrite 模块 开启方法<a href=\"https://www.cnblogs.com/wwufengg/articles/apache2-mod_rewrite.html\">linux, ubuntu]</a></p>\n<p>开启重写，p.s. 上面教程中说要把 <code>/etc/apache2/sites-enabled/000-default</code> 中的 <code>AllowOverride None 修改为： AllowOverride All</code> ，然而我的 Apache2 是新版（2.4），所以得转到 <code>/etc/apache2/</code> 。将名为 <code>apache2.conf</code> 的文件中的 <a href=\"http://www.kbase101.com/question/9571.html\">下面代码从 NONE 改为 ALL</a> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Directory</span> /<span class=\"attr\">var</span>/<span class=\"attr\">www</span>/&gt;</span></span><br><span class=\"line\">    Options Indexes FollowSymLinks</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>目标二级域名：mall.evelance.cn</p>\n<p>阿里云控制台配置：在阿里云的控制台中找到域名管理，然后选择顶级域名 evelance.cn 后面的“解析”字样。在新打开的页面中我们可以看到一个提供域名解析的界面，选择解析类型为 A 类解析，然后输入 mall（我们想要的二级域名的头），然后在地址里面输入我们刚才查看到的 ECS 的公网 ip，然后点击确认，之后我们的解析就会生效了。</p>\n<p>ubuntu 服务器配置：</p>\n<p>进入 /etc/apache2/site-available/ ，复制默认的虚拟主机配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp 000-default.conf mall.evelance.cn.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></span><br><span class=\"line\">    ServerAdmin xxx@qq.com</span><br><span class=\"line\">    ServerName mall.evelance.com</span><br><span class=\"line\">    DocumentRoot /home/www/mall</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Directory</span> &quot;/<span class=\"attr\">home</span>/<span class=\"attr\">www</span>/<span class=\"attr\">mall</span>&quot;&gt;</span></span><br><span class=\"line\">        Options FollowSymLinks</span><br><span class=\"line\">        AllowOverride All</span><br><span class=\"line\">        #Require all denied</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 sites-enabled 目录下建立符号链接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/apache2/sites-enabled</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">建立对应的软链接</span></span><br><span class=\"line\">sudo ln -s /etc/apache2/sites-available/mall.evelance.cn.conf /etc/apache2/sites-enabled/mall.evelance.cn.conf</span><br></pre></td></tr></table></figure>\n\n<p>在对应目录放入项目代码：</p>\n<p>把项目文件放进 /home/www/mall 中，并赋予文件夹权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod -R 777 /home/www/mall</span><br></pre></td></tr></table></figure>\n\n<p>激活配置，重启 apache：</p>\n<p>返回上级目录 <code>cd ../site-enable/</code>，输入 <code>cd sites-available/</code></p>\n<p>输入 <code>a2ensite mall.evelance.cn.conf</code> ，如果提示已经激活过了，输入下面代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a2dissite mall.evelance.cn.conf</span><br><span class=\"line\">service apache2 reload</span><br><span class=\"line\">a2ensite mall.evelance.cn.conf</span><br><span class=\"line\">service apache2 reload</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/carolcoral/article/details/77857264\">ECS 简单配置多个二级域名</a></li>\n</ul>\n<h3 id=\"域名解析-1\"><a href=\"#域名解析-1\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>登录阿里云，进入控制台，选择云解析 DNS。选择右侧的解析管理，进行二级域名的添加：</p>\n<ul>\n<li>记录类型：A</li>\n<li>主机记录：[mall].evelance.cn</li>\n<li>解析线路：默认</li>\n<li>记录值：你的公共 IP</li>\n<li>TTL：10 分钟</li>\n</ul>\n<p>参考：<a href=\"https://blog.csdn.net/wangjia55/article/details/81127647\">阿里云添加二级域名的操作</a></p>\n<h3 id=\"支持-https\"><a href=\"#支持-https\" class=\"headerlink\" title=\"支持 https\"></a>支持 https</h3><ol>\n<li><a href=\"https://www.cnblogs.com/lxf1117/p/6650647.html\">在阿里云里申请免费 Https 证书 SSL</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/697838\">ubuntu apache2 配置安装 ssl 证书</a></li>\n<li><a href=\"https://www.cnblogs.com/wpl-php/p/10287125.html\">阿里云 Ubuntu16.04 apache2 ssl 证书下载与安装（必须有域名）</a></li>\n<li>完成上述配置后，别忘了让防火墙允许 443 端口。<code>sudo ufw allow 443/tcp</code></li>\n</ol>\n","site":{"data":{}},"excerpt":"<h2 id=\"购买\"><a href=\"#购买\" class=\"headerlink\" title=\"购买\"></a>购买</h2><p>进入阿里云下拉菜单选择 ecs ：</p>\n<img src=\"/posts/40394/ecs_config.png\" class=\"\" title=\"ecs_config\">\n\n<p>我购买的配置如下：</p>\n<img src=\"/posts/40394/ecs_config.png\" class=\"\" title=\"ecs_config\">\n\n<p>购买后实例就运行了，远程连接后安装一系列包和软件：</p>\n<h2 id=\"如何安装\"><a href=\"#如何安装\" class=\"headerlink\" title=\"如何安装\"></a>如何安装</h2><p><a href=\"https://www.cnblogs.com/87hbteo/p/7802104.html\">阿里云服务器 ECS LAMP 环境安装（Ubuntu）</a><br><a href=\"https://blog.csdn.net/KascLiyuan/article/details/73438093\">阿里云 ECS 云服务器外网 IP 无法访问</a></p>\n<h2 id=\"域名解析\"><a href=\"#域名解析\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h2><p><a href=\"https://jingyan.baidu.com/article/48b558e3f25e6d7f38c09aec.html\">阿里云如何解析域名</a></p>","more":"<h2 id=\"Github-Page-自定义域名\"><a href=\"#Github-Page-自定义域名\" class=\"headerlink\" title=\"Github Page 自定义域名\"></a>Github Page 自定义域名</h2><ul>\n<li><a href=\"https://www.jianshu.com/p/8ac6c7c037c5\">创建 Github Page 并设置自定义域名</a></li>\n<li><a href=\"http://wiki.jikexueyuan.com/project/github-pages-basics/cname-file.html\">添加 CNAME 文件到你的存储库中</a></li>\n</ul>\n<h2 id=\"Ubuntu-安装-nodejs\"><a href=\"#Ubuntu-安装-nodejs\" class=\"headerlink\" title=\"Ubuntu 安装 nodejs\"></a>Ubuntu 安装 nodejs</h2><ul>\n<li><a href=\"https://evestorm.github.io/posts/58410/%E9%98%BF%E9%87%8C%E4%BA%91Ubuntu%E6%90%AD%E5%BB%BANodeJs%E7%8E%AF%E5%A2%83\">https://blog.5udou.cn/blog/A-Li-Yun-UbuntuDa-Jian-NodeJsHuan-Jing-75</a></li>\n</ul>\n<h2 id=\"ubuntu-图形界面下无法用-root-登录解决办法\"><a href=\"#ubuntu-图形界面下无法用-root-登录解决办法\" class=\"headerlink\" title=\"ubuntu 图形界面下无法用 root 登录解决办法\"></a>ubuntu 图形界面下无法用 root 登录解决办法</h2><p>先按照 <a href=\"https://www.linuxidc.com/Linux/2017-01/139094.htm\">这个教程</a> 走，但最后不重启。然后转到 <a href=\"https://blog.csdn.net/qq_39591507/article/details/81288644\">这个教程</a>，执行第三步，也就是下面这段：</p>\n<blockquote>\n<p>进入/etc/pam.d 文件夹下，修改 gdm-autologin 和 gdm-passwd 文件内容(首先修改文件权限，参考步骤 2 的操作)</p>\n<p>gdm-autologin 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行</p>\n<p>gdm-passwd 文件注释掉 auth required pam_success_if.so user!=root quiet_success 这一行</p>\n</blockquote>\n<p>做完后重启然后点击登录其他用户，输入 root 和密码 root（这个密码在上面第一个教程中已经自己设置了）就好。</p>\n<h2 id=\"安装-LAMP-环境\"><a href=\"#安装-LAMP-环境\" class=\"headerlink\" title=\"安装 LAMP 环境\"></a>安装 LAMP 环境</h2><p><a href=\"https://blog.csdn.net/qq_27366789/article/details/81990291\">在 ubuntu16.04 中一键创建 LAMP 环境</a></p>\n<h3 id=\"编辑文件\"><a href=\"#编辑文件\" class=\"headerlink\" title=\"编辑文件\"></a>编辑文件</h3><ul>\n<li>退出 mysql 命令行：<code>exit</code></li>\n<li>vi 编辑文件 按下 i 表示编辑 按下 esc 退出编辑模式 按下 <code>:wq</code> 保存退出</li>\n</ul>\n<h3 id=\"mysql-操作\"><a href=\"#mysql-操作\" class=\"headerlink\" title=\"mysql 操作\"></a>mysql 操作</h3><p>登录 mysql -u root -p</p>\n<p>-u 表示选择登陆的用户名， -p 表示登陆的用户密码，现在是 mysql 数据库是没有密码的，Enter password:处直接回车，就能够进入 mysql 数据库。</p>\n<h4 id=\"导入导出\"><a href=\"#导入导出\" class=\"headerlink\" title=\"导入导出\"></a>导入导出</h4><p><a href=\"https://blog.csdn.net/hewenjing8168/article/details/80821447\">ubuntu 下 mysql 数据库的导入导出</a></p>\n<h2 id=\"安装-图形化-mysql-workbench\"><a href=\"#安装-图形化-mysql-workbench\" class=\"headerlink\" title=\"安装 图形化 mysql-workbench\"></a>安装 图形化 mysql-workbench</h2><p><a href=\"https://blog.csdn.net/qq_37638061/article/details/80246799\">安装 mysql 服务，及安装图形化管理界面</a></p>\n<h2 id=\"打开-mysql-图形化后无法连接数据库\"><a href=\"#打开-mysql-图形化后无法连接数据库\" class=\"headerlink\" title=\"打开 mysql 图形化后无法连接数据库\"></a>打开 mysql 图形化后无法连接数据库</h2><p><a href=\"https://blog.csdn.net/chexiansheng/article/details/89193955\">Unbuntu 下 Mysql 连接 MysqlWorkBench 出现错误</a></p>\n<h2 id=\"在-ubuntu-下搭建-ftp-服务器\"><a href=\"#在-ubuntu-下搭建-ftp-服务器\" class=\"headerlink\" title=\"在 ubuntu 下搭建 ftp 服务器\"></a>在 ubuntu 下搭建 ftp 服务器</h2><ul>\n<li><a href=\"https://www.howtoing.com/how-to-set-up-vsftpd-for-a-user-s-directory-on-ubuntu-18-04\">如何在 Ubuntu 18.04 上为用户目录设置 vsftpd</a><br>执行完上面操作后，会发现下面两个问题，按方法调整就好：</li>\n<li><a href=\"https://blog.51cto.com/zhkao/1758125\">使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”</a></li>\n<li><a href=\"https://blog.csdn.net/wbryfl/article/details/82729189\">ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。</a></li>\n</ul>\n<h3 id=\"介绍\"><a href=\"#介绍\" class=\"headerlink\" title=\"介绍\"></a>介绍</h3><p>FTP 是文件传输协议的缩写，是一种曾经广泛用于在客户端和服务器之间移动文件的网络协议。 它已被更快，更安全，更方便的文件传输方式所取代。 许多休闲互联网用户希望通过<code>https</code>直接从他们的网络浏览器下载，命令行用户更有可能使用安全协议，如<code>scp</code>或<a href=\"https://www.howtoing.com/how-to-use-sftp-to-securely-transfer-files-with-a-remote-server/\">SFTP</a> 。</p>\n<p>FTP 仍然用于支持具有特定需求的遗留应用程序和工作流。 如果您可以选择使用哪种协议，请考虑探索更现代的选项。 但是，当您确实需要 FTP 时，vsftpd 是一个很好的选择。 vsftpd 针对安全性，性能和稳定性进行了优化，可以很好地防范其他 FTP 服务器中存在的许多安全问题，并且是许多 Linux 发行版的默认设置。</p>\n<p>在本教程中，您将配置 vsftpd 以允许用户使用具有 SSL / TLS 保护的登录凭据的 FTP 将文件上载到其主目录。</p>\n<h3 id=\"先决条件\"><a href=\"#先决条件\" class=\"headerlink\" title=\"先决条件\"></a>先决条件</h3><p>要学习本教程，您需要：</p>\n<ul>\n<li><strong>Ubuntu 18.04 服务器和具有 sudo 权限的非 root 用户</strong> ：您可以在<a href=\"https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/\">使用 Ubuntu 18.04</a>指南的<a href=\"https://www.howtoing.com/initial-server-setup-with-ubuntu-18-04/\">初始服务器设置中</a>了解有关如何使用这些权限设置用户的更多信息。</li>\n</ul>\n<h3 id=\"第-1-步-安装-vsftpd\"><a href=\"#第-1-步-安装-vsftpd\" class=\"headerlink\" title=\"第 1 步 - 安装 vsftpd\"></a>第 1 步 - 安装 vsftpd</h3><p>让我们首先更新我们的包列表并安装<code>vsftpd</code>守护进程：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo apt update</span><br><span class=\"line\">sudo apt install vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>安装完成后，让我们复制配置文件，这样我们就可以从空白配置开始，将原件保存为备份：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp /etc/vsftpd.conf /etc/vsftpd.conf.orig</span><br></pre></td></tr></table></figure>\n\n<p>通过备份配置，我们已准备好配置防火墙。</p>\n<h3 id=\"第-2-步-打开防火墙\"><a href=\"#第-2-步-打开防火墙\" class=\"headerlink\" title=\"第 2 步 - 打开防火墙\"></a>第 2 步 - 打开防火墙</h3><p><strong>注意：</strong> 最后我们还得打开 80 和 8080 端口！！！</p>\n<p>让我们检查防火墙状态以查看它是否已启用。 如果是，我们将确保允许 FTP 流量，因此防火墙规则不会阻止我们的测试。</p>\n<p>检查防火墙状态：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<p>在这种情况下，只允许 SSH 通过：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStatus: active</span><br><span class=\"line\"></span><br><span class=\"line\">To                         Action      From</span><br><span class=\"line\">--                         ------      ----</span><br><span class=\"line\">OpenSSH                    ALLOW       Anywhere</span><br><span class=\"line\">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure>\n\n<p>您可能有其他规则或根本没有防火墙规则。 由于在这种情况下只允许 SSH 流量，因此我们需要为 FTP 流量添加规则。</p>\n<p>让我们打开端口<code>20</code>和<code>21</code>用于 FTP，端口<code>990</code>用于启用 TLS，端口<code>40000-50000</code>用于我们计划在配置文件中设置的被动端口范围：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ufw allow 20/tcp</span><br><span class=\"line\">sudo ufw allow 21/tcp</span><br><span class=\"line\">sudo ufw allow 990/tcp</span><br><span class=\"line\">sudo ufw allow 40000:50000/tcp</span><br><span class=\"line\">sudo ufw status</span><br></pre></td></tr></table></figure>\n\n<p>我们的防火墙规则现在应如下所示：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputStatus: active</span><br><span class=\"line\"></span><br><span class=\"line\">To                         Action      From</span><br><span class=\"line\">--                         ------      ----</span><br><span class=\"line\">OpenSSH                    ALLOW       Anywhere</span><br><span class=\"line\">990/tcp                    ALLOW       Anywhere</span><br><span class=\"line\">20/tcp                     ALLOW       Anywhere</span><br><span class=\"line\">21/tcp                     ALLOW       Anywhere</span><br><span class=\"line\">40000:50000/tcp            ALLOW       Anywhere</span><br><span class=\"line\">OpenSSH (v6)               ALLOW       Anywhere (v6)</span><br><span class=\"line\">20/tcp (v6)                ALLOW       Anywhere (v6)</span><br><span class=\"line\">21/tcp (v6)                ALLOW       Anywhere (v6)</span><br><span class=\"line\">990/tcp (v6)               ALLOW       Anywhere (v6)</span><br><span class=\"line\">40000:50000/tcp (v6)       ALLOW       Anywhere (v6)</span><br></pre></td></tr></table></figure>\n\n<p>p.s. 如何删除一个 rule：<code>sudo ufw delete allow 80/tcp</code></p>\n<p>安装了<code>vsftpd</code>并打开了必要的端口后，我们继续创建一个专用的 FTP 用户。</p>\n<h3 id=\"第-3-步-准备用户目录\"><a href=\"#第-3-步-准备用户目录\" class=\"headerlink\" title=\"第 3 步 - 准备用户目录\"></a>第 3 步 - 准备用户目录</h3><p>我们将创建一个专用的 FTP 用户，但您可能已经有一个需要 FTP 访问的用户。 我们将注意保留现有用户对以下说明中的数据的访问权限。 即便如此，我们建议您在配置和测试设置之前先与新用户联系。</p>\n<p>首先，添加一个测试用户：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo adduser sammy</span><br></pre></td></tr></table></figure>\n\n<p>出现提示时分配密码。 随意通过其他提示按<code>ENTER</code> 。</p>\n<p>当用户被限制在特定目录时，FTP 通常更安全。 <code>vsftpd</code>用<a href=\"https://www.howtoing.com/how-to-configure-chroot-environments-for-testing-on-an-ubuntu-12-04-vps/#what-is-a-chroot-environment\"><code>chroot</code></a> jails 完成了这个。 为本地用户启用<code>chroot</code> ，默认情况下它们仅限于其主目录。 但是，由于<code>vsftpd</code>保护目录的方式，用户不能写入。 这对于只应通过 FTP 连接的新用户来说很好，但如果现有用户也具有 shell 访问权限，则可能需要写入其主文件夹。</p>\n<p>在这个例子中，不是从主目录中删除写权限，而是创建一个<code>ftp</code>目录作为<code>chroot</code>和一个可写<code>files</code>目录来保存实际文件。</p>\n<p>创建<code>ftp</code>文件夹：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/sammy/ftp</span><br></pre></td></tr></table></figure>\n\n<p>设置所有权：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chown nobody:nogroup /home/sammy/ftp</span><br></pre></td></tr></table></figure>\n\n<p>删除写权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a-w /home/sammy/ftp</span><br></pre></td></tr></table></figure>\n\n<p>验证权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ls -la /home/sammy/ftp</span><br><span class=\"line\">Outputtotal 8</span><br><span class=\"line\">4 dr-xr-xr-x  2 nobody nogroup 4096 Aug 24 21:29 .</span><br><span class=\"line\">4 drwxr-xr-x  3 sammy  sammy   4096 Aug 24 21:29 ..</span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们创建文件上传目录并为用户分配所有权：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo mkdir /home/sammy/ftp/files</span><br><span class=\"line\">sudo chown sammy:sammy /home/sammy/ftp/files</span><br></pre></td></tr></table></figure>\n\n<p>对<code>ftp</code>目录的权限检查应返回以下内容：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ls -la /home/sammy/ftp</span><br><span class=\"line\">Outputtotal 12</span><br><span class=\"line\">dr-xr-xr-x 3 nobody nogroup 4096 Aug 26 14:01 .</span><br><span class=\"line\">drwxr-xr-x 3 sammy  sammy   4096 Aug 26 13:59 ..</span><br><span class=\"line\">drwxr-xr-x 2 sammy  sammy   4096 Aug 26 14:01 files</span><br></pre></td></tr></table></figure>\n\n<p>最后，让我们添加一个<code>test.txt</code>文件，以便在测试时使用：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;vsftpd test file&quot; | sudo tee /home/sammy/ftp/files/test.txt</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经保护了<code>ftp</code>目录并允许用户访问<code>files</code>目录，让我们修改我们的配置。</p>\n<h3 id=\"第-4-步-配置-FTP-访问\"><a href=\"#第-4-步-配置-FTP-访问\" class=\"headerlink\" title=\"第 4 步 - 配置 FTP 访问\"></a>第 4 步 - 配置 FTP 访问</h3><p>我们计划允许具有本地 shell 帐户的单个用户与 FTP 连接。 这两个关键设置已在<code>vsftpd.conf</code>设置。 首先打开配置文件，验证配置中的设置是否与以下设置相匹配：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> Allow anonymous FTP? (Disabled by default).</span></span><br><span class=\"line\">anonymous_enable=NO</span><br><span class=\"line\"><span class=\"meta\">#</span></span><br><span class=\"line\"><span class=\"bash\"><span class=\"comment\"># Uncomment this to allow local users to log in.</span></span></span><br><span class=\"line\">local_enable=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们通过取消注释<code>write_enable</code>设置来允许用户上传文件：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">write_enable=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>我们还将取消注释<code>chroot</code>以防止 FTP 连接的用户访问目录树之外的任何文件或命令：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">chroot_local_user=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>我们还添加一个<code>user_sub_token</code>以在<code>local_root directory</code>路径中插入用户名，这样我们的配置将适用于此用户和任何其他未来用户。 在文件中的任何位置添加这些设置：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">user_sub_token=$USER</span><br><span class=\"line\">local_root=/home/$USER/ftp</span><br></pre></td></tr></table></figure>\n\n<p>我们还限制了可用于被动 FTP 的端口范围，以确保有足够的连接可用：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">pasv_min_port=40000</span><br><span class=\"line\">pasv_max_port=50000</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong>在第 2 步中，我们打开了我们在此处为被动端口范围设置的端口。 如果更改值，请务必更新防火墙设置。</p>\n<p>要根据具体情况允许 FTP 访问，让我们设置配置，以便用户只有在明确添加到列表时才能访问，而不是默认情况下：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">userlist_enable=YES</span><br><span class=\"line\">userlist_file=/etc/vsftpd.userlist</span><br><span class=\"line\">userlist_deny=NO</span><br></pre></td></tr></table></figure>\n\n<p><code>userlist_deny</code>切换逻辑：当它设置为<code>YES</code> ，列表中的用户被拒绝 FTP 访问。 当它设置为<code>NO</code> ，只允许列表中的用户访问。</p>\n<p>完成更改后，保存文件并退出编辑器。</p>\n<p>最后，让我们将用户添加到<code>/etc/vsftpd.userlist</code> 。 使用<code>-a</code>标志追加到文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;sammy&quot; | sudo tee -a /etc/vsftpd.userlist</span><br></pre></td></tr></table></figure>\n\n<p>检查它是否按预期添加：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/vsftpd.userlist</span><br><span class=\"line\">Outputsammy</span><br></pre></td></tr></table></figure>\n\n<p>重新启动守护程序以加载配置更改：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>配置到位后，我们继续测试 FTP 访问。</p>\n<h3 id=\"第-5-步-测试-FTP-访问\"><a href=\"#第-5-步-测试-FTP-访问\" class=\"headerlink\" title=\"第 5 步 - 测试 FTP 访问\"></a>第 5 步 - 测试 FTP 访问</h3><p>我们已将服务器配置为仅允许用户<code>sammy</code>通过 FTP 连接。 让我们确保它按预期工作。</p>\n<p><strong>匿名用户应该无法连接</strong> ：我们已禁用匿名访问。 让我们通过尝试匿名连接来测试它。 如果我们的配置设置正确，则应拒绝匿名用户的权限。 请务必将<code>203.0.113.0</code>替换为服务器的公共 IP 地址：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">OutputConnected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): anonymous</span><br><span class=\"line\">530 Permission denied.</span><br><span class=\"line\">ftp: Login failed.</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p><strong>除了 sammy 之外的用户应该无法连接</strong> ：接下来，让我们尝试连接我们的 sudo 用户。 他们也应该被拒绝访问，并且应该在他们被允许输入密码之前发生：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">OutputConnected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): sudo_user</span><br><span class=\"line\">530 Permission denied.</span><br><span class=\"line\">ftp: Login failed.</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>关闭连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p><strong>用户 sammy 应该能够连接，读取和写入文件</strong> ：让我们确保我们的指定用户可以连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">OutputConnected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): sammy</span><br><span class=\"line\">331 Please specify the password.</span><br><span class=\"line\">Password: your_user&#x27;s_password</span><br><span class=\"line\">230 Login successful.</span><br><span class=\"line\">Remote system type is UNIX.</span><br><span class=\"line\">Using binary mode to transfer files.</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>让我们切换到<code>files</code>目录并使用<code>get</code>命令将我们之前创建的测试文件传输到本地机器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd files</span><br><span class=\"line\">get test.txt</span><br><span class=\"line\">Output227 Entering Passive Mode (203,0,113,0,169,12).</span><br><span class=\"line\">150 Opening BINARY mode data connection for test.txt (16 bytes).</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">16 bytes received in 0.0101 seconds (1588 bytes/s)</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们使用新名称上传文件以测试写入权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">put test.txt upload.txt</span><br><span class=\"line\">Output227 Entering Passive Mode (203,0,113,0,164,71).</span><br><span class=\"line\">150 Ok to send data.</span><br><span class=\"line\">226 Transfer complete.</span><br><span class=\"line\">16 bytes sent in 0.000894 seconds (17897 bytes/s)</span><br></pre></td></tr></table></figure>\n\n<p>关闭连接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bye</span><br></pre></td></tr></table></figure>\n\n<p>现在我们已经测试了我们的配置，让我们采取措施进一步保护我们的服务器。</p>\n<h3 id=\"第-6-步-保护交易\"><a href=\"#第-6-步-保护交易\" class=\"headerlink\" title=\"第 6 步 - 保护交易\"></a>第 6 步 - 保护交易</h3><p>由于 FTP 不会加密传输中的任何数据，包括用户凭据，因此我们将启用 TLS / SSL 来提供加密。 第一步是创建用于<code>vsftpd</code>的 SSL 证书。</p>\n<p>让我们使用<code>openssl</code>创建一个新证书，并使用<code>-days</code>标志使其有效一年。 在同一个命令中，我们将添加一个私有的 2048 位 RSA 密钥。 通过将<code>-keyout</code>和<code>-out</code>标志都设置为相同的值，私钥和证书将位于同一文件中：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/vsftpd.pem -out /etc/ssl/private/vsftpd.pem</span><br></pre></td></tr></table></figure>\n\n<p>系统将提示您提供证书的地址信息。 将您自己的信息替换为以下突出显示的值：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputGenerating a 2048 bit RSA private key</span><br><span class=\"line\">............................................................................+++</span><br><span class=\"line\">...........+++</span><br><span class=\"line\">writing new private key to &#x27;/etc/ssl/private/vsftpd.pem&#x27;</span><br><span class=\"line\">-----</span><br><span class=\"line\">You are about to be asked to enter information that will be incorporated</span><br><span class=\"line\">into your certificate request.</span><br><span class=\"line\">What you are about to enter is what is called a Distinguished Name or a DN.</span><br><span class=\"line\">There are quite a few fields but you can leave some blank</span><br><span class=\"line\">For some fields there will be a default value,</span><br><span class=\"line\">If you enter &#x27;.&#x27;, the field will be left blank.</span><br><span class=\"line\">-----</span><br><span class=\"line\">Country Name (2 letter code) [AU]:US</span><br><span class=\"line\">State or Province Name (full name) [Some-State]:NY</span><br><span class=\"line\">Locality Name (eg, city) []:New York City</span><br><span class=\"line\">Organization Name (eg, company) [Internet Widgits Pty Ltd]:DigitalOcean</span><br><span class=\"line\">Organizational Unit Name (eg, section) []:</span><br><span class=\"line\">Common Name (e.g. server FQDN or YOUR name) []: your_server_ip</span><br><span class=\"line\">Email Address []:</span><br></pre></td></tr></table></figure>\n\n<p>有关证书标志的更多详细信息，请参阅<a href=\"https://www.howtoing.com/openssl-essentials-working-with-ssl-certificates-private-keys-and-csrs/\">OpenSSL Essentials：使用 SSL 证书，私钥和 CSR</a></p>\n<p>创建证书后，再次打开<code>vsftpd</code>配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/vsftpd.conf</span><br></pre></td></tr></table></figure>\n\n<p>在文件的底部，您将看到以<code>rsa_</code>开头的两行。 评论它们，看起来像这样：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span></span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>在它们下面，添加以下指向我们刚刚创建的证书和私钥的行：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">rsa_cert_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>之后，我们将强制使用 SSL，这将阻止无法处理 TLS 的客户端连接。 这对于确保所有流量都已加密是必要的，但它可能会强制您的 FTP 用户更改客户端。 将<code>ssl_enable</code>更改为<code>YES</code> ：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">ssl_enable=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>之后，添加以下行以显式拒绝 SSL 上的匿名连接，并要求 SSL 进行数据传输和登录：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">allow_anon_ssl=NO</span><br><span class=\"line\">force_local_data_ssl=YES</span><br><span class=\"line\">force_local_logins_ssl=YES</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>在此之后，通过添加以下行将服务器配置为使用 TLS（SSL 的首选后继者）：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">ssl_tlsv1=YES</span><br><span class=\"line\">ssl_sslv2=NO</span><br><span class=\"line\">ssl_sslv3=NO</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>最后，我们将添加两个选项。 首先，我们不会要求重用 SSL，因为它可能会破坏许多 FTP 客户端。 我们将需要“高”加密密码套件，目前这意味着密钥长度等于或大于 128 位：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">require_ssl_reuse=NO</span><br><span class=\"line\">ssl_ciphers=HIGH</span><br><span class=\"line\">. . .</span><br></pre></td></tr></table></figure>\n\n<p>完成的文件部分应如下所示：</p>\n<p>/etc/vsftpd.conf 文件</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> This option specifies the location of the RSA certificate to use <span class=\"keyword\">for</span> SSL</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> encrypted connections.</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">rsa_cert_file=/etc/ssl/certs/ssl-cert-snakeoil.pem</span></span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">rsa_private_key_file=/etc/ssl/private/ssl-cert-snakeoil.key</span></span><br><span class=\"line\">rsa_cert_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">rsa_private_key_file=/etc/ssl/private/vsftpd.pem</span><br><span class=\"line\">ssl_enable=YES</span><br><span class=\"line\">allow_anon_ssl=NO</span><br><span class=\"line\">force_local_data_ssl=YES</span><br><span class=\"line\">force_local_logins_ssl=YES</span><br><span class=\"line\">ssl_tlsv1=YES</span><br><span class=\"line\">ssl_sslv2=NO</span><br><span class=\"line\">ssl_sslv3=NO</span><br></pre></td></tr></table></figure>\n\n<p>完成后，保存并关闭文件。</p>\n<p>重新启动服务器以使更改生效：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo systemctl restart vsftpd</span><br></pre></td></tr></table></figure>\n\n<p>此时，我们将无法再使用不安全的命令行客户端进行连接。 如果我们尝试过，我们会看到类似的东西：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ftp -p 203.0.113.0</span><br><span class=\"line\">Connected to 203.0.113.0.</span><br><span class=\"line\">220 (vsFTPd 3.0.3)</span><br><span class=\"line\">Name (203.0.113.0:default): sammy</span><br><span class=\"line\">530 Non-anonymous sessions must use encryption.</span><br><span class=\"line\">ftp: Login failed.</span><br><span class=\"line\">421 Service not available, remote server has closed connection</span><br><span class=\"line\"><span class=\"meta\">ftp&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>接下来，让我们验证我们是否可以使用支持 TLS 的客户端进行连接。</p>\n<h3 id=\"第-7-步-使用-FileZilla-测试-TLS\"><a href=\"#第-7-步-使用-FileZilla-测试-TLS\" class=\"headerlink\" title=\"第 7 步 - 使用 FileZilla 测试 TLS\"></a>第 7 步 - 使用 FileZilla 测试 TLS</h3><p>大多数现代 FTP 客户端都可以配置为使用 TLS 加密。 我们将演示如何与<a href=\"https://filezilla-project.org/\">FileZilla</a>连接，因为它支持跨平台。 请参阅其他客户的文档。</p>\n<p>首次打开 FileZilla 时，在主页上方找到站点管理器图标，这是最上一行最左侧的图标。 点击它：</p>\n<img src=\"/posts/40394/filezilla_site_manager_vsftpd_18_04.png\" class=\"\" title=\"filezilla_site_manager_vsftpd_18_04\">\n\n<p>将打开一个新窗口。 单击右下角的“ <strong>新建站点”</strong>按钮：</p>\n<img src=\"/posts/40394/new-site.png\" class=\"\" title=\"new-site\">\n\n<p>在“ <strong>我的网站”</strong>下，将出现一个带有“ <strong>新网站</strong> ”字样的新图标。 您可以立即命名或稍后返回并使用“ <strong>重命名”</strong>按钮。</p>\n<p>使用名称或 IP 地址填写<strong>主机</strong>字段。 在“ <strong>加密”</strong>下拉菜单下，选择“ <strong>要求显式 FTP over TLS”</strong> 。</p>\n<p>对于<strong>登录类型</strong> ，选择<strong>询问密码</strong> 。 在“ <strong>用户”</strong>字段中填写您的 FTP 用户：</p>\n\n\n<p>单击界面底部的“连接”。 系统将要求您输入用户密码：</p>\n<img src=\"/posts/40394/user-pass.png\" class=\"\" title=\"密码对话\">\n\n<p>单击<strong>确定</strong>以进行连接。 您现在应该使用 TLS / SSL 加密与您的服务器连接。</p>\n<p>成功后，您将看到一个如下所示的服务器证书：</p>\n<img src=\"/posts/40394/filezilla_certificate_vsftpd_three.png\" class=\"\" title=\"filezilla_certificate_vsftpd_three\">\n\n<p>当您接受证书后，双击<code>files</code>夹并将<code>upload.txt</code>拖到左侧以确认您能够下载文件：</p>\n<p><a href=\"https://www.howtoing.com/wp-content/uploads/articles/vsftpd_18_04/vsftpd_images/filezilla_file_test_vsftpd_18_04.png\"><img src=\"%E9%98%BF%E9%87%8C%E4%BA%91%E4%BA%91%E6%9C%8D%E5%8A%A1%E5%99%A8ECS%E8%B4%AD%E4%B9%B0%E4%B8%8E%E4%BD%BF%E7%94%A8%EF%BC%88%E7%AC%94%E8%AE%B0%EF%BC%89/filezilla_file_test_vsftpd_18_04.png\" alt=\"下载test.txt\"></a></p>\n<img src=\"/posts/40394/filezilla_file_test_vsftpd_18_04.png\" class=\"\" title=\"下载test.txt\">\n\n<p>完成后，右键单击本地副本，将其重命名为<code>upload-tls.txt</code>并将其拖回服务器以确认您可以上传文件：</p>\n<img src=\"/posts/40394/filezilla_file_upload_vsftpd_18_04.png\" class=\"\" title=\"重命名和上传\">\n\n<p>您现在已确认可以安全地成功传输启用了 SSL / TLS 的文件。</p>\n<h3 id=\"第-8-步-禁用-Shell-访问（可选）\"><a href=\"#第-8-步-禁用-Shell-访问（可选）\" class=\"headerlink\" title=\"第 8 步 - 禁用 Shell 访问（可选）\"></a>第 8 步 - 禁用 Shell 访问（可选）</h3><p>如果由于客户端要求而无法使用 TLS，则可以通过禁用 FTP 用户以任何其他方式登录的方式来获得一些安全性。 防止它的一种相对简单的方法是创建一个自定义 shell。 这不会提供任何加密，但会限制受感染帐户对 FTP 可访问的文件的访问。</p>\n<p>首先，在<code>bin</code>目录中打开一个名为<code>ftponly</code>的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>添加一条消息，告诉用户他们无法登录的原因：</p>\n<p>/斌/ ftponly</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">!/bin/sh</span></span><br><span class=\"line\">echo &quot;This account is limited to FTP access only.&quot;</span><br></pre></td></tr></table></figure>\n\n<p>保存文件并退出编辑器。</p>\n<p>更改权限以使文件可执行：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod a+x /bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>打开有效 shell 列表：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo nano /etc/shells</span><br></pre></td></tr></table></figure>\n\n<p>在底部添加：</p>\n<p>/ etc / shells 中</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">. . .</span><br><span class=\"line\">/bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>使用以下命令更新用户的 shell：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo usermod sammy -s /bin/ftponly</span><br></pre></td></tr></table></figure>\n\n<p>现在尝试以<code>sammy</code>身份登录您的服务器：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ssh sammy@your_server_ip</span><br></pre></td></tr></table></figure>\n\n<p>你应该看到类似的东西：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">OutputThis account is limited to FTP access only.</span><br><span class=\"line\">Connection to 203.0.113.0 closed.</span><br></pre></td></tr></table></figure>\n\n<p>这确认用户不能再<code>ssh</code>到服务器并且仅限于 FTP 访问。</p>\n<h3 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h3><p>在本教程中，我们介绍了为具有本地帐户的用户设置 FTP。 如果您需要使用外部身份验证源，您可能需要了解<code>vsftpd</code>对虚拟用户的支持。 这通过使用 PAM（可插入身份验证模块）提供了丰富的选项，如果您管理其他系统（如 LDAP 或 Kerberos）中的用户，这是一个不错的选择。</p>\n<h3 id=\"执行完上面操作后的问题解决\"><a href=\"#执行完上面操作后的问题解决\" class=\"headerlink\" title=\"执行完上面操作后的问题解决\"></a>执行完上面操作后的问题解决</h3><h4 id=\"使用-FileZilla-FTP-下载时提示“不安全的服务器，不支持-FTPover-TLS”-和“服务器不支持非-ASCII-字符”\"><a href=\"#使用-FileZilla-FTP-下载时提示“不安全的服务器，不支持-FTPover-TLS”-和“服务器不支持非-ASCII-字符”\" class=\"headerlink\" title=\"使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”\"></a>使用 FileZilla FTP 下载时提示“不安全的服务器，不支持 FTPover TLS”,和“服务器不支持非 ASCII 字符”</h4><p>1、提示“不安全的服务器，不支持 FTPover TLS</p>\n<p>解决方法：在站点管理器中，加密方式选择：</p>\n\n\n<p>2、提示“服务器不支持非 ASCII 字符”</p>\n<p>解决方法：在站点管理器中字符集选择：自定义字符集：GBK</p>\n<img src=\"/posts/40394/wKiom1b6SWvwBjm7AAA9pZvVBTE386.png\" class=\"\" title=\"wKiom1b6SWvwBjm7AAA9pZvVBTE386\">\n\n<p>OK,正常了</p>\n<h4 id=\"ftp-连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\"><a href=\"#ftp-连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\" class=\"headerlink\" title=\"ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。\"></a>ftp 连接错误——服务器发回了不可路由的地址。使用服务器地址代替。</h4><p>设置 filezilla 客户端的连接参数</p>\n<ol>\n<li>选中某一连接项</li>\n<li>高级——加密——只使用普通 ftp</li>\n<li>传输设置——传输模式——主动</li>\n<li>重新连接</li>\n</ol>\n<h2 id=\"ubuntu-下-Apache-虚拟站点配置\"><a href=\"#ubuntu-下-Apache-虚拟站点配置\" class=\"headerlink\" title=\"ubuntu 下 Apache 虚拟站点配置\"></a>ubuntu 下 Apache 虚拟站点配置</h2><p><a href=\"https://www.linuxidc.com/Linux/2017-05/143590.htm\">https://www.linuxidc.com/Linux/2017-05/143590.htm</a></p>\n<h2 id=\"apache-配置二级域名\"><a href=\"#apache-配置二级域名\" class=\"headerlink\" title=\"apache 配置二级域名\"></a>apache 配置二级域名</h2><p>[apache2 服务器 mod_rewrite 模块 开启方法<a href=\"https://www.cnblogs.com/wwufengg/articles/apache2-mod_rewrite.html\">linux, ubuntu]</a></p>\n<p>开启重写，p.s. 上面教程中说要把 <code>/etc/apache2/sites-enabled/000-default</code> 中的 <code>AllowOverride None 修改为： AllowOverride All</code> ，然而我的 Apache2 是新版（2.4），所以得转到 <code>/etc/apache2/</code> 。将名为 <code>apache2.conf</code> 的文件中的 <a href=\"http://www.kbase101.com/question/9571.html\">下面代码从 NONE 改为 ALL</a> ：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">Directory</span> /<span class=\"attr\">var</span>/<span class=\"attr\">www</span>/&gt;</span></span><br><span class=\"line\">    Options Indexes FollowSymLinks</span><br><span class=\"line\">    AllowOverride All</span><br><span class=\"line\">    Require all granted</span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>目标二级域名：mall.evelance.cn</p>\n<p>阿里云控制台配置：在阿里云的控制台中找到域名管理，然后选择顶级域名 evelance.cn 后面的“解析”字样。在新打开的页面中我们可以看到一个提供域名解析的界面，选择解析类型为 A 类解析，然后输入 mall（我们想要的二级域名的头），然后在地址里面输入我们刚才查看到的 ECS 的公网 ip，然后点击确认，之后我们的解析就会生效了。</p>\n<p>ubuntu 服务器配置：</p>\n<p>进入 /etc/apache2/site-available/ ，复制默认的虚拟主机配置文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo cp 000-default.conf mall.evelance.cn.conf</span><br></pre></td></tr></table></figure>\n\n<p>修改配置：</p>\n<figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">VirtualHost</span> *<span class=\"attr\">:80</span>&gt;</span></span><br><span class=\"line\">    ServerAdmin xxx@qq.com</span><br><span class=\"line\">    ServerName mall.evelance.com</span><br><span class=\"line\">    DocumentRoot /home/www/mall</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">Directory</span> &quot;/<span class=\"attr\">home</span>/<span class=\"attr\">www</span>/<span class=\"attr\">mall</span>&quot;&gt;</span></span><br><span class=\"line\">        Options FollowSymLinks</span><br><span class=\"line\">        AllowOverride All</span><br><span class=\"line\">        #Require all denied</span><br><span class=\"line\">        Require all granted</span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">Directory</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\">    ErrorLog $&#123;APACHE_LOG_DIR&#125;/error.log</span><br><span class=\"line\">    CustomLog $&#123;APACHE_LOG_DIR&#125;/access.log combined</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">VirtualHost</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>在 sites-enabled 目录下建立符号链接：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /etc/apache2/sites-enabled</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">建立对应的软链接</span></span><br><span class=\"line\">sudo ln -s /etc/apache2/sites-available/mall.evelance.cn.conf /etc/apache2/sites-enabled/mall.evelance.cn.conf</span><br></pre></td></tr></table></figure>\n\n<p>在对应目录放入项目代码：</p>\n<p>把项目文件放进 /home/www/mall 中，并赋予文件夹权限：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo chmod -R 777 /home/www/mall</span><br></pre></td></tr></table></figure>\n\n<p>激活配置，重启 apache：</p>\n<p>返回上级目录 <code>cd ../site-enable/</code>，输入 <code>cd sites-available/</code></p>\n<p>输入 <code>a2ensite mall.evelance.cn.conf</code> ，如果提示已经激活过了，输入下面代码：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a2dissite mall.evelance.cn.conf</span><br><span class=\"line\">service apache2 reload</span><br><span class=\"line\">a2ensite mall.evelance.cn.conf</span><br><span class=\"line\">service apache2 reload</span><br></pre></td></tr></table></figure>\n\n<p>参考：</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/carolcoral/article/details/77857264\">ECS 简单配置多个二级域名</a></li>\n</ul>\n<h3 id=\"域名解析-1\"><a href=\"#域名解析-1\" class=\"headerlink\" title=\"域名解析\"></a>域名解析</h3><p>登录阿里云，进入控制台，选择云解析 DNS。选择右侧的解析管理，进行二级域名的添加：</p>\n<ul>\n<li>记录类型：A</li>\n<li>主机记录：[mall].evelance.cn</li>\n<li>解析线路：默认</li>\n<li>记录值：你的公共 IP</li>\n<li>TTL：10 分钟</li>\n</ul>\n<p>参考：<a href=\"https://blog.csdn.net/wangjia55/article/details/81127647\">阿里云添加二级域名的操作</a></p>\n<h3 id=\"支持-https\"><a href=\"#支持-https\" class=\"headerlink\" title=\"支持 https\"></a>支持 https</h3><ol>\n<li><a href=\"https://www.cnblogs.com/lxf1117/p/6650647.html\">在阿里云里申请免费 Https 证书 SSL</a></li>\n<li><a href=\"https://yq.aliyun.com/articles/697838\">ubuntu apache2 配置安装 ssl 证书</a></li>\n<li><a href=\"https://www.cnblogs.com/wpl-php/p/10287125.html\">阿里云 Ubuntu16.04 apache2 ssl 证书下载与安装（必须有域名）</a></li>\n<li>完成上述配置后，别忘了让防火墙允许 443 端口。<code>sudo ufw allow 443/tcp</code></li>\n</ol>"}],"PostAsset":[{"_id":"source/_posts/Minification-压缩与-Gzip-压缩的区别（翻译）/3e99e9b284d401c365c5044bc715ba44c9246f83.jpg","post":"cki7dxyeb000dkhsr6cdw00si","slug":"3e99e9b284d401c365c5044bc715ba44c9246f83.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Minification-压缩与-Gzip-压缩的区别（翻译）/997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg","post":"cki7dxyeb000dkhsr6cdw00si","slug":"997aee7f7378ac61ca5b36877a65f44c3ed70bc5.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Promise用法/8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg","post":"cki7dxyee000gkhsr0rao8e1c","slug":"8144ca8cgw1f2wc9ed35zj218g0p0tey.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Promise用法/call-back-hello.jpg","post":"cki7dxyee000gkhsr0rao8e1c","slug":"call-back-hello.jpg","modified":1,"renderable":1},{"_id":"source/_posts/Sequelize框架进阶/message-table.png","post":"cki7dxyef000hkhsrfnur77zb","slug":"message-table.png","modified":1,"renderable":1},{"_id":"source/_posts/Sequelize框架进阶/user-message-data.png","post":"cki7dxyef000hkhsrfnur77zb","slug":"user-message-data.png","modified":1,"renderable":1},{"_id":"source/_posts/cookie与session区别/1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png","post":"cki7dxyfa002kkhsr1uqdh9k7","slug":"1550245038963-b61378bb-65db-411e-9069-cf7d2b7a2908-20201119143043224.png","modified":1,"renderable":1},{"_id":"source/_posts/cookie与session区别/1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png","post":"cki7dxyfa002kkhsr1uqdh9k7","slug":"1550245194054-9e6b0a42-c09e-4a8b-8e7e-93ba715e6e5a-20201119143043424.png","modified":1,"renderable":1},{"_id":"source/_posts/animation动画（一）/shrink.gif","post":"cki7dxyf8002fkhsrhelt2tzc","slug":"shrink.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/EagerEvaluation.png","post":"cki7dxyfg0031khsr70irfoif","slug":"EagerEvaluation.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/Experiments.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"Experiments.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/autopre.png","post":"cki7dxyfg0031khsr70irfoif","slug":"autopre.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/await.png","post":"cki7dxyfg0031khsr70irfoif","slug":"await.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/copy.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"copy.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/getEventListeners.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"getEventListeners.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/ide.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"ide.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/insertlog.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"insertlog.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/log.png","post":"cki7dxyfg0031khsr70irfoif","slug":"log.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/logcolor.png","post":"cki7dxyfg0031khsr70irfoif","slug":"logcolor.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/logtable.png","post":"cki7dxyfg0031khsr70irfoif","slug":"logtable.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/methodtools.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"methodtools.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/networkoverrides.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"networkoverrides.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/node-debuger.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"node-debuger.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/superlog.png","post":"cki7dxyfg0031khsr70irfoif","slug":"superlog.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】20个ChromeDevTools调试技巧/tooltips.gif","post":"cki7dxyfg0031khsr70irfoif","slug":"tooltips.gif","modified":1,"renderable":1},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/session.png","post":"cki7dxyfl003hkhsr7l2kb7eu","slug":"session.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/token流程.png","post":"cki7dxyfl003hkhsr7l2kb7eu","slug":"token流程.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/token算法.png","post":"cki7dxyfl003hkhsr7l2kb7eu","slug":"token算法.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/token验证.png","post":"cki7dxyfl003hkhsr7l2kb7eu","slug":"token验证.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/负载均衡1.png","post":"cki7dxyfl003hkhsr7l2kb7eu","slug":"负载均衡1.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】彻底理解cookie-session-token/负载均衡2.png","post":"cki7dxyfl003hkhsr7l2kb7eu","slug":"负载均衡2.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223114.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223114.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223158.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223158.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223159.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223159.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223164.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223164.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223167.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223167.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223217.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223217.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322202223220.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322202223220.png","modified":1,"renderable":1},{"_id":"source/_posts/【转载】高性能前端架构解决方案/640-20200322203628249.png","post":"cki7dxyfm003kkhsr0gq3h3zj","slug":"640-20200322203628249.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step1.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"双飞翼step1.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step2.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"双飞翼step2.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step3.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"双飞翼step3.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/双飞翼step4.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"双飞翼step4.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step1.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"圣杯step1.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step2.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"圣杯step2.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step3.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"圣杯step3.png","modified":1,"renderable":1},{"_id":"source/_posts/三栏布局方案-圣杯-双飞翼/圣杯step4.png","post":"cki7dxyfp003skhsrb2es5d21","slug":"圣杯step4.png","modified":1,"renderable":1},{"_id":"source/_posts/前端vscode插件配置/1.png","post":"cki7dxyfu004akhsr54gw29zs","slug":"1.png","modified":1,"renderable":1},{"_id":"source/_posts/前端vscode插件配置/162c15a64b468fd8.gif","post":"cki7dxyfu004akhsr54gw29zs","slug":"162c15a64b468fd8.gif","modified":1,"renderable":1},{"_id":"source/_posts/前端vscode插件配置/163001_02d3ddb2_1203301.png","post":"cki7dxyfu004akhsr54gw29zs","slug":"163001_02d3ddb2_1203301.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/0349a840-ed31-06be-207c-e748883522b7.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"0349a840-ed31-06be-207c-e748883522b7.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/1-1.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"1-1.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/16-9.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"16-9.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"19e45d16-534a-9ac3-578c-83bb3f01b45f(1).png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/19e45d16-534a-9ac3-578c-83bb3f01b45f.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"19e45d16-534a-9ac3-578c-83bb3f01b45f.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"327c8e32-cb68-0615-fa7f-b0bbec3dc4f1.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/562e47bd-abda-dae4-7765-68706b5a978e.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"562e47bd-abda-dae4-7765-68706b5a978e.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/600-300.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"600-300.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/70ef9642-13d0-a15c-ff25-23feaef1029b.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"70ef9642-13d0-a15c-ff25-23feaef1029b.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/ba7c9abd-2f10-3890-cfed-f8c389248b53.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"ba7c9abd-2f10-3890-cfed-f8c389248b53.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"c2b3b4d8-759c-14ce-2ffe-6ab2f59b15b4.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/d312b3ec-ded3-746f-9e59-7daa68811f30.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"d312b3ec-ded3-746f-9e59-7daa68811f30.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/full-screen.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"full-screen.png","modified":1,"renderable":1},{"_id":"source/_posts/大屏上的全屏页面的自适应适配方案/square.png","post":"cki7dxyfy004mkhsr9zgj8mk9","slug":"square.png","modified":1,"renderable":1},{"_id":"source/_posts/对HTML语义化的理解/f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg","post":"cki7dxyg8005ckhsrdge49tpc","slug":"f8442d9e-e30d-11e6-85aa-3e3fb75f9695.jpg","modified":1,"renderable":1},{"_id":"source/_posts/transition过渡（二）/cubic05000510.png","post":"cki7dxyff002xkhsr38d60r02","slug":"cubic05000510.png","modified":1,"renderable":1},{"_id":"source/_posts/transition过渡（二）/cubic55465149.png","post":"cki7dxyff002xkhsr38d60r02","slug":"cubic55465149.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/冒泡.gif","post":"cki7dxyga005fkhsr4hvudjc4","slug":"冒泡.gif","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/冒泡2.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"冒泡2.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/希尔.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"希尔.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/归并.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"归并.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/归并2.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"归并2.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排10.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排10.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排11.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排11.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排12.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排12.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排13.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排13.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排14.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排14.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排2.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排2.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排3.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排3.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排4.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排4.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排5.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排5.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排6.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排6.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排7.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排7.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排8.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排8.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/快排9.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"快排9.png","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/插入.gif","post":"cki7dxyga005fkhsr4hvudjc4","slug":"插入.gif","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/选择.gif","post":"cki7dxyga005fkhsr4hvudjc4","slug":"选择.gif","modified":1,"renderable":1},{"_id":"source/_posts/常见排序算法/选择2.png","post":"cki7dxyga005fkhsr4hvudjc4","slug":"选择2.png","modified":1,"renderable":1},{"_id":"source/_posts/Sequelize框架入门/error-mysql2.png","post":"cki7dxygh005ykhsra4pfg73q","slug":"error-mysql2.png","modified":1,"renderable":1},{"_id":"source/_posts/Sequelize框架入门/npminit-y.png","post":"cki7dxygh005ykhsra4pfg73q","slug":"npminit-y.png","modified":1,"renderable":1},{"_id":"source/_posts/Sequelize框架入门/table-property.png","post":"cki7dxygh005ykhsra4pfg73q","slug":"table-property.png","modified":1,"renderable":1},{"_id":"source/_posts/有序表查找之二分查找/1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png","post":"cki7dxygf005rkhsrh3kp3oib","slug":"1556938076685-7ebcf60f-aaf7-4f4c-ba78-0f4d7b9a3099.png","modified":1,"renderable":1},{"_id":"source/_posts/基于sequelize的数据库迁移/create-users.png","post":"cki7dxygp007ikhsrbt7m2do9","slug":"create-users.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/ecs_config-20201119135902728.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"ecs_config-20201119135902728.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/ecs_config.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"ecs_config.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_certificate_vsftpd_three.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"filezilla_certificate_vsftpd_three.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_file_test_vsftpd_18_04.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"filezilla_file_test_vsftpd_18_04.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_file_upload_vsftpd_18_04.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"filezilla_file_upload_vsftpd_18_04.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/filezilla_site_manager_vsftpd_18_04.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"filezilla_site_manager_vsftpd_18_04.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/new-site.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"new-site.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/site-config2.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"site-config2.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/user-pass.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"user-pass.png","modified":1,"renderable":1},{"_id":"source/_posts/阿里云云服务器ECS购买与使用（笔记）/wKiom1b6SWvwBjm7AAA9pZvVBTE386.png","post":"cki7dxygr007nkhsrdnnse8vb","slug":"wKiom1b6SWvwBjm7AAA9pZvVBTE386.png","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"0987f1e7-fdea-4404-bce6-c377ed05532d-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"0da7720c-5c75-4a5c-ad5a-1323aa7dc388-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"130be6af-5ac2-403e-a196-60a3534664eb-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"1d2f3500-70e1-4aed-adbb-4007c27125af-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"34668592-d9a6-4e01-b13c-1eec6b8fca42-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"3e52b0f5-6d81-43bd-8e35-33b203ccd3af-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"3f60f9ca-4e93-4cf5-b69c-dbc8e189892d-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"43f9bf59-0141-4902-80b2-1ee623ce6bc9-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"53c8f72e-58fb-4c13-8ee6-110c000a497c-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"55e0d735-25b7-4c18-8a8f-624eaa16cd8d-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"5a4b6a6e-dff2-4608-96bc-77a924fac8fa-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"5fd0623d-6956-447b-9125-48a3eaf0a977-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"60412d31-4595-4bee-a252-ccdcac7e333a-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"621fb24b-7010-4e37-a761-0f178a4c0091-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"63d4fff0-5e45-428e-a32c-14b972b93e2b-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"69be2ab0-b14f-4f40-976c-0f3ed54b2ffd-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"6e22676a-6c14-446d-b330-2c459da99634-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"76154ad4-d5f9-4db5-a8f7-06c0e36b29de-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"7b6c8e16-5c79-4ef3-b066-95eace17bf19-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"7f8cad6a-31f2-40e8-9193-47d0e8a52b41-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/821f0e91-4700-495e-a657-a372965a7027-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"821f0e91-4700-495e-a657-a372965a7027-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"8f921c05-7deb-4104-96cb-f293de081246-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"90e595e5-f1a5-4c67-a6e3-d27a59d629b6-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"972276a7-aeac-4f91-8337-a26f1e93dd8a-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"a277b277-b5ef-4306-b89b-477e49fa9bf7-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"aa59ece6-46d3-42de-8ccf-302713f41f0a-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"aea04c1e-15b7-4692-8504-7d049e7ea05e-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"b9a920bc-1728-4c8c-b0dd-c4b34c11e9e4-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"bcbf36b2-6c2b-49a8-a3bc-08ecb8935a01-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"bcef9e8a-1e6a-4f9e-97ac-d0aa5d29d6ce-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"c0f99e81-3222-4fe4-8575-04e5e924cd49-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"ca020d5e-541d-47d2-b72f-fdaf25b5fba1-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"ce01c75c-c53a-49c7-b4b4-0e2fb3e4bfa6-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"d055bd00-8c52-4da4-983e-baf9c1d65abe-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"d0842d6b-122e-48c2-91f1-9ce55d73028e-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"e13bdddf-2d7b-4f94-b17f-b539f7200efa-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"e2affafd-97aa-4ee5-a37f-07bf1a7150d7-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"e31ad7c9-0003-435a-bf98-3c7c03764720-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"e754fe1c-d4ec-4359-bb69-876f4ef61bc9-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"f30d6524-ce51-470e-9f30-f624a72b6131-3051986.jpg","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143206311.png","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"image-20201119143206311.png","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143230646.png","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"image-20201119143230646.png","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143240002.png","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"image-20201119143240002.png","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143258482.png","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"image-20201119143258482.png","modified":1,"renderable":1},{"_id":"source/_posts/大话数据结构-笔记/image-20201119143306540.png","post":"cki7dxygq007lkhsrc4ts7zzu","slug":"image-20201119143306540.png","modified":1,"renderable":1}],"PostCategory":[{"post_id":"cki7dxydz0001khsr5ob6afvz","category_id":"cki7dxye40004khsr7uls0ald","_id":"cki7dxyel000vkhsrfa29fggg"},{"post_id":"cki7dxydz0001khsr5ob6afvz","category_id":"cki7dxyej000nkhsrfags5nf8","_id":"cki7dxyem000ykhsr41mg6kvm"},{"post_id":"cki7dxyea000ckhsr6v3g1lhh","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyeq0013khsr23atdtkr"},{"post_id":"cki7dxyea000ckhsr6v3g1lhh","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyeq0015khsr8cwe9fld"},{"post_id":"cki7dxye20003khsr512y8qr8","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyeq0018khsrdb14gpqk"},{"post_id":"cki7dxye20003khsr512y8qr8","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyer001akhsrgc0j8dcr"},{"post_id":"cki7dxyee000gkhsr0rao8e1c","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyet001hkhsrb2q87rme"},{"post_id":"cki7dxyee000gkhsr0rao8e1c","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyet001ikhsr72di6p21"},{"post_id":"cki7dxye60006khsrh5se263e","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyeu001lkhsr88zf5x5s"},{"post_id":"cki7dxye60006khsrh5se263e","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyeu001nkhsr3eegcg3t"},{"post_id":"cki7dxye80007khsr8u7y5msr","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyev001rkhsr02cha8g8"},{"post_id":"cki7dxye80007khsr8u7y5msr","category_id":"cki7dxyeu001okhsr6f7ncsyf","_id":"cki7dxyew001tkhsr6j0i0mv3"},{"post_id":"cki7dxye80008khsr0n2tdtdd","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyew001wkhsrb5jx3ugg"},{"post_id":"cki7dxye80008khsr0n2tdtdd","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyex001ykhsr2vdz05qu"},{"post_id":"cki7dxyeb000dkhsr6cdw00si","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxyex001zkhsr5les7k4o"},{"post_id":"cki7dxyeb000dkhsr6cdw00si","category_id":"cki7dxyew001vkhsrd1x93aex","_id":"cki7dxyex0021khsrcy2icxes"},{"post_id":"cki7dxyef000hkhsrfnur77zb","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxyey0022khsreld04i2b"},{"post_id":"cki7dxyef000hkhsrfnur77zb","category_id":"cki7dxyew001xkhsrekpsfexo","_id":"cki7dxyey0024khsr97de76p4"},{"post_id":"cki7dxyeg000kkhsremj5d2r9","category_id":"cki7dxyeu001kkhsrh3408s8l","_id":"cki7dxyey0025khsr42ueen7q"},{"post_id":"cki7dxyeg000kkhsremj5d2r9","category_id":"cki7dxyex0020khsrg9w8dbcs","_id":"cki7dxyez0027khsrar660geg"},{"post_id":"cki7dxyeh000mkhsr16hwf680","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyez0028khsrhspe0aop"},{"post_id":"cki7dxyeh000mkhsr16hwf680","category_id":"cki7dxyev001qkhsrgirwbilm","_id":"cki7dxyez0029khsreqmoh3wi"},{"post_id":"cki7dxyeh000mkhsr16hwf680","category_id":"cki7dxyey0023khsr7qv47t45","_id":"cki7dxyez002akhsrht3zcp7m"},{"post_id":"cki7dxyej000qkhsrg08b4c4g","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyez002bkhsr7qgf08et"},{"post_id":"cki7dxyej000qkhsrg08b4c4g","category_id":"cki7dxyev001qkhsrgirwbilm","_id":"cki7dxyez002ckhsretq18nwo"},{"post_id":"cki7dxyej000qkhsrg08b4c4g","category_id":"cki7dxyey0023khsr7qv47t45","_id":"cki7dxyez002dkhsr42t1hqwl"},{"post_id":"cki7dxyf8002fkhsrhelt2tzc","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfc002nkhsrghdt5fxn"},{"post_id":"cki7dxyf8002fkhsrhelt2tzc","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyfd002qkhsr2efa3k5z"},{"post_id":"cki7dxyf9002hkhsr22sy7yw5","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfe002tkhsr9bie00uh"},{"post_id":"cki7dxyf9002hkhsr22sy7yw5","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyff002wkhsr1fhv5x0r"},{"post_id":"cki7dxyfa002kkhsr1uqdh9k7","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfg002zkhsr4ly6aj2l"},{"post_id":"cki7dxyfa002kkhsr1uqdh9k7","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyfh0032khsr7fobdycc"},{"post_id":"cki7dxyf8002ekhsrbbk50i2b","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfi0037khsr7q2789t7"},{"post_id":"cki7dxyf8002ekhsrbbk50i2b","category_id":"cki7dxyfa002ikhsrfijd7sb4","_id":"cki7dxyfj003akhsraugwab9c"},{"post_id":"cki7dxyfb002mkhsr9enscejg","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfk003ekhsrfqbug8r0"},{"post_id":"cki7dxyfb002mkhsr9enscejg","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyfm003ikhsr88o45eq6"},{"post_id":"cki7dxyfd002skhsrhsbafp3p","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfn003lkhsr6mobgur8"},{"post_id":"cki7dxyfd002skhsrhsbafp3p","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyfp003qkhsr84vb1pi4"},{"post_id":"cki7dxyfe002vkhsrhvmlarjp","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfq003tkhsr4ppd0wsa"},{"post_id":"cki7dxyfe002vkhsrhvmlarjp","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyfr003xkhsra7rg4gyx"},{"post_id":"cki7dxyff002xkhsr38d60r02","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfr0040khsr3fyj2v96"},{"post_id":"cki7dxyff002xkhsr38d60r02","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyft0044khsrfg6ra49u"},{"post_id":"cki7dxyfj0039khsr9lbl1ceu","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfu0048khsrcgwk752t"},{"post_id":"cki7dxyfj0039khsr9lbl1ceu","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyfv004ckhsr0qj21glr"},{"post_id":"cki7dxyfc002pkhsrcjsog2ox","category_id":"cki7dxyfe002ukhsr5bbi35sz","_id":"cki7dxyfw004gkhsr4jyj832q"},{"post_id":"cki7dxyfc002pkhsrcjsog2ox","category_id":"cki7dxyfi0035khsr0ej372dy","_id":"cki7dxyfx004jkhsr0emm1qx9"},{"post_id":"cki7dxyfj003ckhsr288ndctf","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyfz004nkhsr2mr17s70"},{"post_id":"cki7dxyfj003ckhsr288ndctf","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxyg0004qkhsrddemch8j"},{"post_id":"cki7dxyfl003hkhsr7l2kb7eu","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyg3004vkhsr2i7y6hzy"},{"post_id":"cki7dxyfl003hkhsr7l2kb7eu","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxyg4004ykhsr26h1hho0"},{"post_id":"cki7dxyfg0031khsr70irfoif","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyg60052khsr7fvx5uew"},{"post_id":"cki7dxyfg0031khsr70irfoif","category_id":"cki7dxyfk003dkhsr0vamh09a","_id":"cki7dxyg70055khsrf0mw0csg"},{"post_id":"cki7dxyfh0034khsrgk7e8wkz","category_id":"cki7dxyeu001kkhsrh3408s8l","_id":"cki7dxyg8005akhsr2cgmboe5"},{"post_id":"cki7dxyfh0034khsrgk7e8wkz","category_id":"cki7dxyfn003mkhsr1a817dvu","_id":"cki7dxyg9005dkhsr9iivd6zg"},{"post_id":"cki7dxyfp003skhsrb2es5d21","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygb005hkhsrh6t956nd"},{"post_id":"cki7dxyfp003skhsrb2es5d21","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygc005lkhsr0msa7tb8"},{"post_id":"cki7dxyfq003wkhsr043ee6nl","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxyge005pkhsr10l8dkmz"},{"post_id":"cki7dxyfq003wkhsr043ee6nl","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygg005tkhsrddnfb3xn"},{"post_id":"cki7dxyfm003kkhsr0gq3h3zj","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygg005wkhsrhxhrab0j"},{"post_id":"cki7dxyfm003kkhsr0gq3h3zj","category_id":"cki7dxyfq003vkhsrfr4pdgki","_id":"cki7dxygi005zkhsr6xrl7in2"},{"post_id":"cki7dxyft0047khsr0yyv6yec","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygi0062khsrcmqm9aeo"},{"post_id":"cki7dxyft0047khsr0yyv6yec","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxygj0064khsrf7we35ru"},{"post_id":"cki7dxyfo003pkhsram398qjj","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygj0067khsrdqe82461"},{"post_id":"cki7dxyfo003pkhsram398qjj","category_id":"cki7dxyfa002ikhsrfijd7sb4","_id":"cki7dxygj0069khsr5eabf3xk"},{"post_id":"cki7dxyfo003pkhsram398qjj","category_id":"cki7dxyfs0043khsrg6ay9jh1","_id":"cki7dxygk006bkhsr2ezdhqfu"},{"post_id":"cki7dxyfu004akhsr54gw29zs","category_id":"cki7dxyeu001kkhsrh3408s8l","_id":"cki7dxygk006dkhsr5m8oa35b"},{"post_id":"cki7dxyfu004akhsr54gw29zs","category_id":"cki7dxyex0020khsrg9w8dbcs","_id":"cki7dxygk006fkhsr3pvu3bln"},{"post_id":"cki7dxyfv004ekhsr4qf08e7w","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygk006hkhsren218a5t"},{"post_id":"cki7dxyfv004ekhsr4qf08e7w","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygk006jkhsral7efpf8"},{"post_id":"cki7dxyfw004ikhsr3zoscjjh","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygk006kkhsr7stv0a2w"},{"post_id":"cki7dxyfw004ikhsr3zoscjjh","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygk006lkhsr1b8efh2w"},{"post_id":"cki7dxyfy004mkhsr9zgj8mk9","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygk006mkhsrbc937lew"},{"post_id":"cki7dxyfy004mkhsr9zgj8mk9","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygk006nkhsreaplh0dx"},{"post_id":"cki7dxyfz004pkhsrhlixfhmu","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygk006okhsr3lf44a2b"},{"post_id":"cki7dxyfz004pkhsrhlixfhmu","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygk006pkhsr2xera1k9"},{"post_id":"cki7dxyg3004ukhsr0dzrc8ch","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygk006qkhsr5noqg2ae"},{"post_id":"cki7dxyg3004ukhsr0dzrc8ch","category_id":"cki7dxyem0010khsrckiy85na","_id":"cki7dxygk006rkhsrewdrhkc0"},{"post_id":"cki7dxyfr003zkhsr6bxme58p","category_id":"cki7dxyfv004bkhsr1xiddpd1","_id":"cki7dxygk006skhsr3brv02bu"},{"post_id":"cki7dxyfr003zkhsr6bxme58p","category_id":"cki7dxyg0004rkhsr14lmhrae","_id":"cki7dxygk006tkhsrd18mdatn"},{"post_id":"cki7dxyg4004xkhsray1i8xc1","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygl006ukhsrb3cm43ai"},{"post_id":"cki7dxyg4004xkhsray1i8xc1","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxygl006vkhsrbqi151i9"},{"post_id":"cki7dxyfs0042khsr3j5edjr0","category_id":"cki7dxyfv004bkhsr1xiddpd1","_id":"cki7dxygl006wkhsrgfi9exgt"},{"post_id":"cki7dxyfs0042khsr3j5edjr0","category_id":"cki7dxyg0004rkhsr14lmhrae","_id":"cki7dxygl006xkhsrd1k47h5a"},{"post_id":"cki7dxyg60054khsres3c7ihw","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygl006ykhsr43404l7d"},{"post_id":"cki7dxyg60054khsres3c7ihw","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxygl006zkhsr6zfy3bmw"},{"post_id":"cki7dxyg70059khsr3kmigevs","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygl0070khsr2nc74ulu"},{"post_id":"cki7dxyg70059khsr3kmigevs","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxygl0071khsr2rj4e1qm"},{"post_id":"cki7dxyg8005ckhsrdge49tpc","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygl0072khsrcukm5zws"},{"post_id":"cki7dxyg8005ckhsrdge49tpc","category_id":"cki7dxyeu001okhsr6f7ncsyf","_id":"cki7dxygl0073khsr3xdcavbz"},{"post_id":"cki7dxygc005jkhsrawvv9tz6","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygl0074khsrbs567ttx"},{"post_id":"cki7dxygc005jkhsrawvv9tz6","category_id":"cki7dxyel000ukhsr8u9o6dvj","_id":"cki7dxygl0075khsrcudcdude"},{"post_id":"cki7dxyg50051khsrcbqlex4n","category_id":"cki7dxyg70058khsr36ujbqy2","_id":"cki7dxygl0076khsr3qgm3qeo"},{"post_id":"cki7dxyg50051khsrcbqlex4n","category_id":"cki7dxygc005kkhsr29kdegst","_id":"cki7dxygl0077khsr85ne5bw3"},{"post_id":"cki7dxygg005vkhsr200i1dja","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygl0078khsredkpcs67"},{"post_id":"cki7dxygg005vkhsr200i1dja","category_id":"cki7dxygf005skhsr5njr1wb4","_id":"cki7dxygm0079khsr6lp4b6v9"},{"post_id":"cki7dxyga005fkhsr4hvudjc4","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygm007akhsr0ftc2x1x"},{"post_id":"cki7dxyga005fkhsr4hvudjc4","category_id":"cki7dxygf005skhsr5njr1wb4","_id":"cki7dxygm007bkhsr91v6emqa"},{"post_id":"cki7dxygh005ykhsra4pfg73q","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygm007ckhsr2ck62vwi"},{"post_id":"cki7dxygh005ykhsra4pfg73q","category_id":"cki7dxyew001xkhsrekpsfexo","_id":"cki7dxygm007dkhsrf1k7ax0a"},{"post_id":"cki7dxygd005nkhsr14ep1j5e","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygm007ekhsr2h126fd6"},{"post_id":"cki7dxygd005nkhsr14ep1j5e","category_id":"cki7dxygi0060khsr3zs8fqtb","_id":"cki7dxygm007fkhsr8m3xg4e9"},{"post_id":"cki7dxygf005rkhsrh3kp3oib","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygm007gkhsrdjec4g39"},{"post_id":"cki7dxygf005rkhsrh3kp3oib","category_id":"cki7dxygf005skhsr5njr1wb4","_id":"cki7dxygm007hkhsr3d842o6s"},{"post_id":"cki7dxygp007ikhsrbt7m2do9","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygs007okhsrcirn2ieo"},{"post_id":"cki7dxygp007ikhsrbt7m2do9","category_id":"cki7dxyew001xkhsrekpsfexo","_id":"cki7dxygs007pkhsr0f7o19ie"},{"post_id":"cki7dxygq007jkhsrfi2048e3","category_id":"cki7dxye90009khsr5c7igxip","_id":"cki7dxygt007skhsrbobbg2hx"},{"post_id":"cki7dxygq007jkhsrfi2048e3","category_id":"cki7dxyfa002ikhsrfijd7sb4","_id":"cki7dxygt007tkhsr8adm2g6o"},{"post_id":"cki7dxygq007lkhsrc4ts7zzu","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygt007ukhsr32yw6wqp"},{"post_id":"cki7dxygq007lkhsrc4ts7zzu","category_id":"cki7dxygf005skhsr5njr1wb4","_id":"cki7dxygt007wkhsr0v1b6m08"},{"post_id":"cki7dxygr007nkhsrdnnse8vb","category_id":"cki7dxyeq0014khsrdkzoc7lo","_id":"cki7dxygt007ykhsr97w30pww"},{"post_id":"cki7dxygr007nkhsrdnnse8vb","category_id":"cki7dxygs007rkhsrbsyh9g8t","_id":"cki7dxygu007zkhsr31mm1uee"}],"PostTag":[{"post_id":"cki7dxydz0001khsr5ob6afvz","tag_id":"cki7dxye50005khsr2vy6g3lm","_id":"cki7dxyea000bkhsr2jb98ft4"},{"post_id":"cki7dxye20003khsr512y8qr8","tag_id":"cki7dxyea000akhsr06x4ewcd","_id":"cki7dxyeh000lkhsrhzfc8pvq"},{"post_id":"cki7dxye20003khsr512y8qr8","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxyej000okhsr4tovas6e"},{"post_id":"cki7dxye60006khsrh5se263e","tag_id":"cki7dxyeg000jkhsr8da80kdz","_id":"cki7dxyel000tkhsr3p47bug9"},{"post_id":"cki7dxye60006khsrh5se263e","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxyem000wkhsr26of3vyb"},{"post_id":"cki7dxye80008khsr0n2tdtdd","tag_id":"cki7dxyek000skhsrgug9fw1d","_id":"cki7dxyem000zkhsr29958l9i"},{"post_id":"cki7dxyeb000dkhsr6cdw00si","tag_id":"cki7dxyem000xkhsraa17h4ko","_id":"cki7dxyeq0012khsr8edmaqxa"},{"post_id":"cki7dxyee000gkhsr0rao8e1c","tag_id":"cki7dxyen0011khsr1u9hfqxb","_id":"cki7dxyeq0017khsr5xzkhapx"},{"post_id":"cki7dxyef000hkhsrfnur77zb","tag_id":"cki7dxyeq0016khsrereb6meu","_id":"cki7dxyer001ckhsr919y0w7u"},{"post_id":"cki7dxyeg000kkhsremj5d2r9","tag_id":"cki7dxyer001bkhsr2jw5d8bo","_id":"cki7dxyes001fkhsr5uxmg8ny"},{"post_id":"cki7dxyeh000mkhsr16hwf680","tag_id":"cki7dxyes001ekhsrc7xv7ig5","_id":"cki7dxyeu001mkhsr2h3tg6fi"},{"post_id":"cki7dxyej000qkhsrg08b4c4g","tag_id":"cki7dxyet001jkhsrdrbt94cv","_id":"cki7dxyev001pkhsr4elzaq5x"},{"post_id":"cki7dxyf8002fkhsrhelt2tzc","tag_id":"cki7dxyeg000jkhsr8da80kdz","_id":"cki7dxyfa002jkhsr4bd1ffqm"},{"post_id":"cki7dxyf9002hkhsr22sy7yw5","tag_id":"cki7dxyeg000jkhsr8da80kdz","_id":"cki7dxyfb002lkhsrazn84a5o"},{"post_id":"cki7dxyf8002ekhsrbbk50i2b","tag_id":"cki7dxyf9002gkhsrdanegxwb","_id":"cki7dxyfc002okhsrdjdn5dm2"},{"post_id":"cki7dxyfe002vkhsrhvmlarjp","tag_id":"cki7dxyeg000jkhsr8da80kdz","_id":"cki7dxyfg0030khsrdl223980"},{"post_id":"cki7dxyfb002mkhsr9enscejg","tag_id":"cki7dxyfd002rkhsr6at9hkgh","_id":"cki7dxyfh0033khsrf64g940q"},{"post_id":"cki7dxyff002xkhsr38d60r02","tag_id":"cki7dxyeg000jkhsr8da80kdz","_id":"cki7dxyfi0038khsrceh18de9"},{"post_id":"cki7dxyfg0031khsr70irfoif","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxyfj003bkhsr1gle82cq"},{"post_id":"cki7dxyfg0031khsr70irfoif","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxyfl003gkhsre4z696c2"},{"post_id":"cki7dxyfj0039khsr9lbl1ceu","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxyfm003jkhsrd2m29bin"},{"post_id":"cki7dxyfj0039khsr9lbl1ceu","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxyfn003nkhsr1cy9cvcj"},{"post_id":"cki7dxyfc002pkhsrcjsog2ox","tag_id":"cki7dxyfg002ykhsr4mlm2gbe","_id":"cki7dxyfp003rkhsr33pph274"},{"post_id":"cki7dxyfc002pkhsrcjsog2ox","tag_id":"cki7dxyfi0036khsr8h2h1cd2","_id":"cki7dxyfq003ukhsr9zu8cicz"},{"post_id":"cki7dxyfj003ckhsr288ndctf","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxyfr003ykhsr0mmug37v"},{"post_id":"cki7dxyfh0034khsrgk7e8wkz","tag_id":"cki7dxyfk003fkhsrdhktafsr","_id":"cki7dxyfs0041khsre2iybfzd"},{"post_id":"cki7dxyfm003kkhsr0gq3h3zj","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxyft0046khsr33fs9mt1"},{"post_id":"cki7dxyfo003pkhsram398qjj","tag_id":"cki7dxyfi0036khsr8h2h1cd2","_id":"cki7dxyfu0049khsr0lnk3r7s"},{"post_id":"cki7dxyfp003skhsrb2es5d21","tag_id":"cki7dxyea000akhsr06x4ewcd","_id":"cki7dxyfv004dkhsravqv4vqv"},{"post_id":"cki7dxyfp003skhsrb2es5d21","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxyfw004hkhsrc3p1fgsi"},{"post_id":"cki7dxyfl003hkhsr7l2kb7eu","tag_id":"cki7dxyfo003okhsr0r280qiq","_id":"cki7dxyfy004lkhsr856t2boi"},{"post_id":"cki7dxyfq003wkhsr043ee6nl","tag_id":"cki7dxyea000akhsr06x4ewcd","_id":"cki7dxyfz004okhsr8aqdag04"},{"post_id":"cki7dxyfq003wkhsr043ee6nl","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxyg1004tkhsr1lho3sa7"},{"post_id":"cki7dxyft0047khsr0yyv6yec","tag_id":"cki7dxyfd002rkhsr6at9hkgh","_id":"cki7dxyg4004wkhsrhsm2296o"},{"post_id":"cki7dxyfu004akhsr54gw29zs","tag_id":"cki7dxyer001bkhsr2jw5d8bo","_id":"cki7dxyg5004zkhsrcx388skq"},{"post_id":"cki7dxyfr003zkhsr6bxme58p","tag_id":"cki7dxyft0045khsr7n8i5sll","_id":"cki7dxyg60053khsr5su6hnn5"},{"post_id":"cki7dxyfv004ekhsr4qf08e7w","tag_id":"cki7dxyea000akhsr06x4ewcd","_id":"cki7dxyg70057khsr65pz6fwj"},{"post_id":"cki7dxyfv004ekhsr4qf08e7w","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxyg8005bkhsr2vbo4zl9"},{"post_id":"cki7dxyfw004ikhsr3zoscjjh","tag_id":"cki7dxyea000akhsr06x4ewcd","_id":"cki7dxyga005ekhsrab90b3v8"},{"post_id":"cki7dxyfw004ikhsr3zoscjjh","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxygb005ikhsr27w28x71"},{"post_id":"cki7dxyfs0042khsr3j5edjr0","tag_id":"cki7dxyfw004fkhsrhx6i7xbl","_id":"cki7dxygd005mkhsrd2rk4b1t"},{"post_id":"cki7dxyfz004pkhsrhlixfhmu","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxyge005qkhsrcxnu4v2q"},{"post_id":"cki7dxyfz004pkhsrhlixfhmu","tag_id":"cki7dxyeg000jkhsr8da80kdz","_id":"cki7dxygg005ukhsrayakgtjd"},{"post_id":"cki7dxyg3004ukhsr0dzrc8ch","tag_id":"cki7dxyea000akhsr06x4ewcd","_id":"cki7dxygh005xkhsrbg80eqo6"},{"post_id":"cki7dxyg3004ukhsr0dzrc8ch","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxygi0061khsrceow6l1t"},{"post_id":"cki7dxyg4004xkhsray1i8xc1","tag_id":"cki7dxyec000fkhsrel2g7j5o","_id":"cki7dxygi0063khsr3tlu4ofp"},{"post_id":"cki7dxyfy004mkhsr9zgj8mk9","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxygj0065khsrbs6w5ytd"},{"post_id":"cki7dxyfy004mkhsr9zgj8mk9","tag_id":"cki7dxyg1004skhsr6dsx7nb2","_id":"cki7dxygj0068khsr8kwk4f1o"},{"post_id":"cki7dxyg50051khsrcbqlex4n","tag_id":"cki7dxyg70056khsrgx4p717x","_id":"cki7dxygj006akhsr6ncc1qfo"},{"post_id":"cki7dxyg60054khsres3c7ihw","tag_id":"cki7dxygb005gkhsr30xwdxgb","_id":"cki7dxygk006ckhsr2hyo0gqx"},{"post_id":"cki7dxygd005nkhsr14ep1j5e","tag_id":"cki7dxyej000pkhsrdhmk6nfo","_id":"cki7dxygk006ekhsr6kprbffs"},{"post_id":"cki7dxyg70059khsr3kmigevs","tag_id":"cki7dxygd005okhsr6du4ch4m","_id":"cki7dxygk006gkhsrepjc0w8c"},{"post_id":"cki7dxygh005ykhsra4pfg73q","tag_id":"cki7dxyeq0016khsrereb6meu","_id":"cki7dxygk006ikhsrgxek4441"},{"post_id":"cki7dxygp007ikhsrbt7m2do9","tag_id":"cki7dxyeq0016khsrereb6meu","_id":"cki7dxygq007kkhsrhkvgbwg5"},{"post_id":"cki7dxygq007jkhsrfi2048e3","tag_id":"cki7dxyf9002gkhsrdanegxwb","_id":"cki7dxygr007mkhsrc1mj38sq"},{"post_id":"cki7dxygr007nkhsrdnnse8vb","tag_id":"cki7dxyfi0036khsr8h2h1cd2","_id":"cki7dxygt007vkhsrfhy5aawu"},{"post_id":"cki7dxygr007nkhsrdnnse8vb","tag_id":"cki7dxygs007qkhsr26kqb5n6","_id":"cki7dxygt007xkhsrbhxi7hx6"}],"Tag":[{"name":"macOS","_id":"cki7dxye50005khsr2vy6g3lm"},{"name":"布局","_id":"cki7dxyea000akhsr06x4ewcd"},{"name":"技巧","_id":"cki7dxyec000fkhsrel2g7j5o"},{"name":"CSS3","_id":"cki7dxyeg000jkhsr8da80kdz"},{"name":"转载","_id":"cki7dxyej000pkhsrdhmk6nfo"},{"name":"继承","_id":"cki7dxyek000skhsrgug9fw1d"},{"name":"翻译","_id":"cki7dxyem000xkhsraa17h4ko"},{"name":"Promise","_id":"cki7dxyen0011khsr1u9hfqxb"},{"name":"Sequelize","_id":"cki7dxyeq0016khsrereb6meu"},{"name":"VSCode","_id":"cki7dxyer001bkhsr2jw5d8bo"},{"name":"Vuex","_id":"cki7dxyes001ekhsrc7xv7ig5"},{"name":"Vue","_id":"cki7dxyet001jkhsrdrbt94cv"},{"name":"Webpack","_id":"cki7dxyf9002gkhsrdanegxwb"},{"name":"ES6","_id":"cki7dxyfd002rkhsr6at9hkgh"},{"name":"解决方案","_id":"cki7dxyfg002ykhsr4mlm2gbe"},{"name":"笔记","_id":"cki7dxyfi0036khsr8h2h1cd2"},{"name":"git","_id":"cki7dxyfk003fkhsrdhktafsr"},{"name":"缓存","_id":"cki7dxyfo003okhsr0r280qiq"},{"name":"Jekyll","_id":"cki7dxyft0045khsr7n8i5sll"},{"name":"hexo","_id":"cki7dxyfw004fkhsrhx6i7xbl"},{"name":"大屏","_id":"cki7dxyg1004skhsr6dsx7nb2"},{"name":"字体侵权","_id":"cki7dxyg70056khsrgx4p717x"},{"name":"this","_id":"cki7dxygb005gkhsr30xwdxgb"},{"name":"闭包","_id":"cki7dxygd005okhsr6du4ch4m"},{"name":"阿里云","_id":"cki7dxygs007qkhsr26kqb5n6"}]}}